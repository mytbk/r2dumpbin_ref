;; Generated with r2dumpbin (https://github.com/mytbk/r2dumpbin)
;; f va @ 0xfffa0000
;; f fcn1 @ 0xfffb8dbb

bits 32
org 0xfffa0000

loc_fffa0000:
push eax
mov al, 1
out 0x80, al
cld
call fcn_fffa6d6c  ; call 0xfffa6d6c
pop ecx
push eax
mov al, 2
out 0x80, al
pop eax
ret

loc_fffa0013:
db 0x00

fcn_fffa0014:  ; not directly referenced
push ebp
mov ebp, esp
mov eax, dword [ebp + 0xc]
mov edx, dword [ebp + 0x10]
movzx ecx, byte [eax + 0x1c]
add eax, 0x1d
imul ecx, ecx, 0x11
mov dword [edx], ecx
mov edx, dword [ebp + 0x14]
mov dword [edx], eax
xor eax, eax
pop ebp
ret

fcn_fffa0032:  ; not directly referenced
push ebp
and edx, 0x7f
mov ebp, esp
push esi
push ebx
push ecx
mov cl, byte [eax + 0x38]
mov byte [ebp - 9], cl
xor ecx, ecx
jmp short loc_fffa0054  ; jmp 0xfffa0054

loc_fffa0045:  ; not directly referenced
imul esi, ecx, 0x11
inc ecx
mov bl, byte [eax + esi + 0x39]
and ebx, 0x7f
cmp dl, bl
je short loc_fffa0092  ; je 0xfffa0092

loc_fffa0054:  ; not directly referenced
cmp byte [ebp - 9], cl
ja short loc_fffa0045  ; ja 0xfffa0045
movzx edx, dl
mov bl, byte [eax + 0xc1]
add edx, edx
xor ecx, ecx
jmp short loc_fffa0077  ; jmp 0xfffa0077

loc_fffa0068:  ; not directly referenced
mov esi, dword [eax + 0xc2]
movzx esi, byte [esi + ecx]
inc ecx
cmp edx, esi
je short loc_fffa0092  ; je 0xfffa0092

loc_fffa0077:  ; not directly referenced
cmp bl, cl
ja short loc_fffa0068  ; ja 0xfffa0068
xor eax, eax

loc_fffa007d:  ; not directly referenced
movzx ecx, byte [eax + ref_fffc9950]  ; movzx ecx, byte [eax - 0x366b0]
cmp edx, ecx
je short loc_fffa0092  ; je 0xfffa0092
inc eax
cmp eax, 0x26
jne short loc_fffa007d  ; jne 0xfffa007d
mov al, 1
jmp short loc_fffa0094  ; jmp 0xfffa0094

loc_fffa0092:  ; not directly referenced
xor eax, eax

loc_fffa0094:  ; not directly referenced
pop edx
pop ebx
pop esi
pop ebp
ret

fcn_fffa0099:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, edx
push esi
mov cl, byte [edx]
mov esi, eax
and ecx, 0xffffff80
or ecx, 3
jmp short loc_fffa00ca  ; jmp 0xfffa00ca

loc_fffa00ae:  ; not directly referenced
mov dl, cl
mov eax, esi
mov byte [ebp - 0x10], cl
call fcn_fffa0032  ; call 0xfffa0032
test al, al
mov cl, byte [ebp - 0x10]
jne short loc_fffa00e2  ; jne 0xfffa00e2
inc edi
and ecx, 0xffffff80
and edi, 0x7f
or ecx, edi

loc_fffa00ca:  ; not directly referenced
mov byte [ebx], cl
mov edi, 0x7f
mov cl, byte [ebx]
and edi, ecx
mov eax, edi
cmp al, 0x7f
jne short loc_fffa00ae  ; jne 0xfffa00ae
mov eax, 0x80000009
jmp short loc_fffa00e4  ; jmp 0xfffa00e4

loc_fffa00e2:  ; not directly referenced
xor eax, eax

loc_fffa00e4:  ; not directly referenced
pop ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa00ea:  ; not directly referenced
push ebp
mov eax, dword [0xf00f8040]
and eax, 0xff80
mov ebp, esp
lea edx, [eax + 0x54]
in eax, dx
shr eax, 0xe
and eax, 1
pop ebp
ret

fcn_fffa0103:  ; not directly referenced
push ebp
mov edx, dword [0xf00f8040]
and edx, 0xff80
mov ebp, esp
add edx, 0x54
in eax, dx
test eax, 0x3f0000
setne al
pop ebp
ret

fcn_fffa0120:  ; not directly referenced
push ebp
mov eax, dword [0xf00f8040]
mov byte [0xfeffc000], 1
and eax, 0xff80
mov ebp, esp
lea edx, [eax + 0x54]
in eax, dx
mov edx, dword [0xf00f8040]
and eax, 0xffbfffff
and edx, 0xff80
add edx, 0x54
out dx, eax
pop ebp
ret

fcn_fffa014f:  ; not directly referenced
push ebp
mov eax, dword [0xf00f8040]
and eax, 0xff80
mov ebp, esp
lea edx, [eax + 0x54]
in eax, dx
shr eax, 0x17
and eax, 1
pop ebp
ret

fcn_fffa0168:  ; not directly referenced
push ebp
mov eax, dword [0xf00f8040]
and eax, 0xff80
mov ebp, esp
lea edx, [eax + 0x54]
in eax, dx
mov edx, dword [0xf00f8040]
and eax, 0xffbfbfff
and edx, 0xff80
add edx, 0x54
out dx, eax
pop ebp
ret

fcn_fffa0190:  ; not directly referenced
push ebp
mov eax, 0x80000002
mov ebp, esp
push ebx
mov ebx, dword [ebp + 8]
dec ebx
cmp ebx, 0x3fe
ja short loc_fffa01e8  ; ja 0xfffa01e8
mov edx, dword [0xf00f8040]
and edx, 0xff80
add edx, 0x54
in eax, dx
mov ecx, eax
or eax, 0x80406000
or ecx, 0x80006000
cmp byte [0xfeffc000], 0
mov edx, dword [0xf00f8040]
cmove ecx, eax
and edx, 0xff80
and ecx, 0xfffffc00
add edx, 0x54
or ecx, ebx
mov eax, ecx
out dx, eax
xor eax, eax

loc_fffa01e8:  ; not directly referenced
pop ebx
pop ebp
ret

fcn_fffa01eb:  ; not directly referenced
push ebp
mov eax, dword [0xf00f80f0]
mov ebp, esp
and eax, 0xffffc000
mov ecx, dword [ebp + 0xc]
mov edx, dword [ebp + 0x10]
cmp ecx, 1
je short loc_fffa022a  ; je 0xfffa022a
jb short loc_fffa020c  ; jb 0xfffa020c
cmp ecx, 2
jne short loc_fffa0252  ; jne 0xfffa0252
jmp short loc_fffa0243  ; jmp 0xfffa0243

loc_fffa020c:  ; not directly referenced
mov cl, byte [eax + 0x38f4]
and cl, 1
jne short loc_fffa021e  ; jne 0xfffa021e
mov word [edx], 0
jmp short loc_fffa0252  ; jmp 0xfffa0252

loc_fffa021e:  ; not directly referenced
mov ax, word [eax + 0x38f8]
mov word [edx], ax
jmp short loc_fffa0252  ; jmp 0xfffa0252

loc_fffa022a:  ; not directly referenced
mov dx, word [edx]
mov word [eax + 0x38f8], dx
mov dl, byte [eax + 0x38f4]
or edx, 1
mov byte [eax + 0x38f4], dl

loc_fffa0243:  ; not directly referenced
mov dl, byte [eax + 0x38f0]
or edx, 1
mov byte [eax + 0x38f0], dl

loc_fffa0252:  ; not directly referenced
xor eax, eax
pop ebp
ret

fcn_fffa0256:  ; not directly referenced
push ebp
mov eax, dword [0xf00f80f0]
and eax, 0xffffc000
mov ebp, esp
mov edx, dword [eax + 0x21a4]
and edx, 0xf
cmp edx, 2
jne short loc_fffa029b  ; jne 0xfffa029b
mov edx, dword [eax + 0x2340]
and edx, 0xff00ffff
or edx, 0x3a0000
mov dword [eax + 0x2340], edx
mov dl, byte [eax + 0x21b0]
and edx, 0xfffffff0
or edx, 2
mov byte [eax + 0x21b0], dl

loc_fffa029b:  ; not directly referenced
pop ebp
ret

fcn_fffa029d:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
lea ecx, [ebp - 0x20]
push ebx
lea esp, [esp - 0x38]
mov eax, dword [ebp + 8]
mov dword [ebp - 0x1c], 0
mov edx, dword [eax]
push ecx
push 0
push 0
push ref_fffcfadc  ; push 0xfffcfadc
push eax
call dword [edx + 0x20]  ; ucall
mov esi, dword [0xf00f80f0]
and esi, 0xffffc000
mov eax, dword [esi + 0x50]
and eax, 0xff0ff000
or eax, 0x200654
mov dword [esi + 0x50], eax
mov eax, dword [ebp - 0x20]
add esp, 0x20
cmp byte [eax + 0x24], 1
jne short loc_fffa02f7  ; jne 0xfffa02f7
mov eax, dword [esi + 0x50]
or eax, 0xa0000
mov dword [esi + 0x50], eax

loc_fffa02f7:  ; not directly referenced
mov eax, dword [esi + 0x50]
mov al, byte [esi + 0x1114]
or eax, 5
mov byte [esi + 0x1114], al
xor ecx, ecx
mov ebx, dword [ebp - 0x20]
mov edx, 1

loc_fffa0313:  ; not directly referenced
mov edi, dword [ebx + ecx*4]
mov eax, edx
shl eax, cl
inc ecx
or byte [ebp + edi - 0x1c], al
cmp ecx, 8
jne short loc_fffa0313  ; jne 0xfffa0313
lea eax, [esi + 0x2014]
lea edx, [esi + 0x2020]
xor cl, cl
mov dword [ebp - 0x30], eax
mov dword [ebp - 0x34], edx

loc_fffa0338:  ; not directly referenced
mov eax, dword [ebp - 0x20]
lea edx, [ecx + 0x10]
mov byte [ebp - 0x2c], cl
cmp byte [eax + edx*2], 1
jne short loc_fffa039b  ; jne 0xfffa039b
movzx edx, byte [eax + edx*2 + 1]
shl edx, 0x18
movzx edi, byte [ebp + ecx - 0x1c]
and edx, 0xf000000
or edx, 0x80000000
cmp cl, 2
je short loc_fffa0376  ; je 0xfffa0376
cmp cl, 3
je short loc_fffa037e  ; je 0xfffa037e
cmp cl, 1
mov ebx, dword [ebp - 0x30]
cmove ebx, dword [ebp - 0x34]
jmp short loc_fffa0384  ; jmp 0xfffa0384

loc_fffa0376:  ; not directly referenced
lea ebx, [esi + 0x2030]
jmp short loc_fffa0384  ; jmp 0xfffa0384

loc_fffa037e:  ; not directly referenced
lea ebx, [esi + 0x2040]

loc_fffa0384:  ; not directly referenced
mov eax, dword [ebx]
and eax, 0xf0ffff01
or eax, edi
or eax, edx
mov dword [ebx], eax
mov al, byte [ebp - 0x2c]
dec eax
cmp al, 1
ja short loc_fffa039b  ; ja 0xfffa039b
mov eax, dword [ebx]

loc_fffa039b:  ; not directly referenced
inc ecx
cmp ecx, 4
jne short loc_fffa0338  ; jne 0xfffa0338
mov eax, dword [esi + 0x50]
or eax, 0x80000000
mov dword [esi + 0x50], eax
mov eax, dword [esi + 0x50]
lea edx, [esi + 0x2026]
mov ecx, dword [ebp - 0x20]
xor eax, eax
lea ebx, [esi + 0x201a]
mov dword [ebp - 0x2c], edx

loc_fffa03c3:  ; not directly referenced
cmp byte [ecx + eax*2 + 0x20], 1
mov dl, al
jne short loc_fffa03f6  ; jne 0xfffa03f6
cmp al, 2
je short loc_fffa03de  ; je 0xfffa03de
cmp al, 3
je short loc_fffa03e6  ; je 0xfffa03e6
dec dl
mov edx, dword [ebp - 0x2c]
cmovne edx, ebx
jmp short loc_fffa03ec  ; jmp 0xfffa03ec

loc_fffa03de:  ; not directly referenced
lea edx, [esi + 0x2036]
jmp short loc_fffa03ec  ; jmp 0xfffa03ec

loc_fffa03e6:  ; not directly referenced
lea edx, [esi + 0x2046]

loc_fffa03ec:  ; not directly referenced
mov di, word [edx]
test di, 2
jne short loc_fffa03ec  ; jne 0xfffa03ec

loc_fffa03f6:  ; not directly referenced
inc eax
cmp eax, 4
jne short loc_fffa03c3  ; jne 0xfffa03c3
lea esp, [ebp - 0xc]
xor al, al
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa0406:
push ebp
mov eax, dword [0xfeffc00c]
mov ebp, esp
test eax, eax
movzx edx, byte [ebp + 8]
je short loc_fffa041c  ; je 0xfffa041c
mov dword [ebp + 8], edx
pop ebp
jmp eax

loc_fffa041c:
pop ebp
ret

fcn_fffa041e:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
mov eax, dword [ebp + 8]
push ebx
mov eax, dword [eax]
cmp dword [eax - 4], 0xfeadb00b
jne short loc_fffa0442  ; jne 0xfffa0442
lea edx, [eax - 4]
mov ebx, 3
mov eax, dword [eax + 0x250]
jmp short loc_fffa0444  ; jmp 0xfffa0444

loc_fffa0442:  ; not directly referenced
jmp short loc_fffa0442  ; jmp 0xfffa0442

loc_fffa0444:  ; not directly referenced
cmp eax, 0x13
ja short loc_fffa0474  ; ja 0xfffa0474
inc eax
mov esi, dword [ebp + 0xc]
imul ecx, eax, 0xc
mov dword [edx + 0x254], eax
lea edi, [edx + ecx + 0x158]
mov ecx, ebx
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov esi, dword [ebp + 0xc]
mov ecx, dword [esi]
add esi, 0xc
test ecx, ecx
mov dword [ebp + 0xc], esi
jns short loc_fffa0444  ; jns 0xfffa0444
xor eax, eax
jmp short loc_fffa0479  ; jmp 0xfffa0479

loc_fffa0474:  ; not directly referenced
mov eax, 0x80000009

loc_fffa0479:  ; not directly referenced
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa047e:  ; not directly referenced
push ebp
mov ebp, esp
mov eax, dword [ebp + 8]
mov eax, dword [eax]
cmp dword [eax - 4], 0xfeadb00b
je short loc_fffa0491  ; je 0xfffa0491

loc_fffa048f:  ; not directly referenced
jmp short loc_fffa048f  ; jmp 0xfffa048f

loc_fffa0491:  ; not directly referenced
mov edx, dword [eax + 0x254]
mov eax, dword [ebp + 0xc]
mov dword [eax], edx
xor eax, eax
pop ebp
ret

fcn_fffa04a0:  ; not directly referenced
push ebp
mov ebp, esp
mov eax, dword [ebp + 8]
mov eax, dword [eax]
cmp dword [eax - 4], 0xfeadb00b
je short loc_fffa04b3  ; je 0xfffa04b3

loc_fffa04b1:  ; not directly referenced
jmp short loc_fffa04b1  ; jmp 0xfffa04b1

loc_fffa04b3:  ; not directly referenced
mov edx, dword [eax + 0x68]
mov eax, dword [ebp + 0xc]
mov dword [eax], edx
xor eax, eax
pop ebp
ret

fcn_fffa04bf:  ; not directly referenced
push ebp
mov ebp, esp
mov edx, dword [ebp + 0x10]
mov eax, dword [ebp + 0x18]
out dx, ax
pop ebp
ret

fcn_fffa04cc:  ; not directly referenced
push ebp
mov ebp, esp
mov eax, dword [ebp + 0x10]
pop ebp
mov eax, dword [eax]
ret

fcn_fffa04d6:  ; not directly referenced
push ebp
mov ebp, esp
mov eax, dword [ebp + 0x10]
pop ebp
mov al, byte [eax]
ret

fcn_fffa04e0:  ; not directly referenced
push ebp
xor eax, eax
mov ebp, esp
pop ebp
ret

fcn_fffa04e7:  ; not directly referenced
push ebp
xor eax, eax
mov ebp, esp
pop ebp
ret

fcn_fffa04ee:  ; not directly referenced
push ebp
xor eax, eax
mov ebp, esp
pop ebp
ret

fcn_fffa04f5:  ; not directly referenced
push ebp
mov ebp, esp
mov eax, dword [ebp + 0x10]
mov dword [eax], 0x1000000
mov dword [eax + 4], 0
xor eax, eax
pop ebp
ret

fcn_fffa050c:  ; not directly referenced
push ebp
mov ebp, esp
mov eax, dword [ebp + 0x10]
mov dword [eax], 0
mov eax, dword [ebp + 0x14]
mov dword [eax], 0
mov eax, dword [ebp + 0x18]
mov dword [eax], 0
mov eax, dword [ebp + 0x1c]
mov dword [eax], 0
xor eax, eax
pop ebp
ret

fcn_fffa0537:  ; not directly referenced
push ebp
mov ebp, esp
lea esp, [esp - 0x2c]
mov al, byte [edx + 0x10]
mov byte [ebp - 0x19], al
mov al, byte [edx + 0xf]
mov byte [ebp - 0x18], al
mov ax, word [edx + 0xd]
mov ecx, eax
mov byte [ebp - 0x16], al
shr cx, 8
mov ax, word [edx + 0xb]
mov byte [ebp - 0x17], cl
mov ecx, eax
mov byte [ebp - 0x14], al
mov ax, word [edx + 9]
shr cx, 8
mov byte [ebp - 0x12], al
mov byte [ebp - 0x15], cl
mov ecx, eax
shr cx, 8
mov ax, word [edx + 7]
mov byte [ebp - 0x13], cl
mov ecx, eax
mov byte [ebp - 0x10], al
mov ax, word [edx + 5]
shr cx, 8
mov byte [ebp - 0xe], al
mov byte [ebp - 0x11], cl
mov ecx, eax
shr cx, 8
mov eax, dword [edx + 1]
mov byte [ebp - 0xf], cl
mov ecx, eax
shr ecx, 0x18
mov byte [ebp - 0xa], al
mov byte [ebp - 0xd], cl
mov ecx, eax
shr ecx, 0x10
mov dword [ebp - 0x20], 0x11
mov byte [ebp - 0xc], cl
mov ecx, eax
shr ecx, 8
mov al, byte [edx]
add eax, eax
mov byte [ebp - 0xb], cl
mov byte [ebp - 9], al
lea eax, [ebp - 0x19]
push eax
lea eax, [ebp - 0x20]
mov ecx, 9
push eax
mov edx, 4
mov al, 0x61
push 1
call fcn_fffb7031  ; call 0xfffb7031
leave
ret

fcn_fffa05e3:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x3c]
mov edi, dword [ebp + 0xc]
sub edi, 0x1c
cmp byte [ebp + 0x10], 0
mov esi, dword [ebp + 0x14]
mov al, byte [edi + 0x38]
mov byte [ebp - 0x3d], al
je loc_fffa077c  ; je 0xfffa077c
push eax
lea eax, [ebp - 0x31]
lea esi, [ebp - 0x30]
push eax
xor edx, edx
mov ecx, 3
push esi
mov al, 0x61
mov dword [ebp - 0x30], 1
push 1
mov byte [ebp - 0x31], 1
call fcn_fffb7031  ; call 0xfffb7031
add esp, 0x10
test eax, eax
mov ebx, eax
jns short loc_fffa0643  ; jns 0xfffa0643
cmp eax, 0x80000007
jne loc_fffa0827  ; jne 0xfffa0827
jmp near loc_fffa082b  ; jmp 0xfffa082b

loc_fffa0643:  ; not directly referenced
movzx eax, byte [edi + 0x38]
lea edx, [ebp - 0x29]
imul eax, eax, 0x11
lea ecx, [ebp - 0x30]
and byte [ebp - 0x3c], 0x80
or byte [ebp - 0x3c], 0x61
mov dword [ebp - 0x30], 0x11
lea esi, [edi + eax + 0x30]
push eax
mov al, byte [ebp - 0x3c]
lea ebx, [esi + 9]
push edx
mov edx, 3
push ecx
mov ecx, 8
push 1
call fcn_fffb7031  ; call 0xfffb7031
add esp, 0x10
test eax, eax
js loc_fffa082b  ; js 0xfffa082b
cmp dword [ebp - 0x30], 0x11
jne loc_fffa082b  ; jne 0xfffa082b
mov al, byte [ebp - 0x28]
mov cl, byte [ebp - 0x29]
mov byte [ebx + 0xf], al
mov byte [ebx + 0x10], cl
movzx eax, byte [ebp - 0x27]
movzx edx, byte [ebp - 0x26]
shl eax, 8
add eax, edx
mov word [ebx + 0xd], ax
movzx eax, byte [ebp - 0x25]
movzx edx, byte [ebp - 0x24]
shl eax, 8
add eax, edx
mov word [ebx + 0xb], ax
movzx eax, byte [ebp - 0x23]
movzx edx, byte [ebp - 0x22]
shl eax, 8
add eax, edx
mov word [ebx + 9], ax
movzx eax, byte [ebp - 0x21]
movzx edx, byte [ebp - 0x20]
shl eax, 8
add eax, edx
mov word [ebx + 7], ax
movzx eax, byte [ebp - 0x1f]
movzx edx, byte [ebp - 0x1e]
shl eax, 8
add eax, edx
movzx edx, byte [ebp - 0x1d]
mov word [ebx + 5], ax
movzx eax, byte [ebp - 0x1c]
shl eax, 0x10
shl edx, 0x18
add edx, eax
movzx eax, byte [ebp - 0x1b]
shl eax, 8
add eax, edx
movzx edx, byte [ebp - 0x1a]
add eax, edx
mov dword [ebx + 1], eax
mov al, byte [ebp - 0x19]
shr al, 1
mov dl, byte [esi + 9]
and edx, 0xffffff80
or edx, eax
mov al, dl
mov byte [esi + 9], dl
and eax, 0x7f
cmp al, 0x7f
jne short loc_fffa074c  ; jne 0xfffa074c

loc_fffa072e:  ; not directly referenced
mov edx, ebx
mov eax, edi
call fcn_fffa0099  ; call 0xfffa0099
test eax, eax
js short loc_fffa079b  ; js 0xfffa079b

loc_fffa073b:  ; not directly referenced
mov edx, ebx
mov eax, edi
call fcn_fffa0537  ; call 0xfffa0537
test eax, eax
mov ebx, eax
jns short loc_fffa076a  ; jns 0xfffa076a
jmp short loc_fffa075e  ; jmp 0xfffa075e

loc_fffa074c:  ; not directly referenced
and cl, 0xc0
je short loc_fffa073b  ; je 0xfffa073b
mov eax, edi
call fcn_fffa0032  ; call 0xfffa0032
test al, al
jne short loc_fffa073b  ; jne 0xfffa073b
jmp short loc_fffa072e  ; jmp 0xfffa072e

loc_fffa075e:  ; not directly referenced
cmp eax, 0x80000007
je short loc_fffa076d  ; je 0xfffa076d
jmp near loc_fffa0827  ; jmp 0xfffa0827

loc_fffa076a:  ; not directly referenced
inc byte [edi + 0x38]

loc_fffa076d:  ; not directly referenced
cmp byte [edi + 0x38], 7
jbe loc_fffa0643  ; jbe 0xfffa0643
jmp near loc_fffa082b  ; jmp 0xfffa082b

loc_fffa077c:  ; not directly referenced
cmp dword [ebp + 0x18], 0
mov ebx, 0x80000002
sete dl
test esi, esi
sete al
or dl, al
jne loc_fffa084c  ; jne 0xfffa084c
cmp byte [ebp - 0x3d], 7
jbe short loc_fffa07a5  ; jbe 0xfffa07a5

loc_fffa079b:  ; not directly referenced
mov ebx, 0x80000009
jmp near loc_fffa084c  ; jmp 0xfffa084c

loc_fffa07a5:  ; not directly referenced
movzx eax, byte [ebp - 0x3d]
imul eax, eax, 0x11
lea eax, [edi + eax + 0x30]
mov ebx, eax
add ebx, 9
mov dword [ebp - 0x3c], eax
mov edx, ebx
mov eax, edi
call fcn_fffa0099  ; call 0xfffa0099
test eax, eax
js short loc_fffa079b  ; js 0xfffa079b
mov al, byte [esi + 0xf]
mov edx, ebx
mov byte [ebx + 0x10], al
mov ax, word [esi + 0xa]
mov word [ebx + 0xb], ax
mov ax, word [esi + 8]
mov word [ebx + 9], ax
mov ax, word [esi + 4]
mov word [ebx + 5], ax
mov ax, word [esi + 6]
mov word [ebx + 7], ax
mov ax, word [esi + 0xc]
mov word [ebx + 0xd], ax
mov al, byte [esi + 0xe]
mov byte [ebx + 0xf], al
mov eax, dword [esi]
mov dword [ebx + 1], eax
mov eax, edi
call fcn_fffa0537  ; call 0xfffa0537
test eax, eax
mov ebx, eax
js short loc_fffa084c  ; js 0xfffa084c
mov ecx, dword [ebp - 0x3c]
inc byte [edi + 0x38]
mov dl, byte [ecx + 9]
mov ecx, dword [ebp + 0x18]
and edx, 0x7f
mov al, byte [ecx]
and eax, 0xffffff80
or eax, edx
mov byte [ecx], al
jmp short loc_fffa082b  ; jmp 0xfffa082b

loc_fffa0827:  ; not directly referenced
test ebx, ebx
js short loc_fffa084c  ; js 0xfffa084c

loc_fffa082b:  ; not directly referenced
xor ebx, ebx
cmp byte [ebp - 0x3d], 0
jne short loc_fffa084c  ; jne 0xfffa084c
cmp byte [edi + 0x38], 0
je short loc_fffa084c  ; je 0xfffa084c
mov edx, dword [ebp + 8]
push edi
push edi
mov eax, dword [edx]
push ref_fffcfa50  ; push 0xfffcfa50
push edx
call dword [eax + 0x24]  ; ucall
add esp, 0x10

loc_fffa084c:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa0856:
push ebp
mov ebp, esp
push ebx
mov ecx, dword [0xf00fb020]
mov ebx, edx
and ecx, 0xffe0
lea edx, [eax + ecx]
mov al, bl
out dx, al
pop ebx
pop ebp
ret

fcn_fffa0871:  ; not directly referenced
push ebp
mov edx, dword [0xf00fb020]
and edx, 0xffe0
mov ebp, esp
add edx, eax
in al, dx
pop ebp
ret

fcn_fffa0885:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
mov eax, 0x14
lea esp, [esp - 0x1c]
call fcn_fffa0871  ; call 0xfffa0871
shr al, 1
mov edx, ebx
mov byte [ebp - 0x19], al
mov dword [ebp - 0x20], 0
lea eax, [ebx + 0x1c]
mov dword [ebp - 0x24], eax
jmp short loc_fffa0919  ; jmp 0xfffa0919

loc_fffa08b1:  ; not directly referenced
imul eax, dword [ebp - 0x20], 9
mov al, byte [ebx + eax + 0xc7]
and eax, 0x7f
cmp al, byte [ebp - 0x19]
jne short loc_fffa0913  ; jne 0xfffa0913
mov eax, 0x17
mov dword [ebp - 0x28], edx
call fcn_fffa0871  ; call 0xfffa0871
mov edi, eax
mov eax, 0x16
call fcn_fffa0871  ; call 0xfffa0871
mov edx, dword [ebp - 0x28]
and edi, 0xff
shl edi, 8
movzx eax, al
add edi, eax
cmp word [edx + 0xc8], di
jne short loc_fffa0913  ; jne 0xfffa0913
push edi
mov al, byte [ebp - 0x19]
and esi, 0xffffff80
or esi, eax
push esi
push dword [ebp - 0x24]
push dword [ebx + 4]
call dword [edx + 0xcc]  ; ucall
add esp, 0x10
mov edx, dword [ebp - 0x28]

loc_fffa0913:  ; not directly referenced
inc dword [ebp - 0x20]
add edx, 9

loc_fffa0919:  ; not directly referenced
movzx eax, byte [ebx + 0xc6]
cmp dword [ebp - 0x20], eax
jb short loc_fffa08b1  ; jb 0xfffa08b1
lea esp, [ebp - 0xc]
mov edx, 1
pop ebx
pop esi
pop edi
pop ebp
mov eax, 0x10
jmp near fcn_fffa0856  ; jmp 0xfffa0856

fcn_fffa093b:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0xc]
mov edi, dword [ebp + 0x18]
test edi, edi
je short loc_fffa09ab  ; je 0xfffa09ab
mov ebx, dword [ebp + 0xc]
mov esi, 0x80000009
mov cl, byte [ebx + 0xaa]
sub ebx, 0x1c
cmp cl, 7
ja short loc_fffa09b0  ; ja 0xfffa09b0
movzx eax, cl
mov dl, byte [ebp + 0x10]
lea eax, [eax + eax*8]
and edx, 0x7f
lea eax, [ebx + eax + 0xc0]
mov esi, edx
mov dl, byte [eax + 7]
inc ecx
and edx, 0xffffff80
mov dword [eax + 0xc], edi
or edx, esi
xor esi, esi
mov byte [eax + 7], dl
mov edx, dword [ebp + 0x14]
mov dword [eax + 8], edx
mov byte [ebx + 0xc6], cl
mov eax, 0x10
call fcn_fffa0871  ; call 0xfffa0871
test al, 1
je short loc_fffa09b0  ; je 0xfffa09b0
mov eax, ebx
call fcn_fffa0885  ; call 0xfffa0885
jmp short loc_fffa09b0  ; jmp 0xfffa09b0

loc_fffa09ab:  ; not directly referenced
mov esi, 0x80000002

loc_fffa09b0:  ; not directly referenced
lea esp, [esp + 0xc]
mov eax, esi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa09bb:  ; not directly referenced
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [ebp + 0xc]
mov ecx, dword [ebp + 0x18]
push eax
sub ebx, 0x1c
mov edx, dword [ebp + 0x14]
push dword [ebp + 0x24]
push dword [ebp + 0x20]
movzx eax, byte [ebp + 0x1c]
push eax
mov al, byte [ebp + 0x10]
call fcn_fffb7031  ; call 0xfffb7031
add esp, 0x10
cmp byte [ebx + 0xc6], 0
mov esi, eax
je short loc_fffa0a03  ; je 0xfffa0a03
mov eax, 0x10
call fcn_fffa0871  ; call 0xfffa0871
test al, 1
je short loc_fffa0a03  ; je 0xfffa0a03
mov eax, ebx
call fcn_fffa0885  ; call 0xfffa0885

loc_fffa0a03:  ; not directly referenced
lea esp, [ebp - 8]
mov eax, esi
pop ebx
pop esi
pop ebp
ret

fcn_fffa0a0c:
push ebp
mov ebp, esp
push ebx
mov ebx, edx
lea esp, [esp - 0x10]
mov dword [edx], 0x626d7370
mov dword [edx + 4], eax
mov edx, dword [eax]
lea ecx, [ebx + 8]
push ecx
push 0
push 0
push ref_fffcfacc  ; push 0xfffcfacc
push eax
call dword [edx + 0x20]  ; ucall
mov eax, dword [ebx + 8]
add esp, 0x20
mov edx, dword [eax]
mov dword [ebx + 0x10], 0x80000010
mov dword [ebx + 0xc], edx
mov dword [ebx + 0x14], ref_fffcfc84  ; mov dword [ebx + 0x14], 0xfffcfc84
mov dword [ebx + 0x1c], fcn_fffa09bb  ; mov dword [ebx + 0x1c], 0xfffa09bb
mov dword [ebx + 0x20], fcn_fffa05e3  ; mov dword [ebx + 0x20], 0xfffa05e3
mov dword [ebx + 0x24], fcn_fffa0014  ; mov dword [ebx + 0x24], 0xfffa0014
mov dword [ebx + 0x28], fcn_fffa093b  ; mov dword [ebx + 0x28], 0xfffa093b
mov dword [ebx + 0x2c], 0x80000020
mov dword [ebx + 0x30], ref_fffcfa40  ; mov dword [ebx + 0x30], 0xfffcfa40
mov dword [ebx + 0x34], fcn_fffa0aa4  ; mov dword [ebx + 0x34], 0xfffa0aa4
mov byte [ebx + 0x38], 0
lea edx, [ebx + 0x1c]
mov dword [ebx + 0x18], edx
mov dl, byte [eax + 8]
mov byte [ebx + 0xc1], dl
mov eax, dword [eax + 9]
mov dword [ebx + 0xc2], eax
mov byte [ebx + 0xc6], 0
mov ebx, dword [ebp - 4]
leave
ret

fcn_fffa0aa4:  ; not directly referenced
push ebp
mov ebp, esp
lea esp, [esp - 8]
mov edx, dword [ebp + 0xc]
mov eax, dword [ebp + 8]
sub edx, 0x2c
call fcn_fffa0a0c  ; call 0xfffa0a0c
xor eax, eax
leave
ret

fcn_fffa0abd:
push ebp
mov ebp, esp
push esi
push ebx
mov dword [eax + 0x2330], edx
mov dx, word [eax + 0x2338]
lea ebx, [eax + 0x2338]
and dx, 0x1ff
or dh, 6
mov word [eax + 0x2338], dx
mov edx, 0x3e8

loc_fffa0ae9:
movzx esi, byte [ebx]
and esi, 1
je short loc_fffa0af6  ; je 0xfffa0af6
dec edx
jne short loc_fffa0ae9  ; jne 0xfffa0ae9
jmp short loc_fffa0b0d  ; jmp 0xfffa0b0d

loc_fffa0af6:
mov edx, dword [eax + 0x2334]
mov dword [ecx], edx
mov edx, 0x3e8

loc_fffa0b03:
mov cl, byte [ebx]
and cl, 1
je short loc_fffa0b14  ; je 0xfffa0b14
dec edx
jne short loc_fffa0b03  ; jne 0xfffa0b03

loc_fffa0b0d:
mov eax, 0x80000012
jmp short loc_fffa0b28  ; jmp 0xfffa0b28

loc_fffa0b14:
mov al, byte [eax + 0x2338]
and eax, 6
cmp al, 1
sbb eax, eax
not eax
and eax, 0x80000007

loc_fffa0b28:
pop ebx
pop esi
pop ebp
ret

fcn_fffa0b2c:
push ebp
mov ebp, esp
push esi
mov esi, ecx
push ebx
lea ecx, [ebp - 0xc]
mov ebx, eax
lea esp, [esp - 0x10]
call fcn_fffa0abd  ; call 0xfffa0abd
test eax, eax
js short loc_fffa0bc4  ; js 0xfffa0bc4
mov ax, word [ebx + 0x2338]
mov ecx, dword [ebp - 0xc]
and ax, 0x1ff
and ecx, esi
or ah, 6
or ecx, dword [ebp + 8]
mov dword [ebp - 0xc], ecx
lea edx, [ebx + 0x2338]
mov word [ebx + 0x2338], ax
mov eax, 0x3e8

loc_fffa0b70:
mov cl, byte [edx]
and cl, 1
je short loc_fffa0b7c  ; je 0xfffa0b7c
dec eax
jne short loc_fffa0b70  ; jne 0xfffa0b70
jmp short loc_fffa0b94  ; jmp 0xfffa0b94

loc_fffa0b7c:
mov eax, dword [ebp - 0xc]
mov dword [ebx + 0x2334], eax
mov eax, 0x3e8

loc_fffa0b8a:
mov cl, byte [edx]
and cl, 1
je short loc_fffa0b9b  ; je 0xfffa0b9b
dec eax
jne short loc_fffa0b8a  ; jne 0xfffa0b8a

loc_fffa0b94:
mov eax, 0x80000012
jmp short loc_fffa0bc4  ; jmp 0xfffa0bc4

loc_fffa0b9b:
mov ax, word [ebx + 0x2338]
and ax, 0x1ff
or ah, 6
mov word [ebx + 0x2338], ax
mov al, byte [ebx + 0x2338]
and eax, 6
cmp al, 1
sbb eax, eax
not eax
and eax, 0x80000007

loc_fffa0bc4:
lea esp, [esp + 0x10]
pop ebx
pop esi
pop ebp
ret

fcn_fffa0bcc:
push ebp
mov edx, 1
mov ebp, esp
push ebx
push ecx
mov al, byte [0xf00f8008]
mov byte [ebp - 5], al
mov ax, word [0xf00f8002]
cmp ax, 0x1e44
sete bl
cmp ax, 0x1e41
sete cl
or bl, cl
jne short loc_fffa0c6f  ; jne 0xfffa0c6f
lea ecx, [eax - 0x1e46]
cmp cx, 1
jbe short loc_fffa0c6f  ; jbe 0xfffa0c6f
lea ecx, [eax - 0x1e48]
cmp cx, 1
jbe short loc_fffa0c6f  ; jbe 0xfffa0c6f
cmp ax, 0x1e53
sete bl
cmp ax, 0x1e4a
sete cl
or bl, cl
jne short loc_fffa0c6f  ; jne 0xfffa0c6f
cmp ax, 0x1e5e
sete bl
cmp ax, 0x1e42
sete cl
or bl, cl
jne short loc_fffa0c6f  ; jne 0xfffa0c6f
mov ecx, eax
and ecx, 0xfffffff7
cmp cx, 0x1e55
je short loc_fffa0c6f  ; je 0xfffa0c6f
lea ecx, [eax - 0x1e57]
cmp cx, 1
jbe short loc_fffa0c6f  ; jbe 0xfffa0c6f
cmp ax, 0x1e5f
sete bl
cmp ax, 0x1e59
sete cl
or bl, cl
jne short loc_fffa0c6f  ; jne 0xfffa0c6f
cmp ax, 0x1e56
sete dl
cmp ax, 0x1e43
sete al
or edx, eax
movzx edx, dl

loc_fffa0c6f:
cmp byte [ebp - 5], 5
mov eax, 8
ja short loc_fffa0cb6  ; ja 0xfffa0cb6
movzx eax, byte [ebp - 5]
jmp dword [eax*4 + ref_fffc990c]  ; ujmp: jmp dword [eax*4 - 0x366f4]

loc_fffa0c85:
xor eax, eax
jmp short loc_fffa0cb6  ; jmp 0xfffa0cb6

loc_fffa0c89:
mov eax, 2
jmp short loc_fffa0cb6  ; jmp 0xfffa0cb6

loc_fffa0c90:
cmp dl, 1
sbb eax, eax
and eax, 0xfffffffd
add eax, 6
jmp short loc_fffa0cb6  ; jmp 0xfffa0cb6

loc_fffa0c9d:
cmp dl, 1
sbb eax, eax
and eax, 0xfffffffd
add eax, 7
jmp short loc_fffa0cb6  ; jmp 0xfffa0cb6

loc_fffa0caa:
mov eax, 5
jmp short loc_fffa0cb6  ; jmp 0xfffa0cb6

loc_fffa0cb1:
mov eax, 1

loc_fffa0cb6:
pop edx
pop ebx
pop ebp
ret

fcn_fffa0cba:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
push esi
mov di, word [0xf00f8040]
and edi, 0xffffff80
add edi, 8
mov word [ebp - 0xe], di
mov edx, edi
in eax, dx
mov ecx, eax
xor edx, edx
imul eax, ebx, 0x166
mov ebx, 0x64
div ebx
and ecx, 0xffffff
lea eax, [ecx + eax + 1]
mov esi, eax
shr esi, 0x18
mov edi, eax
and edi, 0xffffff
jmp short loc_fffa0d16  ; jmp 0xfffa0d16

loc_fffa0d01:
mov dx, word [ebp - 0xe]
in eax, dx
and eax, 0xffffff
cmp eax, ecx
jae short loc_fffa0d14  ; jae 0xfffa0d14
test bl, bl
je short loc_fffa0d24  ; je 0xfffa0d24
dec esi

loc_fffa0d14:
mov ecx, eax

loc_fffa0d16:
test esi, esi
setne bl
cmp edi, ecx
seta al
or al, bl
jne short loc_fffa0d01  ; jne 0xfffa0d01

loc_fffa0d24:
pop ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa0d2a:
push ebp
mov ebp, esp
push edi
push esi
lea ecx, [ebp - 0x3c]
push ebx
lea esp, [esp - 0x78]
mov eax, dword [ebp + 8]
mov edx, dword [eax]
push ecx
push 0
push 0
push ref_fffcfafc  ; push 0xfffcfafc
push eax
call dword [edx + 0x20]  ; ucall
add esp, 0x20
test eax, eax
mov dword [ebp - 0x64], eax
jne loc_fffa1ddb  ; jne 0xfffa1ddb
mov eax, dword [ebp - 0x3c]
lea edi, [ebp - 0x28]
mov esi, ref_fffc9924  ; mov esi, 0xfffc9924
mov ebx, dword [eax + 1]
mov edx, dword [eax + 6]
mov dword [ebp - 0x50], ebx
mov ebx, dword [0xf00f80f0]
and ebx, 0xffffc000
mov dword [ebp - 0x54], ebx
mov ebx, dword [ebx + 0x3418]
mov dword [ebp - 0x5c], ebx
mov bl, byte [eax]
mov byte [ebp - 0x65], bl
mov ebx, dword [eax + 0xe]
mov dword [ebp - 0x4c], ebx
mov bx, word [0xf00f8040]
mov word [ebp - 0x60], bx
mov ebx, dword [ebp - 0x50]
mov eax, dword [ebp - 0x5c]
or ah, 0x80
test byte [ebx + 1], 1
cmovne eax, dword [ebp - 0x5c]
mov dword [ebp - 0x5c], eax
or ah, 0x20
test byte [ebx + 2], 1
mov ebx, dword [ebp - 0x54]
cmovne eax, dword [ebp - 0x5c]
mov dword [ebp - 0x5c], eax
or eax, 0x10001fe0
mov ecx, dword [ebx + 0x3598]
and cl, 1
cmovne eax, dword [ebp - 0x5c]
mov ecx, 3
mov dword [ebp - 0x5c], eax
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
xor ebx, ebx
lea edi, [ebp - 0x28]

loc_fffa0de0:
movzx ecx, byte [edi + 1]
mov esi, dword [ebp - 0x5c]
movzx eax, byte [edi]
shl ecx, 0xc
shl eax, 0xf
add ecx, eax
test dword [edi + 2], esi
je short loc_fffa0e0f  ; je 0xfffa0e0f
mov dword [ecx - 0xffffff0], 0
mov word [ecx - 0xffffffc], 0
jmp near loc_fffa0f88  ; jmp 0xfffa0f88

loc_fffa0e0f:
mov eax, dword [ecx - 0xffffff0]
test eax, eax
jne short loc_fffa0e36  ; jne 0xfffa0e36
mov ax, word [ecx - 0xffffffc]
test al, 2
jne short loc_fffa0e36  ; jne 0xfffa0e36
mov dword [ecx - 0xffffff0], edx
mov byte [ebp - 0x58], 0
mov word [ebp - 0x5e], 0
jmp short loc_fffa0e4b  ; jmp 0xfffa0e4b

loc_fffa0e36:
mov edx, dword [ecx - 0xffffff0]
mov si, word [ecx - 0xffffffc]
mov word [ebp - 0x5e], si
mov byte [ebp - 0x58], 1

loc_fffa0e4b:
mov ax, word [ecx - 0xffffffc]
or eax, 6
mov word [ecx - 0xffffffc], ax
mov esi, dword [ebp - 0x50]
test bl, bl
mov al, byte [esi]
jne short loc_fffa0e75  ; jne 0xfffa0e75
test al, 2
mov esi, 3
jne short loc_fffa0e7e  ; jne 0xfffa0e7e

loc_fffa0e6e:
mov esi, 2
jmp short loc_fffa0e7e  ; jmp 0xfffa0e7e

loc_fffa0e75:
test al, 4
je short loc_fffa0e6e  ; je 0xfffa0e6e
mov esi, 3

loc_fffa0e7e:
mov ax, word [ecx - 0xfffff80]
or eax, 1
mov word [ecx - 0xfffff80], ax
mov eax, dword [edx + 4]
and ah, 0xf
mov dword [edx + 4], eax
lea eax, [ebx - 0x50]
out 0x80, al
mov eax, dword [edx + 4]
and esi, 0xff
and eax, 0xfffffff0
or esi, eax
mov dword [edx + 4], esi
mov ax, word [ecx - 0xfffff80]
and eax, 0xfffffffe
mov word [ecx - 0xfffff80], ax
cmp byte [ebp - 0x58], 0
jne short loc_fffa0ed8  ; jne 0xfffa0ed8
mov eax, dword [edx + 0x24]
test ah, 0x10
je short loc_fffa0ed8  ; je 0xfffa0ed8
mov ax, word [edx + 0x20]
or eax, 2
mov word [edx + 0x20], ax

loc_fffa0ed8:
mov eax, dword [ecx - 0xfffff7c]
and ah, 0xf9
or eax, 0x10040010
mov dword [ecx - 0xfffff7c], eax
mov eax, dword [ecx - 0xfffff78]
or eax, 0x20000d20
mov dword [ecx - 0xfffff78], eax
mov eax, dword [ecx - 0xfffff0c]
or eax, 0x80000000
mov dword [ecx - 0xfffff0c], eax
mov eax, dword [ecx - 0xfffff0c]
and eax, 0xff3fffff
or eax, 0x800000
mov dword [ecx - 0xfffff0c], eax
mov eax, dword [ecx - 0xfffff0c]
and eax, 0x7fffffff
mov dword [ecx - 0xfffff0c], eax
mov eax, dword [ecx - 0xfffff04]
or eax, 0x20000
mov dword [ecx - 0xfffff04], eax
mov esi, dword [ebp - 0x54]
mov eax, dword [esi + 0x3560]
or eax, 0x20c8000
mov dword [esi + 0x3560], eax
cmp byte [ebp - 0x58], 0
je short loc_fffa0f6d  ; je 0xfffa0f6d
mov si, word [ebp - 0x5e]
mov word [ecx - 0xffffffc], si
jmp short loc_fffa0f88  ; jmp 0xfffa0f88

loc_fffa0f6d:
mov ax, word [ecx - 0xffffffc]
and eax, 0xfffffff9
mov word [ecx - 0xffffffc], ax
mov dword [ecx - 0xffffff0], 0

loc_fffa0f88:
inc ebx
add edi, 6
cmp bl, 2
jne loc_fffa0de0  ; jne 0xfffa0de0
mov ebx, dword [ebp - 0x50]
mov di, word [0xf00f8002]
test byte [ebx], 1
je loc_fffa10ca  ; je 0xfffa10ca
mov eax, dword [ebp - 0x60]
and eax, 0xffffff80
add eax, 0x3c
mov word [ebp - 0x58], ax
mov edx, eax
in ax, dx
mov word [ebp - 0x5e], ax
or eax, 2
out dx, ax
xor esi, esi
xor ecx, ecx
mov edx, 1

loc_fffa0fcb:
mov ebx, dword [ebp - 0x50]
test byte [ebx + ecx + 3], 1
mov ebx, dword [ebp - 0x54]
mov ax, word [ebx + 0x359c]
mov ebx, edx
jne short loc_fffa0fff  ; jne 0xfffa0fff
shl ebx, cl
mov dword [ebp - 0x70], ebx
or eax, ebx
mov ebx, dword [ebp - 0x54]
mov word [ebx + 0x359c], ax
mov ebx, dword [ebp - 0x70]
or ebx, esi
cmp ecx, 3
cmovbe esi, ebx
jmp short loc_fffa100f  ; jmp 0xfffa100f

loc_fffa0fff:
shl ebx, cl
not ebx
and ebx, eax
mov eax, dword [ebp - 0x54]
mov word [eax + 0x359c], bx

loc_fffa100f:
inc ecx
cmp ecx, 0xe
jne short loc_fffa0fcb  ; jne 0xfffa0fcb
cmp di, 0x1e44
sete dl
cmp di, 0x1e41
sete al
or dl, al
jne short loc_fffa10a8  ; jne 0xfffa10a8
lea eax, [edi - 0x1e46]
cmp ax, 1
jbe short loc_fffa10a8  ; jbe 0xfffa10a8
lea eax, [edi - 0x1e48]
cmp ax, 1
jbe short loc_fffa10a8  ; jbe 0xfffa10a8
cmp di, 0x1e53
sete dl
cmp di, 0x1e4a
sete al
or dl, al
jne short loc_fffa10a8  ; jne 0xfffa10a8
cmp di, 0x1e5e
sete dl
cmp di, 0x1e42
sete al
or dl, al
jne short loc_fffa10a8  ; jne 0xfffa10a8
mov eax, edi
and eax, 0xfffffff7
cmp ax, 0x1e55
je short loc_fffa10a8  ; je 0xfffa10a8
lea eax, [edi - 0x1e57]
cmp ax, 1
jbe short loc_fffa10a8  ; jbe 0xfffa10a8
cmp di, 0x1e5f
sete dl
cmp di, 0x1e59
sete al
or dl, al
jne short loc_fffa10a8  ; jne 0xfffa10a8
cmp di, 0x1e56
sete dl
cmp di, 0x1e43
sete al
or dl, al
je short loc_fffa10be  ; je 0xfffa10be

loc_fffa10a8:
call fcn_fffa0bcc  ; call 0xfffa0bcc
cmp eax, 1
jbe short loc_fffa10be  ; jbe 0xfffa10be
mov eax, dword [0xf00a00e4]
or eax, esi
mov dword [0xf00a00e4], eax

loc_fffa10be:
mov ax, word [ebp - 0x5e]
mov edx, dword [ebp - 0x58]
and eax, 0xfffffffd
out dx, ax

loc_fffa10ca:
xor ebx, ebx
xor esi, esi
xor eax, eax

loc_fffa10d0:
mov ecx, dword [ebp - 0x50]
mov edx, dword [ecx + eax*4 + 0x11]
cmp edx, 8
je short loc_fffa1111  ; je 0xfffa1111
cmp eax, 7
ja short loc_fffa10f8  ; ja 0xfffa10f8
cmp edx, 3
ja loc_fffa1da9  ; ja 0xfffa1da9
lea ecx, [eax + edx*8]
mov edx, 1
shl edx, cl
or esi, edx
jmp short loc_fffa1111  ; jmp 0xfffa1111

loc_fffa10f8:
lea ecx, [edx - 4]
cmp ecx, 3
ja loc_fffa1da9  ; ja 0xfffa1da9
lea ecx, [eax + edx*8 - 0x28]
mov edx, 1
shl edx, cl
or ebx, edx

loc_fffa1111:
inc eax
cmp eax, 0xe
jne short loc_fffa10d0  ; jne 0xfffa10d0
mov ecx, dword [ebp - 0x54]
mov dword [ecx + 0x35a0], esi
mov dword [ecx + 0x35a4], ebx
cmp di, 0x1e44
sete dl
cmp di, 0x1e41
sete al
or dl, al
mov byte [ebp - 0x5e], dl
jne short loc_fffa11bc  ; jne 0xfffa11bc
lea eax, [edi - 0x1e46]
cmp ax, 1
jbe short loc_fffa11bc  ; jbe 0xfffa11bc
lea eax, [edi - 0x1e48]
cmp ax, 1
jbe short loc_fffa11bc  ; jbe 0xfffa11bc
cmp di, 0x1e53
sete dl
cmp di, 0x1e4a
sete al
or dl, al
jne short loc_fffa11bc  ; jne 0xfffa11bc
cmp di, 0x1e5e
sete dl
cmp di, 0x1e42
sete al
or dl, al
jne short loc_fffa11bc  ; jne 0xfffa11bc
mov eax, edi
and eax, 0xfffffff7
cmp ax, 0x1e55
je short loc_fffa11bc  ; je 0xfffa11bc
lea eax, [edi - 0x1e57]
cmp ax, 1
jbe short loc_fffa11bc  ; jbe 0xfffa11bc
cmp di, 0x1e5f
sete dl
cmp di, 0x1e59
sete al
or dl, al
jne short loc_fffa11bc  ; jne 0xfffa11bc
cmp di, 0x1e56
sete dl
cmp di, 0x1e43
sete al
or dl, al
je short loc_fffa11c2  ; je 0xfffa11c2

loc_fffa11bc:
mov dword [0xf00a00c0], esi

loc_fffa11c2:
mov esi, dword [ebp - 0x54]
mov eax, edi
mov edx, edi
add esi, 0x3500
and eax, 0xfffffffb
and edx, 0xfffffffd
mov ecx, esi
xor ebx, ebx
mov word [ebp - 0x58], ax
mov word [ebp - 0x60], dx

loc_fffa11e1:
cmp word [ebp - 0x58], 0x1c42
je short loc_fffa1225  ; je 0xfffa1225
cmp di, 0x1c4c
sete dl
cmp di, 0x1c4a
sete al
or dl, al
jne short loc_fffa1225  ; jne 0xfffa1225
cmp di, 0x1c50
sete dl
cmp di, 0x1c4e
sete al
or dl, al
jne short loc_fffa1225  ; jne 0xfffa1225
cmp di, 0x1c44
sete dl
cmp di, 0x1c5c
sete al
or dl, al
je short loc_fffa125e  ; je 0xfffa125e

loc_fffa1225:
mov edx, dword [ebp - 0x50]
mov ax, word [edx + ebx*2 + 0x49]
cmp ax, 0x7f
ja short loc_fffa1238  ; ja 0xfffa1238
jmp near loc_fffa12dc  ; jmp 0xfffa12dc

loc_fffa1238:
cmp ax, 0x12f
ja short loc_fffa1243  ; ja 0xfffa1243
jmp near loc_fffa13ae  ; jmp 0xfffa13ae

loc_fffa1243:
cmp ax, 0x14f
ja loc_fffa13da  ; ja 0xfffa13da
mov eax, dword [ecx]
and eax, 0xdffff000
or eax, 0x20000f5b
jmp near loc_fffa13d8  ; jmp 0xfffa13d8

loc_fffa125e:
cmp word [ebp - 0x58], 0x1c43
je short loc_fffa1289  ; je 0xfffa1289
cmp word [ebp - 0x60], 0x1c49
je short loc_fffa1289  ; je 0xfffa1289
cmp di, 0x1c41
sete dl
cmp di, 0x1c4f
sete al
or dl, al
jne short loc_fffa1289  ; jne 0xfffa1289
cmp di, 0x1c4d
jne short loc_fffa1291  ; jne 0xfffa1291

loc_fffa1289:
mov edx, dword [ebp - 0x50]
jmp near loc_fffa138f  ; jmp 0xfffa138f

loc_fffa1291:
cmp byte [ebp - 0x5e], 0
jne short loc_fffa12b6  ; jne 0xfffa12b6
lea eax, [edi - 0x1e46]
cmp ax, 1
jbe short loc_fffa12b6  ; jbe 0xfffa12b6
lea eax, [edi - 0x1e48]
cmp ax, 1
jbe short loc_fffa12b6  ; jbe 0xfffa12b6
cmp di, 0x1e4a
jne short loc_fffa132e  ; jne 0xfffa132e

loc_fffa12b6:
mov edx, dword [ebp - 0x50]
mov al, byte [edx + ebx + 3]
shr al, 1
and al, 1
je short loc_fffa12ed  ; je 0xfffa12ed
mov ax, word [edx + ebx*2 + 0x49]
cmp ax, 0x5f
ja loc_fffa13da  ; ja 0xfffa13da
cmp ax, 0x2f
jbe loc_fffa13da  ; jbe 0xfffa13da

loc_fffa12dc:
mov eax, dword [ecx]
and eax, 0xdffff000
or eax, 0x20000f53
jmp near loc_fffa13d8  ; jmp 0xfffa13d8

loc_fffa12ed:
test al, al
jne loc_fffa13da  ; jne 0xfffa13da
mov edx, dword [ebp - 0x50]
mov ax, word [edx + ebx*2 + 0x49]
cmp ax, 0x7f
ja short loc_fffa130e  ; ja 0xfffa130e
cmp ax, 0x2f
jbe short loc_fffa1314  ; jbe 0xfffa1314
jmp near loc_fffa13ae  ; jmp 0xfffa13ae

loc_fffa130e:
cmp ax, 0xff
ja short loc_fffa1325  ; ja 0xfffa1325

loc_fffa1314:
mov eax, dword [ecx]
and eax, 0xdffff000
or eax, 0x20000553
jmp near loc_fffa13d8  ; jmp 0xfffa13d8

loc_fffa1325:
cmp ax, 0x14f
jmp near loc_fffa13ca  ; jmp 0xfffa13ca

loc_fffa132e:
cmp di, 0x1e5e
sete dl
cmp di, 0x1e42
sete al
or dl, al
jne short loc_fffa1381  ; jne 0xfffa1381
mov eax, edi
and eax, 0xfffffff7
cmp ax, 0x1e55
je short loc_fffa1381  ; je 0xfffa1381
lea eax, [edi - 0x1e57]
cmp ax, 1
jbe short loc_fffa1381  ; jbe 0xfffa1381
cmp di, 0x1e5f
sete dl
cmp di, 0x1e59
sete al
or dl, al
jne short loc_fffa1381  ; jne 0xfffa1381
cmp di, 0x1e56
sete dl
cmp di, 0x1e43
sete al
or dl, al
je short loc_fffa13da  ; je 0xfffa13da

loc_fffa1381:
mov edx, dword [ebp - 0x50]
mov al, byte [edx + ebx + 3]
shr al, 2
and al, 1
jne short loc_fffa13bc  ; jne 0xfffa13bc

loc_fffa138f:
mov ax, word [edx + ebx*2 + 0x49]
cmp ax, 0x4f
ja short loc_fffa13a8  ; ja 0xfffa13a8
mov eax, dword [ecx]
and eax, 0xdffff000
or eax, 0x20000153
jmp short loc_fffa13d8  ; jmp 0xfffa13d8

loc_fffa13a8:
cmp ax, 0x13f
ja short loc_fffa13da  ; ja 0xfffa13da

loc_fffa13ae:
mov eax, dword [ecx]
and eax, 0xdffff000
or eax, 0x20000f57
jmp short loc_fffa13d8  ; jmp 0xfffa13d8

loc_fffa13bc:
dec al
jne short loc_fffa13da  ; jne 0xfffa13da
mov eax, dword [ebp - 0x50]
cmp word [eax + ebx*2 + 0x49], 0xff

loc_fffa13ca:
ja short loc_fffa13da  ; ja 0xfffa13da
mov eax, dword [ecx]
and eax, 0xdffff000
or eax, 0x2000055b

loc_fffa13d8:
mov dword [ecx], eax

loc_fffa13da:
inc ebx
add ecx, 4
cmp ebx, 0xe
jne loc_fffa11e1  ; jne 0xfffa11e1
cmp word [ebp - 0x58], 0x1c42
je loc_fffa1486  ; je 0xfffa1486
cmp di, 0x1c4c
sete dl
cmp di, 0x1c4a
sete al
or dl, al
jne short loc_fffa1486  ; jne 0xfffa1486
cmp di, 0x1c50
sete dl
cmp di, 0x1c4e
sete al
or dl, al
jne short loc_fffa1486  ; jne 0xfffa1486
cmp di, 0x1c44
sete dl
cmp di, 0x1c5c
sete al
or dl, al
jne short loc_fffa1486  ; jne 0xfffa1486
cmp word [ebp - 0x58], 0x1c43
je short loc_fffa1486  ; je 0xfffa1486
mov eax, edi
and eax, 0xfffffffd
cmp ax, 0x1c49
je short loc_fffa1486  ; je 0xfffa1486
cmp di, 0x1c41
sete dl
cmp di, 0x1c4f
sete al
or dl, al
jne short loc_fffa1486  ; jne 0xfffa1486
cmp di, 0x1c4d
je short loc_fffa1486  ; je 0xfffa1486
cmp di, 0x1c56
je short loc_fffa1486  ; je 0xfffa1486
cmp di, 0x1c54
sete dl
cmp di, 0x1c52
sete al
or dl, al
jne short loc_fffa1486  ; jne 0xfffa1486

loc_fffa1478:
mov ebx, dword [ebp - 0x50]
test byte [ebx], 1
jne loc_fffa1535  ; jne 0xfffa1535
jmp short loc_fffa1501  ; jmp 0xfffa1501

loc_fffa1486:
mov ebx, dword [ebp - 0x54]
mov al, byte [ebx + 0x3598]
test al, 1
jne short loc_fffa1478  ; jne 0xfffa1478
mov ebx, dword [ebp - 0x50]
test byte [ebx + 1], 1
je short loc_fffa14a7  ; je 0xfffa14a7

loc_fffa149c:
mov ebx, dword [ebp - 0x50]
test byte [ebx + 2], 1
je short loc_fffa14d3  ; je 0xfffa14d3
jmp short loc_fffa1478  ; jmp 0xfffa1478

loc_fffa14a7:
mov ebx, dword [ebp - 0x50]
test byte [ebx + 2], 1
jne short loc_fffa149c  ; jne 0xfffa149c
mov eax, 7

loc_fffa14b5:
mov edx, dword [esi]
or edx, 0x40000000
mov dword [esi], edx
mov edx, dword [esi + 4]
or edx, 0x40000000
mov dword [esi + 4], edx
add esi, 8
dec eax
jne short loc_fffa14b5  ; jne 0xfffa14b5
jmp short loc_fffa149c  ; jmp 0xfffa149c

loc_fffa14d3:
mov eax, dword [ebp - 0x54]
mov edx, 3
add eax, 0x3520

loc_fffa14e0:
mov ecx, dword [eax]
or ecx, 0x40000000
mov dword [eax], ecx
mov ecx, dword [eax + 4]
or ecx, 0x40000000
mov dword [eax + 4], ecx
add eax, 8
dec edx
jne short loc_fffa14e0  ; jne 0xfffa14e0
jmp near loc_fffa1478  ; jmp 0xfffa1478

loc_fffa1501:
mov ebx, dword [ebp - 0x54]
mov eax, dword [ebx + 0x3564]
and eax, 0xffffeca3
or eax, 0x4a3
mov dword [ebx + 0x3564], eax
cmp word [ebp - 0x58], 0x1c43
mov ebx, 0x2000772
sete cl
test cl, cl
jne loc_fffa1641  ; jne 0xfffa1641
jmp near loc_fffa15ba  ; jmp 0xfffa15ba

loc_fffa1535:
mov edx, dword [ebp - 0x54]
mov eax, dword [ebp - 0x54]
add edx, 0x3530
add eax, 0x3534
mov dword [ebp - 0x74], 7

loc_fffa154d:
mov esi, dword [ebp - 0x74]
mov ebx, dword [ebp - 0x50]
test byte [ebx + esi*2 + 1], 1
jne short loc_fffa1596  ; jne 0xfffa1596
mov ebx, esi
mov esi, dword [ebp - 0x50]
add ebx, ebx
test byte [esi + ebx + 2], 1
jne short loc_fffa1596  ; jne 0xfffa1596
mov ecx, dword [ebp - 0x74]
inc ecx
mov dword [ebp - 0x70], ecx
jmp short loc_fffa158b  ; jmp 0xfffa158b

loc_fffa1571:
mov esi, dword [ebp - 0x50]
test byte [esi + ebx + 3], 1
jne short loc_fffa1596  ; jne 0xfffa1596
movzx esi, byte [esi + ebx + 4]
add ebx, 2
and esi, 1
jne short loc_fffa1596  ; jne 0xfffa1596
inc dword [ebp - 0x70]

loc_fffa158b:
cmp dword [ebp - 0x70], 8
jne short loc_fffa1571  ; jne 0xfffa1571
jmp near loc_fffa1dc4  ; jmp 0xfffa1dc4

loc_fffa1596:
mov ebx, dword [edx]
and ebx, 0xbfffffff
mov dword [edx], ebx
mov ebx, dword [eax]
and ebx, 0xbfffffff

loc_fffa15a8:
mov dword [eax], ebx
sub edx, 8
sub eax, 8
dec dword [ebp - 0x74]
jne short loc_fffa154d  ; jne 0xfffa154d
jmp near loc_fffa1501  ; jmp 0xfffa1501

loc_fffa15ba:
mov eax, edi
and eax, 0xfffffffd
cmp ax, 0x1c49
je short loc_fffa1641  ; je 0xfffa1641
cmp di, 0x1c41
sete dl
cmp di, 0x1c4f
sete al
or dl, al
jne short loc_fffa1641  ; jne 0xfffa1641
cmp di, 0x1c4d
je short loc_fffa1641  ; je 0xfffa1641
cmp di, 0x1e5e
sete dl
cmp di, 0x1e42
sete al
or dl, al
jne short loc_fffa1641  ; jne 0xfffa1641
mov eax, edi
and eax, 0xfffffff7
cmp ax, 0x1e55
je short loc_fffa1641  ; je 0xfffa1641
lea eax, [edi - 0x1e57]
cmp ax, 1
jbe short loc_fffa1641  ; jbe 0xfffa1641
cmp di, 0x1e5f
sete dl
cmp di, 0x1e59
sete al
or dl, al
jne short loc_fffa1641  ; jne 0xfffa1641
cmp di, 0x1e56
sete al
cmp di, 0x1e43
sete dl
or eax, edx
cmp al, 1
sbb ebx, ebx
and ebx, 0xfffffef0
add ebx, 0x2000772

loc_fffa1641:
mov edx, dword [ebp - 0x54]
mov eax, dword [edx + 0x3570]
and eax, 0xfbfffeee
or eax, ebx
mov dword [edx + 0x3570], eax
test cl, cl
mov ebx, 0x1630
jne loc_fffa16e7  ; jne 0xfffa16e7
mov eax, edi
and eax, 0xfffffffd
cmp ax, 0x1c49
je short loc_fffa16e7  ; je 0xfffa16e7
cmp di, 0x1c41
sete dl
cmp di, 0x1c4f
sete al
or dl, al
jne short loc_fffa16e7  ; jne 0xfffa16e7
cmp di, 0x1c4d
je short loc_fffa16e7  ; je 0xfffa16e7
cmp di, 0x1e5e
sete dl
cmp di, 0x1e42
sete al
or dl, al
jne short loc_fffa16e7  ; jne 0xfffa16e7
mov eax, edi
and eax, 0xfffffff7
cmp ax, 0x1e55
je short loc_fffa16e7  ; je 0xfffa16e7
lea eax, [edi - 0x1e57]
cmp ax, 1
jbe short loc_fffa16e7  ; jbe 0xfffa16e7
cmp di, 0x1e5f
sete dl
cmp di, 0x1e59
sete al
or dl, al
jne short loc_fffa16e7  ; jne 0xfffa16e7
cmp di, 0x1e56
sete al
cmp di, 0x1e43
sete dl
or eax, edx
cmp al, 1
sbb ebx, ebx
xor bl, bl
add ebx, 0x1630

loc_fffa16e7:
mov ecx, dword [ebp - 0x54]
mov eax, dword [ecx + 0x357c]
and eax, 0xfff9fc3f
or eax, ebx
mov dword [ecx + 0x357c], eax
mov ebx, dword [ebp - 0x50]
test byte [ebx], 2
je short loc_fffa1714  ; je 0xfffa1714
mov eax, dword [ecx + 0x3590]
or eax, 1
mov dword [ecx + 0x3590], eax

loc_fffa1714:
mov ebx, dword [ebp - 0x50]
test byte [ebx], 4
je short loc_fffa172e  ; je 0xfffa172e
mov ebx, dword [ebp - 0x54]
mov eax, dword [ebx + 0x3590]
or eax, 2
mov dword [ebx + 0x3590], eax

loc_fffa172e:
cmp byte [ebp - 0x5e], 0
jne loc_fffa17bb  ; jne 0xfffa17bb
lea eax, [edi - 0x1e46]
cmp ax, 1
jbe short loc_fffa17bb  ; jbe 0xfffa17bb
lea eax, [edi - 0x1e48]
cmp ax, 1
jbe short loc_fffa17bb  ; jbe 0xfffa17bb
cmp di, 0x1e53
sete dl
cmp di, 0x1e4a
sete al
or dl, al
jne short loc_fffa17bb  ; jne 0xfffa17bb
cmp di, 0x1e5e
sete dl
cmp di, 0x1e42
sete al
or dl, al
jne short loc_fffa17bb  ; jne 0xfffa17bb
mov eax, edi
and eax, 0xfffffff7
cmp ax, 0x1e55
je short loc_fffa17bb  ; je 0xfffa17bb
lea eax, [edi - 0x1e57]
cmp ax, 1
jbe short loc_fffa17bb  ; jbe 0xfffa17bb
cmp di, 0x1e5f
sete dl
cmp di, 0x1e59
sete al
or dl, al
jne short loc_fffa17bb  ; jne 0xfffa17bb
cmp di, 0x1e56
sete dl
cmp di, 0x1e43
sete al
or dl, al
je loc_fffa1db0  ; je 0xfffa1db0

loc_fffa17bb:
mov ebx, dword [ebp - 0x54]
mov eax, dword [ebx + 0x3598]
test al, 1
jne short loc_fffa17e6  ; jne 0xfffa17e6
mov ebx, dword [ebp - 0x50]
test byte [ebx], 8
jne short loc_fffa17e6  ; jne 0xfffa17e6
call fcn_fffa0bcc  ; call 0xfffa0bcc
test eax, eax
jne short loc_fffa17e6  ; jne 0xfffa17e6
mov al, byte [0xf00e8082]
or eax, 2
mov byte [0xf00e8082], al

loc_fffa17e6:
lea edi, [ebp - 0x38]
mov esi, ref_fffc9930  ; mov esi, 0xfffc9930
mov ecx, 4
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
lea edi, [ebp - 0x28]
mov esi, ref_fffc9940  ; mov esi, 0xfffc9940
mov cl, 4
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov eax, dword [0xf00a00e0]
and eax, 3
cmp eax, 3
je short loc_fffa181e  ; je 0xfffa181e
movzx edi, byte [eax + ref_fffc9976]  ; movzx edi, byte [eax - 0x3668a]
movzx edx, byte [eax + ref_fffc9979]  ; movzx edx, byte [eax - 0x36687]
jmp short loc_fffa1822  ; jmp 0xfffa1822

loc_fffa181e:
xor edx, edx
xor edi, edi

loc_fffa1822:
mov eax, dword [0xf00a00d4]
and eax, 0xfffffff0
or eax, edx
mov dword [0xf00a00d4], eax
mov eax, dword [0xf00a00dc]
and eax, 0xfffffff0
or eax, edx
mov dword [0xf00a00dc], eax
mov ebx, dword [ebp - 0x50]
test byte [ebx + 0x65], 3
jne short loc_fffa1855  ; jne 0xfffa1855
or dword [ebp - 0x5c], 0x8000000
jmp near loc_fffa1db0  ; jmp 0xfffa1db0

loc_fffa1855:
mov ebx, dword [ebp - 0x4c]
mov dword [0xf00a0010], ebx
mov ax, word [0xf00a0004]
or eax, 6
mov word [0xf00a0004], ax
mov eax, dword [ebx + 0x8110]
or eax, 0x100900
mov dword [ebx + 0x8110], eax
mov eax, dword [ebx + 0x8110]
and eax, 0xfffffffb
mov dword [ebx + 0x8110], eax
mov eax, dword [ebx + 0x8090]
or ah, 0x41
mov dword [ebx + 0x8090], eax
mov eax, dword [ebx + 0x80e0]
or eax, 0x40
mov dword [ebx + 0x80e0], eax
call fcn_fffa0bcc  ; call 0xfffa0bcc
cmp eax, 5
ja short loc_fffa18c4  ; ja 0xfffa18c4
mov eax, dword [ebx + 0x80e0]
or ah, 2
mov dword [ebx + 0x80e0], eax

loc_fffa18c4:
call fcn_fffa0bcc  ; call 0xfffa0bcc
test eax, eax
jne short loc_fffa18e3  ; jne 0xfffa18e3

loc_fffa18cd:
mov ebx, dword [ebp - 0x4c]
mov eax, dword [ebx + 0x805c]
or eax, 0x8000000
mov dword [ebx + 0x805c], eax
jmp short loc_fffa18eb  ; jmp 0xfffa18eb

loc_fffa18e3:
call fcn_fffa0bcc  ; call 0xfffa0bcc
dec eax
je short loc_fffa18cd  ; je 0xfffa18cd

loc_fffa18eb:
call fcn_fffa0bcc  ; call 0xfffa0bcc
cmp eax, 5
ja short loc_fffa190a  ; ja 0xfffa190a
mov ebx, dword [ebp - 0x4c]
mov eax, dword [ebx + 0x80ec]
and ah, 0x8f
or ah, 0x60
mov dword [ebx + 0x80ec], eax

loc_fffa190a:
mov ebx, dword [ebp - 0x4c]
mov eax, dword [ebx + 0x80ec]
and ah, 0xf1
or ah, 0xc
mov dword [ebx + 0x80ec], eax
mov eax, dword [ebx + 0x8058]
and eax, 0xfffefeff
or eax, 0x10000
mov dword [ebx + 0x8058], eax
mov eax, dword [ebx + 0x809c]
and ah, 0xfd
mov dword [ebx + 0x809c], eax
mov eax, dword [ebx + 0x8098]
and ah, 0xfb
mov dword [ebx + 0x8098], eax
mov eax, dword [ebx + 0xc]
and eax, 0xffff
or eax, 0x2000000
mov dword [ebx + 0xc], eax
mov eax, dword [ebx + 0xc]
xor al, al
or eax, 0xa
mov dword [ebx + 0xc], eax
mov eax, dword [ebx + 0x10]
and eax, 0xffffffdf
mov dword [ebx + 0x10], eax
cmp byte [ebp - 0x65], 2
jbe short loc_fffa1992  ; jbe 0xfffa1992
mov ebx, dword [ebp - 0x50]
cmp byte [ebx + 0x65], 0
js short loc_fffa1992  ; js 0xfffa1992
mov ebx, dword [ebp - 0x4c]
mov eax, dword [ebx + 0x10]
and ah, 0xf
mov dword [ebx + 0x10], eax

loc_fffa1992:
call fcn_fffa0bcc  ; call 0xfffa0bcc
cmp eax, 1
jbe short loc_fffa19b0  ; jbe 0xfffa19b0
mov ebx, dword [ebp - 0x4c]
mov eax, dword [ebx + 0x8110]
and eax, 0x7fffffff
mov dword [ebx + 0x8110], eax

loc_fffa19b0:
mov al, byte [0xf00a0044]
or eax, 0x38
mov byte [0xf00a0044], al
mov al, byte [0xf00a0044]
and eax, 0xfffffff8
or eax, 1
mov byte [0xf00a0044], al
mov eax, dword [0xf00a0050]
or eax, 0x17
mov dword [0xf00a0050], eax
mov ax, word [0xf00f80a2]
test al, 0x20
je short loc_fffa1a35  ; je 0xfffa1a35
mov eax, dword [0xf00f80ac]
test eax, 0x10000
je short loc_fffa1a35  ; je 0xfffa1a35
mov ebx, dword [ebp - 0x50]
mov ecx, dword [0xf00a00dc]
mov edx, dword [0xf00a00d8]
and edx, 0xfffffff0
mov al, byte [ebx + 0x65]
shr al, 2
and eax, 0xf
and eax, ecx
or eax, edx
mov dword [0xf00a00d8], eax
mov al, byte [ebx + 0x65]
mov ecx, dword [0xf00a00d4]
shr al, 2
mov edx, dword [0xf00a00d0]
and eax, 0xf
and edx, 0xfffffff0
and eax, ecx
or eax, edx
mov dword [0xf00a00d0], eax

loc_fffa1a35:
mov eax, dword [0xf00f80ac]
and eax, 0xfffeffff
mov dword [0xf00f80ac], eax
xor edx, edx
xor ebx, ebx
jmp short loc_fffa1a9b  ; jmp 0xfffa1a9b

loc_fffa1a4a:
mov esi, dword [ebp - 0x4c]
add esi, dword [ebp + ebx*4 - 0x28]
mov eax, dword [esi]
test eax, 0x1000000
jne short loc_fffa1a8e  ; jne 0xfffa1a8e
jmp short loc_fffa1a9a  ; jmp 0xfffa1a9a

loc_fffa1a5c:
mov eax, dword [esi]
mov ecx, eax
and ecx, 0x1e0
cmp ecx, 0x140
jne short loc_fffa1a7c  ; jne 0xfffa1a7c
and eax, 0x7ffffffd
or eax, 0x10
mov dword [esi], eax
mov dl, 1
jmp short loc_fffa1a9a  ; jmp 0xfffa1a9a

loc_fffa1a7c:
mov eax, 0x3e8
mov byte [ebp - 0x6c], dl
call fcn_fffa0cba  ; call 0xfffa0cba
mov dl, byte [ebp - 0x6c]
jmp short loc_fffa1a95  ; jmp 0xfffa1a95

loc_fffa1a8e:
mov dword [ebp - 0x58], 0x1f5

loc_fffa1a95:
dec dword [ebp - 0x58]
jne short loc_fffa1a5c  ; jne 0xfffa1a5c

loc_fffa1a9a:
inc ebx

loc_fffa1a9b:
cmp ebx, edi
jne short loc_fffa1a4a  ; jne 0xfffa1a4a
dec dl
je short loc_fffa1abd  ; je 0xfffa1abd

loc_fffa1aa3:
cmp byte [ebp - 0x65], 2
mov cl, 1
jbe loc_fffa1b7d  ; jbe 0xfffa1b7d
jmp short loc_fffa1af3  ; jmp 0xfffa1af3

loc_fffa1ab1:
mov eax, 0x2710
call fcn_fffa0cba  ; call 0xfffa0cba
jmp short loc_fffa1ac2  ; jmp 0xfffa1ac2

loc_fffa1abd:
mov ebx, 0xb

loc_fffa1ac2:
mov edx, dword [ebp - 0x4c]
mov esi, dword [ebp - 0x4c]
mov esi, dword [esi + 0x4c0]
mov eax, dword [edx + 0x4d0]
mov ecx, dword [edx + 0x4e0]
mov edx, dword [edx + 0x4f0]
or edx, ecx
mov dword [ebp - 0x58], esi
or eax, dword [ebp - 0x58]
or eax, edx
test al, 0x10
je short loc_fffa1aa3  ; je 0xfffa1aa3
dec ebx
jne short loc_fffa1ab1  ; jne 0xfffa1ab1
jmp short loc_fffa1aa3  ; jmp 0xfffa1aa3

loc_fffa1af3:
mov ebx, dword [ebp - 0x50]
mov al, byte [ebx + 0x65]
test al, 0x40
je short loc_fffa1b08  ; je 0xfffa1b08
mov dl, al
and edx, 0x43
cmp dl, 0x42
sete cl

loc_fffa1b08:
and eax, 0x43
cmp al, 0x41
jne short loc_fffa1b7d  ; jne 0xfffa1b7d
mov ax, word [0xf00f80a2]
test al, 0x20
jne short loc_fffa1b35  ; jne 0xfffa1b35

loc_fffa1b19:
mov cl, 2
jmp short loc_fffa1b7d  ; jmp 0xfffa1b7d

loc_fffa1b1d:
mov ecx, dword [ebp - 0x4c]
add ecx, dword [ebp + edx*4 - 0x28]
mov eax, dword [ecx]
and eax, 0x7ffffffd
or eax, 0x80000000
mov dword [ecx], eax
inc edx
jmp short loc_fffa1b37  ; jmp 0xfffa1b37

loc_fffa1b35:
xor edx, edx

loc_fffa1b37:
cmp edx, edi
jne short loc_fffa1b1d  ; jne 0xfffa1b1d
mov ebx, 0xb
jmp short loc_fffa1b4c  ; jmp 0xfffa1b4c

loc_fffa1b42:
mov eax, 0x2710
call fcn_fffa0cba  ; call 0xfffa0cba

loc_fffa1b4c:
mov edx, dword [ebp - 0x4c]
mov esi, dword [ebp - 0x4c]
mov esi, dword [esi + 0x4c0]
mov eax, dword [edx + 0x4d0]
mov ecx, dword [edx + 0x4e0]
mov edx, dword [edx + 0x4f0]
or edx, ecx
mov dword [ebp - 0x58], esi
or eax, dword [ebp - 0x58]
or eax, edx
test al, 0x10
je short loc_fffa1b19  ; je 0xfffa1b19
dec ebx
jne short loc_fffa1b42  ; jne 0xfffa1b42
jmp short loc_fffa1b19  ; jmp 0xfffa1b19

loc_fffa1b7d:
test edi, edi
setne al
cmp cl, 1
sete dl
test dl, al
je loc_fffa1cda  ; je 0xfffa1cda
mov edx, dword [0xf00a00d0]
test edx, edx
jne short loc_fffa1ba8  ; jne 0xfffa1ba8
mov edx, dword [0xf00a00d8]
test edx, edx
je loc_fffa1cda  ; je 0xfffa1cda

loc_fffa1ba8:
xor eax, eax

loc_fffa1baa:
mov ecx, dword [ebp - 0x4c]
add ecx, dword [ebp + eax*4 - 0x38]
mov edx, dword [ecx]
and dl, 1
je short loc_fffa1bc2  ; je 0xfffa1bc2
mov edx, dword [ecx]
and edx, 0xffffffed
or edx, 0x10
mov dword [ecx], edx

loc_fffa1bc2:
inc eax
cmp eax, edi
jne short loc_fffa1baa  ; jne 0xfffa1baa
mov ebx, 0xb
jmp short loc_fffa1bd8  ; jmp 0xfffa1bd8

loc_fffa1bce:
mov eax, 0x2710
call fcn_fffa0cba  ; call 0xfffa0cba

loc_fffa1bd8:
mov eax, dword [ebp - 0x4c]
mov edx, dword [ebp - 0x4c]
mov eax, dword [eax + 0x480]
mov dword [ebp - 0x50], eax
mov eax, dword [edx + 0x490]
mov ecx, dword [edx + 0x4a0]
mov edx, dword [edx + 0x4b0]
or eax, dword [ebp - 0x50]
or edx, ecx
or eax, edx
test al, 0x10
je short loc_fffa1c07  ; je 0xfffa1c07
dec ebx
jne short loc_fffa1bce  ; jne 0xfffa1bce

loc_fffa1c07:
mov eax, dword [0xf00a00d0]
and eax, 0xfffffff0
mov dword [0xf00a00d0], eax
xor edx, edx

loc_fffa1c16:
mov ecx, dword [ebp - 0x4c]
add ecx, dword [ebp + edx*4 - 0x38]
mov eax, dword [ecx]
and eax, 0xff01fffd
or eax, 0xfe0000
mov dword [ecx], eax
inc edx
cmp edx, edi
jne short loc_fffa1c16  ; jne 0xfffa1c16
xor edx, edx

loc_fffa1c32:
mov ecx, dword [ebp - 0x4c]
add ecx, dword [ebp + edx*4 - 0x28]
mov eax, dword [ecx]
and eax, 0x7ffffffd
or eax, 0x80000000
mov dword [ecx], eax
inc edx
cmp edx, edi
jne short loc_fffa1c32  ; jne 0xfffa1c32
mov eax, dword [0xf00a00d8]
and eax, 0xfffffff0
mov dword [0xf00a00d8], eax
mov ebx, 0xb
jmp short loc_fffa1c6a  ; jmp 0xfffa1c6a

loc_fffa1c60:
mov eax, 0x2710
call fcn_fffa0cba  ; call 0xfffa0cba

loc_fffa1c6a:
mov eax, dword [ebp - 0x4c]
mov edx, dword [ebp - 0x4c]
mov eax, dword [eax + 0x4c0]
mov dword [ebp - 0x50], eax
mov eax, dword [edx + 0x4d0]
mov ecx, dword [edx + 0x4e0]
mov edx, dword [edx + 0x4f0]
or eax, dword [ebp - 0x50]
or edx, ecx
or eax, edx
test al, 0x10
je short loc_fffa1c99  ; je 0xfffa1c99
dec ebx
jne short loc_fffa1c60  ; jne 0xfffa1c60

loc_fffa1c99:
xor eax, eax

loc_fffa1c9b:
mov ecx, dword [ebp - 0x4c]
add ecx, dword [ebp + eax*4 - 0x28]
mov edx, dword [ecx]
and edx, 0xff01fffd
or edx, 0xfe0000
mov dword [ecx], edx
inc eax
cmp eax, edi
jne short loc_fffa1c9b  ; jne 0xfffa1c9b
mov ebx, dword [ebp - 0x4c]
mov eax, dword [ebx + 0x80]
or eax, 1
mov dword [ebx + 0x80], eax
mov eax, dword [ebx + 0x80]
and eax, 0xfffffffe
mov dword [ebx + 0x80], eax
jmp short loc_fffa1d29  ; jmp 0xfffa1d29

loc_fffa1cda:
cmp cl, 2
sete dl
test dl, al
je short loc_fffa1d2b  ; je 0xfffa1d2b
mov ebx, dword [ebp - 0x50]
mov ecx, dword [0xf00a00dc]
mov edx, dword [0xf00a00d8]
and edx, 0xfffffff0
mov al, byte [ebx + 0x65]
shr al, 2
and eax, 0xf
and eax, ecx
or eax, edx
mov dword [0xf00a00d8], eax
mov al, byte [ebx + 0x65]
mov ecx, dword [0xf00a00d4]
shr al, 2
mov edx, dword [0xf00a00d0]
and eax, 0xf
and edx, 0xfffffff0
and eax, ecx
or eax, edx
mov dword [0xf00a00d0], eax

loc_fffa1d29:
jmp short loc_fffa1d8e  ; jmp 0xfffa1d8e

loc_fffa1d2b:
test al, al
je short loc_fffa1d8e  ; je 0xfffa1d8e
mov ax, word [0xf00f80a2]
test al, 0x20
je short loc_fffa1d8e  ; je 0xfffa1d8e
xor edx, edx

loc_fffa1d3b:
mov ecx, dword [ebp - 0x4c]
add ecx, dword [ebp + edx*4 - 0x28]
mov eax, dword [ecx]
and eax, 0x7ffffffd
or eax, 0x80000000
mov dword [ecx], eax
inc edx
cmp edx, edi
jne short loc_fffa1d3b  ; jne 0xfffa1d3b
mov ebx, 0xb
jmp short loc_fffa1d66  ; jmp 0xfffa1d66

loc_fffa1d5c:
mov eax, 0x2710
call fcn_fffa0cba  ; call 0xfffa0cba

loc_fffa1d66:
mov edi, dword [ebp - 0x4c]
mov esi, dword [edi + 0x4c0]
mov eax, dword [edi + 0x4d0]
mov ecx, dword [edi + 0x4e0]
mov edx, dword [edi + 0x4f0]
or eax, esi
or edx, ecx
or eax, edx
test al, 0x10
je short loc_fffa1d8e  ; je 0xfffa1d8e
dec ebx
jne short loc_fffa1d5c  ; jne 0xfffa1d5c

loc_fffa1d8e:
mov ax, word [0xf00a0004]
and eax, 0xfffffff9
mov word [0xf00a0004], ax
mov dword [0xf00a0010], 0
jmp short loc_fffa1db0  ; jmp 0xfffa1db0

loc_fffa1da9:
mov dword [ebp - 0x64], 0x80000002

loc_fffa1db0:
mov ebx, dword [ebp - 0x54]
mov esi, dword [ebp - 0x5c]
mov dword [ebx + 0x3418], esi
mov eax, dword [ebx + 0x3418]
jmp short loc_fffa1ddb  ; jmp 0xfffa1ddb

loc_fffa1dc4:
mov ebx, dword [edx]
or ebx, 0x40000000
mov dword [edx], ebx
mov ebx, dword [eax]
or ebx, 0x40000000
jmp near loc_fffa15a8  ; jmp 0xfffa15a8

loc_fffa1ddb:
mov eax, dword [ebp - 0x64]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa1de6:  ; not directly referenced
push ebp
mov ebp, esp
mov eax, dword [ebp + 0x10]
test eax, eax
je short loc_fffa1df5  ; je 0xfffa1df5
call fcn_fffa0cba  ; call 0xfffa0cba

loc_fffa1df5:  ; not directly referenced
xor eax, eax
pop ebp
ret

fcn_fffa1df9:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
lea ecx, [ebp - 0x1c]
mov esi, edx
push ebx
lea esp, [esp - 0x24]
mov eax, dword [0xfeffc010]
mov edx, dword [eax]
push ecx
push eax
call dword [edx + 0x30]  ; ucall
add esp, 0x10
jmp short loc_fffa1e44  ; jmp 0xfffa1e44

loc_fffa1e1b:
cmp si, 0xfffe
je short loc_fffa1e27  ; je 0xfffa1e27
cmp word [ecx + 4], si
jne short loc_fffa1e3f  ; jne 0xfffa1e3f

loc_fffa1e27:
lea eax, [ecx + 0xc]
xor ebx, ebx

loc_fffa1e2c:
mov dl, byte [edi + ebx]
cmp byte [eax + ebx], dl
jne short loc_fffa1e3f  ; jne 0xfffa1e3f
inc ebx
cmp ebx, 0x10
jne short loc_fffa1e2c  ; jne 0xfffa1e2c
lea eax, [ecx + 4]
jmp short loc_fffa1e4d  ; jmp 0xfffa1e4d

loc_fffa1e3f:
mov eax, dword [ecx]
mov dword [ebp - 0x1c], eax

loc_fffa1e44:
mov ecx, dword [ebp - 0x1c]
test ecx, ecx
jne short loc_fffa1e1b  ; jne 0xfffa1e1b
xor eax, eax

loc_fffa1e4d:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa1e55:
push ebp
mov ebp, esp
push edi
push esi
lea edi, [ebp + 0xc]
push ebx
xor ebx, ebx
lea esp, [esp - 0x3c]
mov dword [ebp - 0x1c], edi
jmp near loc_fffa2217  ; jmp 0xfffa2217

loc_fffa1e6c:
cmp al, 0x25
je short loc_fffa1e7e  ; je 0xfffa1e7e
sub esp, 0xc
push eax
jmp near loc_fffa2169  ; jmp 0xfffa2169

loc_fffa1e79:
mov dword [ebp + 8], eax
jmp short loc_fffa1e85  ; jmp 0xfffa1e85

loc_fffa1e7e:
mov dword [ebp - 0x2c], 0

loc_fffa1e85:
mov esi, dword [ebp + 8]
mov eax, dword [ebp + 8]
inc eax
mov dl, byte [esi + 1]
cmp dl, 0x2b
je short loc_fffa1eb4  ; je 0xfffa1eb4
jg short loc_fffa1ea2  ; jg 0xfffa1ea2
cmp dl, 0x20
je short loc_fffa1eba  ; je 0xfffa1eba
cmp dl, 0x23
jne short loc_fffa1ecc  ; jne 0xfffa1ecc
jmp short loc_fffa1ec0  ; jmp 0xfffa1ec0

loc_fffa1ea2:
cmp dl, 0x2d
je short loc_fffa1eae  ; je 0xfffa1eae
cmp dl, 0x30
jne short loc_fffa1ecc  ; jne 0xfffa1ecc
jmp short loc_fffa1ec6  ; jmp 0xfffa1ec6

loc_fffa1eae:
or dword [ebp - 0x2c], 0x10
jmp short loc_fffa1e79  ; jmp 0xfffa1e79

loc_fffa1eb4:
or dword [ebp - 0x2c], 4
jmp short loc_fffa1e79  ; jmp 0xfffa1e79

loc_fffa1eba:
or dword [ebp - 0x2c], 8
jmp short loc_fffa1e79  ; jmp 0xfffa1e79

loc_fffa1ec0:
or dword [ebp - 0x2c], 0x20
jmp short loc_fffa1e79  ; jmp 0xfffa1e79

loc_fffa1ec6:
or dword [ebp - 0x2c], 1
jmp short loc_fffa1e79  ; jmp 0xfffa1e79

loc_fffa1ecc:
lea ecx, [edx - 0x30]
cmp cl, 9
ja short loc_fffa1ef8  ; ja 0xfffa1ef8
jmp short loc_fffa1ee4  ; jmp 0xfffa1ee4

loc_fffa1ed6:
imul ecx, dword [ebp - 0x30], 0xa
inc eax
lea edx, [ecx + edx - 0x30]
mov dword [ebp - 0x30], edx
jmp short loc_fffa1eeb  ; jmp 0xfffa1eeb

loc_fffa1ee4:
mov dword [ebp - 0x30], 0

loc_fffa1eeb:
movsx edx, byte [eax]
lea ecx, [edx - 0x30]
cmp cl, 9
jbe short loc_fffa1ed6  ; jbe 0xfffa1ed6
jmp short loc_fffa1f1f  ; jmp 0xfffa1f1f

loc_fffa1ef8:
cmp dl, 0x2a
mov dword [ebp - 0x30], 0xffffffff
jne short loc_fffa1f1f  ; jne 0xfffa1f1f
mov edx, dword [edi]
mov eax, dword [ebp + 8]
add eax, 2
add edi, 4
test edx, edx
mov dword [ebp - 0x30], edx
jns short loc_fffa1f1f  ; jns 0xfffa1f1f
neg edx
or dword [ebp - 0x2c], 0x10
mov dword [ebp - 0x30], edx

loc_fffa1f1f:
cmp byte [eax], 0x2e
jne short loc_fffa1f6f  ; jne 0xfffa1f6f
mov dl, byte [eax + 1]
lea esi, [eax + 1]
mov dword [ebp + 8], esi
lea ecx, [edx - 0x30]
cmp cl, 9
ja short loc_fffa1f55  ; ja 0xfffa1f55
jmp short loc_fffa1f43  ; jmp 0xfffa1f43

loc_fffa1f37:
imul edx, ecx, 0xa
inc dword [ebp + 8]
lea ecx, [edx + eax - 0x30]
jmp short loc_fffa1f45  ; jmp 0xfffa1f45

loc_fffa1f43:
xor ecx, ecx

loc_fffa1f45:
mov esi, dword [ebp + 8]
movsx eax, byte [esi]
lea edx, [eax - 0x30]
cmp dl, 9
jbe short loc_fffa1f37  ; jbe 0xfffa1f37
jmp short loc_fffa1f79  ; jmp 0xfffa1f79

loc_fffa1f55:
xor ecx, ecx
cmp dl, 0x2a
jne short loc_fffa1f79  ; jne 0xfffa1f79
mov ecx, dword [edi]
add eax, 2
test ecx, ecx
mov dword [ebp + 8], eax
lea eax, [edi + 4]
mov edi, eax
js short loc_fffa1f77  ; js 0xfffa1f77
jmp short loc_fffa1f79  ; jmp 0xfffa1f79

loc_fffa1f6f:
mov dword [ebp + 8], eax
or ecx, 0xffffffff
jmp short loc_fffa1f79  ; jmp 0xfffa1f79

loc_fffa1f77:
xor ecx, ecx

loc_fffa1f79:
mov esi, dword [ebp + 8]
mov al, byte [esi]
mov dl, al
and edx, 0xfffffffb
cmp dl, 0x68
je short loc_fffa1f8f  ; je 0xfffa1f8f
or edx, 0xffffffff
cmp al, 0x4c
jne short loc_fffa1faa  ; jne 0xfffa1faa

loc_fffa1f8f:
mov esi, dword [ebp + 8]
cmp byte [esi + 1], 0x6c
je short loc_fffa1fa1  ; je 0xfffa1fa1
movsx edx, al
inc esi
mov dword [ebp + 8], esi
jmp short loc_fffa1faa  ; jmp 0xfffa1faa

loc_fffa1fa1:
add dword [ebp + 8], 2
mov edx, 0x4c

loc_fffa1faa:
mov esi, dword [ebp + 8]
mov al, byte [esi]
cmp al, 0x6e
je loc_fffa2143  ; je 0xfffa2143
jg short loc_fffa1fe9  ; jg 0xfffa1fe9
cmp al, 0x63
je short loc_fffa201d  ; je 0xfffa201d
jg short loc_fffa1fd4  ; jg 0xfffa1fd4
cmp al, 0x25
je loc_fffa2164  ; je 0xfffa2164
cmp al, 0x58
jne loc_fffa2186  ; jne 0xfffa2186
jmp near loc_fffa217a  ; jmp 0xfffa217a

loc_fffa1fd4:
cmp al, 0x64
je loc_fffa2180  ; je 0xfffa2180
cmp al, 0x69
jne loc_fffa2186  ; jne 0xfffa2186
jmp near loc_fffa2180  ; jmp 0xfffa2180

loc_fffa1fe9:
cmp al, 0x73
je loc_fffa2073  ; je 0xfffa2073
jg short loc_fffa2008  ; jg 0xfffa2008
cmp al, 0x6f
je loc_fffa2171  ; je 0xfffa2171
cmp al, 0x70
jne loc_fffa2186  ; jne 0xfffa2186
jmp near loc_fffa2119  ; jmp 0xfffa2119

loc_fffa2008:
cmp al, 0x75
je loc_fffa21b4  ; je 0xfffa21b4
cmp al, 0x78
jne loc_fffa2186  ; jne 0xfffa2186
jmp near loc_fffa21bd  ; jmp 0xfffa21bd

loc_fffa201d:
test byte [ebp - 0x2c], 0x10
mov esi, dword [ebp - 0x30]
jne short loc_fffa2044  ; jne 0xfffa2044
add ebx, esi
mov dword [ebp - 0x2c], ebx
jmp short loc_fffa203a  ; jmp 0xfffa203a

loc_fffa202d:
sub esp, 0xc
push 0x20
call fcn_fffa0406  ; call 0xfffa0406
add esp, 0x10

loc_fffa203a:
mov ebx, dword [ebp - 0x2c]
sub ebx, esi
dec esi
test esi, esi
jg short loc_fffa202d  ; jg 0xfffa202d

loc_fffa2044:
mov edx, dword [edi]
sub esp, 0xc
and edx, 0xff
lea eax, [edi + 4]
push edx
mov dword [ebp - 0x2c], eax
jmp short loc_fffa205d  ; jmp 0xfffa205d

loc_fffa2058:
sub esp, 0xc
push 0x20

loc_fffa205d:
dec esi
inc ebx
call fcn_fffa0406  ; call 0xfffa0406
add esp, 0x10
test esi, esi
jg short loc_fffa2058  ; jg 0xfffa2058
mov edi, dword [ebp - 0x2c]
jmp near loc_fffa2214  ; jmp 0xfffa2214

loc_fffa2073:
mov eax, dword [edi]
lea edx, [edi + 4]
test eax, eax
mov dword [ebp - 0x34], edx
mov edx, ref_fffcf5e4  ; mov edx, 0xfffcf5e4
cmove eax, edx
xor esi, esi
test ecx, ecx
je short loc_fffa209b  ; je 0xfffa209b
cmp byte [eax], 0
jmp short loc_fffa2094  ; jmp 0xfffa2094

loc_fffa2090:
cmp byte [eax + esi], 0

loc_fffa2094:
je short loc_fffa209b  ; je 0xfffa209b
inc esi
cmp esi, ecx
jne short loc_fffa2090  ; jne 0xfffa2090

loc_fffa209b:
test byte [ebp - 0x2c], 0x10
mov edi, dword [ebp - 0x30]
jne short loc_fffa20c9  ; jne 0xfffa20c9
add ebx, edi
jmp short loc_fffa20bb  ; jmp 0xfffa20bb

loc_fffa20a8:
sub esp, 0xc
mov dword [ebp - 0x38], eax
push 0x20
call fcn_fffa0406  ; call 0xfffa0406
add esp, 0x10
mov eax, dword [ebp - 0x38]

loc_fffa20bb:
mov edx, ebx
sub edx, edi
dec edi
lea ecx, [edi + 1]
cmp esi, ecx
jl short loc_fffa20a8  ; jl 0xfffa20a8
mov ebx, edx

loc_fffa20c9:
xor edx, edx
jmp short loc_fffa20ea  ; jmp 0xfffa20ea

loc_fffa20cd:
movzx ecx, byte [eax + edx]
sub esp, 0xc
push ecx
mov dword [ebp - 0x38], eax
mov dword [ebp - 0x3c], edx
call fcn_fffa0406  ; call 0xfffa0406
mov edx, dword [ebp - 0x3c]
add esp, 0x10
inc edx
mov eax, dword [ebp - 0x38]

loc_fffa20ea:
cmp edx, esi
jl short loc_fffa20cd  ; jl 0xfffa20cd
xor eax, eax
test esi, esi
cmovns eax, esi
add ebx, eax
add edi, ebx
jmp short loc_fffa2109  ; jmp 0xfffa2109

loc_fffa20fb:
sub esp, 0xc
inc ebx
push 0x20
call fcn_fffa0406  ; call 0xfffa0406
add esp, 0x10

loc_fffa2109:
mov eax, edi
sub eax, ebx
cmp esi, eax
jl short loc_fffa20fb  ; jl 0xfffa20fb
mov edi, dword [ebp - 0x34]
jmp near loc_fffa2214  ; jmp 0xfffa2214

loc_fffa2119:
cmp dword [ebp - 0x30], 0xffffffff
jne short loc_fffa212a  ; jne 0xfffa212a
or dword [ebp - 0x2c], 1
mov dword [ebp - 0x30], 8

loc_fffa212a:
push eax
mov eax, dword [edi]
lea esi, [edi + 4]
push dword [ebp - 0x2c]
xor edx, edx
push ecx
mov ecx, 0x10
push dword [ebp - 0x30]
jmp near loc_fffa2208  ; jmp 0xfffa2208

loc_fffa2143:
cmp edx, 0x4c
lea eax, [edi + 4]
jne short loc_fffa2159  ; jne 0xfffa2159
mov edx, dword [edi]
mov ecx, ebx
sar ecx, 0x1f
mov dword [edx], ebx
mov dword [edx + 4], ecx
jmp short loc_fffa215d  ; jmp 0xfffa215d

loc_fffa2159:
mov edx, dword [edi]
mov dword [edx], ebx

loc_fffa215d:
mov edi, eax
jmp near loc_fffa2214  ; jmp 0xfffa2214

loc_fffa2164:
sub esp, 0xc
push 0x25

loc_fffa2169:
call fcn_fffa0406  ; call 0xfffa0406
inc ebx
jmp short loc_fffa21a9  ; jmp 0xfffa21a9

loc_fffa2171:
mov dword [ebp - 0x34], 8
jmp short loc_fffa21c4  ; jmp 0xfffa21c4

loc_fffa217a:
or dword [ebp - 0x2c], 0x40
jmp short loc_fffa21bd  ; jmp 0xfffa21bd

loc_fffa2180:
or dword [ebp - 0x2c], 2
jmp short loc_fffa21b4  ; jmp 0xfffa21b4

loc_fffa2186:
sub esp, 0xc
push 0x25
call fcn_fffa0406  ; call 0xfffa0406
mov esi, dword [ebp + 8]
add esp, 0x10
movzx eax, byte [esi]
test al, al
je short loc_fffa21ae  ; je 0xfffa21ae
sub esp, 0xc
add ebx, 2
push eax
call fcn_fffa0406  ; call 0xfffa0406

loc_fffa21a9:
add esp, 0x10
jmp short loc_fffa2214  ; jmp 0xfffa2214

loc_fffa21ae:
inc ebx
dec dword [ebp + 8]
jmp short loc_fffa2214  ; jmp 0xfffa2214

loc_fffa21b4:
mov dword [ebp - 0x34], 0xa
jmp short loc_fffa21c4  ; jmp 0xfffa21c4

loc_fffa21bd:
mov dword [ebp - 0x34], 0x10

loc_fffa21c4:
cmp edx, 0x4c
jne short loc_fffa21d3  ; jne 0xfffa21d3
lea esi, [edi + 8]
mov eax, dword [edi]
mov edx, dword [edi + 4]
jmp short loc_fffa21fd  ; jmp 0xfffa21fd

loc_fffa21d3:
cmp edx, 0x6c
mov eax, dword [edi]
lea esi, [edi + 4]
jne short loc_fffa21df  ; jne 0xfffa21df
jmp short loc_fffa21fb  ; jmp 0xfffa21fb

loc_fffa21df:
cmp edx, 0x68
jne short loc_fffa21f2  ; jne 0xfffa21f2
test byte [ebp - 0x2c], 2
jne short loc_fffa21ef  ; jne 0xfffa21ef
movzx eax, ax
jmp short loc_fffa21fb  ; jmp 0xfffa21fb

loc_fffa21ef:
cwde
jmp short loc_fffa21f8  ; jmp 0xfffa21f8

loc_fffa21f2:
test byte [ebp - 0x2c], 2
je short loc_fffa21fb  ; je 0xfffa21fb

loc_fffa21f8:
cdq
jmp short loc_fffa21fd  ; jmp 0xfffa21fd

loc_fffa21fb:
xor edx, edx

loc_fffa21fd:
push edi
push dword [ebp - 0x2c]
push ecx
push dword [ebp - 0x30]
mov ecx, dword [ebp - 0x34]

loc_fffa2208:
call fcn_fffc7434  ; call 0xfffc7434
add ebx, eax
add esp, 0x10
mov edi, esi

loc_fffa2214:
inc dword [ebp + 8]

loc_fffa2217:
mov esi, dword [ebp + 8]
movzx eax, byte [esi]
test al, al
jne loc_fffa1e6c  ; jne 0xfffa1e6c
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa222f:  ; not directly referenced
push ebp
mov ebp, esp
lea esp, [esp - 8]
movzx edx, byte [eax + 0xf]
push edx
movzx edx, byte [eax + 0xe]
push edx
movzx edx, byte [eax + 0xd]
push edx
movzx edx, byte [eax + 0xc]
push edx
movzx edx, byte [eax + 0xb]
push edx
movzx edx, byte [eax + 0xa]
push edx
movzx edx, byte [eax + 9]
push edx
movzx edx, byte [eax + 8]
push edx
movzx edx, word [eax + 6]
push edx
movzx edx, word [eax + 4]
push edx
push dword [eax]
push ref_fffcf5eb  ; push 0xfffcf5eb
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x30
leave
ret

fcn_fffa2279:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x1c]
mov edx, dword [ebp + 8]
mov edx, dword [edx]
cmp dword [edx - 4], 0xfeadb00b
jne short loc_fffa22a4  ; jne 0xfffa22a4
lea eax, [edx - 4]
mov edx, dword [edx + 0x15c]
mov dword [ebp - 0x20], eax
mov dword [ebp - 0x1c], edx
xor ecx, ecx
jmp short loc_fffa22d3  ; jmp 0xfffa22d3

loc_fffa22a4:  ; not directly referenced
jmp short loc_fffa22a4  ; jmp 0xfffa22a4

loc_fffa22a6:  ; not directly referenced
imul edx, ecx, 0xc
mov esi, dword [ebp - 0x20]
lea ebx, [esi + edx + 0x70]
xor edx, edx
mov edi, dword [ebx + 4]

loc_fffa22b5:  ; not directly referenced
mov esi, dword [ebp + 0xc]
mov al, byte [edi + edx]
cmp byte [esi + edx], al
jne short loc_fffa22d2  ; jne 0xfffa22d2
inc edx
cmp edx, 0x10
jne short loc_fffa22b5  ; jne 0xfffa22b5
mov eax, dword [ebp + 0x18]
mov edx, dword [ebx + 8]
mov dword [eax], edx
xor eax, eax
jmp short loc_fffa22e5  ; jmp 0xfffa22e5

loc_fffa22d2:  ; not directly referenced
inc ecx

loc_fffa22d3:  ; not directly referenced
cmp ecx, dword [ebp - 0x1c]
jl short loc_fffa22a6  ; jl 0xfffa22a6
mov eax, dword [ebp + 0xc]
call fcn_fffa222f  ; call 0xfffa222f
mov eax, 0x8000000e

loc_fffa22e5:  ; not directly referenced
lea esp, [esp + 0x1c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa22ee:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x1c]
mov edx, dword [ebp + 8]
mov ebx, dword [edx]
cmp dword [ebx - 4], 0xfeadb00b
jne short loc_fffa230b  ; jne 0xfffa230b
sub ebx, 4
jmp short loc_fffa230d  ; jmp 0xfffa230d

loc_fffa230b:  ; not directly referenced
jmp short loc_fffa230b  ; jmp 0xfffa230b

loc_fffa230d:  ; not directly referenced
mov edi, dword [ebx + 0x160]
xor esi, esi
jmp short loc_fffa235c  ; jmp 0xfffa235c

loc_fffa2317:  ; not directly referenced
imul eax, esi, 0xc
mov ecx, dword [ebp + 0xc]
mov ecx, dword [ecx + 4]
mov dword [ebp - 0x1c], ecx
mov ecx, dword [ebx + eax + 0x74]
xor eax, eax

loc_fffa2329:  ; not directly referenced
mov edx, dword [ebp - 0x1c]
mov dl, byte [edx + eax]
cmp byte [ecx + eax], dl
jne short loc_fffa235b  ; jne 0xfffa235b
inc eax
cmp eax, 0x10
jne short loc_fffa2329  ; jne 0xfffa2329
push edi
push edi
push ref_fffc9990  ; push 0xfffc9990
push ref_fffcf61f  ; push 0xfffcf61f
call fcn_fffa1e55  ; call 0xfffa1e55
mov ecx, dword [ebp + 0xc]
mov eax, dword [ecx + 4]
call fcn_fffa222f  ; call 0xfffa222f
add esp, 0x10
jmp short loc_fffa2360  ; jmp 0xfffa2360

loc_fffa235b:  ; not directly referenced
inc esi

loc_fffa235c:  ; not directly referenced
cmp esi, edi
jne short loc_fffa2317  ; jne 0xfffa2317

loc_fffa2360:  ; not directly referenced
cmp esi, dword [ebx + 0x160]
jne short loc_fffa2391  ; jne 0xfffa2391
cmp esi, 0x13
jbe short loc_fffa2388  ; jbe 0xfffa2388
push ebx
push ebx
push ref_fffc9990  ; push 0xfffc9990
push ref_fffcf633  ; push 0xfffcf633
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x10
mov eax, 0x80000009
jmp short loc_fffa2400  ; jmp 0xfffa2400

loc_fffa2388:  ; not directly referenced
lea eax, [esi + 1]
mov dword [ebx + 0x160], eax

loc_fffa2391:  ; not directly referenced
imul esi, esi, 0xc
mov ecx, 3
lea eax, [ebx + esi + 0x70]
mov esi, dword [ebp + 0xc]
mov edi, eax
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
xor esi, esi
jmp short loc_fffa23e3  ; jmp 0xfffa23e3

loc_fffa23a8:  ; not directly referenced
imul eax, esi, 0xc
lea edx, [ebx + eax + 0x164]
mov eax, dword [ebp + 0xc]
mov edi, dword [edx + 4]
mov eax, dword [eax + 4]
mov dword [ebp - 0x1c], eax
xor eax, eax

loc_fffa23c0:  ; not directly referenced
mov ecx, dword [ebp - 0x1c]
mov cl, byte [ecx + eax]
cmp byte [edi + eax], cl
jne short loc_fffa23e2  ; jne 0xfffa23e2
inc eax
cmp eax, 0x10
jne short loc_fffa23c0  ; jne 0xfffa23c0
mov eax, dword [ebp + 0xc]
push ecx
push dword [eax + 8]
push edx
push dword [ebp + 8]
call dword [edx + 8]  ; ucall
add esp, 0x10

loc_fffa23e2:  ; not directly referenced
inc esi

loc_fffa23e3:  ; not directly referenced
cmp esi, dword [ebx + 0x254]
jb short loc_fffa23a8  ; jb 0xfffa23a8
mov edx, dword [ebp + 0xc]
mov eax, dword [edx]
add edx, 0xc
test eax, eax
mov dword [ebp + 0xc], edx
jns loc_fffa230d  ; jns 0xfffa230d
xor eax, eax

loc_fffa2400:  ; not directly referenced
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa2408:
push ebp
mov ebp, esp
push esi
mov esi, ecx
push ebx
xor ebx, ebx
jmp short loc_fffa241a  ; jmp 0xfffa241a

loc_fffa2413:
mov cl, byte [edx + ebx]
mov byte [eax + ebx], cl
inc ebx

loc_fffa241a:
cmp ebx, esi
jl short loc_fffa2413  ; jl 0xfffa2413
pop ebx
pop esi
pop ebp
ret

fcn_fffa2422:
push ebp
add edx, 0x18
movzx edx, dx
mov ebp, esp
push esi
mov esi, eax
push ebx
lea ebx, [ebp - 0xc]
lea esp, [esp - 0x10]
mov ecx, dword [0xfeffc010]
mov eax, dword [ecx]
push ebx
push edx
push 4
push ecx
call dword [eax + 0x34]  ; ucall
mov ebx, dword [ebp - 0xc]
mov edx, esi
mov ecx, 0x10
lea eax, [ebx + 8]
call fcn_fffa2408  ; call 0xfffa2408
lea esp, [ebp - 8]
lea eax, [ebx + 0x18]
pop ebx
pop esi
pop ebp
ret

fcn_fffa2462:  ; not directly referenced
push ebp
mov ebp, esp
push esi
push ebx
lea ecx, [ebp - 0xc]
lea esp, [esp - 0x1c]
mov eax, dword [ebp + 8]
mov edx, dword [eax]
push ecx
lea ecx, [ebp - 0x10]
push ecx
push 0
push ref_fffcfc84  ; push 0xfffcfc84
push eax
call dword [edx + 0x20]  ; ucall
mov esi, dword [ebp - 0x10]
add esp, 0x20
mov eax, ref_fffcfa5c  ; mov eax, 0xfffcfa5c
movzx ebx, byte [esi + 0x28]
imul ebx, ebx, 0x11
mov edx, ebx
call fcn_fffa2422  ; call 0xfffa2422
lea edx, [esi + 0x29]
mov ecx, ebx
call fcn_fffa2408  ; call 0xfffa2408
lea esp, [ebp - 8]
xor eax, eax
pop ebx
pop esi
pop ebp
ret

fcn_fffa24af:  ; not directly referenced
push ebp
mov ebp, esp
mov ecx, dword [ebp + 0x10]
mov edx, dword [ebp + 0xc]
mov eax, dword [ebp + 8]
pop ebp
jmp near fcn_fffa2408  ; jmp 0xfffa2408

fcn_fffa24c1:
push ebp
test edx, edx
mov ebp, esp
jne short loc_fffa24cd  ; jne 0xfffa24cd
jmp short loc_fffa24d3  ; jmp 0xfffa24d3

loc_fffa24ca:
mov byte [eax + edx], cl

loc_fffa24cd:
dec edx
cmp edx, 0xffffffff
jne short loc_fffa24ca  ; jne 0xfffa24ca

loc_fffa24d3:
pop ebp
ret

fcn_fffa24d5:
push ebp
mov ebp, esp
push ebx
lea esp, [esp - 0x14]
mov edx, dword [0xfeffc004]
test edx, edx
mov dword [ebp - 0xc], 0
jne short loc_fffa24fa  ; jne 0xfffa24fa
mov dword [0xfeffc008], 0xfeff7000
jmp short loc_fffa2520  ; jmp 0xfffa2520

loc_fffa24fa:
mov ecx, dword [0xfeffc008]
cmp dword [ecx + edx], 0x900ddea1
je short loc_fffa2520  ; je 0xfffa2520
push eax
push 0x2e
push ref_fffc997c  ; push 0xfffc997c
push ref_fffcf64e  ; push 0xfffcf64e
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x10

loc_fffa251e:
jmp short loc_fffa251e  ; jmp 0xfffa251e

loc_fffa2520:
lea ecx, [eax + edx]
cmp ecx, 0x7530
ja short loc_fffa2578  ; ja 0xfffa2578
mov ebx, dword [0xfeffc008]
mov dword [0xfeffc004], ecx
lea eax, [ebx + edx]
lea edx, [ebp - 0xc]
sub edx, eax
mov dword [ebp - 0xc], eax
cmp edx, 0x3e7
jmp short loc_fffa2561  ; jmp 0xfffa2561

loc_fffa254a:
db 0x52
db 0x6a
dd 0x997c683a
dd 0x6e68fffc
dd 0xe8fffcf6
dd 0xfffff8f9
dd 0xeb10c483
db 0xfe

loc_fffa2561:
lea eax, [ecx + 3]
and eax, 0xfffffffc
mov dword [0xfeffc004], eax
mov dword [ebx + eax], 0x900ddea1
mov eax, dword [ebp - 0xc]
jmp short loc_fffa258f  ; jmp 0xfffa258f

loc_fffa2578:
push eax
push 0x46
push ref_fffc997c  ; push 0xfffc997c
push ref_fffcf690  ; push 0xfffcf690
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x10

loc_fffa258d:
jmp short loc_fffa258d  ; jmp 0xfffa258d

loc_fffa258f:
mov ebx, dword [ebp - 4]
leave
ret

fcn_fffa2594:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x1c]
mov ecx, dword [ebp + 8]
mov edi, dword [ebp + 0x10]
mov edx, dword [ebp + 0xc]
movzx eax, di
mov esi, dword [ebp + 0x14]
mov ebx, dword [ecx]
cmp dword [ebx - 4], 0xfeadb00b
jne short loc_fffa25cc  ; jne 0xfffa25cc
add eax, 4
mov dword [ebp - 0x1c], edx
call fcn_fffa24d5  ; call 0xfffa24d5
test eax, eax
mov edx, dword [ebp - 0x1c]
jne short loc_fffa25ce  ; jne 0xfffa25ce
jmp short loc_fffa25f8  ; jmp 0xfffa25f8

loc_fffa25cc:  ; not directly referenced
jmp short loc_fffa25cc  ; jmp 0xfffa25cc

loc_fffa25ce:  ; not directly referenced
lea ecx, [eax + 4]
mov dword [esi], ecx
mov word [eax + 4], dx
mov edx, dword [esi]
mov word [edx + 2], di
mov edx, dword [esi]
mov dword [edx + 4], 0
mov edx, dword [ebx + 0x254]
mov dword [eax], edx
mov dword [ebx + 0x254], eax
xor eax, eax
jmp short loc_fffa25fd  ; jmp 0xfffa25fd

loc_fffa25f8:  ; not directly referenced
mov eax, 0x80000009

loc_fffa25fd:  ; not directly referenced
lea esp, [esp + 0x1c]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffa2606:
db 0x00
db 0x00

fcn_fffa2608:
push ebp
mov ebp, esp
push edi
push esi
lea edx, [ebp - 0x62e8]
push ebx
lea esp, [esp - 0x6348]
mov dword [ebp - 0x62fc], eax
mov dword [ebp - 0x3e01], eax
mov eax, dword [eax]
push edx
mov byte [ebp - 0x62ed], 0
push 0
push 0
push ref_fffcfb0c  ; push 0xfffcfb0c
push dword [ebp - 0x62fc]
call dword [eax + 0x20]  ; ucall
mov ecx, dword [ebp - 0x62fc]
add esp, 0x18
lea edx, [ebp - 0x62ec]
mov eax, dword [ecx]
push edx
push ecx
call dword [eax + 0x28]  ; ucall
xor ecx, ecx
mov eax, 1
cpuid
add esp, 0x10
and cl, 0x40
je loc_fffa26fb  ; je 0xfffa26fb
mov ebx, dword [ebp - 0x62fc]
mov eax, dword [ebx]
mov eax, dword [eax + 0x60]
push 0
push 0xfed30010
push eax
push ebx
call dword [eax + 0x38]  ; ucall
add esp, 0x10
test al, 1
je short loc_fffa26fb  ; je 0xfffa26fb
sub esp, 0xc
lea edx, [ebp - 0x62c0]
mov eax, dword [ebx]
push edx
push 0
push 0
push ref_fffcfb2c  ; push 0xfffcfb2c
push ebx
mov ebx, 0x2ee
call dword [eax + 0x20]  ; ucall
add esp, 0x20

loc_fffa26ad:
mov esi, dword [ebp - 0x62fc]
mov eax, dword [esi]
mov eax, dword [eax + 0x60]
push 0
push 0xfed40000
push eax
push esi
call dword [eax + 0x30]  ; ucall
add esp, 0x10
cmp al, 0xff
je short loc_fffa26f0  ; je 0xfffa26f0
test al, al
js loc_fffa499a  ; js 0xfffa499a
push ecx
mov eax, dword [ebp - 0x62c0]
push 0x3e8
push eax
push dword [ebp - 0x62fc]
call dword [eax + 4]  ; ucall
add esp, 0x10
dec bx
jne short loc_fffa26ad  ; jne 0xfffa26ad

loc_fffa26f0:
mov ecx, 0x2e6
xor eax, eax
xor edx, edx
wrmsr

loc_fffa26fb:
mov edi, dword [ebp - 0x62fc]
sub esp, 0xc
lea edx, [ebp - 0x62e4]
mov eax, dword [edi]
push edx
push 0
push 0
push ref_fffcfb1c  ; push 0xfffcfb1c
push edi
call dword [eax + 0x20]  ; ucall
add esp, 0x20
test eax, eax
mov dword [ebp - 0x6310], 0x80000006
js loc_fffa4b12  ; js 0xfffa4b12
mov eax, dword [ebp - 0x62e4]
mov eax, dword [eax + 0x11]
test eax, eax
je short loc_fffa276b  ; je 0xfffa276b
push edx
mov edx, dword [edi]
mov esi, 1
push 0xba8
push eax
lea eax, [ebp - 0x3d44]
push eax
call dword [edx + 0x50]  ; ucall
mov eax, dword [ebp - 0x62e4]
add esp, 0x10
mov eax, dword [eax + 9]
mov eax, dword [eax + 0x31]
mov dword [ebp - 0x3dc5], eax
jmp short loc_fffa276d  ; jmp 0xfffa276d

loc_fffa276b:
xor esi, esi

loc_fffa276d:
cmp dword [ebp - 0x62ec], 0x11
jne short loc_fffa2796  ; jne 0xfffa2796
mov eax, esi
mov dword [ebp - 0x6310], 0x8000000e
test al, al
je loc_fffa4b12  ; je 0xfffa4b12
mov dword [ebp - 0x6308], 0
jmp short loc_fffa27be  ; jmp 0xfffa27be

loc_fffa2796:
mov edx, 0xcf8
mov eax, 0x8000f8a0
out dx, eax
mov dl, 0xfc
in eax, dx
shr eax, 0x10
xor edx, edx
and eax, 0xa0
cmp eax, 0xa0
setne dl
add edx, edx
mov dword [ebp - 0x6308], edx

loc_fffa27be:
xor ecx, ecx
mov eax, 1
cpuid
mov edx, eax
and edx, 0xffff0
cmp edx, 0x206a0
jne short loc_fffa27ff  ; jne 0xfffa27ff
and eax, 0xf
mov dword [ebp - 0x3df1], 0
cmp eax, 5
jb short loc_fffa2820  ; jb 0xfffa2820
cmp eax, 6
jbe short loc_fffa2850  ; jbe 0xfffa2850
cmp eax, 7
jne short loc_fffa2820  ; jne 0xfffa2820
mov dword [ebp - 0x3df5], 4
jmp short loc_fffa285a  ; jmp 0xfffa285a

loc_fffa27ff:
cmp edx, 0x306a0
jne short loc_fffa285a  ; jne 0xfffa285a
and eax, 0xf
mov dword [ebp - 0x3df1], 1
cmp eax, 6
ja short loc_fffa2850  ; ja 0xfffa2850
jmp dword [eax*4 + ref_fffc999c]  ; ujmp: jmp dword [eax*4 - 0x36664]

loc_fffa2820:
mov dword [ebp - 0x3df5], 5
jmp short loc_fffa285a  ; jmp 0xfffa285a

loc_fffa282c:
mov dword [ebp - 0x3df5], 0
jmp short loc_fffa285a  ; jmp 0xfffa285a

loc_fffa2838:
mov dword [ebp - 0x3df5], 1
jmp short loc_fffa285a  ; jmp 0xfffa285a

loc_fffa2844:
mov dword [ebp - 0x3df5], 2
jmp short loc_fffa285a  ; jmp 0xfffa285a

loc_fffa2850:
mov dword [ebp - 0x3df5], 3

loc_fffa285a:
mov ecx, dword [ebp - 0x62fc]
sub esp, 0xc
lea edx, [ebp - 0x62e0]
mov eax, dword [ecx]
push edx
push 0
push 0
push ref_fffcfa8c  ; push 0xfffcfa8c
push ecx
call dword [eax + 0x20]  ; ucall
add esp, 0x20
cmp dword [ebp - 0x6308], 2
mov dword [ebp - 0x6310], eax
jne short loc_fffa28b9  ; jne 0xfffa28b9
push eax
lea eax, [ebp - 0x62ed]
push eax
mov eax, dword [ebp - 0x62e0]
push 0
push dword [ebp - 0x62fc]
call dword [eax + 4]  ; ucall
mov dword [ebp - 0x6310], eax
add esp, 0x10
mov al, 0
cmp byte [ebp - 0x62ed], 1
cmove esi, eax

loc_fffa28b9:
mov edx, dword [ebp - 0x62e4]
cmp dword [ebp - 0x6308], 0
mov eax, dword [edx + 1]
mov eax, dword [eax + 4]
mov ebx, dword [eax + 0x5d10]
jne short loc_fffa28e7  ; jne 0xfffa28e7
cmp dword [ebp - 0x62ec], 0x11
je short loc_fffa28fe  ; je 0xfffa28fe
test ebx, ebx
je loc_fffa49a7  ; je 0xfffa49a7
jmp short loc_fffa28fe  ; jmp 0xfffa28fe

loc_fffa28e7:
cmp dword [ebp - 0x6308], 2
je loc_fffa49a7  ; je 0xfffa49a7
mov dword [ebp - 0x6308], 1

loc_fffa28fe:
mov eax, esi
test al, al
jne short loc_fffa2934  ; jne 0xfffa2934
mov eax, dword [edx + 9]
cmp byte [eax + 0x30], 1
jne loc_fffa49a7  ; jne 0xfffa49a7
mov edx, dword [ebp - 0x62fc]
sub esp, 0xc
mov eax, dword [edx]
lea edx, [ebp - 0x62dc]
push edx
push 0
push 0
push ref_fffcfa9c  ; push 0xfffcfa9c
push dword [ebp - 0x62fc]
jmp short loc_fffa2972  ; jmp 0xfffa2972

loc_fffa2934:
lea eax, [ebp - 0x6049]
call fcn_fffaa0e7  ; call 0xfffaa0e7
test al, al
mov eax, dword [ebp - 0x62e4]
je short loc_fffa2991  ; je 0xfffa2991
mov eax, dword [eax + 9]
cmp byte [eax + 0x30], 1
jne loc_fffa49a7  ; jne 0xfffa49a7
mov ecx, dword [ebp - 0x62fc]
sub esp, 0xc
lea edx, [ebp - 0x62dc]
mov eax, dword [ecx]
push edx
push 0
push 0
push ref_fffcfa9c  ; push 0xfffcfa9c
push ecx

loc_fffa2972:
call dword [eax + 0x20]  ; ucall
add esp, 0x18
mov dword [ebp - 0x6310], eax
push 3
mov eax, dword [ebp - 0x62dc]
push eax
call dword [eax]  ; ucall
add esp, 0x10
jmp near loc_fffa49a7  ; jmp 0xfffa49a7

loc_fffa2991:
cmp dword [ebp - 0x6308], 0
jne short loc_fffa29a8  ; jne 0xfffa29a8
mov eax, dword [eax + 9]
mov eax, dword [eax + 0x48]
mov dword [ebp - 0x3dc5], eax
jmp short loc_fffa29b2  ; jmp 0xfffa29b2

loc_fffa29a8:
mov dword [ebp - 0x6308], 1

loc_fffa29b2:
mov edx, dword [ebp - 0x62e4]
cmp dword [ebp - 0x6308], 2
mov ecx, esi
mov eax, dword [edx + 9]
mov eax, dword [eax + 6]
mov byte [ebp - 0x3d55], al
sete al
test cl, al
je short loc_fffa2a1a  ; je 0xfffa2a1a
mov eax, dword [edx + 1]
mov dword [ebp - 0x6308], 2
cmp byte [eax + 0x27], 0
je short loc_fffa2a1a  ; je 0xfffa2a1a
mov eax, dword [edx + 9]
cmp byte [eax + 0x11], 1
sbb eax, eax
not eax
add eax, 3
mov dword [ebp - 0x6308], eax
lea eax, [ebp - 0x6049]
call fcn_fffaa0e7  ; call 0xfffaa0e7
test al, al
mov eax, 2
cmove eax, dword [ebp - 0x6308]
mov dword [ebp - 0x6308], eax

loc_fffa2a1a:
mov ax, word [0xf00f80a2]
and ax, 0xa0
cmp ax, 0x20
jne short loc_fffa2a82  ; jne 0xfffa2a82
test ebx, ebx
je short loc_fffa2a82  ; je 0xfffa2a82
mov eax, dword [ebp - 0x62e4]
mov dword [ebp - 0x6308], 2
mov eax, dword [eax + 9]
cmp byte [eax + 0x30], 1
jne short loc_fffa2a82  ; jne 0xfffa2a82
mov edx, dword [ebp - 0x62fc]
sub esp, 0xc
mov eax, dword [edx]
lea edx, [ebp - 0x62dc]
push edx
push 0
push 0
push ref_fffcfa9c  ; push 0xfffcfa9c
push dword [ebp - 0x62fc]
call dword [eax + 0x20]  ; ucall
add esp, 0x18
mov dword [ebp - 0x6310], eax
push 3
mov eax, dword [ebp - 0x62dc]
push eax
call dword [eax]  ; ucall
add esp, 0x10

loc_fffa2a82:
mov edx, dword [ebp - 0x62e4]
lea eax, [ebp - 0x62b9]
mov dword [ebp - 0x319c], eax
mov eax, dword [edx + 1]
movzx eax, byte [eax + 0x24]
mov dword [ebp - 0x3e11], eax
mov eax, dword [edx + 1]
cmp word [eax + 0x25], 1
sete al
movzx eax, al
mov dword [ebp - 0x3e15], eax
mov eax, dword [edx + 1]
mov al, byte [eax]
mov byte [ebp - 0x3d83], al
mov eax, dword [edx + 1]
mov al, byte [eax + 1]
mov byte [ebp - 0x3d82], al
mov eax, dword [edx + 1]
mov al, byte [eax + 2]
mov byte [ebp - 0x3d81], al
mov eax, dword [edx + 1]
mov al, byte [eax + 3]
mov byte [ebp - 0x3d80], al
mov eax, dword [edx + 9]
movzx eax, byte [eax + 0x10]
mov dword [ebp - 0x3d96], eax
mov eax, dword [edx + 9]
movzx eax, byte [eax + 0x10]
mov dword [ebp - 0x3d50], 0
mov dword [ebp - 0x3d92], eax
mov eax, dword [edx + 9]
movzx eax, byte [eax + 0x3f]
mov dword [ebp - 0x3d4c], eax
mov eax, dword [edx + 9]
movzx eax, byte [eax + 0x3e]
mov dword [ebp - 0x3d7e], eax
mov eax, dword [edx + 9]
mov eax, dword [eax + 0x36]
mov dword [ebp - 0x3dd1], eax
mov eax, dword [edx + 9]
cmp dword [ebp - 0x3df1], 0
mov eax, dword [eax + 0x3a]
mov dword [ebp - 0x3dcd], eax
jne loc_fffa3fa9  ; jne 0xfffa3fa9
mov eax, dword [edx + 9]
movzx eax, byte [eax + 0x11]
mov dword [ebp - 0x3d87], eax
mov eax, dword [edx + 1]
mov eax, dword [eax + 4]
mov dword [ebp - 0x3e26], eax
mov eax, dword [edx + 1]
mov eax, dword [eax + 0x10]
mov dword [ebp - 0x3e2a], eax
mov eax, dword [edx + 1]
mov eax, dword [eax + 0x14]
mov dword [ebp - 0x3e1e], eax
mov eax, dword [edx + 9]
movzx eax, byte [eax + 0x2d]
mov dword [ebp - 0x3dd9], eax
xor eax, eax
cmp dword [ebp - 0x6308], 3
jne loc_fffa2ff5  ; jne 0xfffa2ff5
sub esp, 0xc
mov ecx, 3
push 4
lea eax, [ebp - 0x6049]
mov dword [ebp - 0x3ded], 3
call fcn_fffacfd8  ; call 0xfffacfd8
mov edx, dword [ebp - 0x62e4]
lea eax, [ebp - 0x6049]
call fcn_fffae35e  ; call 0xfffae35e
lea eax, [ebp - 0x6049]
call fcn_fffb585a  ; call 0xfffb585a
mov edx, eax
add esp, 0x10
test edx, edx
mov eax, 0x10
je loc_fffa2ff5  ; je 0xfffa2ff5
mov edx, 0xdd20
lea eax, [ebp - 0x6049]
call fcn_fffad891  ; call 0xfffad891
lea edx, [ebp - 0x62c0]
lea eax, [ebp - 0x3d44]
call fcn_fffc76c6  ; call 0xfffc76c6
mov ecx, dword [ebp - 0x31a0]
cmp dword [ebp - 0x62c0], ecx
jne short loc_fffa2c1b  ; jne 0xfffa2c1b
lea eax, [ebp - 0x6049]
call fcn_fffb58fa  ; call 0xfffb58fa

loc_fffa2c1b:
lea eax, [ebp - 0x6049]
lea esi, [ebp - 0x6219]
mov edx, esi
xor ebx, ebx
call fcn_fffacf73  ; call 0xfffacf73
mov edx, dword [ebp - 0x3e26]
mov eax, dword [edx + 0x42b0]
and ah, 0xfc
mov dword [edx + 0x42b0], eax
mov edx, dword [ebp - 0x3e26]
mov eax, dword [edx + 0x46b0]
and ah, 0xfc
mov dword [edx + 0x46b0], eax

loc_fffa2c5a:
imul eax, ebx, 0x1055
cmp byte [ebp + eax - 0x600f], 0
jne loc_fffa49b6  ; jne 0xfffa49b6

loc_fffa2c6e:
inc ebx
cmp ebx, 2
jne short loc_fffa2c5a  ; jne 0xfffa2c5a
xor eax, eax
jmp near loc_fffa2ff5  ; jmp 0xfffa2ff5

loc_fffa2c7b:
mov eax, dword [ebp - 0x3e26]
lea edx, [eax + ebx*4 + 0x5004]
mov eax, dword [edx]
and eax, 0xfcffffff
or eax, 0x1000000
mov dword [edx], eax

loc_fffa2c96:
cmp bl, 1
mov byte [ebp - 0x6300], bl
mov byte [ebp - 0x6314], 0x20
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4420
add eax, dword [ebp - 0x3e26]
mov edx, dword [eax]
or edx, 0x10000000
cmp bl, 1
mov dword [eax], edx
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4434
add eax, dword [ebp - 0x3e26]
cmp bl, 1
mov dword [eax], 0
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4438
add eax, dword [ebp - 0x3e26]
cmp bl, 1
mov dword [eax], 0
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x443c
add eax, dword [ebp - 0x3e26]
mov dword [eax], 0

loc_fffa2d13:
mov ecx, ebx
lea edx, [ebp - 0x6219]
lea eax, [ebp - 0x6049]
xor esi, esi
call fcn_ffface48  ; call 0xffface48

loc_fffa2d28:
mov ecx, ebx
mov edx, esi
lea eax, [ebp - 0x6049]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffa2fd5  ; je 0xfffa2fd5
push eax
mov edx, 2
mov ecx, 0xfffffff9
push eax
lea eax, [ebp - 0x6049]
push esi
push ebx
call fcn_fffb5664  ; call 0xfffb5664
add esp, 0x10
mov eax, 0x4340
xor edx, edx
jmp short loc_fffa2d84  ; jmp 0xfffa2d84

loc_fffa2d64:
cmp byte [ebp - 0x6300], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebp - 0x3e26]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffa2d84:
cmp dl, byte [ebp - 0x3f94]
jb short loc_fffa2d64  ; jb 0xfffa2d64
mov ecx, esi
mov edx, ebx
lea eax, [ebp - 0x6049]
call fcn_fffaf9ac  ; call 0xfffaf9ac
test eax, eax
jne loc_fffa2ff0  ; jne 0xfffa2ff0
movzx eax, byte [ebp - 0x3f94]
mov ecx, dword [ebp - 0x3e26]
lea edx, [eax*4 + 0x4340]
mov eax, 0x4340
jmp short loc_fffa2ddd  ; jmp 0xfffa2ddd

loc_fffa2dbe:
cmp byte [ebp - 0x6300], 0
lea edi, [eax + 0x400]
cmove edi, eax
add eax, 4
add edi, ecx
mov edi, dword [edi]
test edi, edi
je loc_fffa2ff0  ; je 0xfffa2ff0

loc_fffa2ddd:
cmp eax, edx
jne short loc_fffa2dbe  ; jne 0xfffa2dbe
push eax
mov edx, 2
mov ecx, 7
push eax
lea eax, [ebp - 0x6049]
push esi
push ebx
call fcn_fffb5664  ; call 0xfffb5664
add esp, 0x10
mov eax, 0x4340
xor edx, edx
jmp short loc_fffa2e26  ; jmp 0xfffa2e26

loc_fffa2e06:
cmp byte [ebp - 0x6300], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebp - 0x3e26]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffa2e26:
cmp dl, byte [ebp - 0x3f94]
jb short loc_fffa2e06  ; jb 0xfffa2e06
mov ecx, esi
mov edx, ebx
lea eax, [ebp - 0x6049]
call fcn_fffaf9ac  ; call 0xfffaf9ac
test eax, eax
jne loc_fffa2ff0  ; jne 0xfffa2ff0
movzx eax, byte [ebp - 0x3f94]
mov ecx, dword [ebp - 0x3e26]
lea edx, [eax*4 + 0x4340]
mov eax, 0x4340
jmp short loc_fffa2e7f  ; jmp 0xfffa2e7f

loc_fffa2e60:
cmp byte [ebp - 0x6300], 0
lea edi, [eax + 0x400]
cmove edi, eax
add eax, 4
add edi, ecx
mov edi, dword [edi]
test edi, edi
jne loc_fffa2ff0  ; jne 0xfffa2ff0

loc_fffa2e7f:
cmp eax, edx
jne short loc_fffa2e60  ; jne 0xfffa2e60
push eax
mov edx, 1
mov ecx, 0xfffffff9
push eax
lea eax, [ebp - 0x6049]
push esi
push ebx
call fcn_fffb5664  ; call 0xfffb5664
add esp, 0x10
mov eax, 0x4340
xor edx, edx
jmp short loc_fffa2ec8  ; jmp 0xfffa2ec8

loc_fffa2ea8:
cmp byte [ebp - 0x6300], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebp - 0x3e26]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffa2ec8:
cmp dl, byte [ebp - 0x3f94]
jb short loc_fffa2ea8  ; jb 0xfffa2ea8
mov ecx, esi
mov edx, ebx
lea eax, [ebp - 0x6049]
call fcn_fffaf9ac  ; call 0xfffaf9ac
test eax, eax
jne loc_fffa2ff0  ; jne 0xfffa2ff0
movzx eax, byte [ebp - 0x3f94]
mov ecx, dword [ebp - 0x3e26]
lea edx, [eax*4 + 0x4340]
mov eax, 0x4340
jmp short loc_fffa2f21  ; jmp 0xfffa2f21

loc_fffa2f02:
cmp byte [ebp - 0x6300], 0
lea edi, [eax + 0x400]
cmove edi, eax
add eax, 4
add edi, ecx
mov edi, dword [edi]
test edi, edi
jne loc_fffa2ff0  ; jne 0xfffa2ff0

loc_fffa2f21:
cmp eax, edx
jne short loc_fffa2f02  ; jne 0xfffa2f02
push eax
mov edx, 1
mov ecx, 7
push eax
lea eax, [ebp - 0x6049]
push esi
push ebx
call fcn_fffb5664  ; call 0xfffb5664
add esp, 0x10
mov eax, 0x4340
xor edx, edx
jmp short loc_fffa2f6a  ; jmp 0xfffa2f6a

loc_fffa2f4a:
cmp byte [ebp - 0x6300], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebp - 0x3e26]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffa2f6a:
cmp dl, byte [ebp - 0x3f94]
jb short loc_fffa2f4a  ; jb 0xfffa2f4a
mov ecx, esi
mov edx, ebx
lea eax, [ebp - 0x6049]
call fcn_fffaf9ac  ; call 0xfffaf9ac
test eax, eax
jne short loc_fffa2ff0  ; jne 0xfffa2ff0
movzx eax, byte [ebp - 0x3f94]
mov ecx, dword [ebp - 0x3e26]
lea edx, [eax*4 + 0x4340]
mov eax, 0x4340
jmp short loc_fffa2fbb  ; jmp 0xfffa2fbb

loc_fffa2fa0:
cmp byte [ebp - 0x6300], 0
lea edi, [eax + 0x400]
cmove edi, eax
add eax, 4
add edi, ecx
mov edi, dword [edi]
test edi, edi
je short loc_fffa2ff0  ; je 0xfffa2ff0

loc_fffa2fbb:
cmp eax, edx
jne short loc_fffa2fa0  ; jne 0xfffa2fa0
push edi
xor ecx, ecx
xor edx, edx
push edi
lea eax, [ebp - 0x6049]
push esi
push ebx
call fcn_fffb5664  ; call 0xfffb5664
add esp, 0x10

loc_fffa2fd5:
inc esi
cmp esi, 4
jne loc_fffa2d28  ; jne 0xfffa2d28
dec byte [ebp - 0x6314]
jne loc_fffa2d13  ; jne 0xfffa2d13
jmp near loc_fffa2c6e  ; jmp 0xfffa2c6e

loc_fffa2ff0:
mov eax, 0x10

loc_fffa2ff5:
cmp eax, 0x10
sete dl
cmp dword [ebp - 0x6308], 2
sete al
or dl, al
je loc_fffa31a0  ; je 0xfffa31a0
mov eax, dword [ebp - 0x62e4]
mov dword [ebp - 0x3ded], 2
mov edx, dword [eax + 9]
movzx edx, byte [edx]
mov dword [ebp - 0x3e05], edx
mov edx, dword [eax + 9]
mov dl, byte [edx + 0xf]
mov byte [ebp - 0x3d65], dl
mov edx, dword [eax + 1]
mov edx, dword [edx + 0x18]
mov dword [ebp - 0x3e22], edx
mov edx, dword [eax + 5]
movzx edx, word [edx]
mov dword [ebp - 0x3db9], edx
mov edx, dword [eax + 5]
movzx edx, word [edx + 2]
mov dword [ebp - 0x3dc1], 0
mov dword [ebp - 0x3db1], edx
mov eax, dword [eax + 9]
movzx eax, word [eax + 1]
push ecx
mov dword [ebp - 0x3dfd], eax
mov eax, dword [ebp - 0x62e0]
push ecx
push 0
push dword [ebp - 0x62fc]
call dword [eax]  ; ucall
mov edx, dword [ebp - 0x62e4]
mov dword [ebp - 0x3dc1], eax
mov ecx, 2
mov eax, dword [edx + 1]
mov eax, dword [eax + 0x20]
shr eax, 0x14
mov dword [ebp - 0x3da5], eax
mov eax, dword [edx + 5]
movzx eax, byte [eax + 4]
mov dword [ebp - 0x3dad], 0
mov dword [ebp - 0x3db5], eax
mov ax, word [0xf0000050]
shr ax, 1
mov dword [ebp - 0x3e09], 0
xor eax, 1
mov dword [ebp - 0x3e0d], 1
and eax, 1
mov dword [ebp - 0x3da9], eax
mov eax, dword [edx + 9]
mov al, byte [eax + 0x27]
mov dword [esp], 4
mov byte [ebp - 0x3d7f], al
lea eax, [ebp - 0x6049]
mov dword [ebp - 0x3d48], 1
call fcn_fffacfd8  ; call 0xfffacfd8
mov edx, dword [ebp - 0x62e4]
lea eax, [ebp - 0x6049]
call fcn_fffae35e  ; call 0xfffae35e
add esp, 0xc
lea eax, [ebp - 0x3d89]
push eax
lea eax, [ebp - 0x3d8a]
lea ecx, [ebp - 0x3d8c]
push eax
lea eax, [ebp - 0x3d8b]
lea edx, [ebp - 0x3d8d]
push eax
lea eax, [ebp - 0x3d8e]
call fcn_fffadf3b  ; call 0xfffadf3b
lea eax, [ebp - 0x6049]
call fcn_fffa4b20  ; call 0xfffa4b20
add esp, 0x10
cmp eax, 0xf
jne short loc_fffa3197  ; jne 0xfffa3197
push 1
push dword [ebp - 0x6308]
mov eax, dword [ebp - 0x62e0]
push 0
push dword [ebp - 0x62fc]
call dword [eax + 8]  ; ucall
mov ebx, dword [ebp - 0x62fc]
pop eax
pop edx
mov eax, dword [ebx]
push 0
push 0
push 0
push 0x51009
push 2
push ebx
call dword [eax + 0x58]  ; ucall
jmp near loc_fffa4399  ; jmp 0xfffa4399

loc_fffa3197:
test eax, eax
je short loc_fffa3205  ; je 0xfffa3205
jmp near loc_fffa439c  ; jmp 0xfffa439c

loc_fffa31a0:
cmp dword [ebp - 0x6308], 1
ja short loc_fffa3205  ; ja 0xfffa3205
mov edx, 0xdd20
lea eax, [ebp - 0x6049]
mov dword [ebp - 0x3ded], 0
call fcn_fffad891  ; call 0xfffad891
lea edx, [ebp - 0x62c0]
lea eax, [ebp - 0x3d44]
call fcn_fffc76c6  ; call 0xfffc76c6
mov esi, dword [ebp - 0x31a0]
cmp dword [ebp - 0x62c0], esi
jne loc_fffa439c  ; jne 0xfffa439c
lea eax, [ebp - 0x6049]
call fcn_fffb58fa  ; call 0xfffb58fa
test eax, eax
jne loc_fffa439c  ; jne 0xfffa439c
mov eax, dword [ebp - 0x3f57]
mov dword [ebp - 0x3dc1], eax

loc_fffa3205:
cmp dword [ebp - 0x62ec], 0x11
jne short loc_fffa3234  ; jne 0xfffa3234

loc_fffa320e:
mov edx, 0xdd50
lea eax, [ebp - 0x6049]
call fcn_fffad891  ; call 0xfffad891
lea eax, [ebp - 0x6049]
call fcn_fffbf66b  ; call 0xfffbf66b
cmp dword [ebp - 0x3d50], 1
jne short loc_fffa328e  ; jne 0xfffa328e
jmp short loc_fffa3283  ; jmp 0xfffa3283

loc_fffa3234:
mov eax, dword [ebp - 0x6308]
sub eax, 2
cmp eax, 1
ja short loc_fffa320e  ; ja 0xfffa320e
sub esp, 0xc
lea eax, [ebp - 0x6049]
push eax
call fcn_fffb0b48  ; call 0xfffb0b48
add esp, 0x10
test eax, eax
jne loc_fffa439c  ; jne 0xfffa439c
cmp dword [ebp - 0x3f98], 0
jne short loc_fffa326e  ; jne 0xfffa326e
cmp dword [ebp - 0x3d4c], 0
je short loc_fffa320e  ; je 0xfffa320e

loc_fffa326e:
lea eax, [ebp - 0x6049]
call fcn_fffb0e9a  ; call 0xfffb0e9a
test eax, eax
jne loc_fffa439c  ; jne 0xfffa439c
jmp short loc_fffa320e  ; jmp 0xfffa320e

loc_fffa3283:
lea eax, [ebp - 0x6049]
call fcn_fffb0e9a  ; call 0xfffb0e9a

loc_fffa328e:
lea edi, [ebp - 0x6049]
mov dword [ebp - 0x6314], edi
mov dword [ebp - 0x6320], edi
mov esi, edi
xor edi, edi

loc_fffa32a4:
cmp byte [esi + 0x3a], 0
jne loc_fffa49c8  ; jne 0xfffa49c8
jmp near loc_fffa351a  ; jmp 0xfffa351a

loc_fffa32b3:
cmp byte [esi + 0x45], 2
je short loc_fffa32de  ; je 0xfffa32de

loc_fffa32b9:
mov eax, edi
cmp al, 1
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4404
add eax, dword [ebp - 0x3e26]
mov edx, dword [eax]
and edx, 0xdfffffff
mov dword [eax], edx
jmp near loc_fffa34c7  ; jmp 0xfffa34c7

loc_fffa32de:
imul eax, edi, 0x8c
mov dword [ebp - 0x6318], 0
lea eax, [ebp + eax - 0x3f3e]
mov dword [ebp - 0x631c], eax

loc_fffa32fb:
imul eax, dword [ebp - 0x6318], 0x1d
cmp dword [esi + eax + 0xa], 0
je loc_fffa34a8  ; je 0xfffa34a8
mov ecx, dword [ebp - 0x631c]
mov eax, dword [ebp - 0x6318]
mov edx, dword [ebp - 0x6320]
mov cl, byte [ecx]
movzx ebx, byte [edx + eax + 0x22c6]
mov al, cl
and eax, 0xf
dec eax
jle loc_fffa34a8  ; jle 0xfffa34a8
push eax
lea ecx, [ebp - 0x62c4]
mov edx, ebx
push eax
lea eax, [ebp - 0x62c0]
or dh, 0x94
push eax
mov eax, 6
push ecx
mov ecx, 2
call fcn_fffc4947  ; call 0xfffc4947
add esp, 0x10
cmp dword [ebp - 0x62c0], 0
mov eax, dword [ebp - 0x62c4]
jne loc_fffa34a8  ; jne 0xfffa34a8
cmp ax, 0xad80
jne loc_fffa3419  ; jne 0xfffa3419
sub esp, 0xc
lea eax, [ebp - 0x62d4]
push eax
mov ecx, 0x83
mov edx, ebx
lea eax, [ebp - 0x6049]
call fcn_fffacf91  ; call 0xfffacf91
lea eax, [ebp - 0x62cc]
mov ecx, 0x88
mov dword [esp], eax
mov edx, ebx
lea eax, [ebp - 0x6049]
call fcn_fffacf91  ; call 0xfffacf91
lea eax, [ebp - 0x62d0]
mov ecx, 0x89
mov dword [esp], eax
mov edx, ebx
lea eax, [ebp - 0x6049]
call fcn_fffacf91  ; call 0xfffacf91
mov al, byte [ebp - 0x62d4]
add esp, 0x10
cmp al, 0x33
je short loc_fffa33e6  ; je 0xfffa33e6
cmp al, 0x34
je short loc_fffa340a  ; je 0xfffa340a
cmp al, 0x31
jne loc_fffa34a8  ; jne 0xfffa34a8
jmp short loc_fffa33ef  ; jmp 0xfffa33ef

loc_fffa33e6:
cmp byte [ebp - 0x62d0], 0x4d
jne short loc_fffa33f8  ; jne 0xfffa33f8

loc_fffa33ef:
cmp byte [ebp - 0x62cc], 0x42
jmp short loc_fffa33ff  ; jmp 0xfffa33ff

loc_fffa33f8:
cmp byte [ebp - 0x62cc], 0x41

loc_fffa33ff:
jne loc_fffa34a8  ; jne 0xfffa34a8
jmp near loc_fffa34c7  ; jmp 0xfffa34c7

loc_fffa340a:
cmp byte [ebp - 0x62d0], 0x4d
jne loc_fffa34a8  ; jne 0xfffa34a8
jmp short loc_fffa33f8  ; jmp 0xfffa33f8

loc_fffa3419:
cmp ax, 0xb83
jne loc_fffa34a8  ; jne 0xfffa34a8
mov edx, dword [ebp - 0x631c]
mov al, byte [edx + 4]
and eax, 0xf
cmp al, 2
jne short loc_fffa34a8  ; jne 0xfffa34a8
mov dword [ebp - 0x6300], 0x80

loc_fffa343d:
sub esp, 0xc
lea ecx, [ebp - 0x62c8]
push ecx
mov edx, ebx
mov ecx, dword [ebp - 0x6300]
lea eax, [ebp - 0x6049]
call fcn_fffacf91  ; call 0xfffacf91
add esp, 0x10
cmp byte [ebp - 0x62c8], 0x2d
je short loc_fffa347a  ; je 0xfffa347a

loc_fffa3466:
inc dword [ebp - 0x6300]
cmp dword [ebp - 0x6300], 0x92
jne short loc_fffa343d  ; jne 0xfffa343d
jmp short loc_fffa34a8  ; jmp 0xfffa34a8

loc_fffa347a:
sub esp, 0xc
lea eax, [ebp - 0x62cc]
push eax
mov ecx, dword [ebp - 0x6300]
mov edx, ebx
sub ecx, 4
lea eax, [ebp - 0x6049]
call fcn_fffacf91  ; call 0xfffacf91
add esp, 0x10
cmp byte [ebp - 0x62cc], 0x41
jne short loc_fffa3466  ; jne 0xfffa3466
jmp short loc_fffa34c7  ; jmp 0xfffa34c7

loc_fffa34a8:
inc dword [ebp - 0x6318]
add dword [ebp - 0x631c], 0x46
cmp dword [ebp - 0x6318], 2
je loc_fffa32b9  ; je 0xfffa32b9
jmp near loc_fffa32fb  ; jmp 0xfffa32fb

loc_fffa34c7:
imul eax, edi, 0x1055
lea ebx, [ebp - 0x6049]
add eax, ebx
call fcn_fffbbf31  ; call 0xfffbbf31
and eax, 0xf
mov edx, edi
or ah, 0x10
cmp dl, 1
sbb edx, edx
and edx, 0xfffffc00
add edx, 0x46a0
add edx, dword [ebp - 0x3e26]
mov dword [edx], eax
cmp dword [ebp - 0x3f98], 1
jne short loc_fffa351a  ; jne 0xfffa351a
mov eax, dword [ebp - 0x3e26]
lea edx, [eax + edi*4 + 0x5004]
mov eax, dword [edx]
or eax, 0x3000000
mov dword [edx], eax

loc_fffa351a:
inc edi
add esi, 0x1055
add dword [ebp - 0x6320], 2
cmp edi, 2
jne loc_fffa32a4  ; jne 0xfffa32a4
mov ecx, dword [ebp - 0x3e26]
cmp dword [ebp - 0x3df5], 3
sbb edx, edx
not edx
add edx, 2
shl edx, 0xc
mov eax, dword [ecx + 0x400c]
and ah, 0xcf
or eax, edx
mov dword [ecx + 0x400c], eax
mov ecx, dword [ebp - 0x3e26]
mov eax, dword [ecx + 0x440c]
and ah, 0xcf
or eax, edx
mov dword [ecx + 0x440c], eax
mov eax, dword [ebp - 0x3dd9]
cmp eax, 6
sete cl
cmp eax, 3
setbe dl
or cl, dl
jne short loc_fffa358b  ; jne 0xfffa358b
cmp eax, 7
jne short loc_fffa3593  ; jne 0xfffa3593

loc_fffa358b:
shl eax, 8
or eax, 0x40
jmp short loc_fffa35a7  ; jmp 0xfffa35a7

loc_fffa3593:
mov eax, 0x640
cmp dword [ebp - 0x3e15], 1
mov edx, 0x40
cmovne eax, edx

loc_fffa35a7:
mov edx, dword [ebp - 0x3e26]
mov dword [edx + 0x4cb0], eax
mov eax, dword [ebp - 0x3e26]
mov dword [eax + 0x4380], 0xaaa
mov eax, dword [ebp - 0x3e26]
mov dword [eax + 0x4780], 0xaaa
mov eax, dword [ebp - 0x3e26]
mov dword [eax + 0x4f88], 0x5f7003ff
mov eax, dword [ebp - 0x3e26]
mov dword [eax + 0x5064], 0x330f0
cmp dword [ebp - 0x3ded], 2
jne loc_fffa372f  ; jne 0xfffa372f
cmp byte [ebp - 0x3d7f], 1
jne loc_fffa371f  ; jne 0xfffa371f
jmp near loc_fffa36fe  ; jmp 0xfffa36fe

loc_fffa3612:
cmp dword [edi - 8], 0
je loc_fffa36bb  ; je 0xfffa36bb
mov bl, byte [edi + 2]
cmp bl, 8
jne short loc_fffa364c  ; jne 0xfffa364c
mov bl, byte [edi]
mov byte [ebp - 0x6318], bl
dec bl
jne short loc_fffa3675  ; jne 0xfffa3675
cmp al, 0x6f
mov ecx, 0x6f
cmovb eax, ecx
cmp dl, 0xcc
mov ecx, 0xcc
cmovb edx, ecx
mov ecx, 0xff
jmp short loc_fffa36bb  ; jmp 0xfffa36bb

loc_fffa364c:
cmp bl, 0x10
jne short loc_fffa36bb  ; jne 0xfffa36bb
cmp byte [edi], 1
jne short loc_fffa3696  ; jne 0xfffa3696
cmp cl, 0xaf
mov ebx, 0xaf
cmovb ecx, ebx
cmp al, 0x69
mov ebx, 0x69
cmovb eax, ebx
cmp dl, 0x9e
mov ebx, 0x9e
jmp short loc_fffa36b8  ; jmp 0xfffa36b8

loc_fffa3675:
cmp byte [ebp - 0x6318], 2
mov ebx, 0xff
cmove ecx, ebx
mov ebx, 0x7e
cmove eax, ebx
mov ebx, 0xff
cmove edx, ebx
jmp short loc_fffa36bb  ; jmp 0xfffa36bb

loc_fffa3696:
cmp byte [edi], 2
jne short loc_fffa36bb  ; jne 0xfffa36bb
cmp cl, 0xf7
mov ebx, 0xf7
cmovb ecx, ebx
cmp al, 0x6e
mov ebx, 0x6e
cmovb eax, ebx
cmp dl, 0xc0
mov ebx, 0xc0

loc_fffa36b8:
cmovb edx, ebx

loc_fffa36bb:
inc byte [ebp - 0x6300]
add edi, 0x1d
cmp byte [ebp - 0x6300], 2
jne loc_fffa3612  ; jne 0xfffa3612
shl eax, 8
shl edx, 0x10
or eax, ecx
or eax, edx
mov edx, esi
cmp dl, 1
sbb edx, edx
inc esi
and edx, 0xfffffc00
add edx, 0x4784
add edx, dword [ebp - 0x3e26]
cmp esi, 2
mov dword [edx], eax
jne short loc_fffa3700  ; jne 0xfffa3700
jmp short loc_fffa372f  ; jmp 0xfffa372f

loc_fffa36fe:
xor esi, esi

loc_fffa3700:
imul eax, esi, 0x1055
xor ecx, ecx
xor edx, edx
mov byte [ebp - 0x6300], 0
lea edi, [ebp + eax - 0x6037]
xor eax, eax
jmp near loc_fffa3612  ; jmp 0xfffa3612

loc_fffa371f:
mov eax, dword [ebp - 0x3e26]
mov dword [eax + 0x4f84], 0

loc_fffa372f:
lea eax, [ebp - 0x6049]
call fcn_fffad3a9  ; call 0xfffad3a9
mov edx, 0xdd51
lea eax, [ebp - 0x6049]
call fcn_fffad891  ; call 0xfffad891
cmp dword [ebp - 0x62ec], 0x11
jne short loc_fffa3765  ; jne 0xfffa3765

loc_fffa3753:
cmp dword [ebp - 0x3ded], 2
jne loc_fffa3dfa  ; jne 0xfffa3dfa
jmp near loc_fffa3e23  ; jmp 0xfffa3e23

loc_fffa3765:
lea eax, [ebp - 0x6049]
mov edx, 0xdd52
call fcn_fffad891  ; call 0xfffad891
mov eax, dword [ebp - 0x3ded]
cmp eax, 2
jne loc_fffa3d73  ; jne 0xfffa3d73
mov eax, dword [ebp - 0x6000]
mov esi, dword [ebp - 0x3e01]
mov dword [ebp - 0x35ad], eax
mov eax, dword [ebp - 0x4fab]
mov dword [ebp - 0x35a9], eax
mov eax, dword [ebp - 0x3e26]
mov dword [ebp - 0x323b], eax
mov eax, dword [ebp - 0x3e2a]
mov dword [ebp - 0x323f], eax
mov eax, dword [ebp - 0x3e05]
mov dword [ebp - 0x322f], eax
mov eax, dword [ebp - 0x3d7e]
mov dword [ebp - 0x322b], eax
mov al, byte [ebp - 0x3d55]
mov byte [ebp - 0x3227], al
mov eax, dword [ebp - 0x3db9]
mov dword [ebp - 0x3226], eax
mov eax, dword [ebp - 0x3db1]
mov word [ebp - 0x3222], ax
mov eax, dword [ebp - 0x3da5]
mov dword [ebp - 0x3220], eax
mov eax, dword [ebp - 0x3db5]
mov byte [ebp - 0x321c], al
mov eax, dword [ebp - 0x3dd1]
mov dword [ebp - 0x321b], eax
mov eax, dword [ebp - 0x3dcd]
mov dword [ebp - 0x3217], eax
mov eax, dword [ebp - 0x3d96]
mov byte [ebp - 0x3213], al
mov al, byte [ebp - 0x3d7f]
mov byte [ebp - 0x3212], al
mov eax, dword [ebp - 0x3d87]
mov dword [ebp - 0x3237], esi
mov dword [ebp - 0x3233], 0
mov dword [ebp - 0x3211], eax
mov ecx, ref_fffc99b8  ; mov ecx, 0xfffc99b8
push 0
lea esi, [ebp - 0x323f]
lea eax, [ebp - 0x3ab0]
push 0x5000
mov edx, esi
push 0x5f
push 8
call fcn_fffb4cc1  ; call 0xfffb4cc1
mov edi, eax
lea eax, [ebp - 0x3d44]
call fcn_fffb4dcc  ; call 0xfffb4dcc
add esp, 0x10
test eax, eax
push 0
mov ebx, eax
mov ecx, ref_fffc99d8  ; mov ecx, 0xfffc99d8
push 0x4400
mov edx, esi
lea eax, [ebp - 0x3bfa]
push 0x14a
cmove ebx, edi
push 0x1d
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
mov edi, eax
lea eax, [ebp - 0x3d44]
cmove edi, ebx
xor edx, edx
call fcn_fffb4d47  ; call 0xfffb4d47
test eax, eax
jne loc_fffa4b12  ; jne 0xfffa4b12
test edi, edi
jne loc_fffa4b12  ; jne 0xfffa4b12
push 0
mov ecx, ref_fffc9a58  ; mov ecx, 0xfffc9a58
mov edx, esi
push 0xc00
lea eax, [ebp - 0x36cd]
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffa4b12  ; jne 0xfffa4b12
push 0
mov ecx, ref_fffc9a58  ; mov ecx, 0xfffc9a58
mov edx, esi
push 0xd00
lea eax, [ebp - 0x36af]
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffa4b12  ; jne 0xfffa4b12
push 0
mov ecx, ref_fffc9a50  ; mov ecx, 0xfffc9a50
mov edx, esi
push 0xa00
lea eax, [ebp - 0x3691]
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffa4b12  ; jne 0xfffa4b12
push 0
mov ecx, ref_fffc9a50  ; mov ecx, 0xfffc9a50
mov edx, esi
push 0xb00
lea eax, [ebp - 0x3673]
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffa4b12  ; jne 0xfffa4b12
push 0
mov ecx, ref_fffc9a50  ; mov ecx, 0xfffc9a50
mov edx, esi
push 0xe00
lea eax, [ebp - 0x3655]
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffa4b12  ; jne 0xfffa4b12
push 0
mov ecx, ref_fffc9a50  ; mov ecx, 0xfffc9a50
mov edx, esi
push 0xf00
lea eax, [ebp - 0x3637]
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffa4b12  ; jne 0xfffa4b12
push 0
mov ecx, ref_fffc9a4c  ; mov ecx, 0xfffc9a4c
mov edx, esi
push 0x1800
lea eax, [ebp - 0x3619]
push 0x1c
push 1
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffa4b12  ; jne 0xfffa4b12
push 0
mov ecx, ref_fffc9a4c  ; mov ecx, 0xfffc9a4c
mov edx, esi
push 0x1900
lea eax, [ebp - 0x35fd]
push 0x1c
push 1
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
mov dword [ebp - 0x6300], eax
jne loc_fffa4b12  ; jne 0xfffa4b12
mov edx, esi
lea eax, [ebp - 0x35e1]
call fcn_fffcf92f  ; call 0xfffcf92f
mov eax, dword [ebp - 0x323b]
xor esi, esi
mov eax, dword [eax + 0x5e04]
mov byte [ebp - 0x35a5], al
mov al, byte [ebp - 0x6037]
mov byte [ebp - 0x359e], al
mov al, byte [ebp - 0x601a]
mov byte [ebp - 0x359d], al
mov al, byte [ebp - 0x4fe2]
mov byte [ebp - 0x359c], al
mov al, byte [ebp - 0x4fc5]
mov byte [ebp - 0x359b], al
mov eax, dword [ebp - 0x3e2a]
mov edx, dword [eax + 0xe8]
mov dword [ebp - 0x3592], edx
mov eax, dword [eax + 0xe4]
mov dword [ebp - 0x3596], eax
jmp near loc_fffa3c1f  ; jmp 0xfffa3c1f

loc_fffa3a96:
imul eax, ebx, 0x46
mov edx, dword [ebp - 0x631c]
mov ecx, 0xb
lea eax, [eax + edx + 0x2120]
lea edx, [ebp + eax - 0x6034]
mov eax, dword [ebp - 0x6318]
add eax, ebx
imul eax, eax, 0xb
lea eax, [ebp + eax - 0x358e]
call fcn_fffa2408  ; call 0xfffa2408
imul eax, ebx, 0x1d
mov ecx, dword [ebp - 0x6314]
cmp dword [ecx + eax + 0xa], 0
je loc_fffa3c01  ; je 0xfffa3c01
mov eax, esi
test al, al
jne loc_fffa3c01  ; jne 0xfffa3c01
mov edx, edi
mov ecx, dword [ebp - 0x3e26]
cmp dl, 1
sbb eax, eax
and eax, 0xfffffc00
lea eax, [ecx + eax + 0x4400]
mov eax, dword [eax]
mov esi, eax
and esi, 0xf
mov ecx, esi
mov esi, eax
and esi, 0xf0
mov byte [ebp - 0x3209], cl
shr esi, 4
mov ecx, esi
mov esi, eax
and esi, 0xf00
mov byte [ebp - 0x3208], cl
shr esi, 8
mov ecx, esi
mov esi, eax
and esi, 0xf000
and eax, 0xff0000
shr esi, 0xc
mov byte [ebp - 0x320c], cl
shr eax, 0x10
cmp dl, 1
mov word [ebp - 0x3207], ax
mov ecx, esi
sbb eax, eax
mov esi, dword [ebp - 0x3e26]
and eax, 0xfffffc00
mov byte [ebp - 0x320b], cl
lea eax, [esi + eax + 0x4698]
mov eax, dword [eax]
shr eax, 0x10
and eax, 0xff
cmp dl, 1
mov word [ebp - 0x31fe], ax
mov dl, byte [ebp - 0x3d6f]
sbb eax, eax
and eax, 0xfffffc00
lea eax, [esi + eax + 0x4404]
mov eax, dword [eax]
mov byte [ebp - 0x320a], dl
mov edx, eax
and edx, 0xf0
shr edx, 4
mov byte [ebp - 0x3204], dl
mov edx, eax
and edx, 0xf000
shr edx, 0xc
mov byte [ebp - 0x3205], dl
mov edx, eax
and edx, 0xf
mov byte [ebp - 0x3203], dl
mov edx, eax
and edx, 0xff0000
shr edx, 0x10
cmp byte [ebp - 0x3d65], 0x10
mov word [ebp - 0x3202], dx
je short loc_fffa3beb  ; je 0xfffa3beb
shr eax, 0x1e
jmp short loc_fffa3bed  ; jmp 0xfffa3bed

loc_fffa3beb:
mov al, 0x10

loc_fffa3bed:
mov byte [ebp - 0x3200], al
mov word [ebp - 0x31f8], 0
mov esi, 1

loc_fffa3c01:
inc ebx
cmp ebx, 2
jne loc_fffa3a96  ; jne 0xfffa3a96
inc edi
add dword [ebp - 0x6314], 0x1055
cmp edi, 2
je loc_fffa3cba  ; je 0xfffa3cba

loc_fffa3c1f:
imul eax, edi, 0x8c
lea ebx, [edi + edi]
mov dword [ebp - 0x631c], eax
mov dword [ebp - 0x6318], ebx
xor ebx, ebx
jmp near loc_fffa3a96  ; jmp 0xfffa3a96

loc_fffa3c3b:
mov ecx, ebx
mov edx, esi
lea eax, [ebp - 0x6049]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffa3cac  ; je 0xfffa3cac
imul eax, esi, 0x36
mov ecx, dword [ebp - 0x6314]
lea edx, [eax + edi + 0x1b0]
lea eax, [eax + ecx + 0x2ad0]
lea edx, [ebp + edx - 0x603c]
lea eax, [ebp + eax - 0x6032]
mov ecx, 0x36
call fcn_fffa2408  ; call 0xfffa2408
imul eax, esi, 0x24
imul ecx, ebx, 0x90
lea edx, [eax + edi + 0x280]
lea eax, [eax + ecx + 0x2c80]
lea edx, [ebp + edx - 0x6034]
lea eax, [ebp + eax - 0x6032]
mov ecx, 0x24
call fcn_fffa2408  ; call 0xfffa2408

loc_fffa3cac:
inc esi
cmp esi, 4
jne short loc_fffa3c3b  ; jne 0xfffa3c3b
inc ebx
cmp ebx, 2
jne short loc_fffa3cbc  ; jne 0xfffa3cbc
jmp short loc_fffa3cd5  ; jmp 0xfffa3cd5

loc_fffa3cba:
xor ebx, ebx

loc_fffa3cbc:
imul eax, ebx, 0xd8
imul edi, ebx, 0x1055
xor esi, esi
mov dword [ebp - 0x6314], eax
jmp near loc_fffa3c3b  ; jmp 0xfffa3c3b

loc_fffa3cd5:
mov al, byte [ebp - 0x3f1f]
mov byte [ebp - 0x359a], al
mov al, byte [ebp - 0x3ed9]
mov byte [ebp - 0x3599], al
mov al, byte [ebp - 0x3e93]
mov byte [ebp - 0x3598], al
mov al, byte [ebp - 0x3e4d]
mov byte [ebp - 0x3597], al
mov eax, dword [ebp - 0x6034]
mov dword [ebp - 0x3280], eax
mov eax, dword [ebp - 0x6017]
mov dword [ebp - 0x327c], eax
mov eax, dword [ebp - 0x4fdf]
mov dword [ebp - 0x3270], eax
mov eax, dword [ebp - 0x4fc2]
mov dword [ebp - 0x326c], eax
mov eax, dword [ebp - 0x6045]
mov dword [ebp - 0x3260], eax
mov eax, dword [ebp - 0x6028]
mov dword [ebp - 0x325c], eax
mov eax, dword [ebp - 0x4ff0]
mov dword [ebp - 0x3250], eax
mov eax, dword [ebp - 0x4fd3]
mov dword [ebp - 0x324c], eax
mov al, byte [ebp - 0x3f94]
mov byte [ebp - 0x359f], al
jmp short loc_fffa3dc1  ; jmp 0xfffa3dc1

loc_fffa3d73:
cmp eax, 3
mov dword [ebp - 0x6300], 0
jne short loc_fffa3dc1  ; jne 0xfffa3dc1
lea eax, [ebp - 0x3d44]
call fcn_fffb4dcc  ; call 0xfffb4dcc
push 0
mov ebx, eax
mov ecx, ref_fffc99d8  ; mov ecx, 0xfffc99d8
push 0x4400
lea edx, [ebp - 0x323f]
lea eax, [ebp - 0x3bfa]
push 0x14a
push 0x1d
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
cmovne ebx, eax
mov dword [ebp - 0x6300], ebx

loc_fffa3dc1:
lea edx, [ebp - 0x31a0]
lea eax, [ebp - 0x3d44]
call fcn_fffc76c6  ; call 0xfffc76c6
test eax, eax
mov ebx, eax
mov edx, 0xdd53
cmove ebx, dword [ebp - 0x6300]
lea eax, [ebp - 0x6049]
call fcn_fffad891  ; call 0xfffad891
test ebx, ebx
je loc_fffa3753  ; je 0xfffa3753
jmp near loc_fffa4b12  ; jmp 0xfffa4b12

loc_fffa3dfa:
mov esi, 0x8000f8a0
mov edi, 0xcf8
mov eax, esi
mov edx, edi
out dx, eax
mov ebx, 0xcfc
mov edx, ebx
in eax, dx
mov ecx, eax
mov edx, edi
mov eax, esi
out dx, eax
or ecx, 0x800000
mov edx, ebx
mov eax, ecx
out dx, eax

loc_fffa3e23:
mov edx, dword [ebp - 0x3e26]
mov eax, dword [edx + 0x5030]
or eax, 1
mov dword [edx + 0x5030], eax
mov edx, dword [ebp - 0x3e26]
mov eax, dword [edx + 0x5030]
or al, 0x80
mov dword [edx + 0x5030], eax
mov edi, dword [ebp - 0x3e26]
cmp byte [ebp - 0x600f], 0
mov ecx, dword [edi + 0x5064]
mov dword [ebp - 0x6314], ecx
jne loc_fffa49da  ; jne 0xfffa49da
jmp near loc_fffa49e5  ; jmp 0xfffa49e5

loc_fffa3e70:
and ebx, 0xfff
mov ecx, dword [ebp - 0x3f93]
imul eax, ebx, 0x3e8
xor edx, edx
shr ecx, 1
mov esi, 0x1f4
div ecx
xor edx, edx
mov dword [ebp - 0x6310], 2
mov ebx, eax
lea eax, [eax + 0x4b1]
div esi
cmp eax, 2
cmovb eax, dword [ebp - 0x6310]
mov dword [ebp - 0x6310], eax
mov eax, dword [ebp - 0x6314]
and eax, 0xfff
xor edx, edx
imul eax, eax, 0x3e8
div ecx
xor edx, edx
mov ecx, dword [ebp - 0x6310]
inc ecx
lea esi, [ebx + eax + 0x2bc]
mov ebx, 0x1f4
lea eax, [esi + 0x1f5]
div ebx
mov bx, 0x64
cmp ecx, eax
cmovae eax, ecx
xor edx, edx
mov dword [ebp - 0x6300], eax
mov eax, dword [edi + 0x5f10]
and eax, 0xfff00
mov ecx, dword [edi + 0x5d10]
shr eax, 8
imul eax, eax, 0x3e8
div ebx
add eax, 0x1f5
mov dword [ebp - 0x6314], eax
xor eax, eax
test ecx, 0x40000000
je short loc_fffa3f41  ; je 0xfffa3f41
mov ecx, dword [edi + 0x5f18]
xor edx, edx
mov eax, ecx
and eax, 0xfff00
shr eax, 8
imul eax, eax, 0x3e8
div ebx

loc_fffa3f41:
mov ebx, dword [ebp - 0x6310]
and ecx, 0xffffc0c0
shl ebx, 8
mov edx, dword [ebp - 0x6300]
or ebx, 7
add eax, esi
or ebx, ecx
add eax, dword [ebp - 0x6314]
shl edx, 0x10
and ebx, 0xffc0ffff
or ebx, edx
mov ecx, 0x1f4
xor edx, edx
and ebx, 0xc0ffffff
div ecx
mov ecx, dword [ebp - 0x6300]
inc ecx
cmp eax, ecx
cmovb eax, ecx
shl eax, 0x18
or eax, ebx
mov dword [edi + 0x5d10], eax

loc_fffa3f94:
mov edx, 0x55
lea eax, [ebp - 0x6049]
call fcn_fffad891  ; call 0xfffad891
jmp near loc_fffa43e7  ; jmp 0xfffa43e7

loc_fffa3fa9:
mov eax, dword [0xf00f80f0]
and eax, 0xfffffffe
mov esi, dword [eax + 0x3404]
mov edx, esi
mov dword [ebp - 0x6300], esi
and dl, 0x7c
lea esi, [ebp - 0x6049]
or dl, 0x80
mov dword [eax + 0x3404], edx
mov eax, dword [eax + 0x3404]
mov dword [ebp - 0x62d8], eax
mov eax, dword [0xfed00010]
or eax, 1
mov dword [0xfed00010], eax
mov eax, dword [ebp - 0x62d8]

loc_fffa3ff0:
mov ebx, dword [ebp - 0x62e4]
mov eax, dword [ebp - 0x6308]
mov dword [ebp - 0x3ded], eax
cmp dword [ebp - 0x6308], 2
mov eax, dword [ebx + 9]
movzx eax, byte [eax + 0x11]
mov dword [ebp - 0x3de9], 0x46
mov dword [ebp - 0x3d87], eax
mov dword [ebp - 0x3de5], 0
mov eax, dword [ebx + 9]
mov al, byte [eax + 0x40]
mov byte [ebp - 0x3e1a], al
mov eax, dword [ebx + 9]
mov eax, dword [eax + 0x42]
mov dword [ebp - 0x3e19], eax
mov eax, dword [ebx + 9]
mov al, byte [eax + 0x41]
mov byte [ebp - 0x320d], al
mov eax, dword [ebx + 9]
movzx eax, byte [eax + 0x2d]
mov dword [ebp - 0x3dd9], eax
mov eax, dword [ebx + 9]
movzx eax, byte [eax + 0x46]
mov dword [ebp - 0x3d54], eax
je short loc_fffa40d6  ; je 0xfffa40d6
cmp dword [ebp - 0x6308], 3
jne loc_fffa4211  ; jne 0xfffa4211
mov eax, dword [ebx + 1]
sub esp, 0xc
mov edx, ebx
mov ecx, 3
mov eax, dword [eax + 4]
mov dword [ebp - 0x3e26], eax
mov eax, dword [ebx + 1]
mov eax, dword [eax + 0x10]
mov dword [ebp - 0x3e2a], eax
mov eax, dword [ebx + 1]
mov eax, dword [eax + 0x14]
mov dword [ebp - 0x3d9d], 1
push 4
mov dword [ebp - 0x3e1e], eax
mov eax, esi
mov word [ebp - 0x3d99], 0x30ce
mov byte [ebp - 0x3d97], 1
call fcn_fffacfd8  ; call 0xfffacfd8
mov edx, ebx
mov eax, esi
call fcn_fffae35e  ; call 0xfffae35e
jmp near loc_fffa420e  ; jmp 0xfffa420e

loc_fffa40d6:
mov eax, dword [ebx + 1]
sub esp, 0xc
mov ecx, 2
mov edx, ebx
mov eax, dword [eax + 4]
mov dword [ebp - 0x3e26], eax
mov eax, dword [ebx + 1]
mov eax, dword [eax + 0x10]
mov dword [ebp - 0x3e2a], eax
mov eax, dword [ebx + 1]
mov eax, dword [eax + 0x14]
mov dword [ebp - 0x3e1e], eax
mov eax, dword [ebx + 9]
movzx eax, byte [eax]
mov dword [ebp - 0x3e05], eax
mov eax, dword [ebx + 9]
mov al, byte [eax + 0xf]
mov dword [ebp - 0x3d9d], 1
mov byte [ebp - 0x3d65], al
mov word [ebp - 0x3d99], 0x30ce
mov byte [ebp - 0x3d97], 1
mov eax, dword [ebx + 1]
mov eax, dword [eax + 0x18]
mov dword [ebp - 0x3e22], eax
mov eax, dword [ebx + 5]
movzx eax, word [eax]
mov dword [ebp - 0x3db9], eax
mov eax, dword [ebx + 5]
movzx eax, word [eax + 2]
mov dword [ebp - 0x3dc1], 0
mov dword [ebp - 0x3db1], eax
mov eax, dword [ebx + 9]
movzx eax, word [eax + 1]
mov dword [ebp - 0x3dfd], eax
mov eax, dword [ebx + 1]
mov eax, dword [eax + 0x20]
shr eax, 0x14
mov dword [ebp - 0x3da5], eax
mov eax, dword [ebx + 5]
movzx eax, byte [eax + 4]
mov dword [ebp - 0x3dad], 0
mov dword [ebp - 0x3db5], eax
mov ax, word [0xf0000050]
shr ax, 1
mov dword [ebp - 0x3e09], 0
xor eax, 1
mov dword [ebp - 0x3e0d], 1
and eax, 1
mov dword [ebp - 0x3da9], eax
mov eax, dword [ebx + 9]
mov al, byte [eax + 0x27]
push 4
mov byte [ebp - 0x3d7f], al
mov eax, esi
call fcn_fffacfd8  ; call 0xfffacfd8
mov edx, ebx
mov eax, esi
call fcn_fffae35e  ; call 0xfffae35e
add esp, 0xc
lea eax, [ebp - 0x3d89]
push eax
lea eax, [ebp - 0x3d8a]
lea ecx, [ebp - 0x3d8c]
push eax
lea eax, [ebp - 0x3d8b]
lea edx, [ebp - 0x3d8d]
push eax
lea eax, [ebp - 0x3d8e]
call fcn_fffadf3b  ; call 0xfffadf3b

loc_fffa420e:
add esp, 0x10

loc_fffa4211:
cmp dword [ebp - 0x3ded], 2
jne short loc_fffa4235  ; jne 0xfffa4235
push ecx
mov eax, dword [ebp - 0x62e0]
push ecx
push 0
push dword [ebp - 0x62fc]
call dword [eax]  ; ucall
mov dword [ebp - 0x3dc1], eax
add esp, 0x10

loc_fffa4235:
mov ecx, 1
mov dword [ebp - 0x6310], 0

loc_fffa4244:
imul edi, dword [ebp - 0x6310], 0xc
mov eax, dword [ebp - 0x6310]
add eax, 0xdd20
lea ebx, [edi + ref_fffc9a68]  ; lea ebx, [edi - 0x36598]
movzx edx, word [ebx + 4]
cmp word [ebx + 4], 0xffff
cmove edx, eax
mov eax, esi
mov dword [ebp - 0x633c], ecx
call fcn_fffad891  ; call 0xfffad891
cmp dword [edi + ref_fffc9a68], 0  ; cmp dword [edi - 0x36598], 0
mov ecx, dword [ebp - 0x633c]
je loc_fffa4332  ; je 0xfffa4332
mov dl, byte [ebx + 0xb]
cmp byte [ebp - 0x3d7a], dl
jae loc_fffa4332  ; jae 0xfffa4332
mov eax, dword [ebp - 0x3d79]
test eax, eax
jne short loc_fffa42a7  ; jne 0xfffa42a7
test byte [ebx + 0xa], 0x10
jmp short loc_fffa42b2  ; jmp 0xfffa42b2

loc_fffa42a7:
dec eax
jne loc_fffa4332  ; jne 0xfffa4332
test byte [ebx + 0xa], 0x20

loc_fffa42b2:
je short loc_fffa4332  ; je 0xfffa4332
mov eax, dword [ebp - 0x3ded]
test eax, eax
jne short loc_fffa42c4  ; jne 0xfffa42c4
test byte [ebx + 0xa], 8
jmp short loc_fffa42e3  ; jmp 0xfffa42e3

loc_fffa42c4:
cmp eax, 3
jne short loc_fffa42cf  ; jne 0xfffa42cf
test byte [ebx + 0xa], 2
jmp short loc_fffa42e3  ; jmp 0xfffa42e3

loc_fffa42cf:
cmp eax, 1
jne short loc_fffa42da  ; jne 0xfffa42da
test byte [ebx + 0xa], 4
jmp short loc_fffa42e3  ; jmp 0xfffa42e3

loc_fffa42da:
cmp eax, 2
jne short loc_fffa4332  ; jne 0xfffa4332
test byte [ebx + 0xa], 1

loc_fffa42e3:
je short loc_fffa4332  ; je 0xfffa4332
mov eax, dword [ebx + 6]
cmp eax, 0x18
ja short loc_fffa430b  ; ja 0xfffa430b
cmp eax, 0x16
je short loc_fffa42f9  ; je 0xfffa42f9
cmp eax, 0x18
jne short loc_fffa430b  ; jne 0xfffa430b
jmp short loc_fffa4302  ; jmp 0xfffa4302

loc_fffa42f9:
mov eax, esi
call fcn_fffad3a9  ; call 0xfffad3a9
jmp short loc_fffa430b  ; jmp 0xfffa430b

loc_fffa4302:
cmp dword [ebp - 0x3d54], 1
jne short loc_fffa4332  ; jne 0xfffa4332

loc_fffa430b:
call fcn_fffad7a7  ; call 0xfffad7a7
sub esp, 0xc
push esi
call dword [edi + ref_fffc9a68]  ; ucall: call dword [edi - 0x36598]
mov dword [ebp - 0x633c], eax
call fcn_fffad7a7  ; call 0xfffad7a7
mov ecx, dword [ebp - 0x633c]
add esp, 0x10
test ecx, ecx
jne short loc_fffa4345  ; jne 0xfffa4345

loc_fffa4332:
inc dword [ebp - 0x6310]
cmp dword [ebp - 0x6310], 0x1b
jne loc_fffa4244  ; jne 0xfffa4244

loc_fffa4345:
cmp ecx, 0x10
je short loc_fffa436b  ; je 0xfffa436b
ja short loc_fffa435b  ; ja 0xfffa435b
test ecx, ecx
je loc_fffa49fd  ; je 0xfffa49fd
cmp ecx, 0xf
jne short loc_fffa439c  ; jne 0xfffa439c
jmp short loc_fffa43ab  ; jmp 0xfffa43ab

loc_fffa435b:
cmp ecx, 0x11
je short loc_fffa437a  ; je 0xfffa437a
cmp ecx, 0x12
je loc_fffa498b  ; je 0xfffa498b
jmp short loc_fffa439c  ; jmp 0xfffa439c

loc_fffa436b:
mov dword [ebp - 0x6308], 2
jmp near loc_fffa3ff0  ; jmp 0xfffa3ff0

loc_fffa437a:
mov ecx, dword [ebp - 0x62fc]
sub esp, 0xc
mov eax, dword [ecx]
mov eax, dword [eax + 0x60]
push 0xdd70
push 0
push 0x80
push eax
push ecx
call dword [eax + 0x24]  ; ucall

loc_fffa4399:
add esp, 0x20

loc_fffa439c:
mov dword [ebp - 0x6310], 0x80000007
jmp near loc_fffa4b12  ; jmp 0xfffa4b12

loc_fffa43ab:
push 1
push dword [ebp - 0x6308]
mov eax, dword [ebp - 0x62e0]
push 0
push dword [ebp - 0x62fc]
call dword [eax + 8]  ; ucall
mov ebx, dword [ebp - 0x62fc]
pop eax
pop edx
mov eax, dword [ebx]
push 0
push 0
push 0
push 0x51009
push 2
push ebx
call dword [eax + 0x58]  ; ucall
add esp, 0x20
jmp near loc_fffa498b  ; jmp 0xfffa498b

loc_fffa43e7:
cmp dword [ebp - 0x62ec], 0x11
je loc_fffa4562  ; je 0xfffa4562
mov esi, dword [ebp - 0x62fc]
lea edx, [ebp - 0x62c0]
mov eax, dword [esi]
push edx
push 0x47d6
push 4
push esi
call dword [eax + 0x34]  ; ucall
add esp, 0x10
test eax, eax
js loc_fffa4562  ; js 0xfffa4562
mov edi, dword [ebp - 0x62c0]
mov esi, ref_fffcfaac  ; mov esi, 0xfffcfaac
add edi, 8
mov ecx, 4
mov eax, 1
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
cpuid
and eax, 0xffff0
cmp eax, 0x206a0
jne short loc_fffa444d  ; jne 0xfffa444d
mov ecx, 4
mov edx, ref_fffc9a60  ; mov edx, 0xfffc9a60
jmp short loc_fffa445e  ; jmp 0xfffa445e

loc_fffa444d:
cmp eax, 0x306a0
jne short loc_fffa4469  ; jne 0xfffa4469
mov ecx, 4
mov edx, ref_fffc9a64  ; mov edx, 0xfffc9a64

loc_fffa445e:
lea eax, [ebp - 0x6219]
call fcn_fffa2408  ; call 0xfffa2408

loc_fffa4469:
cmp dword [ebp - 0x3ded], 2
jne short loc_fffa44c2  ; jne 0xfffa44c2
lea ecx, [ebp - 0x31f1]
xor edx, edx
lea eax, [ebp - 0x6049]
call fcn_fffadfd0  ; call 0xfffadfd0
lea ecx, [ebp - 0x31d6]
mov edx, 2
lea eax, [ebp - 0x6049]
call fcn_fffadfd0  ; call 0xfffadfd0
mov edx, 3
lea eax, [ebp - 0x6049]
lea ecx, [ebp - 0x31bb]
call fcn_fffadfd0  ; call 0xfffadfd0
lea edx, [ebp - 0x31a0]
lea eax, [ebp - 0x3d44]
call fcn_fffc76c6  ; call 0xfffc76c6

loc_fffa44c2:
cmp byte [ebp - 0x3d65], 0x10
jne short loc_fffa44d9  ; jne 0xfffa44d9
mov byte [ebp - 0x6004], 0x10
mov byte [ebp - 0x4faf], 0x10

loc_fffa44d9:
mov eax, dword [ebp - 0x62c0]
mov ecx, 4
add eax, 0x18
lea edx, [ebp - 0x6219]
call fcn_fffa2408  ; call 0xfffa2408
mov eax, dword [ebp - 0x62c0]
mov ecx, 0x2107
add eax, 0x1c
lea edx, [ebp - 0x6049]
call fcn_fffa2408  ; call 0xfffa2408
mov eax, dword [ebp - 0x62c0]
lea edx, [ebp - 0x3d44]
add eax, 0x2123
mov ecx, 0xba8
call fcn_fffa2408  ; call 0xfffa2408
mov eax, dword [ebp - 0x62c0]
mov edx, dword [ebp - 0x3f51]
test edx, edx
mov dword [eax + 0x2ccb], edx
jne short loc_fffa4548  ; jne 0xfffa4548
mov edx, dword [ebp - 0x3dc5]
mov dword [eax + 0x2ccb], edx

loc_fffa4548:
movzx edx, word [ebp - 0x3f4d]
test dx, dx
je short loc_fffa4556  ; je 0xfffa4556
jmp short loc_fffa455c  ; jmp 0xfffa455c

loc_fffa4556:
mov edx, dword [ebp - 0x3dc5]

loc_fffa455c:
mov dword [eax + 0x2ccf], edx

loc_fffa4562:
cmp dword [ebp - 0x3dc1], 0x20
ja short loc_fffa458f  ; ja 0xfffa458f
mov eax, dword [0xf00b0010]
inc eax
je short loc_fffa458f  ; je 0xfffa458f
push 0
push dword [ebp - 0x6308]
mov eax, dword [ebp - 0x62e0]
push 0
push dword [ebp - 0x62fc]
call dword [eax + 8]  ; ucall
add esp, 0x10

loc_fffa458f:
mov edi, dword [ebp - 0x62fc]
sub esp, 0xc
lea edx, [ebp - 0x62c0]
mov eax, dword [edi]
push edx
push 0
push 0
push ref_fffcfabc  ; push 0xfffcfabc
push edi
call dword [eax + 0x20]  ; ucall
add esp, 0x18
lea edx, [ebp - 0x62cc]
push edx
lea edx, [ebp - 0x62d0]
mov eax, dword [ebp - 0x62c0]
push edx
lea edx, [ebp - 0x62c4]
push edx
lea edx, [ebp - 0x62c8]
push edx
push eax
push edi
call dword [eax]  ; ucall
mov eax, dword [ebp - 0x62c4]
add esp, 0x20
test eax, 0x30000
mov ecx, dword [0xf00000bc]
mov byte [ebp - 0x6219], 0
mov dword [ebp - 0x6218], 0
mov dword [ebp - 0x6214], 0
mov dword [ebp - 0x6210], 0
mov dword [ebp - 0x620c], 0
mov dword [ebp - 0x6208], 0xa0000
mov dword [ebp - 0x6204], 0
mov dword [ebp - 0x6200], 0
mov dword [ebp - 0x6310], eax
mov dword [ebp - 0x61fb], 0xa0000
mov dword [ebp - 0x61f7], 0
je short loc_fffa46a2  ; je 0xfffa46a2
test eax, 0x10000
mov dword [ebp - 0x61eb], 0x20000
mov dword [ebp - 0x61e7], 0
je short loc_fffa467b  ; je 0xfffa467b
mov dword [ebp - 0x61f3], 0xa0000
jmp short loc_fffa4685  ; jmp 0xfffa4685

loc_fffa467b:
mov dword [ebp - 0x61f3], 0xfeda0000

loc_fffa4685:
mov dword [ebp - 0x61ef], 0
mov dword [ebp - 0x61e3], 1
mov byte [ebp - 0x6300], 1
jmp short loc_fffa46db  ; jmp 0xfffa46db

loc_fffa46a2:
mov dword [ebp - 0x61f3], 0xa0000
mov dword [ebp - 0x61ef], 0
mov dword [ebp - 0x61eb], 0x60000
mov dword [ebp - 0x61e7], 0
mov dword [ebp - 0x61e3], 5
mov byte [ebp - 0x6300], 0

loc_fffa46db:
and ecx, 0xfff00000
xor ebx, ebx
mov eax, ecx
mov edx, ebx
add eax, 0xfff00000
mov byte [ebp - 0x61fc], 0
adc edx, 0xffffffff
mov esi, edx
or esi, eax
je short loc_fffa474a  ; je 0xfffa474a
mov byte [ebp - 0x61df], 0
mov dword [ebp - 0x61de], 0x100000
mov dword [ebp - 0x61da], 0
mov dword [ebp - 0x61d6], 0x100000
mov dword [ebp - 0x61d2], 0
mov dword [ebp - 0x61ce], eax
mov dword [ebp - 0x61ca], edx
mov dword [ebp - 0x61c6], 0
mov byte [ebp - 0x62fc], 3
jmp short loc_fffa4758  ; jmp 0xfffa4758

loc_fffa474a:
mov byte [ebp - 0x62fc], 2
mov ecx, 0x100000
xor ebx, ebx

loc_fffa4758:
mov al, byte [ebp - 0x62fc]
mov esi, dword [ebp - 0x62d0]
dec eax
test esi, esi
mov byte [ebp - 0x6314], al
je loc_fffa481f  ; je 0xfffa481f
movzx eax, byte [ebp - 0x62fc]
lea edx, [ebp - 0x6219]
imul eax, eax, 0x1d
mov dword [ebp - 0x6344], 0
add edx, eax
mov eax, esi
shl eax, 0x13
mov dword [ebp - 0x6308], edx
mov edi, dword [ebp - 0x6308]
mov dword [ebp - 0x6348], eax
mov edx, dword [ebp - 0x6344]
mov eax, dword [ebp - 0x6348]
mov dword [edi + 0x11], eax
mov dword [edi + 0x15], edx
movzx edi, byte [ebp - 0x6314]
lea edx, [ebp - 0x6219]
imul eax, edi, 0x1d
add edx, eax
sub ecx, dword [ebp - 0x6348]
mov dword [ebp - 0x6318], edx
mov edi, dword [ebp - 0x6318]
sbb ebx, dword [ebp - 0x6344]
mov al, byte [edx]
mov edx, dword [ebp - 0x6308]
mov byte [edx], al
mov dword [edx + 1], ecx
mov dword [edx + 5], ebx
mov dword [edx + 9], ecx
mov dword [edx + 0xd], ebx
mov eax, dword [ebp - 0x6348]
sub dword [edi + 0x11], eax
mov eax, dword [ebp - 0x6308]
mov edx, dword [ebp - 0x6344]
sbb dword [edi + 0x15], edx
sar esi, 0x1f
inc byte [ebp - 0x62fc]
add esi, 4
mov dword [eax + 0x19], esi

loc_fffa481f:
test dword [ebp - 0x6310], 0x40000
je short loc_fffa488d  ; je 0xfffa488d
movzx edx, word [ebp - 0x6310]
mov eax, 1
jmp short loc_fffa483d  ; jmp 0xfffa483d

loc_fffa4839:
shr edx, 1
add eax, eax

loc_fffa483d:
test edx, edx
jne short loc_fffa4839  ; jne 0xfffa4839
shr eax, 1
cmp eax, 0x40
je loc_fffa4a42  ; je 0xfffa4a42
ja short loc_fffa485c  ; ja 0xfffa485c
cmp eax, 8
je loc_fffa4a42  ; je 0xfffa4a42
cmp eax, 0x10
jmp short loc_fffa486c  ; jmp 0xfffa486c

loc_fffa485c:
cmp eax, 0x80
je loc_fffa4a42  ; je 0xfffa4a42
cmp eax, 0x100

loc_fffa486c:
je loc_fffa4a42  ; je 0xfffa4a42

loc_fffa4872:
movzx eax, byte [ebp - 0x62fc]
inc byte [ebp - 0x62fc]
imul eax, eax, 0x1d
mov dword [ebp + eax - 0x6200], 1

loc_fffa488d:
cmp byte [ebp - 0x6300], 0
je short loc_fffa48a3  ; je 0xfffa48a3
mov al, byte [0xf0000088]
or eax, 8
mov byte [0xf0000088], al

loc_fffa48a3:
lea ebx, [ebp - 0x6219]
xor ecx, ecx
mov edx, ebx
xor eax, eax

loc_fffa48af:
mov esi, dword [edx + 0x19]
dec esi
cmp esi, 2
adc cl, 0
inc eax
add edx, 0x1d
cmp al, byte [ebp - 0x62fc]
jb short loc_fffa48af  ; jb 0xfffa48af
test cl, cl
mov edx, 0x24
je short loc_fffa48d7  ; je 0xfffa48d7
movzx eax, cl
shl eax, 5
lea edx, [eax + 4]

loc_fffa48d7:
mov eax, ref_fffcfa7c  ; mov eax, 0xfffcfa7c
mov byte [ebp - 0x633c], cl
call fcn_fffa2422  ; call 0xfffa2422
movzx ecx, byte [ebp - 0x633c]
test eax, eax
jne short loc_fffa4901  ; jne 0xfffa4901

loc_fffa48f2:
mov dword [ebp - 0x6310], 0
jmp near loc_fffa4b12  ; jmp 0xfffa4b12

loc_fffa4901:
mov dword [eax], ecx
mov byte [ebp - 0x6300], 0
mov byte [ebp - 0x6308], 0

loc_fffa4911:
mov edi, dword [ebx + 0x19]
lea esi, [edi - 1]
cmp esi, 1
ja short loc_fffa496f  ; ja 0xfffa496f
movzx esi, byte [ebp - 0x6300]
mov edx, dword [ebx + 1]
shl esi, 5
mov ecx, dword [ebx + 5]
add esi, eax
mov dword [esi + 4], edx
mov dword [esi + 8], ecx
mov edx, dword [ebx + 9]
mov ecx, dword [ebx + 0xd]
mov dword [esi + 0x10], ecx
mov dword [esi + 0xc], edx
add esi, 0x10
mov edx, dword [ebx + 0x11]
mov ecx, dword [ebx + 0x15]
dec edi
mov dword [esi + 4], edx
mov dword [esi + 8], ecx
jne short loc_fffa495b  ; jne 0xfffa495b
mov dword [esi + 0xc], 0xa
jmp short loc_fffa4962  ; jmp 0xfffa4962

loc_fffa495b:
mov dword [esi + 0xc], 2

loc_fffa4962:
mov dword [esi + 0x10], 0
inc byte [ebp - 0x6300]

loc_fffa496f:
inc byte [ebp - 0x6308]
add ebx, 0x1d
mov cl, byte [ebp - 0x62fc]
cmp byte [ebp - 0x6308], cl
jb short loc_fffa4911  ; jb 0xfffa4911
jmp near loc_fffa48f2  ; jmp 0xfffa48f2

loc_fffa498b:
mov dword [ebp - 0x6310], 0x8000001a
jmp near loc_fffa4b12  ; jmp 0xfffa4b12

loc_fffa499a:
test al, 1
jne loc_fffa26f0  ; jne 0xfffa26f0
jmp near loc_fffa26fb  ; jmp 0xfffa26fb

loc_fffa49a7:
mov dword [ebp - 0x6308], 2
jmp near loc_fffa29b2  ; jmp 0xfffa29b2

loc_fffa49b6:
cmp dword [ebp - 0x3f98], 1
jne loc_fffa2c96  ; jne 0xfffa2c96
jmp near loc_fffa2c7b  ; jmp 0xfffa2c7b

loc_fffa49c8:
cmp dword [ebp - 0x3d48], 1
jne loc_fffa34c7  ; jne 0xfffa34c7
jmp near loc_fffa32b3  ; jmp 0xfffa32b3

loc_fffa49da:
mov ebx, dword [edi + 0x42a4]
jmp near loc_fffa3e70  ; jmp 0xfffa3e70

loc_fffa49e5:
cmp byte [ebp - 0x4fba], 0
je loc_fffa3f94  ; je 0xfffa3f94
mov ebx, dword [edi + 0x46a4]
jmp near loc_fffa3e70  ; jmp 0xfffa3e70

loc_fffa49fd:
mov eax, dword [0xf00f80f0]
mov edx, dword [0xfed00010]
and eax, 0xfffffffe
and edx, 0xfffffffc
mov dword [0xfed00010], edx
mov edx, dword [0xfed00010]
mov ebx, dword [ebp - 0x6300]
mov dword [ebp - 0x62d4], edx
mov dword [eax + 0x3404], ebx
mov eax, dword [0xfed00010]
mov dword [ebp - 0x62d4], eax
mov eax, dword [ebp - 0x62d4]
jmp near loc_fffa43e7  ; jmp 0xfffa43e7

loc_fffa4a42:
movzx esi, byte [ebp - 0x62fc]
lea edi, [ebp - 0x6219]
imul esi, esi, 0x1d
mov dword [ebp - 0x630c], 0
add esi, edi
mov edx, dword [ebp - 0x630c]
shl eax, 0x11
movzx edi, byte [ebp - 0x6314]
mov dword [ebp - 0x6310], eax
mov eax, dword [ebp - 0x6310]
mov dword [esi + 0x11], eax
mov dword [esi + 0x15], edx
imul eax, edi, 0x1d
lea edx, [ebp - 0x6219]
add edx, eax
mov eax, dword [ebp - 0x6310]
neg eax
mov edi, edx
mov dword [ebp - 0x6300], edx
mov dword [ebp - 0x6308], eax
mov eax, ecx
mov dl, byte [edx]
mov byte [esi], dl
mov edx, dword [ebp - 0x630c]
adc edx, 0
neg edx
sub eax, dword [ebp - 0x6310]
mov dword [ebp - 0x6304], edx
mov dword [ebp - 0x6310], eax
mov edx, ebx
mov eax, dword [ebp - 0x6308]
sbb edx, dword [ebp - 0x630c]
and eax, dword [ebp - 0x6310]
mov dword [ebp - 0x630c], edx
mov edx, dword [ebp - 0x6304]
and edx, dword [ebp - 0x630c]
sub ecx, eax
mov dword [esi + 0x11], ecx
mov dword [esi + 1], eax
sbb ebx, edx
mov dword [esi + 5], edx
mov dword [esi + 0x15], ebx
mov dword [esi + 9], eax
mov dword [esi + 0xd], edx
sub dword [edi + 0x11], ecx
sbb dword [edi + 0x15], ebx
mov byte [ebp - 0x6300], 1
jmp near loc_fffa4872  ; jmp 0xfffa4872

loc_fffa4b12:
mov eax, dword [ebp - 0x6310]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffa4b20:
push ebp
mov edx, 0xdd20
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
lea esp, [esp - 0xbc]
call fcn_fffad891  ; call 0xfffad891
mov eax, edi
call fcn_fffc543c  ; call 0xfffc543c
test eax, eax
mov dword [ebp - 0x80], eax
mov edx, 0xdd22
jne loc_fffa6d57  ; jne 0xfffa6d57
mov edx, 0xdd21
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd23
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, dword [edi + 0x2223]
mov eax, dword [edx + 0x5e04]
test eax, eax
je short loc_fffa4bd5  ; je 0xfffa4bd5
mov eax, dword [edx + 0x4020]
or eax, 0x10000000
mov dword [edx + 0x4020], eax
mov edx, dword [edi + 0x2223]
mov eax, dword [edx + 0x4420]
or eax, 0x10000000
mov dword [edx + 0x4420], eax
mov eax, dword [edi + 0x2223]
mov dword [eax + 0x4c34], 0
mov eax, dword [edi + 0x2223]
mov dword [eax + 0x4c38], 0
mov eax, dword [edi + 0x2223]
mov dword [eax + 0x4c3c], 0
jmp near loc_fffa6c5d  ; jmp 0xfffa6c5d

loc_fffa4bd5:
mov eax, dword [edi + 0x20b6]
cmp eax, 0x535
je short loc_fffa4c12  ; je 0xfffa4c12
ja short loc_fffa4bf4  ; ja 0xfffa4bf4
cmp eax, 0x320
je short loc_fffa4c0b  ; je 0xfffa4c0b
cmp eax, 0x42b
jne short loc_fffa4c2e  ; jne 0xfffa4c2e
jmp short loc_fffa4c32  ; jmp 0xfffa4c32

loc_fffa4bf4:
cmp eax, 0x74b
je short loc_fffa4c20  ; je 0xfffa4c20
cmp eax, 0x855
je short loc_fffa4c27  ; je 0xfffa4c27
cmp eax, 0x640
jne short loc_fffa4c2e  ; jne 0xfffa4c2e
jmp short loc_fffa4c19  ; jmp 0xfffa4c19

loc_fffa4c0b:
mov eax, 3
jmp short loc_fffa4c37  ; jmp 0xfffa4c37

loc_fffa4c12:
mov eax, 5
jmp short loc_fffa4c37  ; jmp 0xfffa4c37

loc_fffa4c19:
mov eax, 6
jmp short loc_fffa4c37  ; jmp 0xfffa4c37

loc_fffa4c20:
mov eax, 7
jmp short loc_fffa4c37  ; jmp 0xfffa4c37

loc_fffa4c27:
mov eax, 8
jmp short loc_fffa4c37  ; jmp 0xfffa4c37

loc_fffa4c2e:
xor eax, eax
jmp short loc_fffa4c37  ; jmp 0xfffa4c37

loc_fffa4c32:
mov eax, 4

loc_fffa4c37:
or eax, 0x80000000
mov dword [edx + 0x5e00], eax
jmp short loc_fffa4c4a  ; jmp 0xfffa4c4a

loc_fffa4c44:
mov eax, dword [eax + 0x5e00]

loc_fffa4c4a:
test eax, eax
mov eax, dword [edi + 0x2223]
js short loc_fffa4c44  ; js 0xfffa4c44
mov edx, dword [eax + 0x5e04]
xor eax, eax
sub edx, 3
cmp dl, 5
ja short loc_fffa4c6f  ; ja 0xfffa4c6f
movzx edx, dl
movzx eax, word [edx + edx + ref_fffcf5a4]  ; movzx eax, word [edx + edx - 0x30a5c]

loc_fffa4c6f:
mov edx, dword [edi + 0x20b6]
cmp eax, edx
jae short loc_fffa4c9b  ; jae 0xfffa4c9b
test eax, eax
je loc_fffa5106  ; je 0xfffa5106
mov dword [edi + 0x20b6], eax
mov eax, edi
call fcn_fffc543c  ; call 0xfffc543c
test eax, eax
jne loc_fffa5106  ; jne 0xfffa5106
jmp near loc_fffa6c5d  ; jmp 0xfffa6c5d

loc_fffa4c9b:
cmp edx, eax
jb loc_fffa5106  ; jb 0xfffa5106
test eax, eax
je loc_fffa5106  ; je 0xfffa5106
jmp near loc_fffa6c5d  ; jmp 0xfffa6c5d

loc_fffa4cb0:
cmp byte [ebx + 0x3a], 0
jne loc_fffa6c8a  ; jne 0xfffa6c8a
jmp near loc_fffa4dae  ; jmp 0xfffa4dae

loc_fffa4cbf:
mov byte [ebx + 0x3a], 0
mov dword [ebx + 0xa], 0
mov dword [ebx + 0x27], 0
mov dword [ebx], 0
mov dword [ebx + 0x1d], 0
mov byte [ebx + 0x12], 0
mov byte [ebx + 0x2f], 0

loc_fffa4ce6:
mov edx, esi
mov eax, edi
call fcn_fffbf447  ; call 0xfffbf447
test eax, eax
je short loc_fffa4d1a  ; je 0xfffa4d1a
mov byte [ebx + 0x3a], 0
mov dword [ebx + 0xa], 0
mov dword [ebx + 0x27], 0
mov dword [ebx], 0
mov dword [ebx + 0x1d], 0
mov byte [ebx + 0x12], 0
mov byte [ebx + 0x2f], 0

loc_fffa4d1a:
movzx ecx, byte [edi + 0x20ae]
mov eax, esi
cmp al, 1
sbb edx, edx
and edx, 0xfffffc00
add edx, 0x440c
add edx, dword [edi + 0x2223]
mov eax, dword [edx]
and eax, 0xffffffe0
or eax, ecx
movzx ecx, byte [edi + 0x20af]
and al, 0x1f
shl ecx, 5
or eax, ecx
movzx ecx, byte [edi + 0x20b0]
and ah, 0xf0
shl ecx, 8
or eax, ecx
mov dword [edx], eax
cmp dword [edi + 0x2254], 2
jbe short loc_fffa4da0  ; jbe 0xfffa4da0
sub esp, 0xc
mov dword [ebx + 0x19], 8
mov dword [ebx + 0x36], 8
mov ecx, esi
push 8
xor edx, edx
mov eax, edi
call fcn_fffc03bf  ; call 0xfffc03bf
mov ecx, esi
mov edx, 2
mov eax, edi
mov dword [esp], 8
call fcn_fffc03bf  ; call 0xfffc03bf
add esp, 0x10
jmp short loc_fffa4dae  ; jmp 0xfffa4dae

loc_fffa4da0:
mov dword [ebx + 0x19], 6
mov dword [ebx + 0x36], 6

loc_fffa4dae:
inc esi
add ebx, 0x1055
cmp esi, 2
jne loc_fffa4cb0  ; jne 0xfffa4cb0
cmp byte [edi + 0x3a], 0
jne loc_fffa6ca0  ; jne 0xfffa6ca0

loc_fffa4dc8:
cmp byte [edi + 0x108f], 0
jne loc_fffa6cb7  ; jne 0xfffa6cb7

loc_fffa4dd5:
mov eax, dword [edi + 0x2223]
mov dword [eax + 0x4e80], 0x5500
mov eax, dword [edi + 0x2223]
mov dword [eax + 0x4c20], 0x10100005
cmp dword [edi + 0x2254], 1
mov eax, dword [edi + 0x2223]
ja short loc_fffa4e10  ; ja 0xfffa4e10
mov dword [eax + 0x4f8c], 0x141d1519
jmp short loc_fffa4e1a  ; jmp 0xfffa4e1a

loc_fffa4e10:
mov dword [eax + 0x4f8c], 0x551d1519

loc_fffa4e1a:
mov eax, edi
call fcn_fffbb2be  ; call 0xfffbb2be
mov dword [ebp - 0x84], 0x5004
mov dword [ebp - 0x80], 0

loc_fffa4e32:
mov eax, dword [edi + 0x221f]
mov eax, dword [eax + 0xe4]
test ah, 0x40
jne short loc_fffa4e95  ; jne 0xfffa4e95

loc_fffa4e43:
mov ebx, dword [edi + 0x107c]
mov esi, dword [edi + 0x27]
mov eax, dword [edi + 0x105f]
mov edx, dword [edi + 0xa]
mov dword [ebp - 0x7c], eax
mov al, byte [ebp - 0x7c]
shl eax, 2
mov dword [ebp - 0x8c], edx
mov dl, byte [edi + 0x227c]
lea ecx, [ebx*8]
shl edx, 2
or eax, ecx
or dl, byte [edi + 0x2278]
lea ecx, [esi + esi]
movzx edx, dl
or ecx, dword [ebp - 0x8c]
or eax, ecx
not edx
movzx eax, al
test edx, eax
je short loc_fffa4ef9  ; je 0xfffa4ef9
jmp short loc_fffa4f0d  ; jmp 0xfffa4f0d

loc_fffa4e95:
cmp dword [edi + 0x27], 0
je short loc_fffa4eb7  ; je 0xfffa4eb7
cmp dword [edi + 0xa], 0
je short loc_fffa4eb7  ; je 0xfffa4eb7
mov ecx, dword [edi]
cmp dword [edi + 0x1d], ecx
jb short loc_fffa4eb0  ; jb 0xfffa4eb0
mov dword [edi], 0
jmp short loc_fffa4eb7  ; jmp 0xfffa4eb7

loc_fffa4eb0:
mov dword [edi + 0x1d], 0

loc_fffa4eb7:
cmp dword [edi + 0x107c], 0
je short loc_fffa4e43  ; je 0xfffa4e43
cmp dword [edi + 0x105f], 0
je loc_fffa4e43  ; je 0xfffa4e43
mov ebx, dword [edi + 0x1055]
cmp dword [edi + 0x1072], ebx
jae short loc_fffa4eea  ; jae 0xfffa4eea
mov dword [edi + 0x1072], 0
jmp near loc_fffa4e43  ; jmp 0xfffa4e43

loc_fffa4eea:
mov dword [edi + 0x1055], 0
jmp near loc_fffa4e43  ; jmp 0xfffa4e43

loc_fffa4ef9:
mov dword [edi + 0x2278], 0
mov dword [edi + 0x227c], 0

loc_fffa4f0d:
mov eax, dword [edi + 0x2278]
test eax, eax
je short loc_fffa4f41  ; je 0xfffa4f41
mov edx, eax
and edx, 0xfffffffd
dec edx
jne short loc_fffa4f2e  ; jne 0xfffa4f2e
cmp dword [ebp - 0x8c], 0
je short loc_fffa4f2e  ; je 0xfffa4f2e
mov dword [edi], 0

loc_fffa4f2e:
lea edx, [eax - 2]
cmp edx, 1
ja short loc_fffa4f41  ; ja 0xfffa4f41
test esi, esi
je short loc_fffa4f41  ; je 0xfffa4f41
mov dword [edi + 0x1d], 0

loc_fffa4f41:
mov edx, dword [edi + 0x227c]
test edx, edx
je short loc_fffa4f79  ; je 0xfffa4f79
mov ecx, edx
and ecx, 0xfffffffd
dec ecx
jne short loc_fffa4f63  ; jne 0xfffa4f63
cmp dword [ebp - 0x7c], 0
je short loc_fffa4f63  ; je 0xfffa4f63
mov dword [edi + 0x1055], 0

loc_fffa4f63:
lea ecx, [edx - 2]
cmp ecx, 1
ja short loc_fffa4f79  ; ja 0xfffa4f79
test ebx, ebx
je short loc_fffa4f79  ; je 0xfffa4f79
mov dword [edi + 0x1072], 0

loc_fffa4f79:
mov esi, dword [ebp - 0x88]
mov dword [edi + 0x20ff], eax
mov dword [edi + 0x2103], edx
mov edx, dword [esi]
mov eax, dword [esi + 0x1d]
test edx, edx
jne short loc_fffa4fa7  ; jne 0xfffa4fa7
movzx ecx, word [edi + 0x20f6]
cmp ecx, eax
jae short loc_fffa4fa7  ; jae 0xfffa4fa7
mov dword [esi + 0x1d], ecx
jmp near loc_fffa5039  ; jmp 0xfffa5039

loc_fffa4fa7:
test eax, eax
jne short loc_fffa4fc0  ; jne 0xfffa4fc0
movzx ecx, word [edi + 0x20f6]
cmp ecx, edx
jae short loc_fffa4fc0  ; jae 0xfffa4fc0
mov ebx, dword [ebp - 0x88]
mov dword [ebx], ecx
jmp short loc_fffa5039  ; jmp 0xfffa5039

loc_fffa4fc0:
mov bx, word [edi + 0x20f6]
lea esi, [edx + eax]
movzx ecx, bx
cmp ecx, esi
jae short loc_fffa5039  ; jae 0xfffa5039
shr bx, 1
movzx esi, dx
mov dword [ebp - 0x90], esi
movzx esi, ax
mov dword [ebp - 0x8c], esi
cmp edx, eax
mov word [ebp - 0x7c], bx
mov esi, dword [ebp - 0x90]
movzx ebx, bx
cmovae esi, dword [ebp - 0x8c]
cmp ebx, esi
jg short loc_fffa500d  ; jg 0xfffa500d
mov esi, dword [ebp - 0x88]
mov dword [esi + 0x1d], ebx
mov dword [esi], ebx
jmp short loc_fffa5039  ; jmp 0xfffa5039

loc_fffa500d:
cmp word [ebp - 0x7c], dx
jbe short loc_fffa5024  ; jbe 0xfffa5024
mov ebx, dword [ebp - 0x88]
mov dword [ebx], 0
mov dword [ebx + 0x1d], ecx
jmp short loc_fffa5039  ; jmp 0xfffa5039

loc_fffa5024:
cmp word [ebp - 0x7c], ax
jbe short loc_fffa5039  ; jbe 0xfffa5039
mov esi, dword [ebp - 0x88]
mov dword [esi + 0x1d], 0
mov dword [esi], ecx

loc_fffa5039:
mov ebx, dword [ebp - 0x88]
mov esi, dword [ebx]
cmp dword [ebx + 0x1d], esi
ja short loc_fffa5058  ; ja 0xfffa5058
imul eax, dword [ebp - 0x80], 0x1055
lea ecx, [edi + eax]
lea edx, [edi + eax + 0x1d]
xor eax, eax
jmp short loc_fffa506a  ; jmp 0xfffa506a

loc_fffa5058:
imul edx, dword [ebp - 0x80], 0x1055
mov eax, 0x10000
lea ecx, [edi + edx + 0x1d]
add edx, edi

loc_fffa506a:
movzx esi, byte [ecx + 0x12]
mov ebx, esi
test bl, bl
je short loc_fffa50a2  ; je 0xfffa50a2
mov ebx, dword [ecx]
xor al, al
shr ebx, 8
and esi, 0xff
mov cl, byte [ecx + 0x14]
or eax, ebx
dec esi
and eax, 0xfffdffff
shr cl, 3
shl esi, 0x11
movzx ecx, cl
or eax, esi
dec ecx
and eax, 0xfff7ffff
shl ecx, 0x13
or eax, ecx

loc_fffa50a2:
movzx ebx, byte [edx + 0x12]
test bl, bl
je short loc_fffa50d1  ; je 0xfffa50d1
mov ecx, dword [edx]
xor ah, ah
xor cl, cl
mov dl, byte [edx + 0x14]
or eax, ecx
dec ebx
shr dl, 3
and eax, 0xfffbffff
shl ebx, 0x12
movzx edx, dl
or eax, ebx
dec edx
and eax, 0xffefffff
shl edx, 0x14
or eax, edx

loc_fffa50d1:
mov esi, dword [ebp - 0x88]
cmp byte [esi + 0x3a], 0
jne loc_fffa6cd4  ; jne 0xfffa6cd4

loc_fffa50e1:
inc dword [ebp - 0x80]
add dword [ebp - 0x84], 4
add dword [ebp - 0x88], 0x1055
cmp dword [ebp - 0x80], 2
jne loc_fffa4e32  ; jne 0xfffa4e32
mov eax, edi
call fcn_fffbf908  ; call 0xfffbf908

loc_fffa5106:
mov edx, 0xdd24
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd26
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
sub esp, 0xc
lea ebx, [edi + 0x1055]
push edi
call fcn_fffbc4fb  ; call 0xfffbc4fb
mov edx, 0xdd27
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd59
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov eax, edi
call fcn_fffbbf31  ; call 0xfffbbf31
movzx eax, al
mov edx, dword [edi + 0x2223]
mov dword [edx + 0xc00], eax
mov eax, ebx
call fcn_fffbbf31  ; call 0xfffbbf31
movzx eax, al
mov edx, dword [edi + 0x2223]
mov dword [edx + 0xd00], eax
mov eax, edi
call fcn_fffbbf31  ; call 0xfffbbf31
movzx eax, al
mov edx, dword [edi + 0x2223]
mov dword [edx + 0x3200], eax
mov eax, ebx
call fcn_fffbbf31  ; call 0xfffbbf31
mov edx, dword [edi + 0x2223]
mov dword [ebp - 0x88], edi
movzx eax, al
add esp, 0x10
mov ebx, edi
mov dword [ebp - 0x80], 0
mov dword [edx + 0x3300], eax

loc_fffa51af:
imul esi, dword [ebp - 0x80], 0x1055
xor ecx, ecx
mov edx, 0xa
lea eax, [edi + esi + 0x36d]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
lea eax, [edi + esi + 0x377]
mov edx, 0xa
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
lea eax, [edi + esi + 0x381]
mov edx, 0xa
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
lea eax, [edi + esi + 0x38b]
mov edx, 0xa
call fcn_fffa24c1  ; call 0xfffa24c1
mov al, byte [ebp - 0x80]
mov ecx, dword [edi + 0x2223]
cmp al, 1
mov byte [ebp - 0x7c], al
sbb eax, eax
xor al, al
lea eax, [ecx + eax + 0xf0c]
mov edx, dword [eax]
mov eax, edx
and edx, 0xffff6000
and eax, 0xffffefc0
cmp dword [ebx + 0xa], 0
cmovne eax, edx
mov edx, eax
and edx, 0xfe03ffff
cmp dword [ebx + 0x27], 0
cmovne eax, edx
cmp byte [ebp - 0x7c], 1
sbb edx, edx
xor dl, dl
cmp byte [ebp - 0x7c], 1
lea edx, [ecx + edx + 0x330c]
mov dword [edx], eax
sbb eax, eax
xor al, al
mov edx, dword [edi + 0x2223]
xor ecx, ecx
lea eax, [eax + edx + 0xd14]
mov edx, dword [ebp - 0x80]
mov esi, dword [eax]
mov eax, edi
call fcn_fffb892c  ; call 0xfffb892c
movzx edx, al
and esi, 0xffffffc0
or esi, edx
cmp al, 0x3f
jbe short loc_fffa528c  ; jbe 0xfffa528c
mov byte [ebx + 0x36d], 1
and eax, 0x3f
jmp short loc_fffa5293  ; jmp 0xfffa5293

loc_fffa528c:
mov byte [ebx + 0x36d], 0

loc_fffa5293:
mov byte [ebx + 0x36e], al
mov ecx, 1
mov edx, dword [ebp - 0x80]
mov eax, edi
call fcn_fffb892c  ; call 0xfffb892c
mov edx, esi
movzx esi, al
and edx, 0xfffff03f
shl esi, 6
or esi, edx
cmp al, 0x3f
jbe short loc_fffa52c8  ; jbe 0xfffa52c8
mov byte [ebx + 0x377], 1
and eax, 0x3f
jmp short loc_fffa52cf  ; jmp 0xfffa52cf

loc_fffa52c8:
mov byte [ebx + 0x377], 0

loc_fffa52cf:
mov byte [ebx + 0x378], al
mov ecx, 2
mov edx, dword [ebp - 0x80]
mov eax, edi
call fcn_fffb892c  ; call 0xfffb892c
mov edx, esi
movzx esi, al
and edx, 0xfffc0fff
shl esi, 0xc
or esi, edx
cmp al, 0x3f
jbe short loc_fffa5304  ; jbe 0xfffa5304
mov byte [ebx + 0x381], 1
and eax, 0x3f
jmp short loc_fffa530b  ; jmp 0xfffa530b

loc_fffa5304:
mov byte [ebx + 0x381], 0

loc_fffa530b:
mov byte [ebx + 0x382], al
mov ecx, 3
mov edx, dword [ebp - 0x80]
mov eax, edi
call fcn_fffb892c  ; call 0xfffb892c
movzx edx, al
and esi, 0xff03ffff
shl edx, 0x12
or edx, esi
cmp al, 0x3f
jbe short loc_fffa533e  ; jbe 0xfffa533e
mov byte [ebx + 0x38b], 1
and eax, 0x3f
jmp short loc_fffa5345  ; jmp 0xfffa5345

loc_fffa533e:
mov byte [ebx + 0x38b], 0

loc_fffa5345:
mov byte [ebx + 0x38c], al
cmp byte [ebp - 0x7c], 1
sbb eax, eax
mov ecx, dword [edi + 0x2223]
xor al, al
cmp byte [ebp - 0x7c], 1
lea eax, [eax + ecx + 0xd14]
mov dword [eax], edx
sbb eax, eax
xor al, al
mov edx, dword [edi + 0x2223]
movzx ecx, byte [ebx + 0x36d]
inc dword [ebp - 0x80]
lea edx, [edx + eax + 0xd18]
mov eax, dword [edx]
and eax, 0xfffffffe
or eax, ecx
movzx ecx, byte [ebx + 0x377]
and eax, 0xfffffffd
add ecx, ecx
or eax, ecx
movzx ecx, byte [ebx + 0x381]
and eax, 0xfffffffb
shl ecx, 2
or eax, ecx
movzx ecx, byte [ebx + 0x38b]
and eax, 0xfffffff7
shl ecx, 3
add ebx, 0x1055
or eax, ecx
cmp dword [ebp - 0x80], 2
mov dword [edx], eax
jne loc_fffa51af  ; jne 0xfffa51af
mov eax, dword [edi + 0x20b6]
cmp eax, 0x535
je short loc_fffa540b  ; je 0xfffa540b
ja short loc_fffa53e9  ; ja 0xfffa53e9
cmp eax, 0x320
je short loc_fffa5404  ; je 0xfffa5404
cmp eax, 0x42b
jne loc_fffa550e  ; jne 0xfffa550e
jmp short loc_fffa5427  ; jmp 0xfffa5427

loc_fffa53e9:
cmp eax, 0x74b
je short loc_fffa5419  ; je 0xfffa5419
cmp eax, 0x855
je short loc_fffa5420  ; je 0xfffa5420
cmp eax, 0x640
jne loc_fffa550e  ; jne 0xfffa550e
jmp short loc_fffa5412  ; jmp 0xfffa5412

loc_fffa5404:
mov ebx, 0xd6bedcc
jmp short loc_fffa542c  ; jmp 0xfffa542c

loc_fffa540b:
mov ebx, 0xca57a4c
jmp short loc_fffa542c  ; jmp 0xfffa542c

loc_fffa5412:
mov ebx, 0xc6369cc
jmp short loc_fffa542c  ; jmp 0xfffa542c

loc_fffa5419:
mov ebx, 0xc42514c
jmp short loc_fffa542c  ; jmp 0xfffa542c

loc_fffa5420:
mov ebx, 0xc21410c
jmp short loc_fffa542c  ; jmp 0xfffa542c

loc_fffa5427:
mov ebx, 0xce7c34c

loc_fffa542c:
mov eax, edi
call fcn_fffbc6ee  ; call 0xfffbc6ee
cmp dword [edi + 0x2254], 4
jne short loc_fffa5481  ; jne 0xfffa5481
mov eax, 0x1814

loc_fffa5441:
mov edx, dword [edi + 0x2223]
mov ecx, ebx
add edx, eax
and ecx, 0xffffffc7
mov esi, dword [edx]
mov ebx, esi
and ebx, 0x38
or ebx, ecx
mov dword [edx], ebx
mov edx, dword [edi + 0x2223]
lea ecx, [eax + edx - 4]
add eax, 0x100
mov edx, dword [ecx]
and edx, 0x38e38e00
or edx, 0x4104124
cmp eax, 0x1a14
mov dword [ecx], edx
jne short loc_fffa5441  ; jne 0xfffa5441
jmp short loc_fffa54c5  ; jmp 0xfffa54c5

loc_fffa5481:
mov eax, dword [edi + 0x2223]
mov dword [eax + 0x3714], ebx
mov edx, dword [edi + 0x2223]
mov eax, dword [edx + 0x1810]
and eax, 0xc71ff1ff
or eax, 0x8200200
mov dword [edx + 0x1810], eax
mov edx, dword [edi + 0x2223]
mov eax, dword [edx + 0x1910]
and eax, 0xc71ff1ff
or eax, 0x8200200
mov dword [edx + 0x1910], eax

loc_fffa54c5:
mov edx, dword [edi + 0x2223]
mov eax, dword [edx + 0x5f08]
or ah, 1
mov dword [edx + 0x5f08], eax
mov edx, 0x4e20
mov eax, edi
call fcn_fffc7adb  ; call 0xfffc7adb
mov edx, 0xdd5b
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd29
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov eax, edi
call fcn_fffbc722  ; call 0xfffbc722
test eax, eax
mov dword [ebp - 0x80], eax
je short loc_fffa5530  ; je 0xfffa5530
jmp short loc_fffa5526  ; jmp 0xfffa5526

loc_fffa550e:
mov edx, 0xdd5a
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x80], 1
jmp near loc_fffa6d5e  ; jmp 0xfffa6d5e

loc_fffa5526:
mov edx, 0xdd2b
jmp near loc_fffa6d57  ; jmp 0xfffa6d57

loc_fffa5530:
mov edx, 0xdd2a
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov eax, edi
call fcn_fffc4539  ; call 0xfffc4539
mov edx, 0xdd2c
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x80], 0
jmp near loc_fffa5b25  ; jmp 0xfffa5b25

loc_fffa555b:
mov ecx, dword [ebp - 0x80]
mov edx, esi
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
dec eax
jne loc_fffa5b0b  ; jne 0xfffa5b0b
mov ebx, dword [ebp - 0x98]
mov edx, esi
movzx eax, byte [edi + ebx + 0x3f]
push ecx
mov word [ebp - 0x45], ax
lea eax, [ebp - 0x57]
push 1
mov byte [ebp - 0x4c], dl
xor ecx, ecx
push eax
mov edx, dword [ebp - 0x80]
mov eax, edi
push 0
mov dword [ebp - 0x57], 3
mov word [ebp - 0x4f], 0x400
push 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 0
push 0
mov byte [ebp - 0x4a], 0
mov byte [ebp - 0x49], 0
push 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 1
push 1
mov byte [ebp - 0x43], 3
mov dword [ebp - 0x53], 0
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
jne loc_fffa5b49  ; jne 0xfffa5b49
mov edx, 0xdd30
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
sub esp, 0xc
mov ecx, dword [ebp - 0x80]
push 0x37
mov edx, esi
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
mov ecx, dword [ebp - 0x80]
mov edx, esi
mov eax, edi
mov dword [esp], 4
call fcn_fffbb5d0  ; call 0xfffbb5d0
mov ebx, dword [ebp - 0x94]
lea eax, [esi*4]
or eax, 0x8001
mov ecx, esi
mov byte [ebx], 4
mov byte [ebx - 1], 0x37
mov edx, dword [edi + 0x2223]
mov dword [edx + 0x3400], eax
mov edx, dword [ebp - 0x80]
mov eax, edi
mov dword [esp], 0
call fcn_fffb9b78  ; call 0xfffb9b78
imul eax, esi, 0x2f
mov ebx, dword [ebp - 0x9c]
add esp, 0x10
mov byte [ebp - 0x90], 0
mov dword [ebp - 0x8c], 0
lea eax, [eax + ebx + 0x40]
lea eax, [edi + eax + 0xd]
mov dword [ebp - 0x7c], eax
mov dword [ebp - 0x84], eax
mov ebx, eax
jmp near loc_fffa5704  ; jmp 0xfffa5704

loc_fffa5679:
cmp byte [ebx + 1], 0x3f
jbe short loc_fffa56c1  ; jbe 0xfffa56c1
mov byte [ebx + 4], 1
mov ecx, esi
push dword [ebp - 0x8c]
mov edx, dword [ebp - 0x80]
mov eax, edi
push 3
push 0x10
push 1
call fcn_fffbfd3a  ; call 0xfffbfd3a
push dword [ebp - 0x8c]
mov ecx, esi
mov edx, dword [ebp - 0x80]
push 6
push 0
movzx eax, byte [ebx + 1]
sub eax, 0x40
push eax
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
inc byte [ebp - 0x90]
jmp short loc_fffa56f8  ; jmp 0xfffa56f8

loc_fffa56c1:
mov byte [ebx + 4], 0
mov ecx, esi
push dword [ebp - 0x8c]
mov edx, dword [ebp - 0x80]
mov eax, edi
push 3
push 0x10
push 0
call fcn_fffbfd3a  ; call 0xfffbfd3a
push dword [ebp - 0x8c]
mov ecx, esi
mov edx, dword [ebp - 0x80]
push 6
push 0
movzx eax, byte [ebx + 1]
push eax
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a

loc_fffa56f8:
add esp, 0x20
inc dword [ebp - 0x8c]
add ebx, 5

loc_fffa5704:
mov al, byte [edi + 0x20b5]
movzx edx, al
cmp dword [ebp - 0x8c], edx
jb loc_fffa5679  ; jb 0xfffa5679
cmp byte [ebp - 0x90], al
jne short loc_fffa575a  ; jne 0xfffa575a
mov ebx, dword [ebp - 0x7c]
dec byte [ebx + 0x2e]
xor ebx, ebx
jmp short loc_fffa574d  ; jmp 0xfffa574d

loc_fffa572b:
mov edx, dword [ebp - 0x7c]
lea eax, [ebx + ebx*4]
mov ecx, esi
mov byte [edx + eax + 4], 0
mov edx, dword [ebp - 0x80]
push ebx
mov eax, edi
inc ebx
push 3
push 0x10
push 0
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10

loc_fffa574d:
movzx eax, byte [edi + 0x20b5]
cmp ebx, eax
jb short loc_fffa572b  ; jb 0xfffa572b
jmp short loc_fffa576c  ; jmp 0xfffa576c

loc_fffa575a:
cmp byte [ebp - 0x90], 0
je short loc_fffa576c  ; je 0xfffa576c
mov ebx, dword [ebp - 0x7c]
inc byte [ebx + 0x2e]
inc byte [ebx + 0x2d]

loc_fffa576c:
mov ebx, dword [ebp - 0x7c]
sub esp, 0xc
mov ecx, dword [ebp - 0x80]
mov edx, esi
movzx eax, byte [ebx + 0x2d]
push eax
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
movzx eax, byte [ebx + 0x2e]
mov ecx, dword [ebp - 0x80]
mov dword [esp], eax
mov edx, esi
mov eax, edi
call fcn_fffbb5d0  ; call 0xfffbb5d0
mov ecx, esi
mov edx, dword [ebp - 0x80]
mov eax, edi
mov dword [esp], 0
call fcn_fffb9754  ; call 0xfffb9754
lea eax, [ebp - 0x6e]
lea ecx, [ebp - 0x70]
movzx edx, byte [edi + 0x20b5]
mov dword [esp], eax
mov eax, ebx
call fcn_fffb9a02  ; call 0xfffb9a02
mov bl, byte [ebp - 0x70]
add esp, 0x10
mov byte [ebp - 0x8c], bl
mov bl, byte [ebp - 0x6e]
mov byte [ebp - 0x90], bl
xor eax, eax
jmp short loc_fffa5831  ; jmp 0xfffa5831

loc_fffa57d9:
mov ebx, dword [ebp - 0x84]
mov dl, byte [ebx + 2]
cmp dl, 0x3f
jbe short loc_fffa57ed  ; jbe 0xfffa57ed
cmp byte [ebx + 1], 0x3f
jbe short loc_fffa580e  ; jbe 0xfffa580e

loc_fffa57ed:
mov ebx, dword [ebp - 0x84]
cmp dl, byte [ebx + 1]
jb short loc_fffa580e  ; jb 0xfffa580e

loc_fffa57f8:
mov ebx, dword [ebp - 0x84]
inc eax
and byte [ebx + 2], 0x3f
add ebx, 5
mov dword [ebp - 0x84], ebx
jmp short loc_fffa5831  ; jmp 0xfffa5831

loc_fffa580e:
mov edx, dword [ebp - 0x84]
mov ebx, dword [ebp - 0x84]
mov dl, byte [edx + 4]
mov byte [ebp - 0xb9], dl
inc edx
cmp dl, 7
mov byte [ebx + 4], dl
jbe short loc_fffa57f8  ; jbe 0xfffa57f8
jmp near loc_fffa596d  ; jmp 0xfffa596d

loc_fffa5831:
movzx edx, byte [edi + 0x20b5]
cmp eax, edx
jb short loc_fffa57d9  ; jb 0xfffa57d9
sub esp, 0xc
lea ebx, [ebp - 0x6e]
push ebx
lea ecx, [ebp - 0x70]
mov eax, dword [ebp - 0x7c]
call fcn_fffb9a02  ; call 0xfffb9a02
mov al, byte [ebp - 0x70]
sub al, byte [ebp - 0x6e]
add esp, 0xc
mov ecx, dword [ebp - 0x80]
movzx eax, al
mov edx, dword [ebp - 0x7c]
push eax
mov dword [ebp - 0x84], eax
mov al, byte [ebp - 0x8c]
sub eax, dword [ebp - 0x90]
movzx eax, al
push eax
mov eax, edi
push esi
call fcn_fffbddb1  ; call 0xfffbddb1
mov ecx, dword [ebp - 0x80]
mov edx, esi
mov eax, edi
mov dword [esp], 0
call fcn_fffb93db  ; call 0xfffb93db
add esp, 0x10
test eax, eax
mov ecx, eax
jne loc_fffa5972  ; jne 0xfffa5972
sub esp, 0xc
mov ecx, dword [ebp - 0x80]
push esi
mov edx, dword [ebp - 0x7c]
mov eax, edi
call fcn_fffbdcf9  ; call 0xfffbdcf9
add esp, 0x10
test eax, eax
mov ecx, eax
jne loc_fffa5972  ; jne 0xfffa5972
sub esp, 0xc
lea ecx, [ebp - 0x70]
push ebx
movzx edx, byte [edi + 0x20b5]
mov eax, dword [ebp - 0x7c]
call fcn_fffb9a02  ; call 0xfffb9a02
mov al, byte [ebp - 0x70]
sub al, byte [ebp - 0x6e]
add esp, 0xc
mov ecx, dword [ebp - 0x80]
movzx eax, al
mov edx, dword [ebp - 0x7c]
push eax
push dword [ebp - 0x84]
mov eax, edi
xor ebx, ebx
push esi
call fcn_fffbddb1  ; call 0xfffbddb1
add esp, 0x10
jmp short loc_fffa591c  ; jmp 0xfffa591c

loc_fffa58fb:
push ebx
mov edx, dword [ebp - 0x7c]
lea eax, [ebx + ebx*4]
push 6
mov ecx, esi
inc ebx
push 0
movzx eax, byte [edx + eax + 2]
mov edx, dword [ebp - 0x80]
push eax
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10

loc_fffa591c:
movzx eax, byte [edi + 0x20b5]
cmp ebx, eax
jb short loc_fffa58fb  ; jb 0xfffa58fb
mov eax, dword [edi + 0x2223]
mov dword [eax + 0x3400], 0
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
mov edx, 0xdd31
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd33
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov ecx, esi
mov edx, dword [ebp - 0x80]
mov eax, edi
call fcn_fffc5077  ; call 0xfffc5077
test eax, eax
mov ebx, eax
je short loc_fffa5992  ; je 0xfffa5992
jmp near loc_fffa5aee  ; jmp 0xfffa5aee

loc_fffa596d:
mov ecx, 1

loc_fffa5972:
mov edx, 0xdd32
mov eax, edi
mov dword [ebp - 0xc0], ecx
call fcn_fffad891  ; call 0xfffad891
mov ecx, dword [ebp - 0xc0]
mov dword [ebp - 0x80], ecx
jmp near loc_fffa5b4c  ; jmp 0xfffa5b4c

loc_fffa5992:
cmp dword [edi + 0x223c], 0
mov eax, dword [edi + 0x2223]
je short loc_fffa59f0  ; je 0xfffa59f0
mov dword [eax + 0x4eb0], 0x300
xor edx, edx
push ebx
mov ecx, dword [ebp - 0x80]
mov eax, edi
push ebx
push 0
push esi
call fcn_fffc33cd  ; call 0xfffc33cd
mov dword [ebp - 0x7c], eax
mov eax, dword [edi + 0x2223]
mov ecx, dword [ebp - 0x80]
mov dword [eax + 0x4eb0], 0x200
pop eax
pop edx
mov eax, edi
mov edx, 1
push 0
push esi
call fcn_fffc33cd  ; call 0xfffc33cd
mov ebx, eax
add esp, 0x10
test eax, eax
cmove ebx, dword [ebp - 0x7c]
jmp short loc_fffa5a13  ; jmp 0xfffa5a13

loc_fffa59f0:
mov dword [eax + 0x4eb0], 0
mov edx, 2
push ecx
mov eax, edi
push ecx
mov ecx, dword [ebp - 0x80]
push 0
push esi
call fcn_fffc33cd  ; call 0xfffc33cd
mov ebx, eax
add esp, 0x10

loc_fffa5a13:
imul ecx, esi, 0x36
mov byte [ebp - 0x7c], 0
mov dword [ebp - 0x90], ecx
jmp short loc_fffa5a89  ; jmp 0xfffa5a89

loc_fffa5a22:
movzx eax, byte [ebp - 0x7c]
mov ecx, esi
mov dword [ebp - 0x84], eax
push edx
mov edx, dword [ebp - 0x80]
lea eax, [eax + eax*2]
add eax, dword [ebp - 0x90]
add eax, dword [ebp - 0x9c]
mov dword [ebp - 0x8c], eax
lea eax, [edi + eax + 0x1bd]
push eax
mov eax, edi
push 0
push dword [ebp - 0x84]
call fcn_fffc53c6  ; call 0xfffc53c6
mov edx, dword [ebp - 0x8c]
add esp, 0xc
mov ecx, esi
lea eax, [edi + edx + 0x1d8]
mov edx, dword [ebp - 0x80]
push eax
mov eax, edi
push 1
push dword [ebp - 0x84]
call fcn_fffc53c6  ; call 0xfffc53c6
inc byte [ebp - 0x7c]
add esp, 0x10

loc_fffa5a89:
mov cl, byte [ebp - 0x7c]
cmp cl, byte [edi + 0x20b5]
jb short loc_fffa5a22  ; jb 0xfffa5a22
mov cl, byte [ebp - 0x80]
mov eax, 0x4080
xor edx, edx
mov byte [ebp - 0x84], cl
jmp short loc_fffa5acc  ; jmp 0xfffa5acc

loc_fffa5aa6:
cmp byte [ebp - 0x84], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
inc edx
mov dword [ebp - 0x7c], ecx
mov ecx, dword [ebp - 0x8c]
add ecx, dword [ebp - 0x7c]
add eax, 4
mov dword [ecx], 0

loc_fffa5acc:
mov ecx, dword [edi + 0x2223]
cmp dl, byte [edi + 0x20b5]
mov dword [ebp - 0x8c], ecx
jb short loc_fffa5aa6  ; jb 0xfffa5aa6
test ebx, ebx
mov dword [ecx + 0x4eb0], 0
je short loc_fffa5aff  ; je 0xfffa5aff

loc_fffa5aee:
mov edx, 0xdd35
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x80], ebx
jmp short loc_fffa5b4c  ; jmp 0xfffa5b4c

loc_fffa5aff:
mov edx, 0xdd34
mov eax, edi
call fcn_fffad891  ; call 0xfffad891

loc_fffa5b0b:
inc esi
add dword [ebp - 0x94], 0x2f
cmp esi, 4
jne loc_fffa555b  ; jne 0xfffa555b
inc dword [ebp - 0x80]
cmp dword [ebp - 0x80], 2
je short loc_fffa5b5b  ; je 0xfffa5b5b

loc_fffa5b25:
imul ebx, dword [ebp - 0x80], 0x1055
mov dword [ebp - 0x98], ebx
mov dword [ebp - 0x9c], ebx
lea esi, [edi + ebx + 0x7b]
mov dword [ebp - 0x94], esi
xor esi, esi
jmp near loc_fffa555b  ; jmp 0xfffa555b

loc_fffa5b49:
mov dword [ebp - 0x80], eax

loc_fffa5b4c:
cmp dword [ebp - 0x80], 0
mov edx, 0xdd2e
jne loc_fffa6d57  ; jne 0xfffa6d57

loc_fffa5b5b:
mov edx, 0xdd2d
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd36
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov eax, edi
call fcn_fffc06b8  ; call 0xfffc06b8
test eax, eax
mov dword [ebp - 0x80], eax
mov edx, 0xdd38
jne loc_fffa6d57  ; jne 0xfffa6d57
mov edx, 0xdd37
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd56
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov eax, edi
call fcn_fffb81af  ; call 0xfffb81af
test eax, eax
mov ebx, eax
je short loc_fffa5bc3  ; je 0xfffa5bc3
mov edx, 0xdd58
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x80], ebx
jmp near loc_fffa6d5e  ; jmp 0xfffa6d5e

loc_fffa5bc3:
mov edx, 0xdd57
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd43
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd46
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
cmp dword [edi + 0x223c], 1
mov eax, edi
sbb ebx, ebx
not ebx
add ebx, 2
cmp dword [edi + 0x223c], 1
sbb esi, esi
mov dword [ebp - 0x94], ebx
and esi, 2
lea ebx, [ebp - 0x63]
mov edx, ebx
mov dword [ebp - 0x84], esi
call fcn_fffacf73  ; call 0xfffacf73
lea esi, [edi + 0x3c31]
mov dword [ebp - 0xa0], esi
jmp near loc_fffa608d  ; jmp 0xfffa608d

loc_fffa5c2a:
cmp dword [ebp - 0x84], 1
je short loc_fffa5c3c  ; je 0xfffa5c3c
sbb eax, eax
and eax, 0x300
jmp short loc_fffa5c41  ; jmp 0xfffa5c41

loc_fffa5c3c:
mov eax, 0x200

loc_fffa5c41:
mov edx, dword [edi + 0x2223]
mov dword [ebp - 0x8c], edi
mov dword [ebp - 0x7c], 0
mov dword [edx + 0x4eb0], eax

loc_fffa5c5a:
xor ecx, ecx
mov edx, 0x2400
mov eax, dword [ebp - 0xa0]
xor ebx, ebx
call fcn_fffa24c1  ; call 0xfffa24c1

loc_fffa5c6e:
mov ecx, dword [ebp - 0x7c]
mov edx, ebx
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffa5c88  ; je 0xfffa5c88
mov byte [ebp + ebx - 0x67], 0x47
mov byte [ebp + ebx - 0x6b], 0

loc_fffa5c88:
inc ebx
cmp ebx, 4
jne short loc_fffa5c6e  ; jne 0xfffa5c6e
imul ebx, dword [ebp - 0x7c], 0x1055
mov dword [ebp - 0x98], 0x20
mov dword [ebp - 0xac], ebx

loc_fffa5ca5:
mov esi, dword [ebp - 0x8c]
cmp byte [esi + 0x3a], 0
jne loc_fffa6cec  ; jne 0xfffa6cec

loc_fffa5cb5:
xor ebx, ebx

loc_fffa5cb7:
mov ecx, dword [ebp - 0x7c]
mov edx, ebx
mov eax, edi
mov byte [ebp - 0x9c], bl
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffa5d32  ; jne 0xfffa5d32

loc_fffa5ccd:
inc ebx
cmp ebx, 4
jne short loc_fffa5cb7  ; jne 0xfffa5cb7
jmp near loc_fffa5f64  ; jmp 0xfffa5f64

loc_fffa5cd8:
movzx esi, byte [ebp - 0x80]
mov ecx, ebx
push eax
mov dword [ebp - 0x90], esi
mov edx, dword [ebp - 0x7c]
push esi
lea esi, [esi + esi*2]
add esi, dword [ebp - 0xa4]
add esi, dword [ebp - 0xac]
add esi, edi
push 0
movzx eax, byte [esi + 0x1bd]
push eax
mov eax, edi
call fcn_fffacd5e  ; call 0xfffacd5e
add esp, 0xc
mov ecx, ebx
push dword [ebp - 0x90]
mov edx, dword [ebp - 0x7c]
push 1
movzx eax, byte [esi + 0x1d8]
push eax
mov eax, edi
call fcn_fffacd5e  ; call 0xfffacd5e
inc byte [ebp - 0x80]
add esp, 0x10
jmp short loc_fffa5d3f  ; jmp 0xfffa5d3f

loc_fffa5d32:
imul esi, ebx, 0x36
mov byte [ebp - 0x80], 0
mov dword [ebp - 0xa4], esi

loc_fffa5d3f:
mov al, byte [ebp - 0x80]
cmp al, byte [edi + 0x20b5]
jb short loc_fffa5cd8  ; jb 0xfffa5cd8
mov ecx, ebx
mov edx, dword [ebp - 0x7c]
mov eax, edi
call fcn_fffc900b  ; call 0xfffc900b
test eax, eax
mov dword [ebp - 0x80], eax
jne loc_fffa619f  ; jne 0xfffa619f
imul eax, ebx, 0x900
mov dl, byte [ebp + ebx - 0x6b]
add eax, 0x3c30
mov byte [ebp - 0x90], dl
mov dword [ebp - 0xa8], eax
jmp near loc_fffa5f4f  ; jmp 0xfffa5f4f

loc_fffa5d81:
push eax
movzx esi, byte [ebp - 0x90]
mov ecx, ebx
push 9
mov edx, dword [ebp - 0x7c]
mov eax, edi
push 0
push esi
call fcn_fffacd5e  ; call 0xfffacd5e
add esp, 0xc
mov ecx, ebx
push 9
mov edx, dword [ebp - 0x7c]
mov eax, edi
push 1
push esi
call fcn_fffacd5e  ; call 0xfffacd5e
mov cl, byte [ebp - 0x7c]
add esp, 0x10
mov eax, 0x4340
xor edx, edx
mov byte [ebp - 0x80], cl
jmp short loc_fffa5ddd  ; jmp 0xfffa5ddd

loc_fffa5dc0:
cmp byte [ebp - 0x80], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [edi + 0x2223]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffa5ddd:
cmp dl, byte [edi + 0x20b5]
jb short loc_fffa5dc0  ; jb 0xfffa5dc0
mov edx, dword [ebp - 0x8c]
mov al, byte [ebp - 0x9c]
mov byte [ebp - 0x4c], al
mov dword [ebp - 0x57], 8
movzx eax, byte [edx + 0x3e]
mov word [ebp - 0x45], ax
mov al, byte [edx + 0x44]
shr al, 2
mov dl, byte [edx + 0x43]
cmp dl, al
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 4
mov byte [ebp - 0x4a], 0x12
mov byte [ebp - 0x49], 0
lea ecx, [eax + 1]
cmovbe edx, ecx
mov ecx, dword [ebp - 0x8c]
mov byte [ebp - 0x43], dl
mov al, byte [ebp - 0x9c]
mov byte [ebp - 0x48], 0
mov byte [ebp - 0x37], al
mov eax, 8
mov word [ebp - 0x47], 1
mov dword [ebp - 0x53], 0
mov dl, byte [ecx + 0x42]
mov dword [ebp - 0x42], 4
movzx ecx, dl
cmp dl, 9
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 2
cmovae eax, ecx
mov byte [ebp - 0x35], 7
mov word [ebp - 0x30], ax
mov al, byte [ebp - 0x9c]
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 0x1e0
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
mov dword [ebp - 0x2d], 3
mov byte [ebp - 0x22], al
mov edx, dword [ebp - 0x8c]
movzx eax, byte [edx + 0x3f]
mov word [ebp - 0x1b], ax
lea ecx, [ebp - 0x57]
push eax
mov edx, dword [ebp - 0x7c]
mov eax, edi
push 1
mov word [ebp - 0x25], 0x400
mov byte [ebp - 0x23], 0
push ecx
mov ecx, 2
mov byte [ebp - 0x21], 0
push 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
push 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
push 0
mov byte [ebp - 0x19], 3
mov dword [ebp - 0x29], 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
mov dword [ebp - 0xa4], eax
add esp, 0x20
xor ecx, ecx
mov edx, dword [ebp - 0x7c]
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov dword [ebp - 0x80], eax
jne loc_fffa619f  ; jne 0xfffa619f
mov eax, dword [ebp - 0xa4]
test eax, eax
mov dword [ebp - 0x80], eax
jne loc_fffa619f  ; jne 0xfffa619f
mov ecx, dword [ebp - 0xa8]
sub esp, 0xc
push esi
mov eax, edi
lea edx, [edi + ecx + 1]
mov ecx, dword [ebp - 0x7c]
call fcn_fffacdcd  ; call 0xfffacdcd
inc byte [ebp - 0x90]
add esp, 0x10

loc_fffa5f4f:
mov al, byte [ebp - 0x90]
cmp al, byte [ebp + ebx - 0x67]
jbe loc_fffa5d81  ; jbe 0xfffa5d81
jmp near loc_fffa5ccd  ; jmp 0xfffa5ccd

loc_fffa5f64:
dec dword [ebp - 0x98]
jne loc_fffa5ca5  ; jne 0xfffa5ca5
imul esi, dword [ebp - 0x7c], 0x1055
mov ebx, dword [ebp - 0xa0]
mov dword [ebp - 0x90], ebx
mov dword [ebp - 0x80], 0
mov dword [ebp - 0x9c], esi

loc_fffa5f90:
mov ecx, dword [ebp - 0x7c]
mov edx, dword [ebp - 0x80]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffa5fb9  ; jne 0xfffa5fb9

loc_fffa5fa1:
inc dword [ebp - 0x80]
add dword [ebp - 0x90], 0x900
cmp dword [ebp - 0x80], 4
jne short loc_fffa5f90  ; jne 0xfffa5f90
jmp near loc_fffa6070  ; jmp 0xfffa6070

loc_fffa5fb9:
imul esi, dword [ebp - 0x80], 0x36
xor ebx, ebx
mov dword [ebp - 0x98], esi
jmp near loc_fffa605f  ; jmp 0xfffa605f

loc_fffa5fca:
sub esp, 0xc
lea eax, [ebp - 0x57]
movzx esi, bl
mov ecx, 0x48
push eax
mov edx, esi
mov eax, edi
shl edx, 8
add edx, dword [ebp - 0x90]
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
test eax, eax
jne short loc_fffa605e  ; jne 0xfffa605e
test dword [ebp - 0x84], 0xfffffffd
jne short loc_fffa6028  ; jne 0xfffa6028
mov edx, dword [ebp - 0x9c]
lea eax, [esi + esi*2]
add eax, dword [ebp - 0x98]
mov cl, byte [ebp - 0x55]
lea eax, [eax + edx + 0x1b0]
add eax, edi
mov dl, byte [ebp - 0x57]
mov byte [eax + 0xf], cl
mov cl, byte [ebp - 0x56]
mov byte [eax + 0xe], cl
mov byte [eax + 0xd], dl

loc_fffa6028:
mov eax, dword [ebp - 0x84]
dec eax
cmp eax, 1
ja short loc_fffa605e  ; ja 0xfffa605e
mov ecx, dword [ebp - 0x9c]
lea esi, [esi + esi*2]
add esi, dword [ebp - 0x98]
mov dl, byte [ebp - 0x57]
lea eax, [esi + ecx + 0x1c0]
add eax, edi
mov cl, byte [ebp - 0x55]
mov byte [eax + 0x1a], cl
mov cl, byte [ebp - 0x56]
mov byte [eax + 0x19], cl
mov byte [eax + 0x18], dl

loc_fffa605e:
inc ebx

loc_fffa605f:
cmp bl, byte [edi + 0x20b5]
jb loc_fffa5fca  ; jb 0xfffa5fca
jmp near loc_fffa5fa1  ; jmp 0xfffa5fa1

loc_fffa6070:
inc dword [ebp - 0x7c]
add dword [ebp - 0x8c], 0x1055
cmp dword [ebp - 0x7c], 2
jne loc_fffa5c5a  ; jne 0xfffa5c5a
inc dword [ebp - 0x84]

loc_fffa608d:
mov ebx, dword [ebp - 0x94]
cmp dword [ebp - 0x84], ebx
jbe loc_fffa5c2a  ; jbe 0xfffa5c2a
xor ebx, ebx
jmp near loc_fffa613c  ; jmp 0xfffa613c

loc_fffa60a6:
mov ecx, ebx
mov edx, dword [ebp - 0x80]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffa611b  ; jne 0xfffa611b

loc_fffa60b6:
inc dword [ebp - 0x80]
cmp dword [ebp - 0x80], 4
jne short loc_fffa60a6  ; jne 0xfffa60a6
jmp short loc_fffa6136  ; jmp 0xfffa6136

loc_fffa60c1:
movzx esi, byte [ebp - 0x7c]
mov ecx, dword [ebp - 0x80]
push eax
mov dword [ebp - 0x84], esi
mov edx, ebx
push esi
lea esi, [esi + esi*2]
add esi, dword [ebp - 0x8c]
add esi, dword [ebp - 0x94]
add esi, edi
push 0
movzx eax, byte [esi + 0x1bd]
push eax
mov eax, edi
call fcn_fffacd5e  ; call 0xfffacd5e
add esp, 0xc
mov ecx, dword [ebp - 0x80]
push dword [ebp - 0x84]
mov edx, ebx
push 1
movzx eax, byte [esi + 0x1d8]
push eax
mov eax, edi
call fcn_fffacd5e  ; call 0xfffacd5e
inc byte [ebp - 0x7c]
add esp, 0x10
jmp short loc_fffa6129  ; jmp 0xfffa6129

loc_fffa611b:
imul esi, dword [ebp - 0x80], 0x36
mov byte [ebp - 0x7c], 0
mov dword [ebp - 0x8c], esi

loc_fffa6129:
mov al, byte [ebp - 0x7c]
cmp al, byte [edi + 0x20b5]
jb short loc_fffa60c1  ; jb 0xfffa60c1
jmp short loc_fffa60b6  ; jmp 0xfffa60b6

loc_fffa6136:
inc ebx
cmp ebx, 2
je short loc_fffa6154  ; je 0xfffa6154

loc_fffa613c:
imul esi, ebx, 0x1055
mov dword [ebp - 0x80], 0
mov dword [ebp - 0x94], esi
jmp near loc_fffa60a6  ; jmp 0xfffa60a6

loc_fffa6154:
mov eax, dword [edi + 0x2223]
mov edx, 0xdd47
mov dword [ebp - 0x80], 0
lea ebx, [ebp - 0x57]
xor esi, esi
mov dword [eax + 0x4eb0], 0
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd49
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov eax, edi
mov edx, ebx
call fcn_fffacf73  ; call 0xfffacf73
lea eax, [edi + 0x3c31]
mov dword [ebp - 0x94], eax
jmp short loc_fffa61a9  ; jmp 0xfffa61a9

loc_fffa619f:
mov edx, 0xdd48
jmp near loc_fffa62d5  ; jmp 0xfffa62d5

loc_fffa61a9:
imul eax, esi, 0x1055
cmp byte [edi + eax + 0x3a], 0
jne loc_fffa6cfe  ; jne 0xfffa6cfe

loc_fffa61ba:
inc esi
cmp esi, 2
je loc_fffa62e1  ; je 0xfffa62e1
jmp short loc_fffa61a9  ; jmp 0xfffa61a9

loc_fffa61c6:
mov ecx, esi
lea edx, [ebp - 0x57]
mov eax, edi
xor ebx, ebx
call fcn_ffface48  ; call 0xffface48

loc_fffa61d4:
mov ecx, esi
mov edx, ebx
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffa61ee  ; jne 0xfffa61ee

loc_fffa61e3:
inc ebx
cmp ebx, 4
jne short loc_fffa61d4  ; jne 0xfffa61d4
jmp near loc_fffa62a4  ; jmp 0xfffa62a4

loc_fffa61ee:
imul eax, ebx, 0x900
mov dl, byte [ebp + ebx - 0x67]
add eax, 0x3c30
mov byte [ebp - 0x7c], dl
mov dword [ebp - 0x98], eax
jmp near loc_fffa6292  ; jmp 0xfffa6292

loc_fffa620b:
push eax
movzx ecx, byte [ebp - 0x7c]
mov edx, esi
push eax
mov dword [ebp - 0x8c], ecx
mov eax, edi
push 9
push ecx
mov ecx, ebx
call fcn_fffaf80e  ; call 0xfffaf80e
mov ecx, esi
add esp, 0x10
mov eax, 0x4340
xor edx, edx
mov byte [ebp - 0x90], cl
jmp short loc_fffa6259  ; jmp 0xfffa6259

loc_fffa6239:
cmp byte [ebp - 0x90], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [edi + 0x2223]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffa6259:
cmp dl, byte [edi + 0x20b5]
jb short loc_fffa6239  ; jb 0xfffa6239
mov ecx, ebx
mov edx, esi
mov eax, edi
call fcn_fffaf9ac  ; call 0xfffaf9ac
test eax, eax
jne short loc_fffa62c7  ; jne 0xfffa62c7
mov eax, dword [ebp - 0x98]
sub esp, 0xc
push dword [ebp - 0x8c]
mov ecx, esi
lea edx, [edi + eax + 1]
mov eax, edi
call fcn_fffacdcd  ; call 0xfffacdcd
inc byte [ebp - 0x7c]
add esp, 0x10

loc_fffa6292:
mov dl, byte [ebp - 0x7c]
cmp dl, byte [ebp + ebx - 0x63]
jbe loc_fffa620b  ; jbe 0xfffa620b
jmp near loc_fffa61e3  ; jmp 0xfffa61e3

loc_fffa62a4:
dec dword [ebp - 0x84]
jne loc_fffa61c6  ; jne 0xfffa61c6
mov ecx, dword [ebp - 0x94]
mov edx, esi
mov eax, edi
call fcn_fffaf8cd  ; call 0xfffaf8cd
test eax, eax
je loc_fffa61ba  ; je 0xfffa61ba

loc_fffa62c7:
mov dword [ebp - 0x80], eax
cmp dword [ebp - 0x80], 0
je short loc_fffa62e1  ; je 0xfffa62e1
mov edx, 0xdd4b

loc_fffa62d5:
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
jmp near loc_fffa6d52  ; jmp 0xfffa6d52

loc_fffa62e1:
mov edx, 0xdd4a
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd44
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd4c
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x7c], 0
mov word [ebp - 0x8c], 0

loc_fffa6315:
imul eax, dword [ebp - 0x7c], 0x1055
cmp byte [edi + eax + 0x3a], 0
je loc_fffa649d  ; je 0xfffa649d
lea eax, [edi + eax + 0x7b]
mov dword [ebp - 0x84], 0
mov dword [ebp - 0x94], eax

loc_fffa633b:
mov ecx, dword [ebp - 0x7c]
mov edx, dword [ebp - 0x84]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne loc_fffa63f3  ; jne 0xfffa63f3
jmp near loc_fffa6483  ; jmp 0xfffa6483

loc_fffa6358:
push esi
movzx ebx, byte [ebp - 0x90]
mov ecx, dword [ebp - 0x84]
push 6
mov edx, dword [ebp - 0x7c]
mov eax, edi
push 0
push ebx
call fcn_fffbfee2  ; call 0xfffbfee2
add esp, 0xc
mov dword [ebp - 0x98], eax
push 3
mov ecx, dword [ebp - 0x84]
mov edx, dword [ebp - 0x7c]
push 0x10
mov eax, edi
push ebx
call fcn_fffbfee2  ; call 0xfffbfee2
add esp, 0xc
mov esi, eax
push 7
mov ecx, dword [ebp - 0x84]
mov edx, dword [ebp - 0x7c]
push 8
mov eax, edi
and si, 0xff
push ebx
shl esi, 6
call fcn_fffbfee2  ; call 0xfffbfee2
movzx eax, al
movzx edx, byte [ebp - 0x98]
add eax, edx
add esp, 0x10
movzx ecx, word [ebp - 0x8c]
lea esi, [eax + esi - 0x40]
xor eax, eax
test si, si
cmovns eax, esi
movsx edx, ax
cmp ecx, edx
cmovge ax, word [ebp - 0x8c]
mov word [ebp - 0x8c], ax
inc byte [ebp - 0x90]
jmp short loc_fffa63fa  ; jmp 0xfffa63fa

loc_fffa63f3:
mov byte [ebp - 0x90], 0

loc_fffa63fa:
mov bl, byte [ebp - 0x90]
cmp bl, byte [edi + 0x20b5]
jb loc_fffa6358  ; jb 0xfffa6358
mov ecx, dword [ebp - 0x7c]
mov edx, dword [ebp - 0x84]
shr word [ebp - 0x8c], 6
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
mov bl, al
mov ecx, dword [ebp - 0x7c]
mov edx, dword [ebp - 0x84]
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
sub ebx, eax
add ebx, dword [ebp - 0x8c]
sub esp, 0xc
mov ecx, dword [ebp - 0x7c]
movzx eax, bl
mov edx, dword [ebp - 0x84]
push eax
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
movzx eax, word [ebp - 0x8c]
mov ecx, dword [ebp - 0x7c]
mov dword [esp], eax
mov edx, dword [ebp - 0x84]
mov eax, edi
call fcn_fffbb5d0  ; call 0xfffbb5d0
mov esi, dword [ebp - 0x94]
mov al, byte [ebp - 0x8c]
add esp, 0x10
mov byte [esi], al
mov byte [esi - 1], bl

loc_fffa6483:
inc dword [ebp - 0x84]
add dword [ebp - 0x94], 0x2f
cmp dword [ebp - 0x84], 4
jne loc_fffa633b  ; jne 0xfffa633b

loc_fffa649d:
inc dword [ebp - 0x7c]
cmp dword [ebp - 0x7c], 2
jne loc_fffa6315  ; jne 0xfffa6315
mov dword [ebp - 0x8c], edi
mov dword [ebp - 0x7c], 0

loc_fffa64b7:
mov ebx, dword [ebp - 0x88]
cmp byte [ebx + 0x3a], 0
jne loc_fffa6d3f  ; jne 0xfffa6d3f
jmp near loc_fffa6b2e  ; jmp 0xfffa6b2e

loc_fffa64cc:
mov eax, dword [ebp - 0x88]
mov ebx, dword [ebp - 0x88]
mov al, byte [eax + 0x3c]
mov byte [ebp - 0xba], al
add eax, 8
sub al, byte [ebx + 0x3b]
mov bl, 7
cmp al, 7
cmovbe ebx, eax
mov byte [ebp - 0x94], bl
jmp near loc_fffa67e5  ; jmp 0xfffa67e5

loc_fffa64f9:
cmp eax, 2
mov byte [ebp - 0x94], 2
jbe loc_fffa67e5  ; jbe 0xfffa67e5
mov esi, dword [ebp - 0x88]
cmp dword [esi + 0xa], 0
mov dword [esi + 0x19], 6
mov dword [esi + 0x36], 6
je loc_fffa67b0  ; je 0xfffa67b0
cmp dword [esi + 0x27], 0
je loc_fffa67b0  ; je 0xfffa67b0
mov ebx, dword [ebp - 0x8c]
cmp byte [ebx + 0x210e], 3
jne loc_fffa67b0  ; jne 0xfffa67b0
cmp byte [ebx + 0x2154], 3
jne loc_fffa67b0  ; jne 0xfffa67b0
mov al, byte [ebx + 0x2178]
mov dl, byte [ebx + 0x2132]
and eax, 0x1f
and edx, 0x1f
mov cl, al
or cl, dl
je loc_fffa67b0  ; je 0xfffa67b0
test dl, dl
sete byte [ebp - 0x84]
cmp al, 1
mov bl, byte [ebp - 0x84]
sete byte [ebp - 0xa0]
test byte [ebp - 0xa0], bl
jne loc_fffa67b0  ; jne 0xfffa67b0
cmp dl, 1
sete byte [ebp - 0x94]
cmp al, 1
setbe cl
test byte [ebp - 0x94], cl
jne loc_fffa67b0  ; jne 0xfffa67b0
lea ecx, [edx - 2]
cmp cl, 1
lea ecx, [eax - 1]
setbe byte [ebp - 0xac]
cmp dl, 2
sete byte [ebp - 0xa8]
cmp al, 2
sete byte [ebp - 0x90]
cmp cl, 1
setbe cl
test byte [ebp - 0xa8], cl
jne loc_fffa67b0  ; jne 0xfffa67b0
mov cl, byte [ebp - 0x94]
test byte [ebp - 0x90], cl
jne loc_fffa67b0  ; jne 0xfffa67b0
test al, al
sete byte [ebp - 0xa4]
mov bl, byte [ebp - 0xa4]
test byte [ebp - 0xa8], bl
jne loc_fffa67b0  ; jne 0xfffa67b0
mov cl, byte [ebp - 0x84]
test byte [ebp - 0x90], cl
jne loc_fffa67b0  ; jne 0xfffa67b0
cmp dl, 5
sete bl
cmp al, 5
sete cl
test cl, bl
jne loc_fffa67b0  ; jne 0xfffa67b0
test byte [ebp - 0x90], bl
jne loc_fffa676e  ; jne 0xfffa676e
test byte [ebp - 0xa8], cl
je short loc_fffa664c  ; je 0xfffa664c
jmp near loc_fffa676e  ; jmp 0xfffa676e

loc_fffa664c:
test byte [ebp - 0xa0], bl
jne loc_fffa6748  ; jne 0xfffa6748
test byte [ebp - 0x94], cl
je short loc_fffa6665  ; je 0xfffa6665
jmp near loc_fffa6748  ; jmp 0xfffa6748

loc_fffa6665:
test byte [ebp - 0xa4], bl
jne loc_fffa676e  ; jne 0xfffa676e
test byte [ebp - 0x84], cl
je short loc_fffa667e  ; je 0xfffa667e
jmp near loc_fffa676e  ; jmp 0xfffa676e

loc_fffa667e:
cmp al, 3
sete byte [ebp - 0x98]
test byte [ebp - 0x98], bl
jne loc_fffa679c  ; jne 0xfffa679c
cmp dl, 3
sete byte [ebp - 0x9c]
test byte [ebp - 0x9c], cl
je short loc_fffa66aa  ; je 0xfffa66aa
jmp near loc_fffa679c  ; jmp 0xfffa679c

loc_fffa66aa:
mov cl, byte [ebp - 0x98]
test byte [ebp - 0xac], cl
jne loc_fffa67b0  ; jne 0xfffa67b0
mov cl, byte [ebp - 0x90]
test byte [ebp - 0x9c], cl
jne loc_fffa67b0  ; jne 0xfffa67b0
mov cl, byte [ebp - 0x94]
test byte [ebp - 0x98], cl
jne loc_fffa67b0  ; jne 0xfffa67b0
mov cl, byte [ebp - 0xa0]
test byte [ebp - 0x9c], cl
jne loc_fffa67b0  ; jne 0xfffa67b0
mov cl, byte [ebp - 0x84]
test byte [ebp - 0x98], cl
jne loc_fffa67b0  ; jne 0xfffa67b0
mov cl, byte [ebp - 0xa4]
test byte [ebp - 0x9c], cl
jne loc_fffa67b0  ; jne 0xfffa67b0
cmp dl, 4
sete dl
test cl, dl
jne short loc_fffa676e  ; jne 0xfffa676e
lea ecx, [eax - 4]
cmp cl, 1
setbe cl
cmp al, 4
sete al
test byte [ebp - 0x84], al
je short loc_fffa6738  ; je 0xfffa6738
jmp short loc_fffa676e  ; jmp 0xfffa676e

loc_fffa6738:
test byte [ebp - 0xa0], dl
jne short loc_fffa6748  ; jne 0xfffa6748
test byte [ebp - 0x94], al
je short loc_fffa675e  ; je 0xfffa675e

loc_fffa6748:
mov esi, dword [ebp - 0x88]
mov dword [esi + 0x19], 8
mov dword [esi + 0x36], 8
jmp short loc_fffa67b0  ; jmp 0xfffa67b0

loc_fffa675e:
test byte [ebp - 0x90], dl
jne short loc_fffa676e  ; jne 0xfffa676e
test byte [ebp - 0xa8], al
je short loc_fffa6784  ; je 0xfffa6784

loc_fffa676e:
mov ebx, dword [ebp - 0x88]
mov dword [ebx + 0x19], 8
mov dword [ebx + 0x36], 8
jmp short loc_fffa67b0  ; jmp 0xfffa67b0

loc_fffa6784:
test cl, dl
jne short loc_fffa67b0  ; jne 0xfffa67b0
test al, bl
jne short loc_fffa67b0  ; jne 0xfffa67b0
test byte [ebp - 0x98], dl
jne short loc_fffa679c  ; jne 0xfffa679c
test byte [ebp - 0x9c], al
je short loc_fffa67b0  ; je 0xfffa67b0

loc_fffa679c:
mov esi, dword [ebp - 0x88]
mov dword [esi + 0x19], 7
mov dword [esi + 0x36], 7

loc_fffa67b0:
mov ebx, dword [ebp - 0x88]
sub esp, 0xc
push dword [ebx + 0x19]
mov ecx, dword [ebp - 0x7c]
xor edx, edx
mov eax, edi
call fcn_fffc03bf  ; call 0xfffc03bf
pop ecx
push dword [ebx + 0x36]
mov ecx, dword [ebp - 0x7c]
mov edx, 2
mov eax, edi
call fcn_fffc03bf  ; call 0xfffc03bf
add esp, 0x10
mov byte [ebp - 0x94], 2

loc_fffa67e5:
mov edx, dword [ebp - 0x7c]
mov eax, edi
call fcn_fffbf181  ; call 0xfffbf181
push ecx
mov esi, eax
lea eax, [ebp - 0x6e]
push eax
lea ebx, [ebp - 0x70]
lea edx, [ebp - 0x72]
push ebx
and esi, 0x8f
lea ecx, [ebp - 0x74]
push edx
mov eax, edi
mov edx, dword [ebp - 0x7c]
mov dword [ebp - 0x90], esi
call fcn_fffbeec5  ; call 0xfffbeec5
pop esi
pop eax
lea ecx, [ebp - 0x6e]
lea edx, [ebp - 0x74]
push ecx
mov eax, edi
lea ecx, [ebp - 0x72]
push ebx
call fcn_fffb9e61  ; call 0xfffb9e61
mov esi, dword [ebp - 0x88]
add esp, 0xc
mov esi, dword [esi + 0x19]
mov dword [ebp - 0xb0], esi
mov esi, dword [ebp - 0x88]
mov dl, byte [ebp - 0xb0]
sub edx, 6
mov ecx, dword [esi + 0x36]
cmp dword [ebp - 0xb0], ecx
lea esi, [ecx - 6]
cmovbe edx, esi
add edx, eax
lea eax, [ebp - 0x6e]
push eax
movzx esi, dl
lea edx, [ebp - 0x72]
push ebx
lea ecx, [ebp - 0x74]
mov eax, edi
push edx
shl esi, 4
mov edx, dword [ebp - 0x7c]
or esi, dword [ebp - 0x90]
call fcn_fffbeec5  ; call 0xfffbeec5
pop eax
pop edx
lea ecx, [ebp - 0x6e]
lea edx, [ebp - 0x74]
push ecx
mov eax, edi
lea ecx, [ebp - 0x72]
push ebx
and esi, 0xfffff8ff
call fcn_fffb9e61  ; call 0xfffb9e61
mov edx, dword [ebp - 0x88]
add esp, 0x10
mov ebx, dword [edx + 0x19]
mov ecx, dword [edx + 0x36]
mov dword [ebp - 0xb4], ecx
mov cl, byte [ebp - 0xb4]
sub ecx, 6
cmp ebx, dword [ebp - 0xb4]
lea edx, [ebx - 6]
cmovbe edx, ecx
add edx, eax
mov ebx, dword [ebp - 0x88]
movzx edx, dl
shl edx, 8
or edx, esi
and dh, 0x8f
cmp byte [ebx + 0x12], 2
mov dword [ebp - 0x84], edx
je short loc_fffa68ec  ; je 0xfffa68ec
cmp byte [ebx + 0x2f], 2
jne loc_fffa6a28  ; jne 0xfffa6a28

loc_fffa68ec:
push ecx
lea esi, [ebp - 0x6e]
lea ebx, [ebp - 0x72]
push esi
lea esi, [ebp - 0x70]
lea ecx, [ebp - 0x74]
push esi
mov edx, dword [ebp - 0x7c]
mov eax, edi
push ebx
call fcn_fffbeec5  ; call 0xfffbeec5
pop eax
pop edx
lea eax, [ebp - 0x6e]
mov ecx, ebx
push eax
lea edx, [ebp - 0x74]
mov eax, edi
push esi
call fcn_fffb9e61  ; call 0xfffb9e61
add esp, 0x10
jmp near loc_fffa6a75  ; jmp 0xfffa6a75

loc_fffa6921:
mov ebx, dword [ebp - 0x88]
cmp dword [ebx + 0xa], 0
je short loc_fffa698a  ; je 0xfffa698a
xor edx, edx
mov ecx, dword [ebp - 0x7c]
mov eax, edi
call fcn_fffbb493  ; call 0xfffbb493
push edx
movzx ebx, byte [ebp - 0x90]
mov byte [ebp - 0x9c], al
push 6
xor ecx, ecx
mov edx, dword [ebp - 0x7c]
push 8
mov eax, edi
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
add esp, 0xc
mov esi, eax
push 3
xor ecx, ecx
mov edx, dword [ebp - 0x7c]
push 0xf
mov eax, edi
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
shl eax, 6
add esp, 0x10
add esi, eax
movzx eax, byte [ebp - 0x9c]
shr esi, 1
shl eax, 6
add eax, esi
mov dword [ebp - 0x9c], eax

loc_fffa698a:
mov esi, dword [ebp - 0x88]
cmp dword [esi + 0x27], 0
je short loc_fffa69fc  ; je 0xfffa69fc
mov ecx, dword [ebp - 0x7c]
mov edx, 2
mov eax, edi
call fcn_fffbb493  ; call 0xfffbb493
mov byte [ebp - 0xa0], al
mov ecx, 2
push eax
movzx ebx, byte [ebp - 0x90]
mov edx, dword [ebp - 0x7c]
push 6
mov eax, edi
push 8
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
add esp, 0xc
mov esi, eax
push 3
mov ecx, 2
mov edx, dword [ebp - 0x7c]
push 0xf
mov eax, edi
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
shl eax, 6
add esp, 0x10
add esi, eax
movzx eax, byte [ebp - 0xa0]
shr esi, 1
shl eax, 6
add eax, esi
mov dword [ebp - 0xa0], eax

loc_fffa69fc:
mov eax, dword [ebp - 0x9c]
sub eax, dword [ebp - 0xa0]
cdq
xor eax, edx
sub eax, edx
cmp dword [ebp - 0x98], eax
cmovae eax, dword [ebp - 0x98]
inc byte [ebp - 0x90]
mov dword [ebp - 0x98], eax
jmp short loc_fffa6a4d  ; jmp 0xfffa6a4d

loc_fffa6a28:
mov dword [ebp - 0x98], 0
mov dword [ebp - 0xa0], 0
mov dword [ebp - 0x9c], 0
mov byte [ebp - 0x90], 0

loc_fffa6a4d:
mov bl, byte [ebp - 0x90]
cmp bl, byte [edi + 0x20b5]
jb loc_fffa6921  ; jb 0xfffa6921
mov dl, byte [ebp - 0x98]
mov al, 2
add edx, 0x3f
shr dl, 6
test dl, dl
lea ecx, [edx + 1]
cmovne eax, ecx

loc_fffa6a75:
mov esi, dword [ebp - 0x88]
mov ebx, dword [ebp - 0x88]
mov esi, dword [esi + 0x19]
mov ebx, dword [ebx + 0x36]
mov dword [ebp - 0xc4], ebx
mov dword [ebp - 0xb8], esi
mov edx, dword [ebp - 0xc4]
mov bl, byte [ebp - 0xb8]
mov cl, byte [ebp - 0xc4]
sub ebx, 6
sub ecx, 6
cmp esi, edx
mov dl, bl
cmovbe edx, ecx
mov esi, edx
mov dl, byte [ebp - 0x94]
shl edx, 0x18
add eax, esi
movzx eax, al
mov esi, dword [ebp - 0xc4]
shl eax, 0xc
or eax, dword [ebp - 0x84]
or eax, edx
and eax, 0xfff8ffff
cmp dword [ebp - 0xb8], esi
jbe short loc_fffa6ae5  ; jbe 0xfffa6ae5
movzx ebx, bl
jmp short loc_fffa6ae8  ; jmp 0xfffa6ae8

loc_fffa6ae5:
movzx ebx, cl

loc_fffa6ae8:
add ebx, 2
mov edx, dword [ebp - 0x7c]
shl ebx, 0x10
or ebx, eax
mov eax, edi
call fcn_fffbf0ab  ; call 0xfffbf0ab
movzx eax, al
and ebx, 0xff8fffff
shl eax, 0x14
mov dl, byte [ebp - 0x7c]
or eax, ebx
and eax, 0x7ffffff
or eax, 0x8000000
cmp dl, 1
sbb edx, edx
and edx, 0xfffffc00
add edx, 0x4408
add edx, dword [edi + 0x2223]
mov dword [edx], eax

loc_fffa6b2e:
inc dword [ebp - 0x7c]
add dword [ebp - 0x88], 0x1055
add dword [ebp - 0x8c], 0x8c
cmp dword [ebp - 0x7c], 2
jne loc_fffa64b7  ; jne 0xfffa64b7
mov edx, 0xdd4d
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
xor ebx, ebx
jmp short loc_fffa6bc0  ; jmp 0xfffa6bc0

loc_fffa6b5f:
mov ecx, ebx
mov edx, esi
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffa6bad  ; je 0xfffa6bad
mov eax, dword [ebp - 0x88]
cmp byte [ebp - 0x7c], 1
mov edx, dword [edi + 0x2223]
movzx ecx, word [eax - 8]
sbb eax, eax
not eax
and eax, 0x100
add eax, dword [esi*4 + ref_fffcf5b0]  ; add eax, dword [esi*4 - 0x30a50]
lea edx, [edx + eax + 4]
mov dword [edx], ecx
mov ecx, dword [ebp - 0x88]
movzx edx, word [ecx]
mov ecx, dword [edi + 0x2223]
lea eax, [eax + ecx + 8]
mov dword [eax], edx

loc_fffa6bad:
inc esi
add dword [ebp - 0x88], 2
cmp esi, 4
jne short loc_fffa6b5f  ; jne 0xfffa6b5f
inc ebx
cmp ebx, 2
je short loc_fffa6bda  ; je 0xfffa6bda

loc_fffa6bc0:
imul eax, ebx, 0x1055
xor esi, esi
mov byte [ebp - 0x7c], bl
lea eax, [edi + eax + 0x39d]
mov dword [ebp - 0x88], eax
jmp short loc_fffa6b5f  ; jmp 0xfffa6b5f

loc_fffa6bda:
cmp dword [edi + 0x22c2], 1
jne loc_fffa6d5e  ; jne 0xfffa6d5e
mov edx, 0xdd62
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov ecx, 2
mov edx, 1
mov eax, edi
call fcn_fffc8750  ; call 0xfffc8750
test eax, eax
je short loc_fffa6c14  ; je 0xfffa6c14
mov edx, 0xdd63
mov eax, edi
call fcn_fffad891  ; call 0xfffad891

loc_fffa6c14:
xor edx, edx
mov ecx, 2
mov eax, edi
call fcn_fffc8750  ; call 0xfffc8750
test eax, eax
je short loc_fffa6c32  ; je 0xfffa6c32
mov edx, 0xdd63
mov eax, edi
call fcn_fffad891  ; call 0xfffad891

loc_fffa6c32:
xor edx, edx
mov ecx, 3
mov eax, edi
call fcn_fffc8750  ; call 0xfffc8750
test eax, eax
mov dword [ebp - 0x80], eax
je short loc_fffa6c53  ; je 0xfffa6c53
mov edx, 0xdd63
mov eax, edi
call fcn_fffad891  ; call 0xfffad891

loc_fffa6c53:
mov edx, 0xdd64
jmp near loc_fffa6d57  ; jmp 0xfffa6d57

loc_fffa6c5d:
mov eax, edi
mov ebx, edi
call fcn_fffbacbd  ; call 0xfffbacbd
mov eax, dword [edi + 0x2223]
xor esi, esi
mov dword [eax + 0x5034], 0x1020200
mov eax, edi
call fcn_fffbfbe4  ; call 0xfffbfbe4
mov dword [ebp - 0x88], edi
jmp near loc_fffa4cb0  ; jmp 0xfffa4cb0

loc_fffa6c8a:
mov edx, esi
mov eax, edi
call fcn_fffbf510  ; call 0xfffbf510
test eax, eax
je loc_fffa4ce6  ; je 0xfffa4ce6
jmp near loc_fffa4cbf  ; jmp 0xfffa4cbf

loc_fffa6ca0:
xor edx, edx
mov eax, edi
call fcn_fffbf618  ; call 0xfffbf618
xor edx, edx
mov eax, edi
call fcn_fffbf5b2  ; call 0xfffbf5b2
jmp near loc_fffa4dc8  ; jmp 0xfffa4dc8

loc_fffa6cb7:
mov eax, edi
mov edx, 1
call fcn_fffbf618  ; call 0xfffbf618
mov edx, 1
mov eax, edi
call fcn_fffbf5b2  ; call 0xfffbf5b2
jmp near loc_fffa4dd5  ; jmp 0xfffa4dd5

loc_fffa6cd4:
mov edx, dword [ebp - 0x84]
add edx, dword [edi + 0x2223]
or eax, 0x600000
mov dword [edx], eax
jmp near loc_fffa50e1  ; jmp 0xfffa50e1

loc_fffa6cec:
mov ecx, dword [ebp - 0x7c]
lea edx, [ebp - 0x63]
mov eax, edi
call fcn_ffface48  ; call 0xffface48
jmp near loc_fffa5cb5  ; jmp 0xfffa5cb5

loc_fffa6cfe:
xor ecx, ecx
mov edx, 0x2400
mov eax, dword [ebp - 0x94]
call fcn_fffa24c1  ; call 0xfffa24c1
mov byte [ebp - 0x67], 0
mov byte [ebp - 0x63], 0x7f
mov byte [ebp - 0x66], 0
mov byte [ebp - 0x62], 0x7f
mov byte [ebp - 0x65], 0
mov byte [ebp - 0x61], 0x7f
mov byte [ebp - 0x64], 0
mov byte [ebp - 0x60], 0x7f
mov dword [ebp - 0x84], 0x20
jmp near loc_fffa61c6  ; jmp 0xfffa61c6

loc_fffa6d3f:
mov eax, dword [edi + 0x2254]
test eax, eax
je loc_fffa64cc  ; je 0xfffa64cc
jmp near loc_fffa64f9  ; jmp 0xfffa64f9

loc_fffa6d52:
mov edx, 0xdd45

loc_fffa6d57:
mov eax, edi
call fcn_fffad891  ; call 0xfffad891

loc_fffa6d5e:
mov eax, dword [ebp - 0x80]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffa6d69:
db 0x00
db 0x00
db 0x00

fcn_fffa6d6c:
push ebp
xor edx, edx
mov ebp, esp
mov al, dl
push edi
push esi
lea edi, [ebp - 0x4bb]
push ebx
mov ebx, 0xd
mov ecx, ebx
lea esp, [esp - 0x57c]
rep stosb  ; rep stosb byte es:[edi], al
mov esi, dword [ebp + 8]
mov ebx, ecx
lea edi, [ebp - 0x4ae]
mov cl, 0xd
mov word [ebp - 0x515], 0
mov dword [ebp - 0x4e4], 0
mov dword [ebp - 0x4e0], 0
mov dword [ebp - 0x4dc], 0
mov eax, dword [esi + 0x1e]
mov dword [ebp - 0x4d8], fcn_fffa1de6  ; mov dword [ebp - 0x4d8], 0xfffa1de6
mov dword [ebp - 0x4e8], eax
mov al, dl
rep stosb  ; rep stosb byte es:[edi], al
lea eax, [ebp - 0x4ae]
lea edi, [ebp - 0x513]
mov dword [ebp - 0x4d0], eax
mov cl, 3
mov al, dl
mov byte [ebp - 0x4e9], 1
rep stosb  ; rep stosb byte es:[edi], al
mov ecx, dword [esi + 0x46]
lea edi, [ebp - 0x43c]
mov dword [ebp - 0x550], ecx
mov al, byte [ebp - 0x550]
and eax, 1
mov ecx, 8
mov byte [ebp - 0x518], al
mov eax, ebx
rep stosd  ; rep stosd dword es:[edi], eax
mov eax, dword [esi + 0x2e]
mov dword [ebp - 0x4d4], 1
mov dword [ebp - 0x4cc], eax
mov byte [ebp - 0x517], 0
lea eax, [ebp - 0x515]
mov byte [ebp - 0x516], 0
mov dword [ebp - 0x4c8], eax
mov byte [ebp - 0x512], 7
mov byte [ebp - 0x511], 3
mov byte [ebp - 0x515], 0xe
mov byte [ebp - 0x3f4], 3
mov byte [ebp - 0x3f3], 0
mov eax, dword [esi + 0x22]
lea edi, [ebp - 0x34c]
mov dword [ebp - 0x3f2], eax
mov eax, dword [esi + 0x26]
mov word [ebp - 0x3ee], ax
mov eax, dword [esi + 0x2a]
mov word [ebp - 0x3ec], ax
mov cl, 0x67
lea eax, [ebp - 0x4cc]
mov dword [ebp - 0x3e9], eax
lea eax, [ebp - 0x4e9]
mov dword [ebp - 0x3e5], eax
lea eax, [ebp - 0x4d4]
mov dword [ebp - 0x3dd], eax
lea eax, [ebp - 0x43c]
mov dword [ebp - 0x3d9], eax
lea eax, [ebp - 0x517]
mov dword [ebp - 0x3d5], eax
lea eax, [ebp - 0x513]
mov dword [ebp - 0x3d1], eax
lea eax, [ebp - 0x518]
mov dword [ebp - 0x3cd], eax
mov al, dl
cmp dword [esi + 0x4a], 0
rep stosb  ; rep stosb byte es:[edi], al
mov cx, word [esi + 0x72]
mov al, byte [ebp - 0x349]
mov word [ebp - 0x548], cx
mov cl, byte [ebp - 0x548]
setne byte [ebp - 0x3ea]
mov edi, dword [ebp + 8]
and ecx, 1
and eax, 0xfffffffe
mov si, word [esi + 0x78]
or eax, ecx
mov word [ebp - 0x552], si
mov byte [ebp - 0x349], al
mov cl, byte [ebp - 0x552]
mov al, byte [ebp - 0x348]
and ecx, 1
and eax, 0xfffffffe
mov di, word [edi + 0x7e]
or eax, ecx
mov word [ebp - 0x554], di
mov byte [ebp - 0x348], al
mov cl, byte [ebp - 0x554]
mov al, byte [ebp - 0x347]
and ecx, 1
and eax, 0xfffffffe
mov dword [ebp - 0x3e1], 0
or eax, ecx
mov byte [ebp - 0x34c], 7
mov byte [ebp - 0x34b], 1
mov byte [ebp - 0x34a], 1
mov byte [ebp - 0x347], al
mov eax, dword [ebp + 8]
mov esi, dword [ebp + 8]
mov edi, dword [ebp + 8]
mov ax, word [eax + 0x84]
mov word [ebp - 0x556], ax
mov al, byte [ebp - 0x346]
mov cl, byte [ebp - 0x556]
and eax, 0xfffffffe
and ecx, 1
mov si, word [esi + 0x90]
or eax, ecx
mov ecx, dword [ebp + 8]
mov byte [ebp - 0x346], al
mov al, byte [ebp - 0x345]
and eax, 0xfffffffe
mov word [ebp - 0x55a], si
mov di, word [edi + 0x96]
mov cx, word [ecx + 0x8a]
mov word [ebp - 0x55c], di
mov word [ebp - 0x558], cx
mov cl, byte [ebp - 0x558]
and ecx, 1
or eax, ecx
mov cl, byte [ebp - 0x55a]
mov byte [ebp - 0x345], al
mov al, byte [ebp - 0x344]
and ecx, 1
and eax, 0xfffffffe
or eax, ecx
mov cl, byte [ebp - 0x55c]
mov byte [ebp - 0x344], al
mov al, byte [ebp - 0x343]
and ecx, 1
and eax, 0xfffffffe
or eax, ecx
mov byte [ebp - 0x343], al
mov eax, dword [ebp + 8]
mov ax, word [eax + 0x9c]
mov word [ebp - 0x55e], ax
mov al, byte [ebp - 0x342]
mov cl, byte [ebp - 0x55e]
and eax, 0xfffffffe
and ecx, 1
or eax, ecx
mov ecx, dword [ebp + 8]
mov byte [ebp - 0x342], al
mov al, byte [ebp - 0x341]
and eax, 0xfffffffe
mov cx, word [ecx + 0xa2]
mov word [ebp - 0x560], cx
mov cl, byte [ebp - 0x560]
and ecx, 1
or eax, ecx
mov byte [ebp - 0x341], al
mov esi, dword [ebp + 8]
mov edi, dword [ebp + 8]
mov al, byte [ebp - 0x340]
and eax, 0xfffffffe
mov si, word [esi + 0xa8]
mov word [ebp - 0x562], si
mov cl, byte [ebp - 0x562]
and ecx, 1
mov di, word [edi + 0xae]
or eax, ecx
mov word [ebp - 0x564], di
mov byte [ebp - 0x340], al
mov cl, byte [ebp - 0x564]
mov al, byte [ebp - 0x33f]
and ecx, 1
and eax, 0xfffffffe
mov esi, dword [ebp + 8]
or eax, ecx
mov edi, dword [ebp + 8]
mov byte [ebp - 0x33f], al
mov eax, dword [ebp + 8]
mov si, word [esi + 0xc0]
mov word [ebp - 0x56a], si
mov ax, word [eax + 0xb4]
mov word [ebp - 0x566], ax
mov al, byte [ebp - 0x33e]
mov cl, byte [ebp - 0x566]
and ecx, 1
and eax, 0xfffffffe
or eax, ecx
mov ecx, dword [ebp + 8]
mov byte [ebp - 0x33e], al
mov al, byte [ebp - 0x33d]
and eax, 0xfffffffe
mov cx, word [ecx + 0xba]
mov word [ebp - 0x568], cx
mov cl, byte [ebp - 0x568]
and ecx, 1
or eax, ecx
mov cl, byte [ebp - 0x56a]
mov byte [ebp - 0x33d], al
mov al, byte [ebp - 0x33c]
and ecx, 1
and eax, 0xfffffffe
or eax, ecx
mov byte [ebp - 0x33c], al
movzx eax, word [edi + 0x74]
mov dword [ebp - 0x33b], eax
movzx eax, word [edi + 0x7a]
mov dword [ebp - 0x337], eax
movzx eax, word [edi + 0x80]
mov dword [ebp - 0x333], eax
movzx eax, word [edi + 0x86]
mov dword [ebp - 0x32f], eax
movzx eax, word [edi + 0x8c]
mov dword [ebp - 0x32b], eax
movzx eax, word [edi + 0x92]
mov dword [ebp - 0x327], eax
movzx eax, word [edi + 0x98]
mov dword [ebp - 0x323], eax
movzx eax, word [edi + 0x9e]
mov dword [ebp - 0x31f], eax
movzx eax, word [edi + 0xa4]
mov dword [ebp - 0x31b], eax
movzx eax, word [edi + 0xaa]
mov dword [ebp - 0x317], eax
movzx eax, word [edi + 0xb0]
mov dword [ebp - 0x313], eax
movzx eax, word [edi + 0xb6]
mov dword [ebp - 0x30f], eax
movzx eax, word [edi + 0xbc]
mov dword [ebp - 0x30b], eax
movzx eax, word [edi + 0xc2]
mov dword [ebp - 0x307], eax
mov ax, word [edi + 0x76]
mov word [ebp - 0x303], ax
mov ax, word [edi + 0x7c]
mov word [ebp - 0x301], ax
mov ax, word [edi + 0x82]
mov word [ebp - 0x2ff], ax
mov ax, word [edi + 0x88]
mov word [ebp - 0x2fd], ax
mov ax, word [edi + 0x8e]
mov word [ebp - 0x2fb], ax
mov ax, word [edi + 0x94]
mov word [ebp - 0x2f9], ax
mov ax, word [edi + 0x9a]
mov word [ebp - 0x2f7], ax
mov ax, word [edi + 0xa0]
mov word [ebp - 0x2f5], ax
mov ax, word [edi + 0xa6]
mov word [ebp - 0x2f3], ax
mov ax, word [edi + 0xac]
mov word [ebp - 0x2f1], ax
mov ax, word [edi + 0xb2]
mov word [ebp - 0x2ef], ax
mov ax, word [edi + 0xb8]
mov word [ebp - 0x2ed], ax
mov ax, word [edi + 0xbe]
mov word [ebp - 0x2eb], ax
mov ax, word [edi + 0xc4]
mov word [ebp - 0x2e9], ax
mov ax, word [edi + 0xd2]
mov cx, word [edi + 0xd4]
and eax, 3
mov esi, eax
mov word [ebp - 0x56e], cx
mov al, byte [ebp - 0x56e]
mov di, word [edi + 0xd6]
and eax, 0xf
mov word [ebp - 0x570], di
shl eax, 2
mov cl, byte [ebp - 0x570]
or eax, esi
mov esi, dword [ebp + 8]
and ecx, 1
mov byte [ebp - 0x491], 1
mov edi, ecx
mov byte [ebp - 0x48c], 1
shl edi, 6
mov si, word [esi + 0xd8]
or eax, edi
mov word [ebp - 0x572], si
mov cl, byte [ebp - 0x572]
shl ecx, 7
lea edi, [ebp - 0x4a1]
mov esi, ecx
mov ecx, 4
or eax, esi
mov esi, ref_fffc9bac  ; mov esi, 0xfffc9bac
mov byte [ebp - 0x2e7], al
lea eax, [ebp - 0x34c]
mov dword [ebp - 0x490], eax
mov dword [ebp - 0x48b], 0xe8000000
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov esi, ref_fffc9bbc  ; mov esi, 0xfffc9bbc
lea edi, [ebp - 0x41c]
mov cl, 0xa
mov al, dl
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov esi, ref_fffc9be4  ; mov esi, 0xfffc9be4
lea edi, [ebp - 0x4c4]
mov cl, 9
mov dword [ebp - 0x487], 0x800
rep movsb  ; rep movsb byte es:[edi], byte ptr [esi]
lea edi, [ebp - 0x39b]
mov cl, 0x4f
rep stosb  ; rep stosb byte es:[edi], al
mov ecx, dword [ebp + 8]
lea edi, [ebp - 0x2e5]
mov dword [ebp - 0x483], 0xe8001000
mov byte [ebp - 0x38b], 1
mov byte [ebp - 0x374], 1
mov byte [ebp - 0x370], 1
mov byte [ebp - 0x36f], 0xff
mov byte [ebp - 0x36e], 7
mov eax, dword [ecx + 0x4ea]
cmp dword [ecx + 0x4de], 1
mov byte [ebp - 0x375], al
mov eax, dword [ecx + 0x56]
mov dword [ebp - 0x36a], eax
mov eax, dword [ecx + 0x4e]
mov dword [ebp - 0x365], eax
mov eax, dword [ecx + 0x52]
mov dword [ebp - 0x361], eax
sbb eax, eax
not eax
mov byte [ebp - 0x35d], 1
and eax, 2
mov byte [ebp - 0x34f], 0x50
mov byte [ebp - 0x35b], al
mov eax, dword [ecx + 0x5a]
mov dword [ebp - 0x353], eax
mov ecx, 0x6d
mov al, dl
mov byte [ebp - 0x34e], 0x55
rep stosb  ; rep stosb byte es:[edi], al
lea edi, [ebp - 0x3c9]
mov cl, 0x2e
mov byte [ebp - 0x34d], 0x64
mov byte [ebp - 0x2e5], 1
mov byte [ebp - 0x2e4], 1
mov byte [ebp - 0x2e3], 1
rep stosb  ; rep stosb byte es:[edi], al
mov ecx, dword [ebp + 8]
mov byte [ebp - 0x2e2], 1
mov word [ebp - 0x3a4], 1
mov byte [ebp - 0x3a2], 1
lea edi, [ebp - 0x46b]
mov esi, ref_fffc9bf0  ; mov esi, 0xfffc9bf0
mov al, byte [ecx + 0x3a]
mov byte [ebp - 0x3c9], al
mov al, byte [ecx + 0x3b]
mov byte [ebp - 0x3c8], al
mov al, byte [ecx + 0x3c]
mov byte [ebp - 0x3c7], al
mov al, byte [ecx + 0x3d]
mov byte [ebp - 0x3c6], al
mov eax, dword [ecx + 4]
mov dword [ebp - 0x3c5], eax
mov eax, dword [ecx + 8]
mov dword [ebp - 0x3c1], eax
mov eax, dword [ecx + 0xc]
mov dword [ebp - 0x3bd], eax
mov eax, dword [ecx + 0x10]
mov dword [ebp - 0x3b9], eax
movzx eax, word [ecx + 0x14]
mov dword [ebp - 0x3b5], eax
mov eax, dword [ecx + 0x16]
mov dword [ebp - 0x3b1], eax
mov eax, dword [ecx + 0x1a]
mov dword [ebp - 0x3ad], eax
mov eax, dword [ecx + 0x36]
mov dword [ebp - 0x3a9], eax
mov al, byte [ecx + 0x3e]
mov byte [ebp - 0x3a1], al
mov al, byte [ecx + 0x3f]
mov byte [ebp - 0x3a0], al
mov al, byte [ecx + 0x40]
mov byte [ebp - 0x39f], al
mov al, byte [ecx + 0x41]
mov byte [ebp - 0x39e], al
mov ecx, 0x17
mov al, dl
mov dword [ebp - 0x4f5], fcn_fffa050c  ; mov dword [ebp - 0x4f5], 0xfffa050c
rep stosb  ; rep stosb byte es:[edi], al
mov edx, dword [ebp + 8]
lea edi, [ebp - 0x454]
mov cl, 6
lea eax, [ebp - 0x3c9]
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov dword [ebp - 0x46a], eax
lea eax, [ebp - 0x4c4]
mov dword [ebp - 0x466], eax
lea eax, [ebp - 0x39b]
mov dword [ebp - 0x462], eax
lea eax, [ebp - 0x2e5]
mov dword [ebp - 0x45e], eax
mov eax, dword [edx + 0x5e]
mov dword [ebp - 0x45a], eax
lea edi, [ebp - 0x278]
mov eax, ebx
mov cl, 0x98
rep stosd  ; rep stosd dword es:[edi], eax
mov eax, dword [edx + 0x42]
mov byte [ebp - 0x46b], 0xb
mov dword [ebp - 0x20c], eax
mov dword [ebp - 0x4f1], fcn_fffa04f5  ; mov dword [ebp - 0x4f1], 0xfffa04f5
lea eax, [ebp - 0x4dc]
mov dword [ebp - 0x4ed], fcn_fffa04ee  ; mov dword [ebp - 0x4ed], 0xfffa04ee
mov dword [ebp - 0x278], 0xfeadb00b
mov dword [ebp - 0x25c], fcn_fffa22ee  ; mov dword [ebp - 0x25c], 0xfffa22ee
mov dword [ebp - 0x254], fcn_fffa2279  ; mov dword [ebp - 0x254], 0xfffa2279
mov dword [ebp - 0x250], fcn_fffa041e  ; mov dword [ebp - 0x250], 0xfffa041e
mov dword [ebp - 0x24c], fcn_fffa04a0  ; mov dword [ebp - 0x24c], 0xfffa04a0
mov dword [ebp - 0x244], fcn_fffa047e  ; mov dword [ebp - 0x244], 0xfffa047e
mov dword [ebp - 0x240], fcn_fffa2594  ; mov dword [ebp - 0x240], 0xfffa2594
mov dword [ebp - 0x230], fcn_fffa04e7  ; mov dword [ebp - 0x230], 0xfffa04e7
mov dword [ebp - 0x224], fcn_fffa24af  ; mov dword [ebp - 0x224], 0xfffa24af
mov dword [ebp - 0x21c], fcn_fffa04e0  ; mov dword [ebp - 0x21c], 0xfffa04e0
mov dword [ebp - 0x214], ref_fffcfb3c  ; mov dword [ebp - 0x214], 0xfffcfb3c
mov dword [ebp - 0x204], ref_fffcfb2c  ; mov dword [ebp - 0x204], 0xfffcfb2c
mov dword [ebp - 0x200], eax
cmp dword [edx], 6
lea eax, [ebp - 0x46b]
mov dword [ebp - 0x1f8], ref_fffcfb1c  ; mov dword [ebp - 0x1f8], 0xfffcfb1c
mov dword [ebp - 0x1f4], eax
mov dword [ebp - 0x1ec], ref_fffcfb0c  ; mov dword [ebp - 0x1ec], 0xfffcfb0c
lea eax, [ebp - 0x4e4]
mov dword [ebp - 0x1e0], ref_fffcfb8c  ; mov dword [ebp - 0x1e0], 0xfffcfb8c
mov dword [ebp - 0x1e8], eax
mov dword [ebp - 0x1d4], ref_fffcfafc  ; mov dword [ebp - 0x1d4], 0xfffcfafc
lea eax, [ebp - 0x3f4]
mov dword [ebp - 0x1c8], ref_fffcfb9c  ; mov dword [ebp - 0x1c8], 0xfffcfb9c
mov dword [ebp - 0x1dc], eax
mov dword [ebp - 0x1bc], ref_fffcfaec  ; mov dword [ebp - 0x1bc], 0xfffcfaec
lea eax, [ebp - 0x491]
mov dword [ebp - 0x1b0], ref_fffcfadc  ; mov dword [ebp - 0x1b0], 0xfffcfadc
mov dword [ebp - 0x1d0], eax
mov dword [ebp - 0x1a4], ref_fffcfacc  ; mov dword [ebp - 0x1a4], 0xfffcfacc
lea eax, [ebp - 0x4a1]
mov dword [ebp - 0x198], ref_fffcfabc  ; mov dword [ebp - 0x198], 0xfffcfabc
mov dword [ebp - 0x1c4], eax
mov dword [ebp - 0x18c], ref_fffcfbac  ; mov dword [ebp - 0x18c], 0xfffcfbac
lea eax, [ebp - 0x454]
mov dword [ebp - 0x180], ref_fffcfbbc  ; mov dword [ebp - 0x180], 0xfffcfbbc
mov dword [ebp - 0x1b8], eax
mov dword [ebp - 0x118], 0xc
lea eax, [ebp - 0x41c]
mov dword [ebp - 0x1c], edx
mov dword [ebp - 0x1ac], eax
lea eax, [ebp - 0x4bb]
mov dword [ebp - 0x1a0], eax
lea eax, [ebp - 0x4f5]
mov dword [ebp - 0x194], eax
lea eax, [ebp - 0x4f1]
mov dword [ebp - 0x188], eax
lea eax, [ebp - 0x4ed]
mov dword [ebp - 0x17c], eax
lea eax, [ebp - 0x274]
mov dword [ebp - 0x510], eax
jne loc_fffa9af7  ; jne 0xfffa9af7
sub esp, 0xc
lea eax, [ebp - 0x510]
mov dword [0xfeffc010], eax
mov eax, dword [edx + 0x4da]
push ref_fffcf6b6  ; push 0xfffcf6b6
mov dword [0xfeffc00c], eax
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x10
cmp dword [ebp - 0x20c], 2
jne short loc_fffa778b  ; jne 0xfffa778b
mov edx, dword [ebp + 8]
cmp dword [edx + 0x5e], 0
je short loc_fffa778b  ; je 0xfffa778b
sub esp, 0xc
mov dword [ebp - 0x20c], 0x11
push ref_fffcf6d4  ; push 0xfffcf6d4
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x10

loc_fffa778b:
mov ecx, dword [ebp + 8]
mov ecx, dword [ecx + 0x56]
mov eax, ecx
dec eax
cmp eax, 0xfffffffd
ja short loc_fffa77af  ; ja 0xfffa77af
mov ebx, dword [ebp + 8]
mov eax, dword [ebx + 0x5a]
test eax, eax
je short loc_fffa77af  ; je 0xfffa77af
inc eax
je short loc_fffa77af  ; je 0xfffa77af
cmp dword [ebx + 0x62], 0xba7
ja short loc_fffa77d4  ; ja 0xfffa77d4

loc_fffa77af:
mov byte [ebp - 0x3a2], 0
mov dword [ebp - 0x36a], 0
mov dword [ebp - 0x353], 0
mov dword [ebp - 0x45a], 0

loc_fffa77d4:
mov esi, dword [ebp + 8]
mov eax, dword [esi + 0x6e]
cmp eax, 0x42b
je short loc_fffa7807  ; je 0xfffa7807
ja short loc_fffa77ec  ; ja 0xfffa77ec
cmp eax, 0x320
jne short loc_fffa7828  ; jne 0xfffa7828
jmp short loc_fffa77fc  ; jmp 0xfffa77fc

loc_fffa77ec:
cmp eax, 0x535
je short loc_fffa7812  ; je 0xfffa7812
cmp eax, 0x640
jne short loc_fffa7828  ; jne 0xfffa7828
jmp short loc_fffa781d  ; jmp 0xfffa781d

loc_fffa77fc:
mov word [ebp - 0x39a], 0x320
jmp short loc_fffa7842  ; jmp 0xfffa7842

loc_fffa7807:
mov word [ebp - 0x39a], 0x42b
jmp short loc_fffa7842  ; jmp 0xfffa7842

loc_fffa7812:
mov word [ebp - 0x39a], 0x535
jmp short loc_fffa7842  ; jmp 0xfffa7842

loc_fffa781d:
mov word [ebp - 0x39a], 0x640
jmp short loc_fffa7842  ; jmp 0xfffa7842

loc_fffa7828:
push ecx
push ecx
push eax
push ref_fffcf6f6  ; push 0xfffcf6f6
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x10
mov eax, 0xfffffffe
jmp near loc_fffa9b0e  ; jmp 0xfffa9b0e

loc_fffa7842:
mov edi, dword [ebp + 8]
mov eax, dword [edi + 0x4e6]
cmp eax, 1
je short loc_fffa7862  ; je 0xfffa7862
cmp eax, 2
je short loc_fffa786b  ; je 0xfffa786b
test eax, eax
jne short loc_fffa7874  ; jne 0xfffa7874
mov byte [ebp - 0x38c], 0x10
jmp short loc_fffa788e  ; jmp 0xfffa788e

loc_fffa7862:
mov byte [ebp - 0x38c], 0
jmp short loc_fffa788e  ; jmp 0xfffa788e

loc_fffa786b:
mov byte [ebp - 0x38c], 2
jmp short loc_fffa788e  ; jmp 0xfffa788e

loc_fffa7874:
push edx
push edx
push eax
push ref_fffcf749  ; push 0xfffcf749
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x10
mov eax, 0xfffffffd
jmp near loc_fffa9b0e  ; jmp 0xfffa9b0e

loc_fffa788e:
sub esp, 0xc
push ref_fffcf792  ; push 0xfffcf792
call fcn_fffa1e55  ; call 0xfffa1e55
mov ebx, dword [0xfeffc010]
add esp, 0x10
mov dword [ebp - 0x520], ebx
mov bx, word [0xf00f8002]
mov eax, ebx
and eax, 0xfffffffb
cmp ax, 0x1c42
je loc_fffa7943  ; je 0xfffa7943
cmp bx, 0x1c4c
sete cl
cmp bx, 0x1c4a
sete dl
or cl, dl
jne short loc_fffa7943  ; jne 0xfffa7943
cmp bx, 0x1c50
sete cl
cmp bx, 0x1c4e
sete dl
or cl, dl
jne short loc_fffa7943  ; jne 0xfffa7943
cmp bx, 0x1c44
sete cl
cmp bx, 0x1c5c
sete dl
or cl, dl
jne short loc_fffa7943  ; jne 0xfffa7943
cmp ax, 0x1c43
je short loc_fffa7943  ; je 0xfffa7943
mov eax, ebx
and eax, 0xfffffffd
cmp ax, 0x1c49
je short loc_fffa7943  ; je 0xfffa7943
cmp bx, 0x1c41
sete dl
cmp bx, 0x1c4f
sete al
or dl, al
jne short loc_fffa7943  ; jne 0xfffa7943
cmp bx, 0x1c4d
je short loc_fffa7943  ; je 0xfffa7943
cmp bx, 0x1c56
je short loc_fffa7943  ; je 0xfffa7943
cmp bx, 0x1c54
sete dl
cmp bx, 0x1c52
sete al
or dl, al
je short loc_fffa7948  ; je 0xfffa7948

loc_fffa7943:
call fcn_fffa0bcc  ; call 0xfffa0bcc

loc_fffa7948:
mov esi, dword [ebp - 0x520]
sub esp, 0xc
lea edx, [ebp - 0x504]
mov eax, dword [esi]
push edx
push 0
push 0
push ref_fffcfb8c  ; push 0xfffcfb8c
push esi
call dword [eax + 0x20]  ; ucall
mov eax, dword [ebp - 0x504]
add esp, 0x20
mov eax, dword [eax + 0x17]
cmp dword [eax], 2
jne short loc_fffa79aa  ; jne 0xfffa79aa
mov eax, dword [0xf00f80e4]
and eax, 0xffffffc3
mov dword [0xf00f80e4], eax
mov eax, dword [0xf00f80e8]
test al, 0xa0
sete dl
cmp bx, 0x1e48
sete al
or dl, al
je short loc_fffa79aa  ; je 0xfffa79aa
mov eax, dword [ebp - 0x504]
mov eax, dword [eax + 0x17]
mov dword [eax], 1

loc_fffa79aa:
mov eax, dword [ebp - 0x504]
movzx edx, byte [eax + 1]
mov eax, dword [eax + 2]
shl edx, 0x14
or eax, 1
mov ecx, dword [edx - 0xff07f10]
and ecx, 0x3fff
or eax, ecx
mov dword [edx - 0xff07f10], eax
mov ecx, dword [ebp - 0x504]
movzx edx, byte [ecx + 1]
shl edx, 0x14
movzx ecx, word [ecx + 6]
mov eax, dword [edx - 0xff07fc0]
and eax, 0xffff007f
or eax, ecx
mov dword [edx - 0xff07fc0], eax
mov eax, dword [ebp - 0x504]
cmp word [eax + 6], 0
movzx eax, byte [eax + 1]
je short loc_fffa7a14  ; je 0xfffa7a14
shl eax, 0x14
mov dl, byte [eax - 0xff07fbc]
or edx, 0xffffff80
jmp short loc_fffa7a20  ; jmp 0xfffa7a20

loc_fffa7a14:
shl eax, 0x14
mov dl, byte [eax - 0xff07fbc]
and edx, 0x7f

loc_fffa7a20:
mov byte [eax - 0xff07fbc], dl
mov eax, dword [ebp - 0x504]
movzx eax, byte [eax + 1]
shl eax, 0x14
mov dl, byte [eax - 0xff07f5a]
or edx, 2
mov byte [eax - 0xff07f5a], dl
mov ecx, dword [ebp - 0x504]
movzx edx, byte [ecx + 1]
shl edx, 0x14
movzx ecx, word [ecx + 8]
mov eax, dword [edx - 0xff07fb8]
and eax, 0xffff007f
or eax, ecx
mov dword [edx - 0xff07fb8], eax
mov eax, dword [ebp - 0x504]
cmp word [eax + 8], 0
movzx eax, byte [eax + 1]
je short loc_fffa7a85  ; je 0xfffa7a85
shl eax, 0x14
mov dl, byte [eax - 0xff07fb4]
or edx, 0x10
jmp short loc_fffa7a91  ; jmp 0xfffa7a91

loc_fffa7a85:
shl eax, 0x14
mov dl, byte [eax - 0xff07fb4]
and edx, 0xffffffef

loc_fffa7a91:
mov byte [eax - 0xff07fb4], dl
mov edi, dword [ebp - 0x504]
mov si, word [0xf00f8002]
mov ebx, dword [edi + 2]
mov dword [ebx + 0x2088], 0x109000
mov eax, dword [ebx + 0x20ac]
or eax, 0x40000000
mov dword [ebx + 0x20ac], eax
mov dword [ebx + 0x100c], 0x1110000
mov byte [ebx + 0x2340], 0x1b
mov eax, dword [ebx + 0x2314]
or eax, 0x200000
mov dword [ebx + 0x2314], eax
mov eax, dword [ebx + 0x2310]
and eax, 0x9fffffff
or eax, 0x20000000
mov dword [ebx + 0x2310], eax
mov dword [ebx + 0x2324], 0x854c74
mov al, byte [ebx + 0x400]
mov byte [ebp - 0x524], al
and eax, 3
cmp al, 2
je short loc_fffa7b21  ; je 0xfffa7b21
cmp al, 3
jne loc_fffa7bbd  ; jne 0xfffa7bbd
jmp short loc_fffa7b59  ; jmp 0xfffa7b59

loc_fffa7b21:
mov eax, dword [ebx + 0x2310]
and eax, 0xff3fffff
or eax, 0x400000
mov dword [ebx + 0x2310], eax
sub esp, 0xc
mov ecx, 0x7ffffff
push 0x28000000
mov edx, 0xec000503
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov dword [esp], 0x28000000
jmp short loc_fffa7ba7  ; jmp 0xfffa7ba7

loc_fffa7b59:
mov eax, dword [ebx + 0x2310]
and eax, 0xff3fffff
or eax, 0x800000
mov dword [ebx + 0x2310], eax
sub esp, 0xc
mov ecx, 0x7ffffff
push 0x28000000
mov edx, 0xec000503
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0x7ffffff
mov edx, 0xec000603
mov eax, ebx
mov dword [esp], 0x48000000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov dword [esp], 0x68000000

loc_fffa7ba7:
mov ecx, 0x7ffffff
mov edx, 0xec000703
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10
jmp short loc_fffa7bce  ; jmp 0xfffa7bce

loc_fffa7bbd:
mov eax, dword [ebx + 0x2310]
and eax, 0xff3fffff
mov dword [ebx + 0x2310], eax

loc_fffa7bce:
mov al, byte [ebp - 0x524]
and eax, 0xc
cmp al, 8
je short loc_fffa7be5  ; je 0xfffa7be5
cmp al, 0xc
jne loc_fffa7c81  ; jne 0xfffa7c81
jmp short loc_fffa7c1d  ; jmp 0xfffa7c1d

loc_fffa7be5:
mov eax, dword [ebx + 0x2310]
and eax, 0xffcfffff
or eax, 0x100000
mov dword [ebx + 0x2310], eax
sub esp, 0xc
mov ecx, 0x7ffffff
push 0x28000000
mov edx, 0xec000903
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov dword [esp], 0x28000000
jmp short loc_fffa7c6b  ; jmp 0xfffa7c6b

loc_fffa7c1d:
mov eax, dword [ebx + 0x2310]
and eax, 0xffcfffff
or eax, 0x200000
mov dword [ebx + 0x2310], eax
sub esp, 0xc
mov ecx, 0x7ffffff
push 0x28000000
mov edx, 0xec000903
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0x7ffffff
mov edx, 0xec000a03
mov eax, ebx
mov dword [esp], 0x48000000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov dword [esp], 0x68000000

loc_fffa7c6b:
mov ecx, 0x7ffffff
mov edx, 0xec000b03
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10
jmp short loc_fffa7c92  ; jmp 0xfffa7c92

loc_fffa7c81:
mov eax, dword [ebx + 0x2310]
and eax, 0xffcfffff
mov dword [ebx + 0x2310], eax

loc_fffa7c92:
sub esp, 0xc
mov ecx, 0xff59ffff
push 0x590000
mov edx, 0xea007f62
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xff59ffff
mov edx, 0xec007f62
mov eax, ebx
mov dword [esp], 0x590000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xf0ffffff
mov edx, 0xec007f64
mov eax, ebx
mov dword [esp], 0x9000000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffff0000
mov edx, 0xea0040b9
mov eax, ebx
mov dword [esp], 0x51c
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffffe4ff
mov edx, 0xeb0040a1
mov eax, ebx
mov dword [esp], 0x4f8
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffffe4ff
mov edx, 0xec0040a1
mov eax, ebx
mov dword [esp], 0x4f8
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov eax, esi
add esp, 0x10
and eax, 0xfffffffb
cmp ax, 0x1c42
je loc_fffa7db8  ; je 0xfffa7db8
cmp si, 0x1c4c
sete cl
cmp si, 0x1c4a
sete dl
or cl, dl
jne short loc_fffa7db8  ; jne 0xfffa7db8
cmp si, 0x1c50
sete cl
cmp si, 0x1c4e
sete dl
or cl, dl
jne short loc_fffa7db8  ; jne 0xfffa7db8
cmp si, 0x1c44
sete cl
cmp si, 0x1c5c
sete dl
or cl, dl
jne short loc_fffa7db8  ; jne 0xfffa7db8
cmp ax, 0x1c43
je short loc_fffa7db8  ; je 0xfffa7db8
mov eax, esi
and eax, 0xfffffffd
cmp ax, 0x1c49
je short loc_fffa7db8  ; je 0xfffa7db8
cmp si, 0x1c41
sete dl
cmp si, 0x1c4f
sete al
or dl, al
jne short loc_fffa7db8  ; jne 0xfffa7db8
cmp si, 0x1c4d
je short loc_fffa7db8  ; je 0xfffa7db8
cmp si, 0x1c56
je short loc_fffa7db8  ; je 0xfffa7db8
cmp si, 0x1c54
sete dl
cmp si, 0x1c52
sete al
or dl, al
je short loc_fffa7dec  ; je 0xfffa7dec

loc_fffa7db8:
sub esp, 0xc
mov ecx, 0xbfffffff
push 0x40000000
mov edx, 0xec004086
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0x7fffffff
mov edx, 0xec004086
mov eax, ebx
mov dword [esp], 0x80000000
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10

loc_fffa7dec:
sub esp, 0xc
mov ecx, 0xfffff7ff
push 0x400
mov edx, 0xea004001
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xbfdfffff
mov edx, 0xeb004002
mov eax, ebx
mov dword [esp], 0x40200000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xbfdfffff
mov edx, 0xec004002
mov eax, ebx
mov dword [esp], 0x40200000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xff9fffff
mov edx, 0xea004002
mov eax, ebx
mov dword [esp], 0x600000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfeffffff
mov edx, 0xea0040a1
mov eax, ebx
mov dword [esp], 0x1000000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffff0000
mov edx, 0xeb0040b1
mov eax, ebx
mov dword [esp], 0xc598
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffff0000
mov edx, 0xec0040b1
mov eax, ebx
mov dword [esp], 0xc598
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffff0000
mov edx, 0xeb0040b6
mov eax, ebx
mov dword [esp], 0xc598
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffffbfff
mov edx, 0xea0000a9
mov eax, ebx
mov dword [esp], 0x8000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffffbfff
mov edx, 0xea0001a9
mov eax, ebx
mov dword [esp], 0x8000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffff0000
mov edx, 0xeb0040b2
mov eax, ebx
mov dword [esp], 0xc396
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffff0000
mov edx, 0xeb0040b3
mov eax, ebx
mov dword [esp], 0xc396
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffff0000
mov edx, 0xec0040b2
mov eax, ebx
mov dword [esp], 0xc396
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov eax, dword [edi + 0x17]
add esp, 0x10
mov eax, dword [eax + 4]
cmp dword [eax + 5], 0
jne short loc_fffa7f8a  ; jne 0xfffa7f8a
sub esp, 0xc
mov ecx, 0xfffff4ff
push 0x14f8
mov edx, 0xea0001a9
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov eax, dword [edi + 0x17]
add esp, 0x10
mov eax, dword [eax + 4]
mov ax, word [eax]
cmp ax, 0x35
ja short loc_fffa7f71  ; ja 0xfffa7f71
sub esp, 0xc
mov ecx, 0xff88c3ff
push 0x880300
jmp near loc_fffa7ff4  ; jmp 0xfffa7ff4

loc_fffa7f71:
cmp ax, 0x60
ja loc_fffa8003  ; ja 0xfffa8003
sub esp, 0xc
mov ecx, 0xff88caff
push 0x880a00
jmp short loc_fffa7ff4  ; jmp 0xfffa7ff4

loc_fffa7f8a:
sub esp, 0xc
mov edx, 0xea0001a9
push 0x18e8
mov ecx, 0xfffff8ef
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov eax, dword [edi + 0x17]
add esp, 0x10
mov eax, dword [eax + 4]
mov dx, word [eax]
cmp dx, 0x20
ja short loc_fffa7fcc  ; ja 0xfffa7fcc
test byte [eax + 4], 1
je short loc_fffa7fbd  ; je 0xfffa7fbd
jmp short loc_fffa7fe7  ; jmp 0xfffa7fe7

loc_fffa7fbd:
sub esp, 0xc
mov ecx, 0xffffc9ff
push 0x900
jmp short loc_fffa7ff4  ; jmp 0xfffa7ff4

loc_fffa7fcc:
cmp dx, 0x45
ja short loc_fffa8003  ; ja 0xfffa8003
test byte [eax + 4], 1
je short loc_fffa7fe7  ; je 0xfffa7fe7
sub esp, 0xc
mov ecx, 0xffffcfff
push 0xf00
jmp short loc_fffa7ff4  ; jmp 0xfffa7ff4

loc_fffa7fe7:
sub esp, 0xc
mov ecx, 0xffffcaff
push 0xa00

loc_fffa7ff4:
mov edx, 0xea000151
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10

loc_fffa8003:
mov eax, dword [edi + 0x17]
mov eax, dword [eax + 4]
cmp dword [eax + 9], 0
jne short loc_fffa8066  ; jne 0xfffa8066
sub esp, 0xc
mov ecx, 0xfffff4ff
push 0x14f8
mov edx, 0xea0000a9
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov eax, dword [edi + 0x17]
add esp, 0x10
mov eax, dword [eax + 4]
mov ax, word [eax + 2]
cmp ax, 0x35
ja short loc_fffa804d  ; ja 0xfffa804d
sub esp, 0xc
mov ecx, 0xff88c3ff
push 0x880300
jmp near loc_fffa80d1  ; jmp 0xfffa80d1

loc_fffa804d:
cmp ax, 0x60
ja loc_fffa80e0  ; ja 0xfffa80e0
sub esp, 0xc
mov ecx, 0xff88caff
push 0x880a00
jmp short loc_fffa80d1  ; jmp 0xfffa80d1

loc_fffa8066:
sub esp, 0xc
mov edx, 0xea0000a9
push 0x18e8
mov ecx, 0xfffff8ef
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov eax, dword [edi + 0x17]
add esp, 0x10
mov eax, dword [eax + 4]
mov dx, word [eax + 2]
cmp dx, 0x20
ja short loc_fffa80a9  ; ja 0xfffa80a9
test byte [eax + 4], 1
je short loc_fffa809a  ; je 0xfffa809a
jmp short loc_fffa80c4  ; jmp 0xfffa80c4

loc_fffa809a:
sub esp, 0xc
mov ecx, 0xffffc9ff
push 0x900
jmp short loc_fffa80d1  ; jmp 0xfffa80d1

loc_fffa80a9:
cmp dx, 0x45
ja short loc_fffa80e0  ; ja 0xfffa80e0
test byte [eax + 4], 1
je short loc_fffa80c4  ; je 0xfffa80c4
sub esp, 0xc
mov ecx, 0xffffcfff
push 0xf00
jmp short loc_fffa80d1  ; jmp 0xfffa80d1

loc_fffa80c4:
sub esp, 0xc
mov ecx, 0xffffcaff
push 0xa00

loc_fffa80d1:
mov edx, 0xea000051
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10

loc_fffa80e0:
lea ecx, [ebp - 0x500]
mov edx, 0xea007f05
mov eax, ebx
call fcn_fffa0abd  ; call 0xfffa0abd
test byte [ebp - 0x4fe], 0x10
jne short loc_fffa8117  ; jne 0xfffa8117
sub esp, 0xc
mov ecx, 0xfffffeff
push 0x600
mov edx, 0xea007f05
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10

loc_fffa8117:
sub esp, 0xc
mov ecx, 0xffff0000
push 0xc91c
mov edx, 0xea0040b7
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffff0000
mov edx, 0xea0040b8
mov eax, ebx
mov dword [esp], 0xc91c
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfdffffff
mov edx, 0xeb0040a1
mov eax, ebx
mov dword [esp], 0x2000000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfdffffff
mov edx, 0xec0040a1
mov eax, ebx
mov dword [esp], 0x2000000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov edx, 0xea007f0a
mov ecx, 0x3fffffff
mov eax, ebx
mov dword [esp], 0xc0000000
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10
cmp si, 0x1e44
sete dl
cmp si, 0x1e41
sete al
or dl, al
mov byte [ebp - 0x524], dl
jne loc_fffa8246  ; jne 0xfffa8246
lea eax, [esi - 0x1e46]
cmp ax, 1
jbe loc_fffa8246  ; jbe 0xfffa8246
lea eax, [esi - 0x1e48]
cmp ax, 1
jbe short loc_fffa8246  ; jbe 0xfffa8246
cmp si, 0x1e53
sete dl
cmp si, 0x1e4a
sete al
or dl, al
jne short loc_fffa8246  ; jne 0xfffa8246
cmp si, 0x1e5e
sete dl
cmp si, 0x1e42
sete al
or dl, al
jne short loc_fffa8246  ; jne 0xfffa8246
mov eax, esi
and eax, 0xfffffff7
cmp ax, 0x1e55
je short loc_fffa8246  ; je 0xfffa8246
lea eax, [esi - 0x1e57]
cmp ax, 1
jbe short loc_fffa8246  ; jbe 0xfffa8246
cmp si, 0x1e5f
sete dl
cmp si, 0x1e59
sete al
or dl, al
jne short loc_fffa8246  ; jne 0xfffa8246
cmp si, 0x1e56
sete dl
cmp si, 0x1e43
sete al
or dl, al
jne short loc_fffa8246  ; jne 0xfffa8246

loc_fffa8234:
lea eax, [esi - 0x1e46]
cmp ax, 1
ja loc_fffa8544  ; ja 0xfffa8544
jmp short loc_fffa82b3  ; jmp 0xfffa82b3

loc_fffa8246:
call fcn_fffa0bcc  ; call 0xfffa0bcc
test eax, eax
je short loc_fffa825a  ; je 0xfffa825a

loc_fffa824f:
cmp byte [ebp - 0x524], 0
je short loc_fffa8234  ; je 0xfffa8234
jmp short loc_fffa82b3  ; jmp 0xfffa82b3

loc_fffa825a:
push edi
lea edx, [ebp - 0x4fc]
push edi
mov edi, dword [ebp - 0x520]
mov eax, dword [edi]
push edx
push edi
call dword [eax + 0x28]  ; ucall
mov eax, dword [ebp - 0x4fc]
add esp, 0x10
cmp eax, 0x11
sete dl
cmp eax, 5
sete al
or dl, al
je short loc_fffa824f  ; je 0xfffa824f
mov edi, 0xec000082

loc_fffa828d:
sub esp, 0xc
mov edx, edi
push 0
mov ecx, 0xfffffff3
mov eax, ebx
add edi, 0x100
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10
cmp edi, 0xec000482
jne short loc_fffa828d  ; jne 0xfffa828d
jmp short loc_fffa824f  ; jmp 0xfffa824f

loc_fffa82b3:
sub esp, 0xc
mov ecx, 0xff00c0ff
push 0xff1700
mov edx, 0xec00404d
mov eax, ebx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0x7fffffff
mov edx, 0xec000084
mov eax, ebx
mov dword [esp], 0
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0x7fffffff
mov edx, 0xec000184
mov eax, ebx
mov dword [esp], 0
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0x7fffffff
mov edx, 0xec000284
mov eax, ebx
mov dword [esp], 0
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0x7fffffff
mov edx, 0xec000384
mov eax, ebx
mov dword [esp], 0
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfff0ffff
mov edx, 0xec000094
mov eax, ebx
mov dword [esp], 0xf0000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfff0ffff
mov edx, 0xec000194
mov eax, ebx
mov dword [esp], 0xf0000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfff0ffff
mov edx, 0xec000294
mov eax, ebx
mov dword [esp], 0xf0000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfff0ffff
mov edx, 0xec000394
mov eax, ebx
mov dword [esp], 0xf0000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffffc00
mov edx, 0xec000096
mov eax, ebx
mov dword [esp], 1
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffffc00
mov edx, 0xec000196
mov eax, ebx
mov dword [esp], 1
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffffc00
mov edx, 0xec000296
mov eax, ebx
mov dword [esp], 1
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffffc00
mov edx, 0xec000396
mov eax, ebx
mov dword [esp], 1
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffff3f7
mov edx, 0xec000001
mov eax, ebx
mov dword [esp], 0xc08
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffff3f7
mov edx, 0xec000101
mov eax, ebx
mov dword [esp], 0xc08
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffff3f7
mov edx, 0xec000201
mov eax, ebx
mov dword [esp], 0xc08
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffff3f7
mov edx, 0xec000301
mov eax, ebx
mov dword [esp], 0xc08
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffff0000
mov edx, 0xec0040b5
mov eax, ebx
mov dword [esp], 0xc518
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffff0ff
mov edx, 0xec000087
mov eax, ebx
mov dword [esp], 0x500
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffff0ff
mov edx, 0xec000187
mov eax, ebx
mov dword [esp], 0x500
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffff0ff
mov edx, 0xec000287
mov eax, ebx
mov dword [esp], 0x500
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffff0ff
mov edx, 0xec000387
mov eax, ebx
mov dword [esp], 0x500
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xff00ffff
mov edx, 0xea000050
mov eax, ebx
mov dword [esp], 0xbb0000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xff00ffff
mov edx, 0xea000150
mov eax, ebx
mov dword [esp], 0xbb0000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xfffff0ff
mov edx, 0xec007f60
mov eax, ebx
mov dword [esp], 0xd00
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffcfffff
mov edx, 0xea00008d
mov eax, ebx
mov dword [esp], 0x300000
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov ecx, 0xffcfffff
mov edx, 0xea00018d
mov eax, ebx
mov dword [esp], 0x300000
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10
jmp near loc_fffa85d3  ; jmp 0xfffa85d3

loc_fffa8544:
lea eax, [esi - 0x1e48]
cmp ax, 1
jbe loc_fffa82b3  ; jbe 0xfffa82b3
cmp si, 0x1e53
sete dl
cmp si, 0x1e4a
sete al
or dl, al
jne loc_fffa82b3  ; jne 0xfffa82b3
cmp si, 0x1e5e
sete dl
cmp si, 0x1e42
sete al
or dl, al
jne loc_fffa82b3  ; jne 0xfffa82b3
mov eax, esi
and eax, 0xfffffff7
cmp ax, 0x1e55
je loc_fffa82b3  ; je 0xfffa82b3
lea eax, [esi - 0x1e57]
cmp ax, 1
jbe loc_fffa82b3  ; jbe 0xfffa82b3
cmp si, 0x1e5f
sete dl
cmp si, 0x1e59
sete al
or dl, al
jne loc_fffa82b3  ; jne 0xfffa82b3
cmp si, 0x1e56
sete dl
cmp si, 0x1e43
sete al
or dl, al
jne loc_fffa82b3  ; jne 0xfffa82b3

loc_fffa85d3:
mov ax, word [ebx + 0x400]
test ah, 8
je loc_fffa86df  ; je 0xfffa86df
mov edi, dword [ebx + 0x400]
sub esp, 0xc
and edi, 0x700
xor ecx, ecx
add edi, 0x400
mov eax, ebx
push 0x4514b5e
mov edx, edi
or edx, 0xec0000b2
mov dword [ebp - 0x500], edx
call fcn_fffa0b2c  ; call 0xfffa0b2c
mov edx, edi
xor ecx, ecx
or edx, 0xec00008c
mov eax, ebx
mov dword [esp], 0x40000200
mov dword [ebp - 0x500], edx
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10
cmp byte [ebp - 0x524], 0
jne short loc_fffa86bd  ; jne 0xfffa86bd
lea eax, [esi - 0x1e46]
cmp ax, 1
jbe short loc_fffa86bd  ; jbe 0xfffa86bd
lea eax, [esi - 0x1e48]
cmp ax, 1
jbe short loc_fffa86bd  ; jbe 0xfffa86bd
cmp si, 0x1e53
sete dl
cmp si, 0x1e4a
sete al
or dl, al
jne short loc_fffa86bd  ; jne 0xfffa86bd
cmp si, 0x1e5e
sete dl
cmp si, 0x1e42
sete al
or dl, al
jne short loc_fffa86bd  ; jne 0xfffa86bd
mov eax, esi
and eax, 0xfffffff7
cmp ax, 0x1e55
je short loc_fffa86bd  ; je 0xfffa86bd
lea eax, [esi - 0x1e57]
cmp ax, 1
jbe short loc_fffa86bd  ; jbe 0xfffa86bd
cmp si, 0x1e5f
sete dl
cmp si, 0x1e59
sete al
or dl, al
jne short loc_fffa86bd  ; jne 0xfffa86bd
cmp si, 0x1e56
sete dl
cmp si, 0x1e43
sete al
or dl, al
je short loc_fffa86df  ; je 0xfffa86df

loc_fffa86bd:
sub esp, 0xc
mov edx, edi
push 0x2000020
or edx, 0xec000080
xor ecx, ecx
mov eax, ebx
mov dword [ebp - 0x500], edx
call fcn_fffa0b2c  ; call 0xfffa0b2c
add esp, 0x10

loc_fffa86df:
mov ebx, dword [ebp - 0x504]
mov eax, dword [ebx + 2]
mov dl, byte [eax + 0x3414]
and dl, 0x20
je short loc_fffa86fe  ; je 0xfffa86fe
cmp byte [ebx + 0xa], 0
jne short loc_fffa8708  ; jne 0xfffa8708
jmp near loc_fffa8797  ; jmp 0xfffa8797

loc_fffa86fe:
cmp byte [ebx + 0xa], 0
jne loc_fffa8797  ; jne 0xfffa8797

loc_fffa8708:
cmp byte [ebx + 0xa], 0
mov dl, byte [eax + 0x3414]
je short loc_fffa8719  ; je 0xfffa8719
and edx, 0xffffffdf
jmp short loc_fffa871c  ; jmp 0xfffa871c

loc_fffa8719:
or edx, 0x20

loc_fffa871c:
mov byte [eax + 0x3414], dl
mov eax, dword [ebx + 2]
cmp byte [ebx + 0xa], 0
mov al, byte [eax + 0x3414]
jne short loc_fffa873d  ; jne 0xfffa873d
mov al, byte [0xf00b0044]
and eax, 0x3f
cmp al, 0x20
jne short loc_fffa8797  ; jne 0xfffa8797

loc_fffa873d:
mov esi, dword [ebp - 0x520]
sub esp, 0xc
lea edx, [ebp - 0x50c]
mov eax, dword [esi]
push edx
push 0
push 0
push ref_fffcfa9c  ; push 0xfffcfa9c
push esi
call dword [eax + 0x20]  ; ucall
mov eax, dword [ebx + 2]
add esp, 0x20
mov edx, dword [eax + 0x3428]
mov eax, 3
and dl, 2
jne short loc_fffa8788  ; jne 0xfffa8788
cmp byte [ebx], 2
mov al, 4
jbe short loc_fffa8788  ; jbe 0xfffa8788
mov eax, dword [ebx + 0x27]
mov al, byte [eax]
and eax, 1
cmp al, 1
sbb eax, eax
add eax, 5

loc_fffa8788:
push ebx
mov edx, dword [ebp - 0x50c]
push ebx
push eax
push edx
call dword [edx]  ; ucall
add esp, 0x10

loc_fffa8797:
mov ebx, dword [ebp - 0x504]
mov di, word [0xf00f8002]
mov word [ebp - 0x524], di
xor ecx, ecx
movzx esi, byte [ebx + 1]
mov edx, dword [ebx + 0xf]
shl esi, 0x14
mov dword [ebp - 0x520], edx

loc_fffa87bd:
movzx eax, byte [ebx + 1]
mov edi, ecx
shl eax, 0x14
shl edi, 0xc
add edi, eax
mov eax, dword [ebx + 0x1b]
cmp dword [eax + ecx*4], 1
jne short loc_fffa880c  ; jne 0xfffa880c
mov ax, word [edi - 0xff1ff90]
and eax, 0xf
dec ax
je short loc_fffa880c  ; je 0xfffa880c
mov ax, word [edi - 0xff1ff90]
and eax, 0xfffffff0
or eax, 1
mov word [edi - 0xff1ff90], ax
mov eax, 0x186a0
mov dword [ebp - 0x57c], ecx
call fcn_fffa0cba  ; call 0xfffa0cba
mov ecx, dword [ebp - 0x57c]

loc_fffa880c:
mov eax, dword [edi - 0xff1fcc8]
and eax, 0xfbffffff
mov dword [edi - 0xff1fcc8], eax
cmp cl, 3
seta byte [ebp - 0x52c]
cmp word [ebp - 0x524], 0x1e58
sete al
test byte [ebp - 0x52c], al
je short loc_fffa8890  ; je 0xfffa8890
mov al, byte [edi - 0xff1ff1f]
or eax, 3
mov byte [edi - 0xff1ff1f], al
cmp cl, 4
jne short loc_fffa885e  ; jne 0xfffa885e
mov al, byte [edi - 0xff1ff1f]
or eax, 0x3c
mov byte [edi - 0xff1ff1f], al

loc_fffa885e:
mov eax, dword [edi - 0xff1fcc8]
or eax, 0x4000000
mov dword [edi - 0xff1fcc8], eax
mov edx, dword [ebx + 2]
mov eax, 0x10000
shl eax, cl
mov edi, dword [edx + 0x3418]
or eax, edi
mov dword [edx + 0x3418], eax
mov eax, dword [ebx + 2]
mov eax, dword [eax + 0x3418]

loc_fffa8890:
inc ecx
cmp ecx, 8
jne loc_fffa87bd  ; jne 0xfffa87bd
mov eax, dword [ebx + 2]
mov edx, dword [eax + 0x3598]
and dl, 1
je short loc_fffa88c0  ; je 0xfffa88c0
mov edx, dword [eax + 0x3598]
and edx, 0xfffffffe
mov dword [eax + 0x3598], edx
mov eax, dword [ebx + 2]
mov eax, dword [eax + 0x3598]

loc_fffa88c0:
movzx eax, byte [ebx + 1]
mov edx, 0x1a001d
shl eax, 0x14
shl edx, 0xf
lea edx, [edx + eax - 0xfffff78]
mov eax, dword [edx]
and eax, 0xfffffffb
mov dword [edx], eax
movzx eax, byte [ebx + 1]
mov edx, 0x1a001d
shr edx, 0x10
shl eax, 0x14
shl edx, 0xf
lea edx, [edx + eax - 0xfffff78]
mov eax, dword [edx]
and eax, 0xfffffffb
mov dword [edx], eax
mov edi, dword [ebp - 0x520]
cmp byte [edi], 1
jne short loc_fffa893c  ; jne 0xfffa893c
mov ecx, dword [ebx + 2]
mov eax, dword [edi + 1]
shr eax, 0xc
and eax, 3
or al, 0x80
mov edx, dword [ecx + 0x3404]
and edx, 0xfffffffc
or eax, edx
mov dword [ecx + 0x3404], eax
mov eax, dword [ebx + 2]
mov edx, dword [edi + 1]
mov eax, dword [eax + 0x3404]
mov eax, dword [edx + 0x10]
or eax, 1
mov dword [edx + 0x10], eax

loc_fffa893c:
mov eax, dword [ebx + 2]
cmp dword [ebx + 0x13], 0
mov edx, dword [eax + 0x3410]
jne short loc_fffa8956  ; jne 0xfffa8956
and edx, 0xfffffffb
mov dword [eax + 0x3410], edx
jmp short loc_fffa896c  ; jmp 0xfffa896c

loc_fffa8956:
or edx, 4
mov dword [eax + 0x3410], edx
movzx eax, byte [ebx + 1]
shl eax, 0x14
mov eax, dword [eax - 0xff0ffb4]

loc_fffa896c:
mov eax, dword [ebx + 2]
mov edx, dword [eax + 0x3410]
mov edx, dword [ebx + 0x17]
cmp dword [edx], 0
jne short loc_fffa899b  ; jne 0xfffa899b
mov al, byte [esi - 0xff05f70]
and eax, 0x1f
mov byte [esi - 0xff05f70], al
mov al, byte [0xf00fd092]
or eax, 3
mov byte [0xf00fd092], al
jmp short loc_fffa89d0  ; jmp 0xfffa89d0

loc_fffa899b:
mov edx, dword [eax + 0x3418]
or edx, 0x2000000
mov dword [eax + 0x3418], edx
mov eax, dword [ebx + 2]
mov eax, dword [eax + 0x3418]
mov eax, dword [ebx + 0x17]
cmp dword [eax], 2
jne short loc_fffa89d0  ; jne 0xfffa89d0
mov al, byte [esi - 0xff05f70]
and eax, 0x3f
or eax, 0xffffff80
mov byte [esi - 0xff05f70], al

loc_fffa89d0:
mov ebx, dword [ebp - 0x504]
mov dword [ebp - 0x524], ebx
mov eax, dword [ebx + 0xb]
test eax, eax
je loc_fffa8be1  ; je 0xfffa8be1
movzx esi, byte [ebx + 1]
mov edi, ebx
shl esi, 0x14
mov ebx, dword [eax + 4]
mov dword [ebp - 0x52c], ebx
mov ebx, dword [eax]
mov edi, dword [edi + 0x23]
mov dword [esi - 0xff01fc0], ebx
mov dword [esi - 0xff01fbc], 0
mov eax, dword [esi - 0xff01fc0]
or eax, 1
mov dword [esi - 0xff01fc0], eax
mov word [ebx + 4], 0x3a2b
mov byte [ebx + 0xc], 0xff
mov byte [ebx + 0xd], 0
mov byte [ebx + 0xe], 0x40
mov byte [ebx + 0x82], 0
mov byte [ebx + 1], 0xba
mov ecx, 0x1a2
rdmsr
shrd eax, edx, 0x10
and eax, 0xff
shl eax, 6
mov word [ebx + 0x12], ax
mov word [ebx + 0x16], 0x808c
mov eax, dword [0xf00f80f0]
and eax, 0xfffffffe
mov eax, dword [eax + 0x38b0]
mov edx, dword [0xf00f80f0]
and edx, 0xfffffffe
and eax, 0xffff8003
or eax, 0x403c
mov dword [edx + 0x38b0], eax
mov word [ebx + 0x14], 0xde87
mov eax, dword [0xf00f80f0]
and eax, 0xfffffffe
mov eax, dword [eax + 0x38b4]
test ah, 0x40
je short loc_fffa8aa2  ; je 0xfffa8aa2
mov word [ebx + 0x1a], 0
jmp near loc_fffa8b47  ; jmp 0xfffa8b47

loc_fffa8aa2:
mov eax, dword [ebp - 0x52c]
mov cx, word [ebx + 0x1a]
mov al, byte [eax]
mov byte [ebp - 0x520], al
mov eax, ecx
and eax, 0xfffffff0
test byte [ebp - 0x520], 0x20
je short loc_fffa8b0b  ; je 0xfffa8b0b
mov edx, ecx
and ecx, 0xfffffffe
or edx, 1
test byte [ebp - 0x520], 0x40
cmove edx, ecx
mov eax, edx
and edx, 0xfffffffd
or eax, 2
cmp byte [ebp - 0x520], 0
cmovns eax, edx
mov edx, dword [ebp - 0x52c]
mov cl, byte [edx + 1]
mov edx, eax
or edx, 4
and eax, 0xfffffffb
test cl, 1
cmove edx, eax
mov eax, edx
and edx, 0xfffffff7
or eax, 8
and cl, 2
cmove eax, edx

loc_fffa8b0b:
mov edx, eax
and eax, 0xffffffdf
or edx, 0x20
test byte [ebp - 0x520], 2
cmove edx, eax
mov eax, edx
and edx, 0xffffffbf
or eax, 0x40
test byte [ebp - 0x520], 4
cmove eax, edx
mov edx, eax
and al, 0x7f
or dl, 0x80
test byte [ebp - 0x520], 8
cmove edx, eax
or dh, 0x10
mov word [ebx + 0x1a], dx

loc_fffa8b47:
mov eax, dword [esi - 0xff01fc0]
and eax, 0xfffffffe
mov dword [esi - 0xff01fc0], eax
mov dword [esi - 0xff01fc0], 0
test byte [edi], 1
je short loc_fffa8be1  ; je 0xfffa8be1
mov cl, byte [edi + 1]
mov dl, byte [edi + 2]
mov eax, ecx
shl eax, 0x1e
and eax, 0x40000000
mov ebx, eax
or ebx, 0x80000000
test dl, 1
cmovne eax, ebx
mov ebx, eax
or bh, 0x40
and cl, 2
cmovne eax, ebx
mov ebx, dword [ebp - 0x524]
mov ecx, eax
or ch, 0x80
and dl, 2
cmovne eax, ecx
mov ecx, dword [ebx + 2]
mov edx, dword [ecx + 0x33d4]
and edx, 0xfff0fff
or eax, edx
mov dword [ecx + 0x33d4], eax
mov al, byte [edi + 1]
mov ecx, dword [ebx + 2]
shl eax, 8
and eax, 0x400
mov edx, eax
or dh, 8
test byte [edi + 2], 4
cmovne eax, edx
mov edx, dword [ecx + 0x33c8]
and dh, 0xf0
or eax, edx
mov dword [ecx + 0x33c8], eax

loc_fffa8be1:
mov eax, dword [ebp - 0x504]
mov ecx, dword [eax + 0x1f]
mov eax, dword [eax + 2]
mov dl, byte [eax + 0x31fe]
cmp byte [ecx + 1], dl
je short loc_fffa8c1f  ; je 0xfffa8c1f
mov dx, word [eax + 0x31fe]
and dh, 0xfe
mov word [eax + 0x31fe], dx
movzx ebx, byte [ecx + 1]
mov dx, word [eax + 0x31fe]
xor dl, dl
or edx, ebx
mov word [eax + 0x31fe], dx

loc_fffa8c1f:
mov dx, word [eax + 0x31fe]
or dh, 1
mov word [eax + 0x31fe], dx
mov dx, word [eax + 0x31fe]
movzx eax, byte [eax + 0x31fe]
shl eax, 0xc
mov esi, eax
or esi, 0xfec00000
mov byte [esi], 0
or eax, 0xfec00010
mov bl, byte [ecx]
movzx edi, bl
mov edx, dword [eax]
shr edx, 0x18
cmp edi, edx
je short loc_fffa8c6f  ; je 0xfffa8c6f
cmp bl, 0xf
ja short loc_fffa8c6f  ; ja 0xfffa8c6f
mov byte [esi], 0
movzx edx, byte [ecx]
shl edx, 0x18
mov dword [eax], edx

loc_fffa8c6f:
sub esp, 0xc
push ref_fffcf7b2  ; push 0xfffcf7b2
call fcn_fffa1e55  ; call 0xfffa1e55
mov eax, 0x10f
mov esi, dword [0xfeffc010]
call fcn_fffa24d5  ; call 0xfffa24d5
add esp, 0x10
test eax, eax
mov ebx, eax
je short loc_fffa8d08  ; je 0xfffa8d08
mov edx, eax
mov eax, esi
call fcn_fffa0a0c  ; call 0xfffa0a0c
mov eax, dword [0xf00fb020]
and eax, 0xffe0
or eax, dword [ebx + 0xc]
mov dword [0xf00fb020], eax
mov al, byte [0xf00fb004]
or eax, 1
mov byte [0xf00fb004], al
mov al, byte [0xf00fb040]
or eax, 8
mov byte [0xf00fb040], al
mov dl, byte [0xf00fb040]
and edx, 0xfffffff8
or edx, 1
mov byte [0xf00fb040], dl
mov edx, 0xff
xor eax, eax
call fcn_fffa0856  ; call 0xfffa0856
mov eax, dword [0xfeffc010]
lea ecx, [ebx + 0x10]
push edx
add ebx, 0x2c
push edx
mov edx, dword [eax]
push ecx
push eax
call dword [edx + 0x18]  ; ucall
pop ecx
pop edi
mov eax, dword [esi]
push ebx
push esi
call dword [eax + 0x24]  ; ucall
add esp, 0x10

loc_fffa8d08:
sub esp, 0xc
push ref_fffcf7da  ; push 0xfffcf7da
call fcn_fffa1e55  ; call 0xfffa1e55
pop eax
push dword [0xfeffc010]
call fcn_fffa0d2a  ; call 0xfffa0d2a
mov dword [esp], ref_fffcf800  ; mov dword [esp], 0xfffcf800
call fcn_fffa1e55  ; call 0xfffa1e55
mov esi, dword [0xfeffc010]
lea edx, [ebp - 0x508]
mov dword [ebp - 0x520], esi
mov eax, dword [esi]
mov dword [esp], edx
push 0
push 0
push ref_fffcfb1c  ; push 0xfffcfb1c
push esi
call dword [eax + 0x20]  ; ucall
mov ax, word [0xf00000e4]
add esp, 0x20
test ah, 4
mov esi, dword [ebp - 0x508]
je short loc_fffa8d89  ; je 0xfffa8d89
mov ecx, 0x17
rdmsr
mov eax, edx
mov dl, byte [0xf00000f3]
shr eax, 0x12
and eax, 7
cmp al, 4
sete al
and edx, 0xfffffff8
or eax, edx
mov byte [0xf00000f3], al

loc_fffa8d89:
mov ax, word [0xf0000002]
mov edx, eax
and edx, 0xc
cmp dx, 4
je short loc_fffa8dad  ; je 0xfffa8dad
test dx, dx
je short loc_fffa8db4  ; je 0xfffa8db4
cmp dx, 8
mov edx, 2
cmove eax, edx
jmp short loc_fffa8db6  ; jmp 0xfffa8db6

loc_fffa8dad:
mov eax, 1
jmp short loc_fffa8db6  ; jmp 0xfffa8db6

loc_fffa8db4:
xor eax, eax

loc_fffa8db6:
mov edx, dword [esi + 1]
xor edi, edi
mov ecx, edi
mov word [edx + 0x25], ax
mov eax, 1
cpuid
mov eax, dword [esi + 1]
xor edx, edx
mov eax, dword [eax + 4]
inc eax
mov dword [0xf0000048], eax
mov dword [0xf000004c], edx
mov eax, dword [esi + 1]
xor edx, edx
mov eax, dword [eax + 8]
inc eax
mov dword [0xf0000068], eax
mov dword [0xf000006c], edx
mov eax, dword [esi + 1]
xor edx, edx
mov eax, dword [eax + 0xc]
inc eax
mov dword [0xf0000040], eax
mov dword [0xf0000044], edx
mov eax, dword [esi + 1]
mov edx, dword [eax + 4]
mov eax, dword [edx + 0x5f00]
or eax, 1
mov dword [edx + 0x5f00], eax
mov eax, 1
mov esi, dword [ebp - 0x508]
mov ecx, edi
cpuid
mov ecx, eax
mov ax, word [0xf0000002]
and eax, 0xfffffff0
sub esp, 0xc
mov byte [ebp - 0x524], al
mov eax, dword [0xf0000068]
mov edi, eax
mov eax, dword [esi + 0xd]
mov edx, dword [0xf000006c]
mov edx, dword [ebp - 0x520]
and ecx, 0xf
and edi, 0xfffffffe
mov bl, cl
mov al, byte [eax + 0x30]
mov byte [ebp - 0x52c], al
mov eax, dword [edx]
lea edx, [ebp - 0x4fc]
push edx
push 0
push 0
push ref_fffcfb8c  ; push 0xfffcfb8c
push dword [ebp - 0x520]
mov dword [ebp - 0x57c], ecx
call dword [eax + 0x20]  ; ucall
add esp, 0x20
test eax, eax
mov ecx, dword [ebp - 0x57c]
js loc_fffa8fe5  ; js 0xfffa8fe5
cmp byte [ebp - 0x524], 0x50
jne short loc_fffa8ef6  ; jne 0xfffa8ef6
test bl, bl
jne short loc_fffa8eb3  ; jne 0xfffa8eb3
mov eax, dword [edi + 0x250]
and eax, 0xfffffffb
mov dword [edi + 0x250], eax
jmp short loc_fffa8eb8  ; jmp 0xfffa8eb8

loc_fffa8eb3:
cmp bl, 2
ja short loc_fffa8ec9  ; ja 0xfffa8ec9

loc_fffa8eb8:
mov eax, dword [edi + 0x224]
or eax, 0x7e000000
mov dword [edi + 0x224], eax

loc_fffa8ec9:
push eax
mov edx, edi
push eax
movzx eax, byte [ebp - 0x52c]
push eax
mov eax, esi
push ecx
xor ecx, ecx
call fcn_fffb619f  ; call 0xfffb619f
mov eax, dword [edi + 0x22c]
xor ax, ax
or eax, 0x403c
mov dword [edi + 0x22c], eax
add esp, 0x10

loc_fffa8ef6:
mov eax, dword [esi + 0xd]
cmp byte [eax + 3], 2
jne short loc_fffa8f23  ; jne 0xfffa8f23
add ebx, dword [ebp - 0x524]
cmp bl, 0x50
je short loc_fffa8f19  ; je 0xfffa8f19
cmp bl, 0x52
jne short loc_fffa8f1f  ; jne 0xfffa8f1f
mov edx, dword [esi + 1]
cmp word [edx + 0x25], 1
jne short loc_fffa8f1f  ; jne 0xfffa8f1f

loc_fffa8f19:
mov byte [eax + 3], 0
jmp short loc_fffa8f23  ; jmp 0xfffa8f23

loc_fffa8f1f:
mov byte [eax + 3], 1

loc_fffa8f23:
mov eax, dword [esi + 0xd]
cmp byte [eax + 3], 0
je short loc_fffa8faa  ; je 0xfffa8faa
mov eax, dword [ebp - 0x4fc]
mov eax, dword [eax + 2]
mov al, byte [eax + 0x21a4]
and eax, 0xf
dec al
je short loc_fffa8faa  ; je 0xfffa8faa
mov eax, dword [0xf00000e4]
test eax, 0x400000
jne short loc_fffa8faa  ; jne 0xfffa8faa
jmp near loc_fffa9afc  ; jmp 0xfffa9afc

loc_fffa8f53:
mov eax, dword [edi + 0xbc0]
and eax, 0xfffffe3f
mov dword [edi + 0xbc0], eax

loc_fffa8f64:
mov ecx, dword [ebp - 0x520]
sub esp, 0xc
lea edx, [ebp - 0x500]
mov eax, dword [ecx]
push edx
push 0
push 0
push ref_fffcfb9c  ; push 0xfffcfb9c
push ecx
call dword [eax + 0x20]  ; ucall
mov eax, dword [ebp - 0x500]
add esp, 0x14
push dword [ebp - 0x520]
call dword [eax + 8]  ; ucall
mov eax, dword [edi + 0x84]
and eax, 0xfffffff0
or eax, 2
mov dword [edi + 0x84], eax
add esp, 0x10

loc_fffa8faa:
mov al, byte [edi + 0x88]
or eax, 0x20
mov byte [edi + 0x88], al

loc_fffa8fb9:
mov ax, word [edi + 0x8a]
lea edx, [edi + 0x8a]
test ah, 8
jne short loc_fffa8fb9  ; jne 0xfffa8fb9
mov al, byte [edi + 0x88]
or eax, 0x20
mov byte [edi + 0x88], al

loc_fffa8fda:
mov ax, word [edx]
test ah, 8
jne short loc_fffa8fda  ; jne 0xfffa8fda
mov ax, word [edx]

loc_fffa8fe5:
mov ebx, dword [ebp - 0x520]
mov eax, dword [ebx]
cmp dword [eax - 4], 0xfeadb00b
jne short loc_fffa9007  ; jne 0xfffa9007
mov eax, dword [eax + 0x258]
cmp dword [eax + 0x4e2], 0
je short loc_fffa901c  ; je 0xfffa901c
jmp short loc_fffa9009  ; jmp 0xfffa9009

loc_fffa9007:
jmp short loc_fffa9007  ; jmp 0xfffa9007

loc_fffa9009:
mov edx, dword [ebp - 0x508]
mov eax, dword [ebp - 0x520]
call fcn_fffaa2c4  ; call 0xfffaa2c4
jmp short loc_fffa902c  ; jmp 0xfffa902c

loc_fffa901c:
sub esp, 0xc
push ref_fffcf82a  ; push 0xfffcf82a
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x10

loc_fffa902c:
mov ebx, dword [ebp - 0x508]
mov dword [ebp - 0x504], 0
mov dword [ebp - 0x52c], ebx
mov dword [ebp - 0x500], 0
mov ax, word [0xf0000050]
or eax, 2
mov word [0xf0000050], ax
mov bx, word [0xf0010000]
mov word [ebp - 0x546], bx
mov ax, word [0xf00f0000]
inc ax
je loc_fffa920b  ; je 0xfffa920b
mov dword [0xf00f0018], 0xff0200
mov bl, byte [0xf00f0019]
movzx eax, bl
mov byte [ebp - 0x533], bl
mov edx, eax
shl edx, 0x14
mov word [edx - 0x10000000], 0
call fcn_fffb6f35  ; call 0xfffb6f35
mov byte [ebp - 0x528], al
mov byte [0xf00f001a], al
mov byte [ebp - 0x530], bl
mov dword [ebp - 0x53c], 0
mov dword [ebp - 0x524], 0
jmp near loc_fffa9180  ; jmp 0xfffa9180

loc_fffa90cd:
mov eax, esi
shl eax, 0xf
add eax, dword [ebp - 0x540]
mov dword [ebp - 0x538], eax
mov edi, eax
mov ax, word [eax - 0x10000000]
inc ax
je loc_fffa9170  ; je 0xfffa9170
mov bl, byte [edi - 0xffffff2]
mov byte [ebp - 0x532], 0
sar bl, 7
and ebx, 7

loc_fffa9102:
movzx ecx, byte [ebp - 0x532]
mov edi, ecx
shl edi, 0xc
add edi, dword [ebp - 0x538]
mov ax, word [edi - 0x10000000]
inc ax
je short loc_fffa9162  ; je 0xfffa9162
sub esp, 0xc
lea eax, [ebp - 0x4fc]
push eax
mov edx, esi
mov eax, dword [ebp - 0x544]
call fcn_fffb6fb8  ; call 0xfffb6fb8
mov ax, word [edi - 0xffffff6]
mov edx, dword [ebp - 0x4fc]
add esp, 0x10
add dword [ebp - 0x53c], edx
cmp ax, 0x300
mov eax, 2
cmovne eax, dword [ebp - 0x524]
mov dword [ebp - 0x524], eax

loc_fffa9162:
inc byte [ebp - 0x532]
cmp byte [ebp - 0x532], bl
jbe short loc_fffa9102  ; jbe 0xfffa9102

loc_fffa9170:
inc esi
cmp esi, 0x20
jne loc_fffa90cd  ; jne 0xfffa90cd
inc byte [ebp - 0x530]

loc_fffa9180:
mov al, byte [ebp - 0x528]
cmp byte [ebp - 0x530], al
ja short loc_fffa91e3  ; ja 0xfffa91e3
movzx eax, byte [ebp - 0x530]
xor esi, esi
mov ebx, eax
mov dword [ebp - 0x544], eax
shl ebx, 0x14
mov dword [ebp - 0x540], ebx
jmp near loc_fffa90cd  ; jmp 0xfffa90cd

loc_fffa91ad:
mov ecx, eax
shl ecx, 0xf
add ecx, edx
mov bx, word [ecx - 0x10000000]
inc bx
je short loc_fffa91d7  ; je 0xfffa91d7
mov bx, word [ecx - 0xffffff6]
cmp bx, 0x604
jne short loc_fffa91d7  ; jne 0xfffa91d7
mov dword [ecx - 0xfffffe8], 0

loc_fffa91d7:
inc eax
cmp eax, 0x20
jne short loc_fffa91ad  ; jne 0xfffa91ad
dec byte [ebp - 0x528]

loc_fffa91e3:
mov bl, byte [ebp - 0x533]
cmp byte [ebp - 0x528], bl
jb short loc_fffa91ff  ; jb 0xfffa91ff
movzx edx, byte [ebp - 0x528]
xor eax, eax
shl edx, 0x14
jmp short loc_fffa91ad  ; jmp 0xfffa91ad

loc_fffa91ff:
mov dword [0xf00f0018], 0
jmp short loc_fffa921f  ; jmp 0xfffa921f

loc_fffa920b:
mov dword [ebp - 0x53c], 0
mov dword [ebp - 0x524], 0

loc_fffa921f:
mov dword [ebp - 0x4fc], 0
xor esi, esi
mov byte [ebp - 0x528], 0
mov eax, 0x10100

loc_fffa9237:
mov ebx, esi
shl ebx, 0xc
mov dx, word [ebx - 0xff20000]
inc dx
je short loc_fffa9281  ; je 0xfffa9281
mov dword [ebx - 0xff1ffe8], eax
movzx eax, byte [ebx - 0xff1ffe7]
mov byte [ebx - 0xff1ffe6], 0xff
mov edx, eax
shl edx, 0x14
mov word [edx - 0x10000000], 0
call fcn_fffb6f35  ; call 0xfffb6f35
mov byte [ebp - 0x528], al
mov byte [ebx - 0xff1ffe6], al
movzx eax, al
inc eax
shl eax, 8

loc_fffa9281:
inc esi
cmp esi, 8
jne short loc_fffa9237  ; jne 0xfffa9237
xor si, si
mov byte [ebp - 0x540], 0
mov byte [ebp - 0x532], 1
jmp near loc_fffa9365  ; jmp 0xfffa9365

loc_fffa929d:
mov eax, dword [ebp - 0x530]
shl eax, 0xf
add eax, dword [ebp - 0x544]
mov dword [ebp - 0x538], eax
mov edi, eax
mov ax, word [eax - 0x10000000]
inc ax
je loc_fffa934c  ; je 0xfffa934c
mov bl, byte [edi - 0xffffff2]
mov byte [ebp - 0x533], 0
sar bl, 7
and ebx, 7

loc_fffa92d6:
movzx ecx, byte [ebp - 0x533]
mov edi, ecx
shl edi, 0xc
add edi, dword [ebp - 0x538]
mov ax, word [edi - 0x10000000]
inc ax
je short loc_fffa933e  ; je 0xfffa933e
sub esp, 0xc
lea eax, [ebp - 0x4fc]
push eax
mov edx, dword [ebp - 0x530]
mov eax, dword [ebp - 0x54c]
call fcn_fffb6fb8  ; call 0xfffb6fb8
mov ax, word [edi - 0xffffff6]
add esi, dword [ebp - 0x4fc]
add esp, 0x10
cmp ax, 0x300
jne short loc_fffa933e  ; jne 0xfffa933e
cmp byte [ebp - 0x540], 1
je short loc_fffa933e  ; je 0xfffa933e
mov dword [ebp - 0x524], 2
mov byte [ebp - 0x540], 1

loc_fffa933e:
inc byte [ebp - 0x533]
cmp byte [ebp - 0x533], bl
jbe short loc_fffa92d6  ; jbe 0xfffa92d6

loc_fffa934c:
inc dword [ebp - 0x530]
cmp dword [ebp - 0x530], 0x20
jne loc_fffa929d  ; jne 0xfffa929d
inc byte [ebp - 0x532]

loc_fffa9365:
mov al, byte [ebp - 0x528]
cmp byte [ebp - 0x532], al
ja short loc_fffa939a  ; ja 0xfffa939a
movzx eax, byte [ebp - 0x532]
mov dword [ebp - 0x530], 0
mov ebx, eax
mov dword [ebp - 0x54c], eax
shl ebx, 0x14
mov dword [ebp - 0x544], ebx
jmp near loc_fffa929d  ; jmp 0xfffa929d

loc_fffa939a:
add esi, dword [ebp - 0x53c]
mov dword [ebp - 0x538], esi
jmp short loc_fffa93de  ; jmp 0xfffa93de

loc_fffa93a8:
mov ecx, eax
shl ecx, 0xf
add ecx, edx
mov bx, word [ecx - 0x10000000]
inc bx
je short loc_fffa93d2  ; je 0xfffa93d2
mov bx, word [ecx - 0xffffff6]
cmp bx, 0x604
jne short loc_fffa93d2  ; jne 0xfffa93d2
mov dword [ecx - 0xfffffe8], 0

loc_fffa93d2:
inc eax
cmp eax, 0x20
jne short loc_fffa93a8  ; jne 0xfffa93a8
dec byte [ebp - 0x528]

loc_fffa93de:
cmp byte [ebp - 0x528], 0
je short loc_fffa93f5  ; je 0xfffa93f5
movzx edx, byte [ebp - 0x528]
xor eax, eax
shl edx, 0x14
jmp short loc_fffa93a8  ; jmp 0xfffa93a8

loc_fffa93f5:
xor eax, eax

loc_fffa93f7:
mov edx, eax
inc eax
shl edx, 0xc
cmp eax, 8
mov dword [edx - 0xff1ffe8], 0
jne short loc_fffa93f7  ; jne 0xfffa93f7
mov ebx, dword [ebp - 0x52c]
lea edi, [ebp - 0x47f]
mov esi, ref_fffc9c08  ; mov esi, 0xfffc9c08
mov ecx, 5
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov eax, dword [ebx + 5]
lea edi, [ebp - 0x47f]
mov bl, byte [eax + 7]
mov al, byte [eax + 5]
mov byte [ebp - 0x533], bl
mov byte [ebp - 0x53c], al
mov dword [ebp - 0x4fc], 0
mov si, word [0xf0000054]
and si, 0x200e
lea ebx, [ebp - 0x46b]
mov word [ebp - 0x532], si
mov ax, word [0xf0010000]
inc ax
mov dword [ebp - 0x528], edi
setne byte [ebp - 0x544]
mov dword [ebp - 0x51c], ebx

loc_fffa947d:
mov esi, dword [ebp - 0x528]
mov di, word [ebp - 0x532]
movzx edx, byte [esi]
test word [esi + 3], di
movzx ecx, byte [esi + 1]
movzx eax, byte [esi + 2]
je loc_fffa96b4  ; je 0xfffa96b4
shl ecx, 0xf
shl edx, 0x14
shl eax, 0xc
add edx, ecx
lea edi, [edx + eax]
mov al, byte [edi - 0xfffff46]
test al, 0x40
je loc_fffa96b4  ; je 0xfffa96b4
mov eax, dword [edi - 0xfffffe8]
and eax, 0xff0000ff
or eax, 0x10100
mov dword [edi - 0xfffffe8], eax
mov word [0xf0100000], 0
mov ax, word [0xf0100000]
inc ax
je loc_fffa96b4  ; je 0xfffa96b4
mov bl, byte [0xf010000e]
xor esi, esi
sar bl, 7
and ebx, 7

loc_fffa94f6:
mov eax, esi
movzx ecx, al
mov eax, ecx
shl eax, 0xc
mov ax, word [eax - 0xff00000]
inc ax
je short loc_fffa9530  ; je 0xfffa9530
sub esp, 0xc
lea edx, [ebp - 0x4fc]
push edx
mov eax, 1
xor edx, edx
call fcn_fffb6fb8  ; call 0xfffb6fb8
mov eax, dword [ebp - 0x4fc]
add esp, 0x10
add dword [ebp - 0x504], eax

loc_fffa9530:
inc esi
mov ecx, esi
cmp cl, bl
jbe short loc_fffa94f6  ; jbe 0xfffa94f6
mov al, byte [0xf010000b]
mov dl, byte [0xf010000a]
test dl, dl
sete cl
cmp al, 3
sete dl
test cl, dl
je short loc_fffa9590  ; je 0xfffa9590
cmp byte [ebp - 0x53c], 0
jne short loc_fffa957e  ; jne 0xfffa957e
cmp byte [ebp - 0x533], 0
sete al
test byte [ebp - 0x544], al
je short loc_fffa9570  ; je 0xfffa9570
jmp near loc_fffa96a3  ; jmp 0xfffa96a3

loc_fffa9570:
cmp dword [ebp - 0x524], 2
jne short loc_fffa957e  ; jne 0xfffa957e
jmp near loc_fffa96a3  ; jmp 0xfffa96a3

loc_fffa957e:
cmp dword [ebp - 0x524], 1
je loc_fffa9699  ; je 0xfffa9699
jmp near loc_fffa9688  ; jmp 0xfffa9688

loc_fffa9590:
cmp al, 6
jne loc_fffa96a3  ; jne 0xfffa96a3
mov byte [edi - 0xfffffe7], 1
mov eax, 1
mov byte [edi - 0xfffffe6], 0xff
mov word [0xf0100000], 0
call fcn_fffb6f35  ; call 0xfffb6f35
mov byte [ebp - 0x530], al
mov al, 1
jmp short loc_fffa960e  ; jmp 0xfffa960e

loc_fffa95c3:
mov esi, ecx
mov byte [ebp - 0x54c], cl
shl esi, 0xf
add esi, ebx
mov dx, word [esi - 0x10000000]
inc dx
je short loc_fffa9607  ; je 0xfffa9607
mov si, word [esi - 0xffffff6]
cmp si, 0x300
jne short loc_fffa9607  ; jne 0xfffa9607
sub esp, 0xc
mov bl, 1
movzx edx, cl
lea ecx, [ebp - 0x504]
push ecx
movzx eax, al
xor ecx, ecx
call fcn_fffb6fb8  ; call 0xfffb6fb8
add esp, 0x10
jmp short loc_fffa965a  ; jmp 0xfffa965a

loc_fffa9607:
inc ecx
cmp ecx, 0x20
jne short loc_fffa95c3  ; jne 0xfffa95c3
inc eax

loc_fffa960e:
cmp al, byte [ebp - 0x530]
ja short loc_fffa9620  ; ja 0xfffa9620
movzx ebx, al
xor ecx, ecx
shl ebx, 0x14
jmp short loc_fffa95c3  ; jmp 0xfffa95c3

loc_fffa9620:
xor ebx, ebx
jmp short loc_fffa965a  ; jmp 0xfffa965a

loc_fffa9624:
mov ecx, eax
shl ecx, 0xf
add ecx, edx
mov si, word [ecx - 0x10000000]
inc si
je short loc_fffa964e  ; je 0xfffa964e
mov si, word [ecx - 0xffffff6]
cmp si, 0x604
jne short loc_fffa964e  ; jne 0xfffa964e
mov dword [ecx - 0xfffffe8], 0

loc_fffa964e:
inc eax
cmp eax, 0x20
jne short loc_fffa9624  ; jne 0xfffa9624
dec byte [ebp - 0x530]

loc_fffa965a:
cmp byte [ebp - 0x530], 0
je short loc_fffa9671  ; je 0xfffa9671
movzx edx, byte [ebp - 0x530]
xor eax, eax
shl edx, 0x14
jmp short loc_fffa9624  ; jmp 0xfffa9624

loc_fffa9671:
dec bl
mov dword [edi - 0xfffffe8], 0
jne short loc_fffa96a3  ; jne 0xfffa96a3
cmp dword [ebp - 0x524], 1
je short loc_fffa96a3  ; je 0xfffa96a3

loc_fffa9688:
mov ax, word [edi - 0xfffffc2]
or eax, 0x18
mov word [edi - 0xfffffc2], ax

loc_fffa9699:
mov dword [ebp - 0x524], 1

loc_fffa96a3:
mov eax, dword [edi - 0xfffffe8]
and eax, 0xff0000ff
mov dword [edi - 0xfffffe8], eax

loc_fffa96b4:
add dword [ebp - 0x528], 5
mov ebx, dword [ebp - 0x51c]
cmp dword [ebp - 0x528], ebx
jne loc_fffa947d  ; jne 0xfffa947d
cmp word [ebp - 0x546], 0xffff
je loc_fffa97d3  ; je 0xfffa97d3
mov ebx, dword [ebp - 0x52c]
cmp dword [ebp - 0x524], 0
mov eax, dword [ebx + 5]
je short loc_fffa96f3  ; je 0xfffa96f3
cmp byte [eax + 7], 0
jne short loc_fffa96f9  ; jne 0xfffa96f9

loc_fffa96f3:
cmp byte [eax + 6], 0
jne short loc_fffa9703  ; jne 0xfffa9703

loc_fffa96f9:
cmp byte [eax + 6], 1
jne loc_fffa97d3  ; jne 0xfffa97d3

loc_fffa9703:
mov ax, word [0xf0000050]
and al, 7
mov word [0xf0000050], ax
mov ebx, dword [ebp - 0x52c]
mov dl, byte [0xf0000050]
mov eax, dword [ebx + 5]
mov al, byte [eax + 4]
shl eax, 3
or eax, edx
mov byte [0xf0000050], al
mov eax, dword [ebx + 5]
cmp word [eax + 2], 1
mov ax, word [0xf0000050]
jne short loc_fffa9745  ; jne 0xfffa9745
and ah, 0xfc
or ah, 1
jmp short loc_fffa974b  ; jmp 0xfffa974b

loc_fffa9745:
and ah, 0xfc
or ah, 2

loc_fffa974b:
mov word [0xf0000050], ax
mov ebx, dword [ebp - 0x52c]
mov eax, dword [ebx + 5]
mov al, byte [eax + 8]
cmp al, 1
jne short loc_fffa976b  ; jne 0xfffa976b
mov al, byte [0xf0010062]
and eax, 0xfffffff9
jmp short loc_fffa977f  ; jmp 0xfffa977f

loc_fffa976b:
cmp al, 2
mov al, byte [0xf0010062]
jne short loc_fffa977c  ; jne 0xfffa977c
and eax, 0xfffffff9
or eax, 2
jmp short loc_fffa977f  ; jmp 0xfffa977f

loc_fffa977c:
or eax, 6

loc_fffa977f:
mov byte [0xf0010062], al
mov ebx, dword [ebp - 0x52c]
mov eax, dword [ebx + 5]
cmp byte [eax + 7], 0
je short loc_fffa97a7  ; je 0xfffa97a7
cmp dword [ebp - 0x524], 0
je short loc_fffa97a7  ; je 0xfffa97a7
mov ax, word [0xf0000050]
or eax, 2
jmp short loc_fffa97b0  ; jmp 0xfffa97b0

loc_fffa97a7:
mov ax, word [0xf0000050]
and eax, 0xfffffffd

loc_fffa97b0:
mov word [0xf0000050], ax
sub esp, 0xc
lea eax, [ebp - 0x500]
xor ecx, ecx
push eax
mov edx, 2
xor eax, eax
call fcn_fffb6fb8  ; call 0xfffb6fb8
add esp, 0x10
jmp short loc_fffa9809  ; jmp 0xfffa9809

loc_fffa97d3:
mov ax, word [0xf0000050]
and ax, 0xfc05
or eax, 2
mov word [0xf0000050], ax
mov ebx, dword [ebp - 0x52c]
mov eax, dword [ebx + 5]
mov word [eax + 2], 0
mov eax, dword [ebx + 5]
mov byte [eax + 4], 0
mov al, byte [0xf0000054]
and eax, 0xffffffef
mov byte [0xf0000054], al

loc_fffa9809:
mov ebx, dword [ebp - 0x52c]
mov eax, dword [ebp - 0x538]
add eax, dword [ebp - 0x500]
add eax, dword [ebp - 0x504]
mov edx, dword [ebx + 9]
cmp byte [edx + 5], 0
jne short loc_fffa9867  ; jne 0xfffa9867
cmp eax, 0x3fffffff
mov edx, dword [ebx + 5]
jbe short loc_fffa983b  ; jbe 0xfffa983b
mov word [edx], 0x800
jmp short loc_fffa9867  ; jmp 0xfffa9867

loc_fffa983b:
cmp eax, 0x2fffffff
jbe short loc_fffa9849  ; jbe 0xfffa9849
mov word [edx], 0x700
jmp short loc_fffa9867  ; jmp 0xfffa9867

loc_fffa9849:
cmp eax, 0x1fffffff
jbe short loc_fffa9857  ; jbe 0xfffa9857
mov word [edx], 0x600
jmp short loc_fffa9867  ; jmp 0xfffa9867

loc_fffa9857:
cmp eax, 0x10000000
sbb eax, eax
xor al, al
add ax, 0x500
mov word [edx], ax

loc_fffa9867:
mov edi, dword [ebp - 0x520]
mov eax, dword [0xf0000068]
sub esp, 0xc
mov edx, dword [0xf000006c]
lea edx, [ebp - 0x500]
mov esi, eax
and esi, 0xfffffffe
mov ebx, dword [ebp - 0x508]
mov eax, dword [edi]
mov dword [ebp - 0x524], esi
push edx
push 0
push 0
push ref_fffcfb9c  ; push 0xfffcfb9c
push edi
call dword [eax + 0x20]  ; ucall
add esp, 0x14
lea edx, [ebp - 0x4fc]
mov eax, dword [edi]
push edx
push 0
push 0
push ref_fffcfadc  ; push 0xfffcfadc
push edi
call dword [eax + 0x20]  ; ucall
mov edx, dword [ebx + 0xd]
mov eax, dword [ebp - 0x4fc]
add esp, 0x20
mov dl, byte [edx]
mov byte [eax + 0x22], dl
mov edx, dword [ebx + 0xd]
mov dl, byte [edx + 1]
mov byte [eax + 0x24], dl
mov edx, dword [ebx + 0xd]
mov dl, byte [edx + 2]
mov byte [eax + 0x26], dl
xor eax, eax

loc_fffa98e0:
mov edx, dword [ebp - 0x4fc]
mov ecx, dword [edx + eax*4]
cmp ecx, 1
jne short loc_fffa98f4  ; jne 0xfffa98f4
cmp byte [edx + 0x22], 0
jmp short loc_fffa9908  ; jmp 0xfffa9908

loc_fffa98f4:
cmp ecx, 2
jne short loc_fffa98ff  ; jne 0xfffa98ff
cmp byte [edx + 0x24], 0
jmp short loc_fffa9908  ; jmp 0xfffa9908

loc_fffa98ff:
cmp ecx, 3
jne short loc_fffa9911  ; jne 0xfffa9911
cmp byte [edx + 0x26], 0

loc_fffa9908:
jne short loc_fffa9911  ; jne 0xfffa9911
mov dword [edx + eax*4], 0

loc_fffa9911:
inc eax
cmp eax, 8
jne short loc_fffa98e0  ; jne 0xfffa98e0
mov ebx, dword [ebp - 0x4fc]
mov dword [ebp - 0x47f], 0
xor ecx, ecx
mov edx, 1

loc_fffa992e:
mov edi, dword [ebx + ecx*4]
mov esi, edx
shl esi, cl
inc ecx
mov eax, esi
or byte [ebp + edi - 0x47f], al
cmp ecx, 8
jne short loc_fffa992e  ; jne 0xfffa992e
xor eax, eax

loc_fffa9946:
cmp byte [ebx + eax*2 + 0x20], 1
mov dl, al
jne short loc_fffa999e  ; jne 0xfffa999e
movzx esi, byte [ebx + eax*2 + 0x21]
movzx ecx, byte [ebp + eax - 0x47f]
shl esi, 0x18
or ecx, 0x80000000
cmp al, 2
je short loc_fffa997e  ; je 0xfffa997e
cmp al, 3
je short loc_fffa9985  ; je 0xfffa9985
dec dl
mov edi, 0x14
mov edx, 0x20
cmove edi, edx
jmp short loc_fffa998a  ; jmp 0xfffa998a

loc_fffa997e:
mov edi, 0x2c
jmp short loc_fffa998a  ; jmp 0xfffa998a

loc_fffa9985:
mov edi, 0x38

loc_fffa998a:
add edi, dword [ebp - 0x524]
mov edx, dword [edi]
and edx, 0xf8ffff01
or edx, esi
or edx, ecx
mov dword [edi], edx

loc_fffa999e:
inc eax
cmp eax, 4
jne short loc_fffa9946  ; jne 0xfffa9946
mov esi, dword [ebp - 0x524]
mov al, byte [esi + 4]
and eax, 0xfffffff8
cmp byte [ebx + 0x22], 1
sete dl
or eax, edx
mov byte [esi + 4], al
sub esp, 0xc
mov eax, dword [ebp - 0x500]
push dword [ebp - 0x520]
mov edi, 0x26
mov ebx, 0x1a
call dword [eax + 4]  ; ucall
mov ecx, dword [ebp - 0x4fc]
add esp, 0x10
xor eax, eax

loc_fffa99e3:
cmp byte [ecx + eax*2 + 0x20], 1
mov dl, al
jne short loc_fffa9a18  ; jne 0xfffa9a18
cmp al, 2
je short loc_fffa99fe  ; je 0xfffa99fe
cmp al, 3
je short loc_fffa9a05  ; je 0xfffa9a05
movzx esi, bx
dec dl
cmove esi, edi
jmp short loc_fffa9a0a  ; jmp 0xfffa9a0a

loc_fffa99fe:
mov esi, 0x32
jmp short loc_fffa9a0a  ; jmp 0xfffa9a0a

loc_fffa9a05:
mov esi, 0x3e

loc_fffa9a0a:
add esi, dword [ebp - 0x524]

loc_fffa9a10:
mov dx, word [esi]
and dl, 2
jne short loc_fffa9a10  ; jne 0xfffa9a10

loc_fffa9a18:
inc eax
cmp eax, 4
jne short loc_fffa99e3  ; jne 0xfffa99e3
mov eax, ref_fffcfbcc  ; mov eax, 0xfffcfbcc
call fcn_fffc4931  ; call 0xfffc4931
mov edi, dword [ebp - 0x520]
push eax
push eax
mov eax, dword [edi]
push ref_fffcfbd8  ; push 0xfffcfbd8
push edi
call dword [eax + 0x18]  ; ucall
mov dword [esp], ref_fffcf852  ; mov dword [esp], 0xfffcf852
call fcn_fffa1e55  ; call 0xfffa1e55
mov eax, dword [0xfeffc010]
pop edx
pop ecx
mov edx, dword [eax]
push ref_fffcfbe4  ; push 0xfffcfbe4
push eax
call dword [edx + 0x18]  ; ucall
mov dword [esp], ref_fffcf87b  ; mov dword [esp], 0xfffcf87b
call fcn_fffa1e55  ; call 0xfffa1e55
mov eax, dword [0xfeffc010]
call fcn_fffa2608  ; call 0xfffa2608
mov edx, 0xfffe
mov eax, ref_fffcfaac  ; mov eax, 0xfffcfaac
call fcn_fffa1df9  ; call 0xfffa1df9
add esp, 0x10
test eax, eax
jne short loc_fffa9abf  ; jne 0xfffa9abf
cmp dword [ebp - 0x20c], 0x11
je short loc_fffa9a9e  ; je 0xfffa9a9e
sub esp, 0xc
push ref_fffcf89e  ; push 0xfffcf89e
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x10

loc_fffa9a9e:
mov eax, dword [ebp + 8]
mov dword [eax + 0x56], 0
mov dword [eax + 0x5a], 0
mov dword [eax + 0x6a], 0
mov dword [eax + 0x66], 0
jmp short loc_fffa9ae3  ; jmp 0xfffa9ae3

loc_fffa9abf:
mov ecx, dword [ebp + 8]
mov edx, dword [eax + 0x2ccb]
mov dword [ecx + 0x56], edx
mov edx, dword [eax + 0x2ccf]
add eax, 0x2123
mov dword [ecx + 0x5a], edx
mov dword [ecx + 0x6a], 0xba8
mov dword [ecx + 0x66], eax

loc_fffa9ae3:
sub esp, 0xc
push ref_fffcf8d0  ; push 0xfffcf8d0
call fcn_fffa1e55  ; call 0xfffa1e55
add esp, 0x10
xor eax, eax
jmp short loc_fffa9b0e  ; jmp 0xfffa9b0e

loc_fffa9af7:
or eax, 0xffffffff
jmp short loc_fffa9b0e  ; jmp 0xfffa9b0e

loc_fffa9afc:
cmp byte [ebp - 0x524], 0
jne loc_fffa8f64  ; jne 0xfffa8f64
jmp near loc_fffa8f53  ; jmp 0xfffa8f53

loc_fffa9b0e:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffa9b16:
db 0x00
db 0x00

fcn_fffa9b18:  ; not directly referenced
push ebp
xor ecx, ecx
mov eax, 1
mov ebp, esp
push esi
push ebx
lea esp, [esp - 0x1c]
mov esi, dword [0xf0000048]
and esi, 0xfffffffe
cpuid
mov eax, dword [0xfeffc010]
lea ecx, [ebp - 0xc]
mov bx, word [0xf0000002]
and ebx, 0xfffffff0
mov edx, dword [eax]
push ecx
push 0
push 0
push ref_fffcfb1c  ; push 0xfffcfb1c
push eax
call dword [edx + 0x20]  ; ucall
add esp, 0x20
cmp bl, 1
mov edx, dword [esi + 0x5f10]
sbb eax, eax
xor dl, dl
and eax, 0xfffffff0
add eax, 0x30
or eax, edx
cmp bl, 0x50
mov dword [esi + 0x5f10], eax
jne short loc_fffa9b92  ; jne 0xfffa9b92
mov eax, dword [ebp - 0xc]
mov edx, 0x7dffffff
cmp byte [eax + 0x16], 1
sbb eax, eax
and eax, 0x2000000
add eax, 0x80000000
jmp short loc_fffa9b9c  ; jmp 0xfffa9b9c

loc_fffa9b92:  ; not directly referenced
mov eax, 0x80000000
mov edx, 0x7fffffff

loc_fffa9b9c:  ; not directly referenced
mov ecx, dword [esi + 0x5d14]
and edx, ecx
or edx, eax
mov dword [esi + 0x5d14], edx
mov eax, dword [esi + 0x5f00]
or ah, 6
mov dword [esi + 0x5f00], eax
mov al, byte [esi + 0x5da8]
or eax, 1
mov byte [esi + 0x5da8], al
lea esp, [ebp - 8]
pop ebx
xor eax, eax
pop esi
pop ebp
ret

fcn_fffa9bd3:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0xcac]
mov dword [ebp - 0xc94], 0xa
cmp dword [ebp + 0xc], 0x10
mov dword [ebp - 0xc90], edx
mov edx, 0x14
cmove edx, dword [ebp - 0xc94]
cmp dword [ebp + 8], 1
mov dword [ebp - 0xca4], eax
mov byte [ebp - 0xc8b], cl
mov eax, dword [ebp + 0x10]
mov dword [ebp - 0xc94], edx
je short loc_fffa9c2b  ; je 0xfffa9c2b

loc_fffa9c1b:
mov byte [ebp - 0xc8a], 0
mov byte [ebp - 0xc89], 0
jmp short loc_fffa9c4b  ; jmp 0xfffa9c4b

loc_fffa9c2b:
cmp eax, 2
je short loc_fffa9c3d  ; je 0xfffa9c3d
test eax, eax
jne short loc_fffa9c1b  ; jne 0xfffa9c1b
mov byte [ebp - 0xc8a], 1
jmp short loc_fffa9c44  ; jmp 0xfffa9c44

loc_fffa9c3d:
mov byte [ebp - 0xc8a], 0

loc_fffa9c44:
mov byte [ebp - 0xc89], 1

loc_fffa9c4b:
mov edi, dword [ebp + 8]
shl edi, 0xf
mov ax, word [edi - 0xfffff50]
or eax, 0x10
cmp byte [ebp - 0xc89], 0
mov word [edi - 0xfffff50], ax
je short loc_fffa9c7c  ; je 0xfffa9c7c
mov ax, word [edi - 0xfffef50]
or eax, 0x10
mov word [edi - 0xfffef50], ax

loc_fffa9c7c:
cmp byte [ebp - 0xc8a], 0
je short loc_fffa9c96  ; je 0xfffa9c96
mov ax, word [edi - 0xfffdf50]
or eax, 0x10
mov word [edi - 0xfffdf50], ax

loc_fffa9c96:
push eax
mov edx, dword [ebp - 0xc90]
push 0x2710
push dword [ebp - 0xc90]
push dword [ebp - 0xca4]
call dword [edx + 4]  ; ucall
mov eax, dword [edi - 0xffff3e0]
add esp, 0x10
or ah, 0xa8
cmp byte [ebp - 0xc89], 0
mov dword [edi - 0xffff3e0], eax
je short loc_fffa9cdb  ; je 0xfffa9cdb
mov eax, dword [edi - 0xfffe3e0]
or ah, 0xa8
mov dword [edi - 0xfffe3e0], eax

loc_fffa9cdb:
cmp byte [ebp - 0xc8a], 0
je short loc_fffa9cf3  ; je 0xfffa9cf3
mov eax, dword [edi - 0xfffd3e0]
or ah, 0xa8
mov dword [edi - 0xfffd3e0], eax

loc_fffa9cf3:
movzx ecx, byte [ebp - 0xc8b]
mov dword [ebp - 0xc84], 0
mov dword [ebp - 0xc9c], ecx
jmp near loc_fffa9ef2  ; jmp 0xfffa9ef2

loc_fffa9d0f:
push esi
push dword [ebp - 0xc9c]
mov ecx, ebx
mov edx, dword [ebp + 8]
push 1
xor eax, eax
push 0x39
call fcn_fffb6133  ; call 0xfffb6133
add esp, 0xc
mov ecx, ebx
push dword [ebp - 0xc9c]
mov edx, dword [ebp + 8]
xor eax, eax
push 0xc
inc ebx
push 0x3a
call fcn_fffb6133  ; call 0xfffb6133
add esp, 0x10

loc_fffa9d43:
cmp ebx, dword [ebp + 0xc]
jne short loc_fffa9d0f  ; jne 0xfffa9d0f
push ebx
push dword [ebp - 0xc94]
push dword [ebp - 0xc90]
push dword [ebp - 0xca4]
mov edx, dword [ebp - 0xc90]
call dword [edx + 4]  ; ucall
lea ecx, [ebp - 0xc78]
add esp, 0x10
mov dword [ebp - 0xc88], ecx
mov dword [ebp - 0xc98], ecx
mov dword [ebp - 0xc80], 0
jmp near loc_fffa9e81  ; jmp 0xfffa9e81

loc_fffa9d88:
imul edx, dword [ebp - 0xc80], 0xc6
mov ebx, dword [ebp - 0xc98]
mov dword [ebp - 0xc7c], 0
mov dword [ebp - 0xca0], edx

loc_fffa9da8:
sub esp, 0xc
mov ecx, dword [ebp - 0xc7c]
push dword [ebp - 0xc9c]
add ecx, 0x31
mov edx, dword [ebp - 0xc80]
mov eax, dword [ebp + 8]
call fcn_fffc63f5  ; call 0xfffc63f5
mov cx, word [ebx + 1]
and eax, 0x3f
movzx edx, cx
add esp, 0x10
mov dword [ebp - 0xca8], edx
mov edx, 1
jmp short loc_fffa9e04  ; jmp 0xfffa9e04

loc_fffa9de2:
lea esi, [edx + edx*2]
cmp byte [ebx + esi], al
jne short loc_fffa9e03  ; jne 0xfffa9e03
imul eax, dword [ebp - 0xc7c], 0x21
add esi, dword [ebp - 0xca0]
add esi, eax
inc word [ebp + esi - 0xc77]
jmp short loc_fffa9e5b  ; jmp 0xfffa9e5b

loc_fffa9e03:
inc edx

loc_fffa9e04:
cmp edx, dword [ebp - 0xca8]
jbe short loc_fffa9de2  ; jbe 0xfffa9de2
jmp near loc_fffaa0d1  ; jmp 0xfffaa0d1

loc_fffa9e11:
cmp dword [ebp + 0xc], 0x10
jne short loc_fffa9e25  ; jne 0xfffa9e25
mov eax, 0xffffee15
out 0x80, ax
mov al, 0xee
out 0x84, al
jmp short loc_fffa9e31  ; jmp 0xfffa9e31

loc_fffa9e25:
mov eax, 0xffffed15
out 0x80, ax
mov al, 0xed
out 0x84, al

loc_fffa9e31:
jmp short loc_fffa9e31  ; jmp 0xfffa9e31

loc_fffa9e33:
inc ecx
lea edx, [edx + edx*2]
mov word [ebx + 1], cx
add edx, dword [ebp - 0xca0]
imul ecx, dword [ebp - 0xc7c], 0x21
add edx, ecx
mov byte [ebp + edx - 0xc78], al
mov word [ebp + edx - 0xc77], 1

loc_fffa9e5b:
inc dword [ebp - 0xc7c]
add ebx, 0x21
cmp dword [ebp - 0xc7c], 6
jne loc_fffa9da8  ; jne 0xfffa9da8
inc dword [ebp - 0xc80]
add dword [ebp - 0xc98], 0xc6

loc_fffa9e81:
mov ecx, dword [ebp + 0xc]
cmp dword [ebp - 0xc80], ecx
jne loc_fffa9d88  ; jne 0xfffa9d88
xor edx, edx
cmp dword [ebp - 0xc84], 0xc8
ja short loc_fffa9ed2  ; ja 0xfffa9ed2
jmp short loc_fffa9edc  ; jmp 0xfffa9edc

loc_fffa9ea0:
xor eax, eax

loc_fffa9ea2:
mov ecx, dword [ebp - 0xc88]
mov cx, word [ecx + eax + 1]
mov word [ebp - 0xcaa], cx
sub ecx, 2
cmp cx, 2
jbe short loc_fffa9edc  ; jbe 0xfffa9edc
add eax, 0x21
cmp eax, 0xc6
jne short loc_fffa9ea2  ; jne 0xfffa9ea2
inc edx
add dword [ebp - 0xc88], 0xc6

loc_fffa9ed2:
cmp edx, dword [ebp + 0xc]
jne short loc_fffa9ea0  ; jne 0xfffa9ea0
jmp near loc_fffa9fdd  ; jmp 0xfffa9fdd

loc_fffa9edc:
inc dword [ebp - 0xc84]
cmp dword [ebp - 0xc84], 0x3e8
je loc_fffa9fdd  ; je 0xfffa9fdd

loc_fffa9ef2:
xor ebx, ebx
jmp near loc_fffa9d43  ; jmp 0xfffa9d43

loc_fffa9ef9:
imul eax, esi, 0xc6
xor ebx, ebx
mov dword [ebp - 0xc9c], eax

loc_fffa9f07:
imul edx, ebx, 0x21
add edx, dword [ebp - 0xc9c]
lea ecx, [ebp - 0xc78]
add edx, ecx
mov dword [ebp - 0xc80], 1
movzx eax, word [edx + 1]
lea ecx, [edx + 3]
mov dword [ebp - 0xc84], eax
mov dword [ebp - 0xc7c], ecx
lea eax, [eax + eax*2]
add eax, edx
mov dword [ebp - 0xc98], eax
jmp short loc_fffa9f99  ; jmp 0xfffa9f99

loc_fffa9f42:
mov cl, byte [eax - 3]
cmp cl, byte [eax]
mov byte [ebp - 0xc88], cl
jbe short loc_fffa9f79  ; jbe 0xfffa9f79
mov cx, word [eax - 2]
mov word [ebp - 0xc94], cx
mov cx, word [eax]
mov word [eax - 3], cx
mov cl, byte [eax + 2]
mov byte [eax - 1], cl
mov cl, byte [ebp - 0xc88]
mov byte [eax], cl
mov ecx, dword [ebp - 0xc94]
mov word [eax + 1], cx

loc_fffa9f79:
sub eax, 3
jmp short loc_fffa9f84  ; jmp 0xfffa9f84

loc_fffa9f7e:
mov eax, dword [ebp - 0xc98]

loc_fffa9f84:
cmp eax, dword [ebp - 0xc7c]
jne short loc_fffa9f42  ; jne 0xfffa9f42
inc dword [ebp - 0xc80]
add dword [ebp - 0xc7c], 3

loc_fffa9f99:
mov eax, dword [ebp - 0xc84]
cmp dword [ebp - 0xc80], eax
jbe short loc_fffa9f7e  ; jbe 0xfffa9f7e
push ecx
push dword [ebp - 0xca0]
movzx eax, word [edx + 1]
mov ecx, esi
shr eax, 1
inc eax
lea eax, [eax + eax*2]
movzx eax, byte [edx + eax]
mov edx, dword [ebp + 8]
push eax
lea eax, [ebx + 0x31]
inc ebx
push eax
xor eax, eax
call fcn_fffb6133  ; call 0xfffb6133
add esp, 0x10
cmp ebx, 6
jne loc_fffa9f07  ; jne 0xfffa9f07
inc esi
jmp short loc_fffa9fec  ; jmp 0xfffa9fec

loc_fffa9fdd:
movzx edx, byte [ebp - 0xc8b]
xor esi, esi
mov dword [ebp - 0xca0], edx

loc_fffa9fec:
cmp esi, dword [ebp + 0xc]
jne loc_fffa9ef9  ; jne 0xfffa9ef9
cmp byte [ebp - 0xc8b], 2
jbe short loc_fffaa03f  ; jbe 0xfffaa03f

loc_fffa9ffe:
cmp byte [ebp - 0xc89], 0
mov dword [edi - 0xffff3e0], 0
jne short loc_fffaa04f  ; jne 0xfffaa04f
jmp short loc_fffaa059  ; jmp 0xfffaa059

loc_fffaa013:
push edx
mov ecx, ebx
mov edx, dword [ebp + 8]
push esi
xor eax, eax
push 0x40
push 0x2f
call fcn_fffb6133  ; call 0xfffb6133
add esp, 0xc
mov ecx, ebx
push esi
mov edx, dword [ebp + 8]
xor eax, eax
push 0x40
inc ebx
push 0x38
call fcn_fffb6133  ; call 0xfffb6133
add esp, 0x10
jmp short loc_fffaa048  ; jmp 0xfffaa048

loc_fffaa03f:
movzx esi, byte [ebp - 0xc8b]
xor ebx, ebx

loc_fffaa048:
cmp ebx, dword [ebp + 0xc]
jne short loc_fffaa013  ; jne 0xfffaa013
jmp short loc_fffa9ffe  ; jmp 0xfffa9ffe

loc_fffaa04f:
mov dword [edi - 0xfffe3e0], 0

loc_fffaa059:
cmp byte [ebp - 0xc8a], 0
je short loc_fffaa06c  ; je 0xfffaa06c
mov dword [edi - 0xfffd3e0], 0

loc_fffaa06c:
push eax
mov edx, dword [ebp - 0xc90]
push 0x3e8
push dword [ebp - 0xc90]
push dword [ebp - 0xca4]
call dword [edx + 4]  ; ucall
mov ax, word [edi - 0xfffff50]
add esp, 0x10
and eax, 0xffffffef
cmp byte [ebp - 0xc89], 0
mov word [edi - 0xfffff50], ax
je short loc_fffaa0b5  ; je 0xfffaa0b5
mov ax, word [edi - 0xfffef50]
and eax, 0xffffffef
mov word [edi - 0xfffef50], ax

loc_fffaa0b5:
cmp byte [ebp - 0xc8a], 0
je short loc_fffaa0df  ; je 0xfffaa0df
mov ax, word [edi - 0xfffdf50]
and eax, 0xffffffef
mov word [edi - 0xfffdf50], ax
jmp short loc_fffaa0df  ; jmp 0xfffaa0df

loc_fffaa0d1:
cmp edx, 0xa
jbe loc_fffa9e33  ; jbe 0xfffa9e33
jmp near loc_fffa9e11  ; jmp 0xfffa9e11

loc_fffaa0df:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffaa0e7:
push ebp
mov ecx, eax
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 8]
mov ebx, dword [edx + 9]
movzx eax, word [ebx + 1]
cmp dword [ecx + 0x2aa6], eax
jne loc_fffaa2bb  ; jne 0xfffaa2bb
mov si, word [0xf0000050]
cmp si, word [ecx + 0x2a78]
mov al, 1
jne loc_fffaa2bd  ; jne 0xfffaa2bd
movzx esi, byte [ebx]
cmp dword [ecx + 0x2e1a], esi
jne loc_fffaa2bd  ; jne 0xfffaa2bd
movzx esi, byte [ebx + 0x3e]
cmp dword [ecx + 0x2e1e], esi
jne loc_fffaa2bd  ; jne 0xfffaa2bd
movzx esi, byte [ecx + 0x2e22]
cmp esi, dword [ebx + 6]
mov dword [ebp - 0x14], esi
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov esi, dword [edx + 5]
movzx edi, word [esi]
cmp dword [ecx + 0x2e23], edi
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov di, word [esi + 2]
cmp word [ecx + 0x2e27], di
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov edx, dword [edx + 1]
mov edx, dword [edx + 0x20]
shr edx, 0x14
cmp dword [ecx + 0x2e29], edx
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [esi + 4]
cmp byte [ecx + 0x2e2d], dl
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov esi, dword [ebx + 0x36]
cmp dword [ecx + 0x2e2e], esi
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov edi, dword [ebx + 0x3a]
cmp dword [ecx + 0x2e32], edi
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 0x10]
cmp byte [ecx + 0x2e36], dl
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 0x27]
cmp byte [ecx + 0x2e37], dl
jne loc_fffaa2bd  ; jne 0xfffaa2bd
movzx edx, byte [ebx + 0x11]
cmp dword [ecx + 0x2e38], edx
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 0x41]
cmp byte [ecx + 0x2e3c], dl
je short loc_fffaa1f9  ; je 0xfffaa1f9
cmp dword [ecx + 0x2258], 1
je loc_fffaa2bd  ; je 0xfffaa2bd

loc_fffaa1f9:
cmp dword [ebp - 0x14], 1
je short loc_fffaa206  ; je 0xfffaa206

loc_fffaa1ff:
xor eax, eax
jmp near loc_fffaa2bd  ; jmp 0xfffaa2bd

loc_fffaa206:
mov dl, byte [ebx + 0xa]
cmp byte [ecx + 0x2e3d], dl
mov al, 1
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 0x12]
cmp byte [ecx + 0x2e3f], dl
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 0xb]
cmp byte [ecx + 0x2e40], dl
jne loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 0xc]
cmp byte [ecx + 0x2e41], dl
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
mov si, word [ebx + 0xd]
cmp word [ecx + 0x2e42], si
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 0x16]
cmp byte [ecx + 0x2e44], dl
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 0x17]
cmp byte [ecx + 0x2e45], dl
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 0xf]
cmp byte [ecx + 0x2e49], dl
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
mov si, word [ebx + 0x13]
cmp word [ecx + 0x2e4b], si
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 0x15]
cmp byte [ecx + 0x2e46], dl
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
mov si, word [ebx + 0x18]
cmp word [ecx + 0x2e51], si
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
mov di, word [ebx + 0x1a]
cmp word [ecx + 0x2e47], di
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 4]
cmp byte [ecx + 0x2aa4], dl
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
mov dl, byte [ebx + 3]
cmp byte [ecx + 0x2aa5], dl
jne short loc_fffaa2bd  ; jne 0xfffaa2bd
jmp near loc_fffaa1ff  ; jmp 0xfffaa1ff

loc_fffaa2bb:
mov al, 1

loc_fffaa2bd:
pop edx
pop ecx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffaa2c4:
push ebp
mov ecx, 6
mov ebp, esp
push edi
push esi
lea edi, [ebp - 0x153]
mov esi, ref_fffc9c1c  ; mov esi, 0xfffc9c1c
push ebx
lea esp, [esp - 0x248]
mov dword [ebp - 0x1b0], eax
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov dword [ebp - 0x1b8], edx
mov eax, dword [0xf0000048]
mov edx, dword [0xf000004c]
mov edx, dword [ebp - 0x1b8]
mov ecx, eax
and ecx, 0xfffffffe
mov dword [ebp - 0x1e4], ecx
mov ebx, dword [0xf0000068]
mov eax, dword [edx + 0xd]
mov esi, dword [0xf000006c]
mov dword [ebp - 0x1a8], ebx
mov ebx, dword [ebp - 0x1b0]
lea edx, [ebp - 0x188]
mov dword [ebp - 0x1a4], esi
mov dword [ebp - 0x184], 0
mov al, byte [eax + 0x30]
mov byte [ebp - 0x1ac], al
mov eax, dword [ebx]
mov ecx, dword [0xf0008504]
push edx
shr ecx, 0x10
push 0
and ecx, 3
push 0
mov dword [ebp - 0x1c0], ecx
mov byte [ebp - 0x1ba], cl
push ref_fffcfb2c  ; push 0xfffcfb2c
push ebx
call dword [eax + 0x20]  ; ucall
add esp, 0x20
cmp dword [ebp - 0x1c0], 0
je short loc_fffaa384  ; je 0xfffaa384
cmp dword [ebp - 0x1c0], 2
jne short loc_fffaa39b  ; jne 0xfffaa39b
jmp short loc_fffaa394  ; jmp 0xfffaa394

loc_fffaa384:
mov byte [ebp - 0x148], 8
mov byte [ebp - 0x142], 4
jmp short loc_fffaa39b  ; jmp 0xfffaa39b

loc_fffaa394:
mov byte [ebp - 0x148], 8

loc_fffaa39b:
xor ecx, ecx
mov eax, 1
cpuid
and eax, 0xf
mov byte [ebp - 0x1bb], al
mov dword [ebp - 0x1d0], eax
mov ax, word [0xf0000002]
mov bl, byte [ebp - 0x1bb]
and eax, 0xfffffff0
mov byte [ebp - 0x1c4], 0
add ebx, eax
cmp al, 0x50
sete byte [ebp - 0x1b9]
mov byte [ebp - 0x1ff], bl
cmp byte [ebp - 0x1bb], 2
mov bl, byte [ebp - 0x1b9]
mov byte [ebp - 0x1e0], al
seta byte [ebp - 0x1bc]
and byte [ebp - 0x1bc], bl
test bl, bl
je short loc_fffaa412  ; je 0xfffaa412
mov eax, dword [0xf00000e8]
shr eax, 0x14
xor eax, 1
and eax, 1
mov byte [ebp - 0x1c4], al

loc_fffaa412:
mov edx, dword [ebp - 0x1b8]
cmp byte [edx], 0x14
jbe loc_fffaa599  ; jbe 0xfffaa599
mov ecx, dword [ebp - 0x1b0]
lea edx, [ebp - 0x184]
mov eax, dword [ecx]
push edx
push 0x31
push 4
push ecx
call dword [eax + 0x34]  ; ucall
add esp, 0x10
test eax, eax
jne loc_fffaa599  ; jne 0xfffaa599
mov eax, dword [ebp - 0x184]
test eax, eax
je loc_fffaa599  ; je 0xfffaa599
lea edi, [eax + 8]
mov esi, ref_fffcfc20  ; mov esi, 0xfffcfc20
mov ecx, 4
sub esp, 0xc
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov ebx, dword [ebp - 0x1b0]
lea edx, [ebp - 0x180]
mov byte [eax + 0x30], 0
mov eax, dword [ebx]
push edx
push 0
push 0
push ref_fffcfb0c  ; push 0xfffcfb0c
push ebx
call dword [eax + 0x20]  ; ucall
add esp, 0x20
test eax, eax
mov dword [ebp - 0x17c], 0x17
je short loc_fffaa4b7  ; je 0xfffaa4b7

loc_fffaa494:
mov esi, dword [ebp - 0x1b8]
mov eax, dword [ebp - 0x184]
mov edx, dword [esi + 0xd]
mov dl, byte [edx + 0x2b]
mov byte [eax + 0x2c], dl
cmp byte [esi], 0x16
ja loc_fffaa584  ; ja 0xfffaa584
jmp near loc_fffaa595  ; jmp 0xfffaa595

loc_fffaa4b7:
cmp dword [ebp - 0x180], 0
je short loc_fffaa494  ; je 0xfffaa494
mov eax, 0x17
call fcn_fffa24d5  ; call 0xfffa24d5
test eax, eax
mov ebx, eax
je short loc_fffaa494  ; je 0xfffaa494
push ecx
push ecx
push eax
lea eax, [ebp - 0x17c]
push eax
mov eax, dword [ebp - 0x180]
push 0
push ref_fffcfc58  ; push 0xfffcfc58
push ref_fffcfc30  ; push 0xfffcfc30
push dword [ebp - 0x1b0]
call dword [eax]  ; ucall
add esp, 0x20
test eax, eax
jne short loc_fffaa494  ; jne 0xfffaa494
mov eax, dword [ebp - 0x184]
mov edx, ebx
add eax, 0x18
mov ecx, 0x17
call fcn_fffa2408  ; call 0xfffa2408
mov eax, dword [ebp - 0x184]
mov edi, dword [ebp - 0x1b8]
mov byte [eax + 0x30], 1
mov edx, dword [edi + 0xd]
cmp byte [edx + 0x5c], 0
jne short loc_fffaa52d  ; jne 0xfffaa52d
mov byte [eax + 0x2d], 0

loc_fffaa52d:
mov ecx, dword [ebp - 0x1b8]
mov edx, dword [ecx + 0xd]
mov dl, byte [edx + 0x2b]
cmp byte [eax + 0x2c], dl
je loc_fffaa494  ; je 0xfffaa494
dec dl
je loc_fffaa494  ; je 0xfffaa494
mov dword [eax + 0x18], 0
mov dword [eax + 0x1c], 0
mov dword [eax + 0x20], 0
mov byte [eax + 0x24], 0
mov byte [eax + 0x25], 0
mov byte [eax + 0x26], 0
mov byte [eax + 0x27], 0
mov byte [eax + 0x28], 0
mov byte [eax + 0x29], 0
mov byte [eax + 0x2a], 0
mov byte [eax + 0x2b], 0
jmp near loc_fffaa494  ; jmp 0xfffaa494

loc_fffaa584:
mov ebx, dword [ebp - 0x1b8]
mov edx, dword [ebx + 1]
mov dl, byte [edx + 0x2d]
mov byte [eax + 0x2f], dl
jmp short loc_fffaa599  ; jmp 0xfffaa599

loc_fffaa595:
mov byte [eax + 0x2f], 0

loc_fffaa599:
cmp byte [ebp - 0x1b9], 0
je loc_fffaaafc  ; je 0xfffaaafc
cmp byte [ebp - 0x1bb], 2
ja loc_fffaa656  ; ja 0xfffaa656
mov edx, dword [ebp - 0x1a8]
and edx, 0xfffffffe
mov eax, dword [edx + 0xc30]
and eax, 0xfff83fff
or eax, 0x60000
mov dword [edx + 0xc30], eax
mov eax, dword [0xf0008c24]
and eax, 0xffff807f
or ah, 0x10
mov dword [0xf0008c24], eax
mov eax, dword [0xf0009c24]
and eax, 0xffff807f
or ah, 0x10
mov dword [0xf0009c24], eax
mov eax, dword [0xf000ac24]
and eax, 0xffff807f
or ah, 0x10
mov dword [0xf000ac24], eax
mov eax, dword [0xf0030c24]
and eax, 0xffff807f
or ah, 0x10
mov dword [0xf0030c24], eax
mov eax, dword [0xf0008224]
or eax, 0x7e000000
mov dword [0xf0008224], eax
mov eax, dword [0xf0009224]
or eax, 0x7e000000
mov dword [0xf0009224], eax
mov eax, dword [0xf000a224]
or eax, 0x7e000000
mov dword [0xf000a224], eax
mov eax, dword [0xf0030224]
or eax, 0x7e000000
mov dword [0xf0030224], eax

loc_fffaa656:
mov eax, dword [0xf0008250]
xor edx, edx
or eax, 4
mov ecx, 1
mov dword [0xf0008250], eax
mov eax, dword [0xf0009250]
or eax, 4
mov dword [0xf0009250], eax
mov eax, dword [0xf000a250]
or eax, 4
mov dword [0xf000a250], eax
mov eax, dword [0xf0030250]
or eax, 4
mov dword [0xf0030250], eax
push eax
movzx ebx, byte [ebp - 0x1ac]
push eax
mov eax, dword [ebp - 0x1b8]
push ebx
push dword [ebp - 0x1d0]
call fcn_fffb619f  ; call 0xfffb619f
pop eax
pop edx
mov ecx, 6
xor edx, edx
push ebx
push dword [ebp - 0x1d0]
mov eax, dword [ebp - 0x1b8]
call fcn_fffb619f  ; call 0xfffb619f
add esp, 0x10
cmp byte [ebp - 0x1c4], 1
jne loc_fffaaa8b  ; jne 0xfffaaa8b
mov edx, dword [ebp - 0x1b8]
mov eax, dword [edx + 0xd]
cmp byte [eax + 8], 0
je loc_fffaaa8b  ; je 0xfffaaa8b
cmp byte [eax + 0x2a], 2
jne short loc_fffaa6fb  ; jne 0xfffaa6fb
cmp byte [ebp - 0x1bb], 0
setne byte [eax + 0x2a]

loc_fffaa6fb:
cmp byte [eax + 0x2a], 1
mov ecx, dword [0xf0008dd8]
sbb edx, edx
lea ebx, [eax + 0x19]
and edx, 0x8000
add edx, 0x4000
or edx, ecx
lea ecx, [eax + 9]
mov dword [0xf0008dd8], edx
mov edx, dword [ebp - 0x1b8]
mov dword [ebp - 0x1ac], ecx
mov dword [ebp - 0x1b4], ebx
cmp byte [edx], 0x13
jbe short loc_fffaa743  ; jbe 0xfffaa743
add eax, 0x4c
mov dword [ebp - 0x1a8], eax
jmp short loc_fffaa763  ; jmp 0xfffaa763

loc_fffaa743:
lea eax, [ebp - 0x13b]
lea edx, [ebp - 0x12b]

loc_fffaa74f:
mov byte [eax], 2
inc eax
cmp eax, edx
jne short loc_fffaa74f  ; jne 0xfffaa74f
lea ecx, [ebp - 0x13b]
mov dword [ebp - 0x1a8], ecx

loc_fffaa763:
cmp dword [ebp - 0x1c0], 2
je loc_fffaa807  ; je 0xfffaa807
xor edx, edx
cmp dword [ebp - 0x1c0], 3
jne loc_fffaa8f9  ; jne 0xfffaa8f9

loc_fffaa77f:
lea esi, [edx + 0x780046d0]
mov edi, dword [ebp - 0x1a8]
mov ebx, dword [esi + esi]
mov dword [ebp - 0x1c8], ebx
mov ebx, dword [ebp - 0x1b4]
and dword [ebp - 0x1c8], 0x80f080f0
movzx eax, byte [edi + edx]
shl eax, 0xc
movzx ecx, byte [ebx + edx]
shl ecx, 8
or eax, ecx
movzx ecx, byte [ebx + edx + 1]
mov ebx, dword [ebp - 0x1ac]
shl ecx, 0x18
movzx edi, byte [ebx + edx + 1]
shl edi, 0x10
or ecx, edi
mov edi, dword [ebp - 0x1a8]
or eax, ecx
movzx ecx, byte [edi + edx + 1]
shl ecx, 0x1c
movzx edi, byte [ebx + edx]
add edx, 2
or ecx, edi
or eax, ecx
or eax, dword [ebp - 0x1c8]
cmp edx, 0x10
mov dword [esi + esi], eax
jne short loc_fffaa77f  ; jne 0xfffaa77f

loc_fffaa7f5:
cmp byte [ebp - 0x1bb], 0
je loc_fffaaa64  ; je 0xfffaaa64
jmp near loc_fffaaa8b  ; jmp 0xfffaaa8b

loc_fffaa807:
xor eax, eax

loc_fffaa809:
mov ebx, dword [ebp - 0x1b4]
mov ecx, dword [ebp - 0x1a8]
lea esi, [eax + 0x780046d0]
mov edx, dword [esi + esi]
mov dword [ebp - 0x1c8], edx
and dword [ebp - 0x1c8], 0x80f080f0
movzx edx, byte [ecx + eax]
movzx ecx, byte [ebx + eax]
shl ecx, 8
shl edx, 0xc
or edx, ecx
movzx ecx, byte [ebx + eax + 1]
mov ebx, dword [ebp - 0x1ac]
shl ecx, 0x18
movzx edi, byte [ebx + eax + 1]
shl edi, 0x10
or ecx, edi
mov edi, dword [ebp - 0x1a8]
or edx, ecx
movzx ecx, byte [edi + eax + 1]
shl ecx, 0x1c
movzx edi, byte [ebx + eax]
mov ebx, dword [ebp - 0x1b4]
or ecx, edi
or edx, ecx
mov ecx, dword [ebp - 0x1a8]
or edx, dword [ebp - 0x1c8]
mov dword [esi + esi], edx
lea esi, [eax + 0x78004ed0]
mov edx, dword [esi + esi]
mov dword [ebp - 0x1c8], edx
and dword [ebp - 0x1c8], 0x80f080f0
movzx edx, byte [ecx + eax + 8]
movzx ecx, byte [ebx + eax + 8]
shl ecx, 8
shl edx, 0xc
or edx, ecx
movzx ecx, byte [ebx + eax + 9]
mov ebx, dword [ebp - 0x1ac]
shl ecx, 0x18
movzx edi, byte [ebx + eax + 9]
shl edi, 0x10
or ecx, edi
mov edi, dword [ebp - 0x1a8]
or edx, ecx
movzx ecx, byte [edi + eax + 9]
shl ecx, 0x1c
movzx edi, byte [ebx + eax + 8]
add eax, 2
or ecx, edi
or edx, ecx
or edx, dword [ebp - 0x1c8]
cmp eax, 8
mov dword [esi + esi], edx
jne loc_fffaa809  ; jne 0xfffaa809
jmp near loc_fffaa7f5  ; jmp 0xfffaa7f5

loc_fffaa8f9:
mov ebx, dword [ebp - 0x1b4]
mov ecx, dword [ebp - 0x1a8]
lea esi, [edx + 0x780046d0]
mov eax, dword [esi + esi]
mov dword [ebp - 0x1c8], eax
and dword [ebp - 0x1c8], 0x80f080f0
movzx eax, byte [ecx + edx]
movzx ecx, byte [ebx + edx]
shl ecx, 8
shl eax, 0xc
or eax, ecx
movzx ecx, byte [ebx + edx + 1]
mov ebx, dword [ebp - 0x1ac]
shl ecx, 0x18
movzx edi, byte [ebx + edx + 1]
shl edi, 0x10
or ecx, edi
mov edi, dword [ebp - 0x1a8]
or eax, ecx
movzx ecx, byte [edi + edx + 1]
shl ecx, 0x1c
movzx edi, byte [ebx + edx]
add edx, 2
or ecx, edi
or eax, ecx
or eax, dword [ebp - 0x1c8]
cmp edx, 8
mov dword [esi + esi], eax
jne short loc_fffaa8f9  ; jne 0xfffaa8f9
xor eax, eax

loc_fffaa971:
mov ebx, dword [ebp - 0x1b4]
mov ecx, dword [ebp - 0x1a8]
lea esi, [eax + 0x78004ed0]
mov edx, dword [esi + esi]
mov dword [ebp - 0x1c8], edx
and dword [ebp - 0x1c8], 0x80f080f0
movzx edx, byte [ecx + eax + 8]
movzx ecx, byte [ebx + eax + 8]
shl ecx, 8
shl edx, 0xc
or edx, ecx
movzx ecx, byte [ebx + eax + 9]
mov ebx, dword [ebp - 0x1ac]
shl ecx, 0x18
movzx edi, byte [ebx + eax + 9]
shl edi, 0x10
or ecx, edi
mov edi, dword [ebp - 0x1a8]
or edx, ecx
movzx ecx, byte [edi + eax + 9]
shl ecx, 0x1c
movzx edi, byte [ebx + eax + 8]
mov ebx, dword [ebp - 0x1b4]
or ecx, edi
or edx, ecx
mov ecx, dword [ebp - 0x1a8]
or edx, dword [ebp - 0x1c8]
mov dword [esi + esi], edx
lea esi, [eax + 0x780056d0]
mov edx, dword [esi + esi]
mov dword [ebp - 0x1c8], edx
and dword [ebp - 0x1c8], 0x80f080f0
movzx edx, byte [ecx + eax + 0xc]
movzx ecx, byte [ebx + eax + 0xc]
shl ecx, 8
shl edx, 0xc
or edx, ecx
movzx ecx, byte [ebx + eax + 0xd]
mov ebx, dword [ebp - 0x1ac]
shl ecx, 0x18
movzx edi, byte [ebx + eax + 0xd]
shl edi, 0x10
or ecx, edi
mov edi, dword [ebp - 0x1a8]
or edx, ecx
movzx ecx, byte [edi + eax + 0xd]
shl ecx, 0x1c
movzx edi, byte [ebx + eax + 0xc]
add eax, 2
or ecx, edi
or edx, ecx
or edx, dword [ebp - 0x1c8]
cmp eax, 4
mov dword [esi + esi], edx
je loc_fffaa7f5  ; je 0xfffaa7f5
jmp near loc_fffaa971  ; jmp 0xfffaa971

loc_fffaaa64:
mov eax, dword [0xf0008c38]
or eax, 1
mov dword [0xf0008c38], eax
mov eax, dword [0xf0009c38]
or eax, 1
mov dword [0xf0009c38], eax
mov eax, dword [0xf000ac38]
or eax, 1
mov dword [0xf000ac38], eax

loc_fffaaa8b:
mov edx, dword [ebp - 0x1b8]
mov eax, dword [edx + 0xd]
cmp byte [eax + 0x29], 2
jne short loc_fffaaaa5  ; jne 0xfffaaaa5
cmp byte [ebp - 0x1bb], 2
setbe byte [eax + 0x29]

loc_fffaaaa5:
mov edx, dword [ebp - 0x1b8]
mov eax, dword [edx + 0xd]
cmp byte [eax + 0x29], 1
jne short loc_fffaaafc  ; jne 0xfffaaafc
mov ax, word [0xf00080d0]
and eax, 0xfffffff0
or eax, 1
mov word [0xf00080d0], ax
mov ax, word [0xf00090d0]
and eax, 0xfffffff0
or eax, 1
mov word [0xf00090d0], ax
mov ax, word [0xf000a0d0]
and eax, 0xfffffff0
or eax, 1
mov word [0xf000a0d0], ax
mov ax, word [0xf00300d0]
and eax, 0xfffffff0
or eax, 1
mov word [0xf00300d0], ax

loc_fffaaafc:
lea ebx, [ebp - 0x153]
lea esi, [ebp - 0x13b]
mov dword [ebp - 0x1a8], ebx
mov dword [ebp - 0x19c], esi
mov eax, ebx

loc_fffaab16:
movzx ecx, byte [eax + 1]
mov dl, byte [eax]
shl ecx, 0xf
mov byte [ebp - 0x1b4], dl
movzx edx, byte [eax + 2]
shl edx, 0xc
movzx edi, byte [eax + 3]
add edx, ecx
movzx esi, byte [eax + 5]
mov cx, word [edx - 0x10000000]
inc cx
je loc_fffaabef  ; je 0xfffaabef
mov ecx, dword [ebp - 0x1b8]
and edi, 0xff
mov ebx, dword [ecx + 0xd]
mov cl, byte [ebx + edi + 4]
test cl, cl
jne loc_fffac388  ; jne 0xfffac388
cmp byte [ebp - 0x1bb], 2
mov bl, byte [ebp - 0x1b9]
setbe byte [ebp - 0x1ac]
test byte [ebp - 0x1ac], bl
je loc_fffac36d  ; je 0xfffac36d
mov ebx, dword [ebp - 0x1b8]
mov edi, dword [ebx + 1]
cmp word [edi + 0x25], 1
jne loc_fffac36d  ; jne 0xfffac36d
jmp near loc_fffac388  ; jmp 0xfffac388

loc_fffaab99:
cmp byte [ebp - 0x1c4], 0
jne short loc_fffaabae  ; jne 0xfffaabae
cmp di, 2
mov ecx, 2
cmova edi, ecx

loc_fffaabae:
movzx ebx, byte [ebp - 0x1b4]
and esi, 0xff
shl ebx, 0x14
shl esi, 4
add edx, ebx
movzx ebx, di
mov ecx, dword [edx - 0xfffff54]
and ecx, 0xfffffc00
or ecx, esi
or ecx, ebx
mov dword [edx - 0xfffff54], ecx
mov cx, word [edx - 0xfffff30]
and ecx, 0xfffffff0
or ecx, edi
mov word [edx - 0xfffff30], cx

loc_fffaabef:
add eax, 6
cmp eax, dword [ebp - 0x19c]
jne loc_fffaab16  ; jne 0xfffaab16
cmp byte [ebp - 0x1b9], 0
je loc_fffab134  ; je 0xfffab134
mov edx, dword [ebp - 0x1b8]
cmp byte [edx], 0x15
ja short loc_fffaac95  ; ja 0xfffaac95

loc_fffaac16:
mov eax, dword [0xf0008c24]
or eax, 0x20
mov dword [0xf0008c24], eax
mov eax, dword [0xf0009c24]
or eax, 0x20
mov dword [0xf0009c24], eax
mov eax, dword [0xf000ac24]
or eax, 0x20
mov dword [0xf000ac24], eax
mov eax, dword [0xf0030c24]
or eax, 0x20
mov dword [0xf0030c24], eax
mov eax, dword [0xf0008c24]
and eax, 0xfffeffff
mov dword [0xf0008c24], eax
mov eax, dword [0xf0009c24]
and eax, 0xfffeffff
mov dword [0xf0009c24], eax
mov eax, dword [0xf000ac24]
and eax, 0xfffeffff
mov dword [0xf000ac24], eax
mov eax, dword [0xf0030c24]
and eax, 0xfffeffff
mov dword [0xf0030c24], eax
cmp byte [ebp - 0x1bb], 0
jne loc_fffaafc4  ; jne 0xfffaafc4
jmp short loc_fffaacfa  ; jmp 0xfffaacfa

loc_fffaac95:
mov edx, dword [ebp - 0x1b8]
mov eax, dword [edx + 0xd]
cmp byte [eax + 0x5d], 1
jne loc_fffaac16  ; jne 0xfffaac16
movzx eax, byte [eax + 0x5e]
mov edx, dword [0xf0008d0c]
shl eax, 0x10
and edx, 0xfff0ffff
or eax, edx
xor edx, edx
mov dword [0xf0008d0c], eax
mov eax, 0xf0008a00

loc_fffaacc9:
mov ebx, dword [ebp - 0x1b8]
mov ecx, dword [ebx + 0xd]
movzx ecx, byte [ecx + 0x5e]
cmp edx, ecx
mov ecx, dword [eax]
jne short loc_fffaace4  ; jne 0xfffaace4
and ecx, 0xfff7ffff
jmp short loc_fffaacea  ; jmp 0xfffaacea

loc_fffaace4:
or ecx, 0x80000

loc_fffaacea:
inc edx
mov dword [eax], ecx
add eax, 0x10
cmp edx, 0x10
jne short loc_fffaacc9  ; jne 0xfffaacc9
jmp near loc_fffaac16  ; jmp 0xfffaac16

loc_fffaacfa:
push eax
mov edi, dword [ebp - 0x188]
push 0xbb8
push edi
push dword [ebp - 0x1b0]
call dword [edi + 4]  ; ucall
mov edx, dword [0xf0008d0c]
add esp, 0x10
shr edx, 0x14
mov dword [0xf0008d08], 0x10000
and edx, 1
mov cl, 0x64

loc_fffaad2b:
movzx ebx, word [0xf0008d08]
cmp bx, 0xffff
jne short loc_fffaad67  ; jne 0xfffaad67
push eax
mov byte [ebp - 0x238], dl
mov byte [ebp - 0x23c], cl
push 0x3e8
push edi
push dword [ebp - 0x1b0]
call dword [edi + 4]  ; ucall
mov cl, byte [ebp - 0x23c]
add esp, 0x10
dec cl
mov dl, byte [ebp - 0x238]
jne short loc_fffaad2b  ; jne 0xfffaad2b

loc_fffaad67:
cmp byte [ebp - 0x1ba], 0
jne loc_fffaae5b  ; jne 0xfffaae5b
test dl, dl
jne short loc_fffaadad  ; jne 0xfffaadad
mov ecx, 7
xor edx, edx
mov eax, ebx
call fcn_fffb6ec2  ; call 0xfffb6ec2
mov word [ebp - 0x1ac], ax
mov ecx, 0xb
mov edx, 8
mov eax, ebx
call fcn_fffb6ec2  ; call 0xfffb6ec2
movzx esi, ax
mov ecx, 0xf
mov edx, 0xc
jmp short loc_fffaade0  ; jmp 0xfffaade0

loc_fffaadad:
mov ecx, 8
mov edx, 0xf
mov eax, ebx
call fcn_fffb6ec2  ; call 0xfffb6ec2
mov word [ebp - 0x1ac], ax
mov ecx, 4
mov edx, 7
mov eax, ebx
call fcn_fffb6ec2  ; call 0xfffb6ec2
movzx esi, ax
xor ecx, ecx
mov edx, 3

loc_fffaade0:
mov eax, ebx
call fcn_fffb6ec2  ; call 0xfffb6ec2
cmp word [ebp - 0x1ac], 0
je short loc_fffaae12  ; je 0xfffaae12
movzx ecx, word [ebp - 0x1ac]
mov edx, dword [0xf0008224]
and edx, 0xffffffe0
or ecx, edx
mov dword [0xf0008224], ecx
mov word [0xf00080f0], 0x800

loc_fffaae12:
test si, si
je short loc_fffaae31  ; je 0xfffaae31
mov edx, dword [0xf0009224]
and edx, 0xffffffe0
or esi, edx
mov dword [0xf0009224], esi
mov word [0xf00090f0], 0x800

loc_fffaae31:
test ax, ax
je loc_fffaaf33  ; je 0xfffaaf33
movzx eax, ax
mov edx, dword [0xf000a224]
and edx, 0xffffffe0
or eax, edx
mov dword [0xf000a224], eax
mov word [0xf000a0f0], 0x800
jmp near loc_fffaaf33  ; jmp 0xfffaaf33

loc_fffaae5b:
cmp byte [ebp - 0x1ba], 2
jne loc_fffaaeed  ; jne 0xfffaaeed
test dl, dl
jne short loc_fffaae89  ; jne 0xfffaae89
mov ecx, 7
xor edx, edx
mov eax, ebx
call fcn_fffb6ec2  ; call 0xfffb6ec2
movzx esi, ax
mov ecx, 0xf
mov edx, 8
jmp short loc_fffaaea4  ; jmp 0xfffaaea4

loc_fffaae89:
mov ecx, 8
mov edx, 0xf
mov eax, ebx
call fcn_fffb6ec2  ; call 0xfffb6ec2
movzx esi, ax
xor ecx, ecx
mov edx, 7

loc_fffaaea4:
mov eax, ebx
call fcn_fffb6ec2  ; call 0xfffb6ec2
test si, si
je short loc_fffaaeca  ; je 0xfffaaeca
mov edx, dword [0xf0008224]
and edx, 0xffffffe0
or esi, edx
mov dword [0xf0008224], esi
mov word [0xf00080f0], 0x800

loc_fffaaeca:
test ax, ax
je short loc_fffaaf33  ; je 0xfffaaf33
movzx eax, ax
mov edx, dword [0xf0009224]
and edx, 0xffffffe0
or eax, edx
mov dword [0xf0009224], eax
mov word [0xf00090f0], 0x800
jmp short loc_fffaaf33  ; jmp 0xfffaaf33

loc_fffaaeed:
cmp byte [ebp - 0x1ba], 3
jne short loc_fffaaf33  ; jne 0xfffaaf33
movzx eax, bx
test dl, dl
jne short loc_fffaaf06  ; jne 0xfffaaf06
mov ecx, 0xf
xor edx, edx
jmp short loc_fffaaf0d  ; jmp 0xfffaaf0d

loc_fffaaf06:
xor ecx, ecx
mov edx, 0xf

loc_fffaaf0d:
call fcn_fffb6ec2  ; call 0xfffb6ec2
test ax, ax
je short loc_fffaaf33  ; je 0xfffaaf33
movzx eax, ax
mov edx, dword [0xf0008224]
and edx, 0xffffffe0
or eax, edx
mov dword [0xf0008224], eax
mov word [0xf00080f0], 0x800

loc_fffaaf33:
mov ebx, dword [0xf0030d0c]
or esi, 0xffffffff
shr ebx, 0x14
and ebx, 1
mov byte [ebp - 0x1ac], bl
mov dword [0xf0030d08], 0x10000
mov bl, 0x64

loc_fffaaf54:
mov ax, word [0xf0030d08]
and esi, eax
mov eax, esi
and eax, 0xf
cmp ax, 0xf
je short loc_fffaaf75  ; je 0xfffaaf75

loc_fffaaf67:
movzx eax, si
cmp byte [ebp - 0x1ac], 0
je short loc_fffaaf8e  ; je 0xfffaaf8e
jmp short loc_fffaaf97  ; jmp 0xfffaaf97

loc_fffaaf75:
push eax
push 0x3e8
push edi
push dword [ebp - 0x1b0]
call dword [edi + 4]  ; ucall
add esp, 0x10
dec bl
jne short loc_fffaaf54  ; jne 0xfffaaf54
jmp short loc_fffaaf67  ; jmp 0xfffaaf67

loc_fffaaf8e:
mov ecx, 3
xor edx, edx
jmp short loc_fffaaf9e  ; jmp 0xfffaaf9e

loc_fffaaf97:
xor ecx, ecx
mov edx, 3

loc_fffaaf9e:
call fcn_fffb6ec2  ; call 0xfffb6ec2
test ax, ax
je short loc_fffaafc4  ; je 0xfffaafc4
movzx eax, ax
mov edx, dword [0xf0030224]
and edx, 0xffffffe0
or eax, edx
mov dword [0xf0030224], eax
mov word [0xf00300f0], 0x800

loc_fffaafc4:
mov al, byte [0xf00f80a2]
mov edx, dword [ebp - 0x184]
test al, 0x20
jne loc_fffac390  ; jne 0xfffac390

loc_fffaafd7:
test edx, edx
je short loc_fffaafdf  ; je 0xfffaafdf
mov byte [edx + 0x2e], 0

loc_fffaafdf:
mov esi, dword [ebp - 0x188]
test edx, edx
mov dword [ebp - 0x1c8], esi
je short loc_fffaaffa  ; je 0xfffaaffa
mov cl, byte [edx + 0x2e]
mov byte [ebp - 0x1b4], cl
jmp short loc_fffab001  ; jmp 0xfffab001

loc_fffaaffa:
mov byte [ebp - 0x1b4], 0

loc_fffab001:
mov al, byte [ebp - 0x1ba]
mov byte [ebp - 0x1d4], 0
sub eax, 2
cmp al, 1
ja short loc_fffab024  ; ja 0xfffab024
movzx eax, al
mov al, byte [eax + ref_fffc9c74]  ; mov al, byte [eax - 0x3638c]
mov byte [ebp - 0x1d4], al

loc_fffab024:
mov byte [ebp - 0x1c4], 0xa
xor ebx, ebx
jmp near loc_fffab0de  ; jmp 0xfffab0de

loc_fffab032:
cmp byte [ebp - 0x1ac], 3
mov cl, byte [ebp - 0x1ac]
mov edi, 0
cmovne edi, ecx
sete cl
lea esi, [ecx + ecx*4 + 1]

loc_fffab04e:
mov cl, byte [ebp - 0x1d4]
and ecx, eax
cmp al, cl
je short loc_fffab08f  ; je 0xfffab08f
mov cl, byte [ebp - 0x1b4]
or ecx, ebx
and ecx, eax
cmp al, cl
je short loc_fffab08f  ; je 0xfffab08f
and esi, 0xff
and edi, 0xff
shl esi, 0xf
mov cl, bl
shl edi, 0xc
or ecx, eax
add esi, edi
mov si, word [esi - 0xffffee6]
test si, 2
cmove ebx, ecx

loc_fffab08f:
inc byte [ebp - 0x1ac]
add eax, eax
cmp byte [ebp - 0x1ac], 4
jne short loc_fffab032  ; jne 0xfffab032
mov al, byte [ebp - 0x1b4]
or eax, ebx
inc al
je short loc_fffab0f3  ; je 0xfffab0f3
push eax
mov esi, dword [ebp - 0x1c8]
mov dword [ebp - 0x238], edx
push 0x2710
push dword [ebp - 0x1c8]
push dword [ebp - 0x1b0]
call dword [esi + 4]  ; ucall
add esp, 0x10
dec byte [ebp - 0x1c4]
mov edx, dword [ebp - 0x238]
je short loc_fffab0f3  ; je 0xfffab0f3

loc_fffab0de:
mov byte [ebp - 0x1ac], 0
mov al, 1
xor edi, edi
mov esi, 1
jmp near loc_fffab04e  ; jmp 0xfffab04e

loc_fffab0f3:
test edx, edx
je short loc_fffab100  ; je 0xfffab100
not ebx
mov byte [edx + 0x2d], 1
mov byte [edx + 0x2e], bl

loc_fffab100:
mov eax, dword [0xf0008250]
and eax, 0xfffffffb
mov dword [0xf0008250], eax
mov eax, dword [0xf0009250]
and eax, 0xfffffffb
mov dword [0xf0009250], eax
mov eax, dword [0xf000a250]
and eax, 0xfffffffb
mov dword [0xf000a250], eax
mov eax, dword [0xf0030250]
and eax, 0xfffffffb
mov dword [0xf0030250], eax

loc_fffab134:
cmp byte [ebp - 0x1ff], 0x50
jne short loc_fffab14b  ; jne 0xfffab14b
mov ax, word [0xf00080a8]
and al, 0x1f
mov word [0xf00080a8], ax

loc_fffab14b:
mov al, byte [0xf00300ba]
shr al, 6
and eax, 1
mov byte [ebp - 0x14f], al
mov al, byte [0xf00080ba]
shr al, 6
and eax, 1
mov byte [ebp - 0x149], al
mov al, byte [0xf00090ba]
shr al, 6
and eax, 1
mov byte [ebp - 0x143], al
mov al, byte [0xf000a0ba]
shr al, 6
and eax, 1
cmp byte [ebp - 0x1b9], 0
mov byte [ebp - 0x13d], al
je loc_fffab296  ; je 0xfffab296
mov edx, dword [ebp - 0x1b8]
mov eax, dword [edx + 0xd]
cmp byte [eax + 0x29], 1
jne loc_fffab296  ; jne 0xfffab296
mov ax, word [0xf0008000]
mov ebx, dword [ebp - 0x188]
inc ax
je short loc_fffab1f5  ; je 0xfffab1f5
mov eax, dword [0xf0008214]
test ax, ax
je short loc_fffab1f5  ; je 0xfffab1f5
shr eax, 0x10
and eax, 0xf
cmp eax, 6
jbe short loc_fffab1f5  ; jbe 0xfffab1f5
push edi
push dword [ebp - 0x1c0]
mov ecx, dword [ebp - 0x1d0]
mov edx, ebx
push 0x10
mov eax, dword [ebp - 0x1b0]
push 1
call fcn_fffa9bd3  ; call 0xfffa9bd3
add esp, 0x10

loc_fffab1f5:
mov ax, word [0xf0030000]
inc ax
je short loc_fffab235  ; je 0xfffab235
mov eax, dword [0xf0030214]
test ax, ax
je short loc_fffab235  ; je 0xfffab235
shr eax, 0x10
and eax, 0xf
cmp eax, 6
jbe short loc_fffab235  ; jbe 0xfffab235
push esi
push dword [ebp - 0x1c0]
mov ecx, dword [ebp - 0x1d0]
mov edx, ebx
push 4
mov eax, dword [ebp - 0x1b0]
push 6
call fcn_fffa9bd3  ; call 0xfffa9bd3
add esp, 0x10

loc_fffab235:
mov ax, word [0xf00080d0]
and eax, 0xfffffff0
or eax, 3
mov word [0xf00080d0], ax
mov ax, word [0xf00090d0]
and eax, 0xfffffff0
or eax, 3
mov word [0xf00090d0], ax
mov ax, word [0xf000a0d0]
and eax, 0xfffffff0
or eax, 3
mov word [0xf000a0d0], ax
mov ax, word [0xf00300d0]
and eax, 0xfffffff0
or eax, 2
mov word [0xf00300d0], ax
mov eax, dword [ebp - 0x188]
push ebx
push 0x186a0
push eax
push dword [ebp - 0x1b0]
call dword [eax + 4]  ; ucall
add esp, 0x10

loc_fffab296:
cmp byte [ebp - 0x1bb], 3
seta al
test byte [ebp - 0x1b9], al
je loc_fffabd4d  ; je 0xfffabd4d
mov edx, dword [ebp - 0x1b8]
mov ebx, dword [ebp - 0x184]
mov esi, dword [ebp - 0x188]
mov dword [ebp - 0x1d4], ebx
mov dword [ebp - 0x1ac], esi
mov ecx, dword [edx + 0xd]
cmp byte [ecx + 0x2b], 1
jne loc_fffabd4d  ; jne 0xfffabd4d
xor eax, eax
mov esi, 1

loc_fffab2de:
mov ebx, dword [ebp - 0x1a8]
mov dl, byte [ebx + 1]
cmp dl, 6
je short loc_fffab33a  ; je 0xfffab33a
movzx ebx, byte [ebx + 3]
movzx edi, dl
shl edi, 0xf
mov bl, byte [ecx + ebx + 4]
mov byte [ebp - 0x1b4], bl
mov ebx, dword [ebp - 0x1a8]
movzx edx, byte [ebx]
shl edx, 0x14
add edi, edx
movzx edx, byte [ebx + 2]
shl edx, 0xc
lea edx, [edi + edx - 0x10000000]
mov dx, word [edx]
inc dx
je short loc_fffab33a  ; je 0xfffab33a
movzx edx, byte [ebp - 0x1b4]
cmp edx, 3
sete bl
test edx, edx
sete dl
or bl, dl
cmovne eax, esi

loc_fffab33a:
add dword [ebp - 0x1a8], 6
mov edi, dword [ebp - 0x19c]
cmp dword [ebp - 0x1a8], edi
jne short loc_fffab2de  ; jne 0xfffab2de
test al, al
je loc_fffabd4d  ; je 0xfffabd4d
mov al, byte [ebp - 0x1ba]
mov byte [ebp - 0x1df], 0
add eax, eax
not eax
and eax, 6
mov byte [ebp - 0x1b4], al
or byte [ebp - 0x1b4], 1

loc_fffab378:
movzx ebx, byte [ebp - 0x1df]
mov edi, ebx
mov dword [ebp - 0x1a8], ebx
shl edi, 0xc
mov eax, dword [edi - 0xfff7f54]
and eax, 0xf
cmp eax, 3
je short loc_fffab3ac  ; je 0xfffab3ac

loc_fffab398:
inc byte [ebp - 0x1df]
shr byte [ebp - 0x1b4], 1
je loc_fffabd4d  ; je 0xfffabd4d
jmp short loc_fffab378  ; jmp 0xfffab378

loc_fffab3ac:
mov eax, dword [edi - 0xfff7fe8]
and eax, 0xff0000ff
or eax, 0x10100
mov dword [edi - 0xfff7fe8], eax
mov word [0xf0100000], 0
mov ecx, dword [0xf0100000]
mov dx, word [edi - 0xfff7ee6]
xor eax, eax
and dl, 2
jne short loc_fffab41f  ; jne 0xfffab41f
mov dl, byte [0xf0100034]
cmp dl, 0xff
jne short loc_fffab402  ; jne 0xfffab402
jmp short loc_fffab41f  ; jmp 0xfffab41f

loc_fffab3ec:
and edx, 0xfc
mov al, byte [edx - 0xff00000]
cmp al, 0x10
je short loc_fffab40a  ; je 0xfffab40a
mov dl, byte [edx - 0xfefffff]

loc_fffab402:
test dl, dl
jne short loc_fffab3ec  ; jne 0xfffab3ec
xor eax, eax
jmp short loc_fffab41f  ; jmp 0xfffab41f

loc_fffab40a:
xor eax, eax
test edx, edx
je short loc_fffab41f  ; je 0xfffab41f
mov eax, dword [edx - 0xfeffff4]
and eax, 0xf
cmp eax, 3
sete al

loc_fffab41f:
mov edx, dword [edi - 0xfff7fe8]
and edx, 0xff0000ff
cmp dword [ebp - 0x1d4], 0
mov dword [edi - 0xfff7fe8], edx
je short loc_fffab460  ; je 0xfffab460
mov esi, dword [ebp - 0x1d4]
cmp byte [esi + 0x30], 0
je loc_fffac3a8  ; je 0xfffac3a8
mov ebx, dword [ebp - 0x1a8]
mov dl, 1
cmp dword [esi + ebx*4 + 0x18], ecx
jne loc_fffac3aa  ; jne 0xfffac3aa
xor ecx, ecx
jmp short loc_fffab464  ; jmp 0xfffab464

loc_fffab460:
mov cl, 1
xor edx, edx

loc_fffab464:
test al, al
je loc_fffab398  ; je 0xfffab398
mov ax, word [edi - 0xfff7f4e]
lea esi, [edi - 0xfff7f4e]
mov ebx, eax
mov dword [ebp - 0x1f4], esi
shr ebx, 4
mov byte [ebp - 0x1fd], 6
and ebx, 0x3f
mov eax, ebx
shr eax, 1
cmp ebx, 2
cmovb eax, ebx
cmp byte [ebp - 0x1df], 1
mov dword [ebp - 0x1d8], eax
ja short loc_fffab4ba  ; ja 0xfffab4ba
movzx eax, byte [ebp - 0x1df]
mov al, byte [eax + ref_fffc9c76]  ; mov al, byte [eax - 0x3638a]
mov byte [ebp - 0x1fd], al

loc_fffab4ba:
movzx eax, byte [ebp - 0x1df]
xor edx, 1
shl eax, 0xc
mov byte [ebp - 0x1fe], dl
sub eax, 0xfff8000
mov byte [ebp - 0x1dd], 0
mov dword [ebp - 0x214], eax
or byte [ebp - 0x1fe], cl
jmp near loc_fffabd2d  ; jmp 0xfffabd2d

loc_fffab4ea:
cmp byte [ebp - 0x1fe], 0
jne short loc_fffab50f  ; jne 0xfffab50f
mov edx, dword [ebp - 0x1b8]
cmp byte [edx], 0x15
jbe loc_fffabc6b  ; jbe 0xfffabc6b
mov eax, dword [edx + 0xd]
cmp byte [eax + 0x5f], 1
jne loc_fffabc6b  ; jne 0xfffabc6b

loc_fffab50f:
mov edx, dword [ebp - 0x1b8]
mov byte [ebp - 0x13b], 7
mov byte [ebp - 0xda], 3
mov byte [ebp - 0x79], 5
mov eax, dword [edx + 0xd]
cmp byte [edx], 0x18
movzx ebx, byte [eax + 0x2e]
mov dword [ebp - 0x224], ebx
movzx ebx, byte [eax + 0x2f]
jbe short loc_fffab556  ; jbe 0xfffab556
movzx esi, byte [eax + 0x60]
mov dl, byte [eax + 0x62]
mov dword [ebp - 0x210], esi
mov byte [ebp - 0x200], dl
movzx ecx, byte [eax + 0x61]
jmp short loc_fffab56c  ; jmp 0xfffab56c

loc_fffab556:
mov byte [ebp - 0x200], 0
mov ecx, 0x14
mov dword [ebp - 0x210], 2

loc_fffab56c:
movzx eax, word [eax + 0x2c]
mov esi, dword [ebp - 0x1f8]
mov dword [ebp - 0x1e8], eax
mov eax, dword [ebp - 0x214]
xor edx, edx
mov dword [ebp - 0x230], ebx
mov dword [ebp - 0x234], ecx
lea esi, [eax + esi*4 + 0xda0]
mov eax, dword [ebp - 0x1e8]
mov dword [ebp - 0x218], esi
mov esi, 0xa
div esi
mov edx, dword [ebp - 0x1e8]
shr edx, 1
imul esi, edx, 0x3e8
mov dword [ebp - 0x204], edx
mov dword [ebp - 0x21c], esi
imul esi, eax, 0x3e8
mov dword [ebp - 0x208], eax
mov dword [ebp - 0x220], esi
lea esi, [ebp - 0x13b]
mov dword [ebp - 0x1dc], esi
mov al, byte [ebp - 0x1dd]
movzx esi, byte [ebp - 0x1dd]
add eax, eax
mov dword [ebp - 0x1c8], esi
mov byte [ebp - 0x225], al
lea esi, [ebp + esi*4 - 0x11a]
mov dword [ebp - 0x1c4], esi
lea esi, [ebp - 0x18]
mov dword [ebp - 0x1a0], esi
jmp near loc_fffabc03  ; jmp 0xfffabc03

loc_fffab618:
mov ebx, dword [ebp - 0x1dc]
mov dword [ebx + eax + 1], 0
mov dword [ebx + eax + 0x21], 0
mov dword [ebx + eax + 0x41], 0
add eax, 4
cmp eax, 0x20
jne short loc_fffab618  ; jne 0xfffab618
sub esp, 0xc
mov ecx, dword [ebp - 0x1a8]
push 1
mov edx, dword [ebp - 0x1ac]
mov eax, dword [ebp - 0x1b0]
call fcn_fffc6388  ; call 0xfffc6388
mov esi, dword [ebp - 0x218]
mov eax, dword [edi - 0xfff7268]
movzx ecx, byte [ebx]
or eax, 1
mov dword [edi - 0xfff7268], eax
mov eax, ecx
shl eax, 0x18
shl ecx, 8
mov edx, dword [esi]
or eax, ecx
and edx, 0xf0fff0ff
or eax, edx
mov ecx, dword [ebp - 0x1a8]
mov dword [esi], eax
mov edx, dword [ebp - 0x1ac]
mov eax, dword [ebp - 0x1b0]
mov dword [esp], 3
call fcn_fffc6388  ; call 0xfffc6388
mov ebx, dword [ebp - 0x1f4]
add esp, 0x10
mov ax, word [ebx]
and eax, 0xf
cmp ax, 3
jne loc_fffabbe7  ; jne 0xfffabbe7
push ecx
mov edx, 1
xor eax, eax
push ecx
push dword [ebp - 0x1c0]
mov ecx, dword [ebp - 0x1a8]
xor esi, esi
push 0
call fcn_fffb5f5f  ; call 0xfffb5f5f
add esp, 0x10
jmp near loc_fffab85d  ; jmp 0xfffab85d

loc_fffab6e5:
mov ebx, dword [ebp - 0x230]
jmp near loc_fffab7f3  ; jmp 0xfffab7f3

loc_fffab6f0:
push ecx
mov edx, 1
xor eax, eax
push ecx
push dword [ebp - 0x1c0]
push dword [ebp - 0x1c8]
mov ecx, dword [ebp - 0x1a8]
call fcn_fffb5f5f  ; call 0xfffb5f5f
pop eax
push dword [ebp - 0x1c8]
movzx ecx, byte [ebx + ref_fffc9c78]  ; movzx ecx, byte [ebx - 0x36388]
mov edx, ebx
mov eax, 1
call fcn_fffb6076  ; call 0xfffb6076
add esp, 0xc
mov edx, dword [ebp - 0x1ac]
push dword [ebp - 0x21c]
push dword [ebp - 0x1ac]
push dword [ebp - 0x1b0]
call dword [edx + 4]  ; ucall
pop eax
pop edx
push dword [ebp - 0x1c0]
push dword [ebp - 0x1c8]
mov ecx, dword [ebp - 0x1a8]
mov edx, 1
xor eax, eax
call fcn_fffb5f5f  ; call 0xfffb5f5f
mov ecx, dword [ebp - 0x204]
add esp, 0x10
mov dword [ebp - 0x1cc], ecx
jmp short loc_fffab7c4  ; jmp 0xfffab7c4

loc_fffab779:
mov edx, dword [ebp - 0x1ac]
push eax
push dword [ebp - 0x220]
push dword [ebp - 0x1ac]
push dword [ebp - 0x1b0]
call dword [edx + 4]  ; ucall
mov eax, dword [ebp - 0x208]
add dword [ebp - 0x1cc], eax
pop eax
pop edx
push dword [ebp - 0x1c0]
push dword [ebp - 0x1c8]
mov ecx, dword [ebp - 0x1a8]
mov edx, 1
xor eax, eax
call fcn_fffb5f5f  ; call 0xfffb5f5f
add esp, 0x10

loc_fffab7c4:
mov edx, dword [ebp - 0x1e8]
cmp dword [ebp - 0x1cc], edx
setb cl
test eax, eax
sete dl
test cl, dl
jne short loc_fffab779  ; jne 0xfffab779
test eax, eax
je short loc_fffab800  ; je 0xfffab800
mov ecx, dword [ebp - 0x1f4]
mov ax, word [ecx]
and eax, 0xf
cmp ax, 3
jne short loc_fffab7fe  ; jne 0xfffab7fe
dec ebx

loc_fffab7f3:
cmp ebx, 3
ja loc_fffab6f0  ; ja 0xfffab6f0
jmp short loc_fffab800  ; jmp 0xfffab800

loc_fffab7fe:
xor ebx, ebx

loc_fffab800:
sub esp, 0xc
xor ecx, ecx
push dword [ebp - 0x1c8]
xor edx, edx
xor eax, eax
call fcn_fffb6076  ; call 0xfffb6076
mov eax, dword [ebp - 0x1c4]
mov ecx, dword [ebp - 0x1a8]
mov edx, dword [ebp - 0x1ac]
inc esi
add dword [eax - 0x20], ebx
mov eax, dword [ebp - 0x1b0]
mov dword [esp], 1
call fcn_fffc6388  ; call 0xfffc6388
mov ecx, dword [ebp - 0x1a8]
mov edx, dword [ebp - 0x1ac]
mov eax, dword [ebp - 0x1b0]
mov dword [esp], 3
call fcn_fffc6388  ; call 0xfffc6388
add esp, 0x10

loc_fffab85d:
cmp esi, dword [ebp - 0x224]
jb loc_fffab6e5  ; jb 0xfffab6e5
movzx ebx, byte [ebp - 0x225]
mov byte [ebp - 0x1de], 0
mov dword [ebp - 0x20c], ebx
jmp near loc_fffabbbc  ; jmp 0xfffabbbc

loc_fffab882:
mov esi, dword [ebp - 0x234]
mov dword [ebp - 0x174], 0
mov dword [ebp - 0x16c], 0
mov dword [ebp - 0x170], 0
mov dword [ebp - 0x168], 0
mov dword [ebp - 0x1cc], esi
jmp near loc_fffabade  ; jmp 0xfffabade

loc_fffab8bb:
mov ecx, dword [ebp - 0x1a8]
mov edx, 1
xor eax, eax
lea ebx, [ebp - 0x164]
call fcn_fffb5ee7  ; call 0xfffb5ee7
mov byte [ebp - 0x18a], 0x31
mov byte [ebp - 0x189], 0x32
mov dword [ebp - 0x1f0], ebx
mov dword [ebp - 0x1ec], 0
jmp near loc_fffab993  ; jmp 0xfffab993

loc_fffab8f6:
cmp dword [esi], 0
mov byte [ebp - 0x226], bl
jne short loc_fffab92a  ; jne 0xfffab92a
sub esp, 0xc
mov edx, dword [ebp - 0x22c]
push dword [ebp - 0x1d0]
movzx ecx, byte [ebp + ebx - 0x18a]
mov eax, 1
call fcn_fffc63f5  ; call 0xfffc63f5
and eax, 0x3f
add esp, 0x10
mov dword [esi], eax

loc_fffab92a:
mov eax, ebx
xor eax, 1
and al, byte [ebp - 0x1de]
test al, 1
jne short loc_fffab94c  ; jne 0xfffab94c
mov al, byte [ebp - 0x1de]
xor eax, 1
and al, byte [ebp - 0x226]
test al, 1
je short loc_fffab95f  ; je 0xfffab95f

loc_fffab94c:
mov edx, dword [ebp - 0x1f0]
mov eax, dword [esi]
sub eax, dword [ebp - 0x1cc]
mov dword [edx + ebx*8], eax
jmp short loc_fffab970  ; jmp 0xfffab970

loc_fffab95f:
mov ecx, dword [ebp - 0x1f0]
mov eax, dword [ebp - 0x1cc]
add eax, dword [esi]
mov dword [ecx + ebx*8], eax

loc_fffab970:
inc ebx
add esi, 8
cmp ebx, 2
jne loc_fffab8f6  ; jne 0xfffab8f6
inc dword [ebp - 0x1ec]
add dword [ebp - 0x1f0], 4
cmp dword [ebp - 0x1ec], 2
je short loc_fffab9b9  ; je 0xfffab9b9

loc_fffab993:
mov ebx, dword [ebp - 0x1ec]
mov eax, dword [ebp - 0x1ec]
add eax, dword [ebp - 0x20c]
mov dword [ebp - 0x22c], eax
lea esi, [ebp + ebx*4 - 0x174]
xor ebx, ebx
jmp near loc_fffab8f6  ; jmp 0xfffab8f6

loc_fffab9b9:
xor ebx, ebx

loc_fffab9bb:
push eax
push dword [ebp - 0x1d0]
push dword [ebp + ebx*4 - 0x164]
mov esi, dword [ebp - 0x20c]
xor eax, eax
add esi, ebx
mov edx, 1
push 0x31
mov ecx, esi
call fcn_fffb6133  ; call 0xfffb6133
add esp, 0xc
xor eax, eax
push dword [ebp - 0x1d0]
push dword [ebp + ebx*4 - 0x15c]
mov ecx, esi
mov edx, 1
push 0x32
inc ebx
call fcn_fffb6133  ; call 0xfffb6133
add esp, 0x10
cmp ebx, 2
jne short loc_fffab9bb  ; jne 0xfffab9bb
mov ebx, dword [ebp - 0x1ac]
push eax
push dword [ebp - 0x21c]
push dword [ebp - 0x1ac]
push dword [ebp - 0x1b0]
call dword [ebx + 4]  ; ucall
mov ecx, dword [ebp - 0x1a8]
mov edx, 1
xor eax, eax
call fcn_fffb5ee7  ; call 0xfffb5ee7
add esp, 0x10
mov ebx, dword [ebp - 0x204]
jmp short loc_fffaba7a  ; jmp 0xfffaba7a

loc_fffaba43:
mov esi, dword [ebp - 0x1ac]
push eax
push dword [ebp - 0x220]
push dword [ebp - 0x1ac]
push dword [ebp - 0x1b0]
call dword [esi + 4]  ; ucall
mov ecx, dword [ebp - 0x1a8]
mov edx, 1
xor eax, eax
add ebx, dword [ebp - 0x208]
call fcn_fffb5ee7  ; call 0xfffb5ee7
add esp, 0x10

loc_fffaba7a:
cmp ebx, dword [ebp - 0x1e8]
setb cl
test eax, eax
sete dl
test cl, dl
jne short loc_fffaba43  ; jne 0xfffaba43
mov ebx, dword [ebp - 0x1f4]
test eax, eax
mov dx, word [ebx]
jne short loc_fffabad8  ; jne 0xfffabad8
mov eax, edx
and eax, 0xf
cmp ax, 3
jne short loc_fffabad8  ; jne 0xfffabad8

loc_fffabaa4:
mov eax, dword [ebp - 0x174]
xor ebx, ebx
mov dword [ebp - 0x164], eax
mov eax, dword [ebp - 0x16c]
mov dword [ebp - 0x15c], eax
mov eax, dword [ebp - 0x170]
mov dword [ebp - 0x160], eax
mov eax, dword [ebp - 0x168]
mov dword [ebp - 0x158], eax
jmp short loc_fffabaed  ; jmp 0xfffabaed

loc_fffabad8:
dec dword [ebp - 0x1cc]

loc_fffabade:
cmp dword [ebp - 0x1cc], 3
ja loc_fffab8bb  ; ja 0xfffab8bb
jmp short loc_fffabaa4  ; jmp 0xfffabaa4

loc_fffabaed:
push eax
push dword [ebp - 0x1d0]
push dword [ebp + ebx*4 - 0x164]
mov esi, dword [ebp - 0x20c]
xor eax, eax
add esi, ebx
mov edx, 1
push 0x31
mov ecx, esi
call fcn_fffb6133  ; call 0xfffb6133
add esp, 0xc
xor eax, eax
push dword [ebp - 0x1d0]
push dword [ebp + ebx*4 - 0x15c]
mov ecx, esi
mov edx, 1
push 0x32
inc ebx
call fcn_fffb6133  ; call 0xfffb6133
add esp, 0x10
cmp ebx, 2
jne short loc_fffabaed  ; jne 0xfffabaed
cmp byte [ebp - 0x1de], 0
mov ebx, dword [ebp - 0x1cc]
mov esi, dword [ebp - 0x1c4]
jne short loc_fffabb55  ; jne 0xfffabb55
add dword [esi], ebx
jmp short loc_fffabb58  ; jmp 0xfffabb58

loc_fffabb55:
add dword [esi + 0x20], ebx

loc_fffabb58:
sub esp, 0xc
mov ecx, dword [ebp - 0x1a8]
push 1
mov edx, dword [ebp - 0x1ac]
mov eax, dword [ebp - 0x1b0]
call fcn_fffc6388  ; call 0xfffc6388
mov ecx, dword [ebp - 0x1a8]
mov edx, dword [ebp - 0x1ac]
mov eax, dword [ebp - 0x1b0]
mov dword [esp], 3
call fcn_fffc6388  ; call 0xfffc6388
inc dword [ebp - 0x1fc]
add esp, 0x10

loc_fffabb9b:
mov esi, dword [ebp - 0x210]
cmp dword [ebp - 0x1fc], esi
jne loc_fffab882  ; jne 0xfffab882
inc byte [ebp - 0x1de]
cmp byte [ebp - 0x1de], 2
je short loc_fffabbc8  ; je 0xfffabbc8

loc_fffabbbc:
mov dword [ebp - 0x1fc], 0
jmp short loc_fffabb9b  ; jmp 0xfffabb9b

loc_fffabbc8:
push ecx
mov edx, 1
xor eax, eax
push ecx
push dword [ebp - 0x1c0]
mov ecx, dword [ebp - 0x1a8]
push 0
call fcn_fffb5f5f  ; call 0xfffb5f5f
add esp, 0x10

loc_fffabbe7:
add dword [ebp - 0x1dc], 0x61
add dword [ebp - 0x1c4], 0x61
mov ebx, dword [ebp - 0x1a0]
cmp dword [ebp - 0x1dc], ebx
je short loc_fffabc0a  ; je 0xfffabc0a

loc_fffabc03:
xor eax, eax
jmp near loc_fffab618  ; jmp 0xfffab618

loc_fffabc0a:
mov esi, dword [ebp - 0x1c8]
xor ebx, ebx
xor ecx, ecx
lea edx, [ebp + esi*4 - 0x13a]
xor esi, esi

loc_fffabc1d:
cmp byte [ebp - 0x200], 0
mov eax, dword [edx]
jne short loc_fffabc2e  ; jne 0xfffabc2e
add eax, dword [edx + 0x20]
add eax, dword [edx + 0x40]

loc_fffabc2e:
cmp eax, esi
jbe short loc_fffabc36  ; jbe 0xfffabc36
mov ebx, ecx
mov esi, eax

loc_fffabc36:
inc ecx
add edx, 0x61
cmp ecx, 3
jne short loc_fffabc1d  ; jne 0xfffabc1d
cmp dword [ebp - 0x1d4], 0
je short loc_fffabc8b  ; je 0xfffabc8b
imul eax, ebx, 0x61
mov edx, dword [ebp - 0x1d4]
movzx ecx, byte [ebp - 0x1fd]
add edx, dword [ebp - 0x1c8]
mov al, byte [ebp + eax - 0x13b]
mov byte [ecx + edx + 0x24], al
jmp short loc_fffabc8b  ; jmp 0xfffabc8b

loc_fffabc6b:
movzx eax, byte [ebp - 0x1dd]
add eax, dword [ebp - 0x1d4]
movzx edx, byte [ebp - 0x1fd]
xor ebx, ebx
mov al, byte [edx + eax + 0x24]
mov byte [ebp - 0x13b], al

loc_fffabc8b:
sub esp, 0xc
mov ecx, dword [ebp - 0x1a8]
push 1
mov edx, dword [ebp - 0x1ac]
mov eax, dword [ebp - 0x1b0]
call fcn_fffc6388  ; call 0xfffc6388
imul ebx, ebx, 0x61
mov eax, dword [edi - 0xfff7268]
or eax, 1
mov esi, dword [ebp - 0x1f8]
movzx ebx, byte [ebp + ebx - 0x13b]
mov dword [edi - 0xfff7268], eax
mov eax, dword [ebp - 0x214]
lea ecx, [eax + esi*4 + 0xda0]
mov eax, ebx
shl eax, 8
mov edx, dword [ecx]
shl ebx, 0x18
and edx, 0xf0fff0ff
or eax, ebx
or eax, edx
mov edx, dword [ebp - 0x1ac]
mov dword [ecx], eax
mov ecx, dword [ebp - 0x1a8]
mov eax, dword [ebp - 0x1b0]
mov dword [esp], 3
call fcn_fffc6388  ; call 0xfffc6388
pop eax
pop edx
push dword [ebp - 0x1c0]
mov ecx, dword [ebp - 0x1a8]
mov edx, 1
push 0
xor eax, eax
call fcn_fffb5f5f  ; call 0xfffb5f5f
inc byte [ebp - 0x1dd]
add esp, 0x10

loc_fffabd2d:
movzx ebx, byte [ebp - 0x1dd]
mov esi, dword [ebp - 0x1d8]
cmp ebx, esi
mov dword [ebp - 0x1f8], ebx
jb loc_fffab4ea  ; jb 0xfffab4ea
jmp near loc_fffab398  ; jmp 0xfffab398

loc_fffabd4d:
lea ebx, [ebp - 0x153]
mov byte [ebp - 0x1c0], 0
xor edi, edi
xor esi, esi
mov byte [ebp - 0x1b0], 0

loc_fffabd65:
mov al, byte [ebx + 3]
mov edx, dword [ebp - 0x1b8]
movzx ecx, byte [ebx + 1]
mov byte [ebp - 0x1a8], al
movzx eax, byte [ebx]
shl eax, 0x14
shl ecx, 0xf
add ecx, eax
movzx eax, byte [ebx + 2]
shl eax, 0xc
add ecx, eax
mov ax, word [ecx - 0x10000000]
inc ax
mov eax, dword [edx + 5]
je short loc_fffabda0  ; je 0xfffabda0
cmp byte [ebx + 4], 0
jne short loc_fffabdcb  ; jne 0xfffabdcb

loc_fffabda0:
cmp byte [eax + 5], 0
je loc_fffabf21  ; je 0xfffabf21

loc_fffabdaa:
cmp byte [ebp - 0x1a8], 0
sete dl
cmp byte [ebp - 0x1ba], 3
sete al
test dl, al
je loc_fffabee7  ; je 0xfffabee7
jmp near loc_fffabf90  ; jmp 0xfffabf90

loc_fffabdcb:
cmp byte [eax + 5], 0
jne short loc_fffabe10  ; jne 0xfffabe10
mov eax, dword [ecx - 0xfffffe8]
and eax, 0xff0000ff
or eax, 0x10100
mov dword [ecx - 0xfffffe8], eax
mov word [0xf0100000], 0
mov ax, word [ecx - 0xffffee6]
test al, 2
jne loc_fffabf21  ; jne 0xfffabf21
mov eax, dword [ecx - 0xfffffe8]
and eax, 0xff0000ff
mov dword [ecx - 0xfffffe8], eax

loc_fffabe10:
mov eax, dword [ecx - 0xffffda8]
or eax, 0x20000000
mov dword [ecx - 0xffffda8], eax
mov eax, dword [0xf0000068]
and eax, 0xfffffffe
mov edx, dword [0xf000006c]
mov edx, dword [eax + 0x1fc]
or edx, 0x200000
mov dword [eax + 0x1fc], edx
mov eax, dword [ecx - 0xffffe04]
or eax, 0x200000
cmp byte [ebp - 0x1bb], 3
setbe dl
cmp byte [ebp - 0x1e0], 0x50
mov dword [ecx - 0xffffe04], eax
setne al
or dl, al
jne short loc_fffabe91  ; jne 0xfffabe91

loc_fffabe6a:
mov eax, dword [ecx - 0xffffdd4]
xor ax, ax
or eax, 0x403c
mov dword [ecx - 0xffffdd4], eax
mov eax, dword [ecx - 0xffffdd8]
xor al, al
or eax, 0x1c
mov dword [ecx - 0xffffdd8], eax
jmp short loc_fffabeb8  ; jmp 0xfffabeb8

loc_fffabe91:
mov al, byte [ecx - 0xffff2cc]
or eax, 0x40
mov byte [ecx - 0xffff2cc], al
mov al, byte [ecx - 0xffffdb0]
or eax, 0xffffff80
cmp byte [ebp - 0x1b9], 0
mov byte [ecx - 0xffffdb0], al
jne short loc_fffabe6a  ; jne 0xfffabe6a

loc_fffabeb8:
mov ax, word [ecx - 0xffffee6]
test al, 2
jne loc_fffabdaa  ; jne 0xfffabdaa
mov al, byte [ecx - 0xfffff50]
or eax, 0x20
mov byte [ecx - 0xfffff50], al

loc_fffabed6:
mov ax, word [ecx - 0xfffff4e]
test ah, 8
jne short loc_fffabed6  ; jne 0xfffabed6
jmp near loc_fffabdaa  ; jmp 0xfffabdaa

loc_fffabee7:
cmp byte [ebp - 0x1a8], 1
sete dl
cmp byte [ebp - 0x1ba], 2
sete al
test dl, al
jne loc_fffabf9c  ; jne 0xfffabf9c
cmp byte [ebp - 0x1a8], 2
sete dl
cmp byte [ebp - 0x1ba], 0
sete al
test dl, al
jne loc_fffabfb4  ; jne 0xfffabfb4
jmp short loc_fffabf7f  ; jmp 0xfffabf7f

loc_fffabf21:
cmp byte [ebp - 0x1a8], 3
je short loc_fffabf6f  ; je 0xfffabf6f
cmp byte [ebp - 0x1ba], 3
je short loc_fffabfa3  ; je 0xfffabfa3
cmp byte [ebp - 0x1ba], 2
jne short loc_fffabf4c  ; jne 0xfffabf4c
cmp byte [ebp - 0x1a8], 0
mov edi, 1
je short loc_fffabf78  ; je 0xfffabf78
jmp short loc_fffabf95  ; jmp 0xfffabf95

loc_fffabf4c:
cmp byte [ebp - 0x1ba], 0
jne short loc_fffabf7f  ; jne 0xfffabf7f
cmp byte [ebp - 0x1a8], 0
je short loc_fffabf78  ; je 0xfffabf78
mov al, 1
cmp byte [ebp - 0x1a8], 1
cmove esi, eax
cmovne edi, eax
jmp short loc_fffabf7f  ; jmp 0xfffabf7f

loc_fffabf6f:
mov byte [ebp - 0x1c0], 1
jmp short loc_fffabf7f  ; jmp 0xfffabf7f

loc_fffabf78:
mov byte [ebp - 0x1b0], 1

loc_fffabf7f:
add ebx, 6
cmp ebx, dword [ebp - 0x19c]
jne loc_fffabd65  ; jne 0xfffabd65
jmp short loc_fffabfb4  ; jmp 0xfffabfb4

loc_fffabf90:
mov edi, 1

loc_fffabf95:
mov esi, 1
jmp short loc_fffabfb4  ; jmp 0xfffabfb4

loc_fffabf9c:
mov edi, 1
jmp short loc_fffabfb4  ; jmp 0xfffabfb4

loc_fffabfa3:
mov edi, 1
mov esi, 1
mov byte [ebp - 0x1b0], 1

loc_fffabfb4:
mov ecx, edi
mov ebx, esi
xor ecx, 1
and ecx, 1
test bl, bl
sete al
xor edx, edx
or cl, al
je short loc_fffabfe3  ; je 0xfffabfe3
cmp byte [ebp - 0x1b0], 0
jne short loc_fffabfda  ; jne 0xfffabfda
mov dl, byte [ebp - 0x1b0]
jmp short loc_fffabfe3  ; jmp 0xfffabfe3

loc_fffabfda:
mov dl, 1
mov byte [ebp - 0x1b0], 0

loc_fffabfe3:
cmp byte [ebp - 0x1c0], 0
je short loc_fffac01e  ; je 0xfffac01e
mov al, byte [0xf00300b0]
or eax, 0x10
mov byte [0xf00300b0], al
cmp byte [ebp - 0x1bc], 0
je short loc_fffac00f  ; je 0xfffac00f
mov al, byte [0xf0030d10]
or eax, 1
mov byte [0xf0030d10], al

loc_fffac00f:
mov ax, word [0xf0000054]
and ah, 0xdf
mov word [0xf0000054], ax

loc_fffac01e:
or dl, byte [ebp - 0x1b0]
je short loc_fffac05f  ; je 0xfffac05f
mov al, byte [0xf00080b0]
or eax, 0x10
mov byte [0xf00080b0], al
cmp byte [ebp - 0x1bc], 0
je short loc_fffac049  ; je 0xfffac049
mov al, byte [0xf0008d10]
or eax, 1
mov byte [0xf0008d10], al

loc_fffac049:
cmp byte [ebp - 0x1b0], 0
je short loc_fffac05f  ; je 0xfffac05f
mov al, byte [0xf0000054]
and eax, 0xfffffff7
mov byte [0xf0000054], al

loc_fffac05f:
mov eax, esi
test al, al
je short loc_fffac095  ; je 0xfffac095
mov al, byte [0xf00090b0]
or eax, 0x10
mov byte [0xf00090b0], al
cmp byte [ebp - 0x1bc], 0
je short loc_fffac088  ; je 0xfffac088
mov al, byte [0xf0009d10]
or eax, 1
mov byte [0xf0009d10], al

loc_fffac088:
mov al, byte [0xf0000054]
and eax, 0xfffffffb
mov byte [0xf0000054], al

loc_fffac095:
mov edx, edi
test dl, dl
je short loc_fffac0cb  ; je 0xfffac0cb
mov al, byte [0xf000a0b0]
or eax, 0x10
mov byte [0xf000a0b0], al
cmp byte [ebp - 0x1bc], 0
je short loc_fffac0be  ; je 0xfffac0be
mov al, byte [0xf000ad10]
or eax, 1
mov byte [0xf000ad10], al

loc_fffac0be:
mov al, byte [0xf0000054]
and eax, 0xfffffffd
mov byte [0xf0000054], al

loc_fffac0cb:
mov ecx, esi
test cl, cl
setne al
test byte [ebp - 0x1b0], al
je short loc_fffac11b  ; je 0xfffac11b
mov ebx, edi
test byte [ebp - 0x1c0], bl
je short loc_fffac11b  ; je 0xfffac11b
cmp byte [ebp - 0x1ff], 0x50
jne short loc_fffac104  ; jne 0xfffac104
mov edx, dword [ebp - 0x1e4]
mov al, byte [edx + 0x7010]
and eax, 0xfffffffe
mov byte [edx + 0x7010], al
jmp short loc_fffac130  ; jmp 0xfffac130

loc_fffac104:
mov ecx, dword [ebp - 0x1e4]
mov al, byte [ecx + 0x7010]
or eax, 1
mov byte [ecx + 0x7010], al
jmp short loc_fffac130  ; jmp 0xfffac130

loc_fffac11b:
mov ebx, dword [ebp - 0x1e4]
mov al, byte [ebx + 0x7010]
and eax, 0xfffffffe
mov byte [ebx + 0x7010], al

loc_fffac130:
mov edx, dword [ebp - 0x184]
test edx, edx
je short loc_fffac189  ; je 0xfffac189
mov ax, word [0xf000811a]
mov bx, word [0xf000911a]
shr ax, 1
xor eax, 1
and eax, 1
mov cl, al
or ecx, 2
and bl, 2
mov bx, word [0xf000a11a]
cmove eax, ecx
mov cl, al
or ecx, 4
and bl, 2
mov bx, word [0xf003011a]
cmove eax, ecx
mov cl, al
or ecx, 8
and bl, 2
cmove eax, ecx
not eax
cmp byte [edx + 0x2e], al
je short loc_fffac189  ; je 0xfffac189
mov byte [edx + 0x2e], al

loc_fffac189:
mov ecx, dword [ebp - 0x1b8]
cmp byte [ebp - 0x1e0], 0
sete dl
mov eax, dword [ecx + 1]
cmp word [eax + 0x25], 2
setne al
test dl, al
jne loc_fffac33d  ; jne 0xfffac33d
mov bl, byte [ebp - 0x1b0]
mov cl, byte [ebp - 0x1c0]
mov eax, dword [0xf0000048]
mov edx, dword [0xf000004c]
lea edx, [esi*4]
and eax, 0xfffffffe
lea edi, [edx + edi*2]
lea edx, [ecx + ebx*8]
add edi, edx
and edi, 0xf
jmp dword [edi*4 + ref_fffc9c34]  ; ujmp: jmp dword [edi*4 - 0x363cc]

loc_fffac1df:
mov edx, 0x17
mov ecx, 0xb124f851
jmp near loc_fffac300  ; jmp 0xfffac300

loc_fffac1ee:
mov edx, 0x1a
mov ecx, 0xb1007851
jmp near loc_fffac300  ; jmp 0xfffac300

loc_fffac1fd:
cmp byte [ebp - 0x1b9], 1
sbb edx, edx
and edx, 0xfffffffe
add edx, 0x19
cmp byte [ebp - 0x1b9], 1
sbb ecx, ecx
and ecx, 0x400000
sub ecx, 0x4edf87af
jmp near loc_fffac300  ; jmp 0xfffac300

loc_fffac226:
mov edx, 0x17
mov ecx, 0xb10c7851
jmp near loc_fffac300  ; jmp 0xfffac300

loc_fffac235:
cmp byte [ebp - 0x1b9], 1
sbb edx, edx
and edx, 7
add edx, 0x10
cmp byte [ebp - 0x1b9], 1
sbb ecx, ecx
and ecx, 0x3be000
sub ecx, 0x4ed387af
jmp near loc_fffac300  ; jmp 0xfffac300

loc_fffac25e:
cmp byte [ebp - 0x1b9], 1
sbb edx, edx
and edx, 4
add edx, 0x13
cmp byte [ebp - 0x1b9], 1
sbb ecx, ecx
and ecx, 0xfffee000
sub ecx, 0x4efc07af
jmp short loc_fffac300  ; jmp 0xfffac300

loc_fffac284:
cmp byte [ebp - 0x1b9], 1
sbb edx, edx
and edx, 5
add edx, 0x12
cmp byte [ebp - 0x1b9], 1
sbb ecx, ecx
and ecx, 0x1e5000
sub ecx, 0x4edc07af
jmp short loc_fffac300  ; jmp 0xfffac300

loc_fffac2aa:
cmp byte [ebp - 0x1b9], 1
sbb edx, edx
and edx, 5
add edx, 0x12
cmp byte [ebp - 0x1b9], 1
sbb ecx, ecx
and ecx, 0xfff7d000
sub ecx, 0x4eed87af
jmp short loc_fffac300  ; jmp 0xfffac300

loc_fffac2d0:
cmp byte [ebp - 0x1b9], 1
sbb edx, edx
and edx, 6
add edx, 0x11
cmp byte [ebp - 0x1b9], 1
sbb ecx, ecx
and ecx, 0x16d000
sub ecx, 0x4ecd87af
jmp short loc_fffac300  ; jmp 0xfffac300

loc_fffac2f6:
mov edx, 0x1a
mov ecx, 0xb1e00851

loc_fffac300:
cmp byte [ebp - 0x1b9], 0
mov dword [eax + 0x740c], ecx
je short loc_fffac33d  ; je 0xfffac33d
mov dword [eax + 0x7410], edx
mov dword [0xf0008320], 0x30073007
mov dword [0xf0009320], 0x30073007
mov dword [0xf000a320], 0x30073007
mov dword [0xf0030320], 0x30073007

loc_fffac33d:
mov eax, dword [0xfeffc010]
lea ecx, [ebp - 0x178]
push esi
push esi
mov edx, dword [eax]
push ecx
push eax
call dword [edx + 0x28]  ; ucall
add esp, 0x10
test eax, eax
jne short loc_fffac3c1  ; jne 0xfffac3c1
cmp dword [ebp - 0x178], 0x11
jne short loc_fffac3c1  ; jne 0xfffac3c1
mov eax, ref_fffcfc68  ; mov eax, 0xfffcfc68
call fcn_fffc4931  ; call 0xfffc4931
jmp short loc_fffac3c1  ; jmp 0xfffac3c1

loc_fffac36d:
movzx ecx, byte [ebp - 0x1b4]
shl ecx, 0x14
lea ecx, [edx + ecx - 0xfffff54]
mov edi, dword [ecx]
and edi, 0xf
jmp near loc_fffaab99  ; jmp 0xfffaab99

loc_fffac388:
movzx edi, cl
jmp near loc_fffaab99  ; jmp 0xfffaab99

loc_fffac390:
mov ebx, dword [ebp - 0x1b8]
mov eax, dword [ebx + 0xd]
cmp byte [eax + 0x5c], 0
je loc_fffaafd7  ; je 0xfffaafd7
jmp near loc_fffaafdf  ; jmp 0xfffaafdf

loc_fffac3a8:
xor edx, edx

loc_fffac3aa:
mov esi, dword [ebp - 0x1a8]
mov ebx, dword [ebp - 0x1d4]
mov dword [ebx + esi*4 + 0x18], ecx
mov cl, 1
jmp near loc_fffab464  ; jmp 0xfffab464

loc_fffac3c1:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffac3c9:
push ebp
shl ecx, 0x14
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
mov ebx, 0x64
lea esp, [esp - 0x1c]
movzx esi, byte [ebp + 8]
shl esi, 0xf
movzx eax, byte [ebp + 0xc]
add esi, ecx
shl eax, 0xc
add esi, eax
mov ax, word [esi - 0xfffff50]
or eax, 0x20
mov word [esi - 0xfffff50], ax
jmp short loc_fffac417  ; jmp 0xfffac417

loc_fffac402:
push eax
mov dword [ebp - 0x1c], edx
dec ebx
push 0x3e8
push edx
push edi
call dword [edx + 4]  ; ucall
add esp, 0x10
mov edx, dword [ebp - 0x1c]

loc_fffac417:
mov cx, word [esi - 0xfffff4e]
lea eax, [esi - 0xfffff4e]
and ch, 8
je short loc_fffac42d  ; je 0xfffac42d
test ebx, ebx
jne short loc_fffac402  ; jne 0xfffac402

loc_fffac42d:
mov ax, word [eax]
lea esp, [ebp - 0xc]
mov eax, 0x64
sub eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffac43f:
db 0x00

fcn_fffac440:
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
push ebx
push ebx
mov al, byte [ebp + 0x10]
mov bl, byte [ebp + 0xc]
mov byte [ebp - 0xd], al
imul eax, edx, 0xf4240
cdq
idiv ecx
mov ecx, eax
movzx eax, byte [ebp + 8]
imul ecx, eax
cmp byte [ebp - 0xd], 0
setne dl
test bl, bl
setne al
test dl, al
je short loc_fffac496  ; je 0xfffac496
mov al, bl
mov edi, 0xf
shr al, 4
and edi, ebx
movzx eax, al
xor edx, edx
imul eax, eax, 0x3e8
div edi
movsx ebx, byte [ebp - 0xd]
imul eax, ebx
add ecx, eax

loc_fffac496:
cmp ecx, 0xb71b0
mov eax, 0xa6b
jle short loc_fffac4fd  ; jle 0xfffac4fd
cmp ecx, 0xd59f8
mov ax, 0x960
jle short loc_fffac4fd  ; jle 0xfffac4fd
cmp ecx, 0xf423f
mov ax, 0x855
jle short loc_fffac4fd  ; jle 0xfffac4fd
cmp ecx, 0x112a88
mov ax, 0x74b
jle short loc_fffac4fd  ; jle 0xfffac4fd
cmp ecx, 0x1312d0
mov ax, 0x640
jle short loc_fffac4fd  ; jle 0xfffac4fd
cmp ecx, 0x16e360
mov ax, 0x535
jle short loc_fffac4fd  ; jle 0xfffac4fd
cmp ecx, 0x1c9c38
mov ax, 0x42b
jle short loc_fffac4fd  ; jle 0xfffac4fd
cmp ecx, 0x2625a0
mov ax, 0x320
mov edx, 0xaf1
cmovg eax, edx

loc_fffac4fd:
mov edx, esi
test dl, dl
je loc_fffac5b6  ; je 0xfffac5b6
cmp ecx, 0xae62d
mov eax, 0xaf0
jle loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0xb71b0
mov al, 0x6b
jle loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0xbbcce
mov al, 0x28
jle loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0xcb735
mov ax, 0x960
jle short loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0xddf22
mov ax, 0x898
jle short loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0xe4e1c
mov al, 0x55
jle short loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0xf4240
mov ax, 0x7d0
jle short loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0x105944
mov al, 0x4b
jle short loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0x10f447
mov al, 8
jle short loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0x1312d0
mov ax, 0x640
jle short loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0x15cc5b
mov ax, 0x578
jle short loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0x16e360
mov al, 0x35
jle short loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0x1c9c38
mov ax, 0x42b
jle short loc_fffac5b6  ; jle 0xfffac5b6
cmp ecx, 0x2625a0
mov ax, 0x320
mov edx, 0xaf1
cmovg eax, edx

loc_fffac5b6:
pop edx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffac5bc:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
push ebx
lea esp, [esp - 0x1c]
mov al, byte [ebp + 8]
mov byte [ebp - 0x1b], al
test dword [ebp + 0xc], 0xfffffffd
mov al, byte [ebp + 0x10]
mov byte [ebp - 0x1a], dl
mov byte [ebp - 0x19], cl
mov byte [ebp - 0x1c], al
jne short loc_fffac646  ; jne 0xfffac646
movzx edx, al
xor eax, eax
movzx edi, byte [ebp - 0x1b]
cmp cl, 3
ja short loc_fffac5fb  ; ja 0xfffac5fb
movzx eax, cl
movzx eax, byte [eax + ref_fffc9cb4]  ; movzx eax, byte [eax - 0x3634c]

loc_fffac5fb:  ; not directly referenced
cmp edx, 8
lea ecx, [edx + 1]
jbe short loc_fffac60c  ; jbe 0xfffac60c
movzx ecx, byte [esi + 0x20b5]
xor edx, edx

loc_fffac60c:  ; not directly referenced
cmp byte [ebp - 0x1a], 1
sbb ebx, ebx
sub esp, 0xc
not ebx
and ebx, 0x100
add eax, ebx
movzx ebx, byte [ebp - 0x19]
push ebx
movzx ebx, byte [ebp - 0x1a]
push ebx
push dword [ebp + 0x20]
push dword [ebp + 0x1c]
push dword [ebp + 0x18]
push dword [ebp + 0x14]
push dword [esi + 0x2223]
push edi
push 0x14
call fcn_fffc64bb  ; call 0xfffc64bb
add esp, 0x30

loc_fffac646:  ; not directly referenced
mov eax, dword [ebp + 0xc]
dec eax
cmp eax, 1
ja short loc_fffac6b5  ; ja 0xfffac6b5
movzx edx, byte [ebp - 0x1c]
xor eax, eax
movzx edi, byte [ebp - 0x1b]
cmp byte [ebp - 0x19], 3
ja short loc_fffac66a  ; ja 0xfffac66a
movzx eax, byte [ebp - 0x19]
movzx eax, byte [eax + ref_fffc9cb4]  ; movzx eax, byte [eax - 0x3634c]

loc_fffac66a:  ; not directly referenced
cmp edx, 8
lea ecx, [edx + 1]
jbe short loc_fffac67b  ; jbe 0xfffac67b
movzx ecx, byte [esi + 0x20b5]
xor edx, edx

loc_fffac67b:  ; not directly referenced
cmp byte [ebp - 0x1a], 1
sbb ebx, ebx
sub esp, 0xc
not ebx
and ebx, 0x100
add eax, ebx
movzx ebx, byte [ebp - 0x19]
push ebx
movzx ebx, byte [ebp - 0x1a]
push ebx
push dword [ebp + 0x20]
push dword [ebp + 0x1c]
push dword [ebp + 0x18]
push dword [ebp + 0x14]
push dword [esi + 0x2223]
push edi
push 8
call fcn_fffc64bb  ; call 0xfffc64bb
add esp, 0x30

loc_fffac6b5:  ; not directly referenced
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffac6bd:  ; not directly referenced
push ebp
mov ebp, esp
push edi
mov edi, eax
xor eax, eax
push esi
push ebx
lea esp, [esp - 0x95c]
mov bl, byte [ebp + 0x1c]
mov byte [ebp - 0x954], dl
mov byte [ebp - 0x958], cl
mov byte [ebp - 0x94b], bl

loc_fffac6e3:  ; not directly referenced
mov word [ebp + eax*2 - 0x93c], 0
mov word [ebp + eax*2 - 0x92a], 0
mov byte [ebp + eax - 0x945], 0
inc eax
cmp eax, 9
jne short loc_fffac6e3  ; jne 0xfffac6e3
mov esi, dword [ebp + 0x14]
xor ecx, ecx
mov edx, 0x900
lea eax, [ebp - 0x918]
mov word [esi], 0
mov esi, 1
call fcn_fffa24c1  ; call 0xfffa24c1
mov al, byte [edi + 0x20b5]
xor ecx, ecx
mov byte [ebp - 0x950], al
mov word [ebp - 0x94a], 0x100
jmp short loc_fffac775  ; jmp 0xfffac775

loc_fffac73d:  ; not directly referenced
mov edx, dword [ebp + 8]
mov eax, esi
shl eax, cl
not eax
and word [ebp - 0x94a], ax
mov bl, byte [edx + ecx]
mov edx, dword [ebp + 0xc]
movzx eax, bl
mov word [ebp + ecx*2 - 0x93c], ax
mov al, byte [edx + ecx]
movzx edx, al
mov word [ebp + ecx*2 - 0x92a], dx
inc ecx
cmp bl, al
ja loc_fffac97c  ; ja 0xfffac97c

loc_fffac775:  ; not directly referenced
cmp byte [ebp - 0x950], cl
ja short loc_fffac73d  ; ja 0xfffac73d
jmp near loc_fffac95b  ; jmp 0xfffac95b

loc_fffac782:  ; not directly referenced
mov ecx, esi
movzx ebx, cl
movzx ecx, word [ebp - 0x94a]
movsx eax, word [ebp + ebx*2 - 0x92a]
bt ecx, esi
movsx edx, word [ebp + ebx*2 - 0x93c]
jb short loc_fffac7b9  ; jb 0xfffac7b9
cmp eax, edx
jns short loc_fffac7b9  ; jns 0xfffac7b9
mov cl, bl
mov eax, 1
shl eax, cl
or word [ebp - 0x94a], ax
jmp short loc_fffac824  ; jmp 0xfffac824

loc_fffac7b9:  ; not directly referenced
add eax, edx
mov ecx, 2
cdq
idiv ecx
mov ecx, dword [ebp - 0x958]
push edx
push dword [ebp + 0x2c]
push dword [ebp + 0x28]
push dword [ebp + 0x24]
push dword [ebp + 0x20]
mov byte [ebp + ebx - 0x945], al
and eax, 0xff
push ebx
mov edx, dword [ebp - 0x950]
push 0
push eax
mov eax, edi
call fcn_fffac5bc  ; call 0xfffac5bc
add esp, 0x1c
mov ecx, dword [ebp - 0x958]
push dword [ebp + 0x2c]
push dword [ebp + 0x28]
push dword [ebp + 0x24]
push dword [ebp + 0x20]
movzx eax, byte [ebp + ebx - 0x945]
mov edx, dword [ebp - 0x950]
push ebx
push 1
push eax
mov eax, edi
call fcn_fffac5bc  ; call 0xfffac5bc
add esp, 0x20

loc_fffac824:  ; not directly referenced
inc esi

loc_fffac825:  ; not directly referenced
mov ebx, esi
cmp bl, byte [edi + 0x20b5]
jb loc_fffac782  ; jb 0xfffac782
sub esp, 0xc
mov ecx, dword [ebp - 0x958]
movzx eax, byte [ebp - 0x94b]
mov edx, dword [ebp - 0x950]
push eax
mov eax, edi
call fcn_fffc657b  ; call 0xfffc657b
add esp, 0x10
test eax, eax
mov dword [ebp - 0x954], eax
jne loc_fffac99d  ; jne 0xfffac99d
push esi
lea eax, [ebp - 0x945]
mov ecx, dword [ebp - 0x950]
push esi
lea edx, [ebp - 0x918]
push 0
push eax
mov eax, edi
call fcn_fffc66a8  ; call 0xfffc66a8
movzx esi, word [ebp - 0x94a]
add esp, 0x10
mov word [ebp - 0x968], 0
xor eax, eax
mov dword [ebp - 0x960], esi
jmp near loc_fffac942  ; jmp 0xfffac942

loc_fffac8a0:  ; not directly referenced
movzx ecx, al
mov edx, dword [ebp - 0x960]
bt edx, eax
jb short loc_fffac904  ; jb 0xfffac904
mov bl, byte [ebp + ecx - 0x945]
movzx edx, bl
mov byte [ebp - 0x965], bl
mov ebx, ecx
shl ebx, 7
lea esi, [edx + ebx]
cmp word [ebp + esi*2 - 0x918], 0
jne loc_fffac988  ; jne 0xfffac988
mov esi, 1
shl esi, cl
or word [ebp - 0x968], si
jmp near loc_fffac988  ; jmp 0xfffac988

loc_fffac8e8:  ; not directly referenced
mov ebx, dword [ebp + 0x10]
mov dl, byte [ebp - 0x965]
movzx esi, al
mov byte [ebx + esi], dl
mov esi, dword [ebp + 0x14]
mov edx, 1
shl edx, cl
or word [esi], dx

loc_fffac904:  ; not directly referenced
movzx edx, word [ebp - 0x968]
cmp dword [ebp + 0x18], 0
jne short loc_fffac920  ; jne 0xfffac920
bt edx, ecx
movzx edx, byte [ebp + ecx - 0x945]
jae short loc_fffac92d  ; jae 0xfffac92d
jmp short loc_fffac938  ; jmp 0xfffac938

loc_fffac920:  ; not directly referenced
bt edx, ecx
movzx edx, byte [ebp + ecx - 0x945]
jae short loc_fffac938  ; jae 0xfffac938

loc_fffac92d:  ; not directly referenced
inc edx
mov word [ebp + ecx*2 - 0x93c], dx
jmp short loc_fffac941  ; jmp 0xfffac941

loc_fffac938:  ; not directly referenced
dec edx
mov word [ebp + ecx*2 - 0x92a], dx

loc_fffac941:  ; not directly referenced
inc eax

loc_fffac942:  ; not directly referenced
cmp al, byte [edi + 0x20b5]
jb loc_fffac8a0  ; jb 0xfffac8a0
cmp word [ebp - 0x94a], 0x1ff
jne short loc_fffac975  ; jne 0xfffac975
jmp short loc_fffac99d  ; jmp 0xfffac99d

loc_fffac95b:  ; not directly referenced
movzx ebx, byte [ebp - 0x958]
movzx esi, byte [ebp - 0x954]
mov dword [ebp - 0x958], ebx
mov dword [ebp - 0x950], esi

loc_fffac975:  ; not directly referenced
xor esi, esi
jmp near loc_fffac825  ; jmp 0xfffac825

loc_fffac97c:  ; not directly referenced
mov dword [ebp - 0x954], 1
jmp short loc_fffac99d  ; jmp 0xfffac99d

loc_fffac988:  ; not directly referenced
movzx esi, word [ebp - 0x968]
bt esi, ecx
jb loc_fffac8e8  ; jb 0xfffac8e8
jmp near loc_fffac904  ; jmp 0xfffac904

loc_fffac99d:  ; not directly referenced
mov eax, dword [ebp - 0x954]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffac9ab:  ; not directly referenced
push ebp
mov ebp, esp
push edi
mov edi, ecx
mov ecx, 0xff
push esi
lea esi, [ebp - 0x918]
push ebx
xor ebx, ebx
lea esp, [esp - 0x93c]
mov byte [ebp - 0x934], dl
mov edx, dword [ebp + 0x1c]
mov dword [ebp - 0x92c], eax
mov al, byte [ebp + 0x20]
mov byte [ebp - 0x939], al
mov eax, esi
mov word [edx], 0
mov edx, 0x900
call fcn_fffa24c1  ; call 0xfffa24c1
mov byte [ebp - 0x930], 0
jmp short loc_fffaca52  ; jmp 0xfffaca52

loc_fffac9f9:  ; not directly referenced
movzx eax, bl
mov ecx, dword [ebp + 0x18]
movzx edx, word [ecx]
bt edx, ebx
jae short loc_fffaca51  ; jae 0xfffaca51
mov edx, dword [ebp + 8]
mov ecx, dword [ebp + 0xc]
mov dl, byte [edx + eax]
mov byte [ebp - 0x945], dl
mov dl, byte [ecx + eax]
mov cl, byte [ebp - 0x930]
sub dl, byte [ebp - 0x945]
cmp byte [ebp - 0x930], dl
cmovb ecx, edx
shl eax, 7
mov byte [ebp - 0x930], cl
movzx ecx, byte [ebp - 0x945]
movzx edx, dl
add eax, ecx
lea edx, [edx + edx + 2]
xor ecx, ecx
lea eax, [esi + eax*2]
call fcn_fffa24c1  ; call 0xfffa24c1

loc_fffaca51:  ; not directly referenced
inc ebx

loc_fffaca52:  ; not directly referenced
mov eax, dword [ebp - 0x92c]
cmp bl, byte [eax + 0x20b5]
jb short loc_fffac9f9  ; jb 0xfffac9f9
mov edx, dword [ebp - 0x92c]
cmp byte [ebp - 0x934], 1
sbb eax, eax
mov ecx, edi
and eax, 0xfffffc00
mov byte [ebp - 0x928], 0
movzx edi, cl
add eax, 0x476c
add eax, dword [edx + 0x2223]
mov dword [ebp - 0x938], edi
movzx edi, byte [ebp - 0x934]
mov eax, dword [eax]
jmp near loc_fffacbdd  ; jmp 0xfffacbdd

loc_fffaca9f:  ; not directly referenced
movzx esi, bl
mov edx, dword [ebp + 0x18]
movzx eax, word [edx]
bt eax, ebx
jae loc_fffacb43  ; jae 0xfffacb43
mov ecx, dword [ebp + 8]
add ecx, esi
mov dword [ebp - 0x934], ecx
mov al, byte [ecx]
movzx ecx, al
add ecx, dword [ebp - 0x940]
mov dword [ebp - 0x944], ecx
mov ecx, dword [ebp + 0xc]
movzx edx, byte [ecx + esi]
cmp dword [ebp - 0x944], edx
jg short loc_fffacb43  ; jg 0xfffacb43
push edx
push dword [ebp + 0x30]
push dword [ebp + 0x2c]
push dword [ebp + 0x28]
push dword [ebp + 0x24]
add eax, dword [ebp - 0x928]
mov ecx, dword [ebp - 0x938]
push esi
movzx eax, al
mov edx, edi
push 0
push eax
mov eax, dword [ebp - 0x92c]
call fcn_fffac5bc  ; call 0xfffac5bc
add esp, 0x1c
mov edx, dword [ebp - 0x934]
push dword [ebp + 0x30]
push dword [ebp + 0x2c]
push dword [ebp + 0x28]
push dword [ebp + 0x24]
mov al, byte [ebp - 0x928]
mov ecx, dword [ebp - 0x938]
push esi
push 1
add al, byte [edx]
mov edx, edi
movzx eax, al
push eax
mov eax, dword [ebp - 0x92c]
call fcn_fffac5bc  ; call 0xfffac5bc
add esp, 0x20

loc_fffacb43:  ; not directly referenced
inc ebx

loc_fffacb44:  ; not directly referenced
mov eax, dword [ebp - 0x92c]
cmp bl, byte [eax + 0x20b5]
jb loc_fffaca9f  ; jb 0xfffaca9f
sub esp, 0xc
mov ecx, dword [ebp - 0x938]
movzx eax, byte [ebp - 0x939]
mov edx, edi
push eax
mov eax, dword [ebp - 0x92c]
call fcn_fffc657b  ; call 0xfffc657b
add esp, 0x10
test eax, eax
jne loc_fffaccf5  ; jne 0xfffaccf5
push ecx
movzx eax, byte [ebp - 0x928]
lea edx, [ebp - 0x918]
push ecx
mov ecx, edi
push eax
push dword [ebp + 8]
mov eax, dword [ebp - 0x92c]
call fcn_fffc66a8  ; call 0xfffc66a8
inc byte [ebp - 0x928]
add esp, 0x10
mov dl, byte [ebp - 0x930]
cmp byte [ebp - 0x928], dl
jbe short loc_fffacbdd  ; jbe 0xfffacbdd
imul ecx, dword [ebp - 0x938], 0x24
imul edi, edi, 0x1055
xor esi, esi
mov byte [ebp - 0x928], 0
mov dword [ebp - 0x938], ecx
mov dword [ebp - 0x934], edi
jmp near loc_fffaccdb  ; jmp 0xfffaccdb

loc_fffacbdd:  ; not directly referenced
movzx eax, byte [ebp - 0x928]
xor ebx, ebx
mov dword [ebp - 0x940], eax
jmp near loc_fffacb44  ; jmp 0xfffacb44

loc_fffacbf1:  ; not directly referenced
mov edx, dword [ebp + 0x18]
mov cl, byte [ebp - 0x928]
movzx ebx, byte [ebp - 0x928]
movzx eax, word [edx]
bt eax, ecx
jae loc_fffaccd5  ; jae 0xfffaccd5
mov eax, dword [ebp + 0xc]
mov ecx, ebx
add eax, ebx
mov edx, 0x48
shl ecx, 7
mov dword [ebp - 0x930], eax
lea edi, [ebx + ebx*2]
movzx eax, byte [eax]
sub edx, eax
add edx, edx
lea eax, [eax + ecx + 1]
mov ecx, 0xff
lea eax, [ebp + eax*2 - 0x918]
call fcn_fffa24c1  ; call 0xfffa24c1
mov edx, ebx
add edi, dword [ebp - 0x938]
shl edx, 8
add edi, dword [ebp - 0x934]
lea ecx, [ebp - 0x918]
add edx, ecx
mov ecx, dword [ebp - 0x92c]
sub esp, 0xc
lea eax, [ecx + edi + 0x295]
mov ecx, 0x48
push eax
mov eax, dword [ebp - 0x92c]
call fcn_fffc3287  ; call 0xfffc3287
add edi, dword [ebp - 0x92c]
add esp, 0x10
mov ecx, eax
mov dl, byte [edi + 0x296]
mov al, byte [edi + 0x297]
test dl, dl
mov edi, 0x47
cmove edx, edi
test ecx, ecx
jne short loc_fffacccf  ; jne 0xfffacccf
mov ecx, dword [ebp + 8]
cmp byte [ecx + ebx], al
ja short loc_fffaccd3  ; ja 0xfffaccd3
mov ecx, dword [ebp - 0x930]
cmp dl, byte [ecx]
ja short loc_fffaccd3  ; ja 0xfffaccd3
mov cl, bl
mov edi, 1
shl edi, cl
mov ecx, dword [ebp + 0x1c]
or word [ecx], di
mov ecx, dword [ebp + 0x10]
mov byte [ecx + ebx], al
mov eax, dword [ebp + 0x14]
mov byte [eax + ebx], dl
jmp short loc_fffaccd5  ; jmp 0xfffaccd5

loc_fffacccf:  ; not directly referenced
mov esi, ecx
jmp short loc_fffaccd5  ; jmp 0xfffaccd5

loc_fffaccd3:  ; not directly referenced
xor esi, esi

loc_fffaccd5:  ; not directly referenced
inc byte [ebp - 0x928]

loc_fffaccdb:  ; not directly referenced
mov eax, dword [ebp - 0x92c]
mov dl, byte [ebp - 0x928]
cmp dl, byte [eax + 0x20b5]
jb loc_fffacbf1  ; jb 0xfffacbf1
jmp short loc_fffaccf7  ; jmp 0xfffaccf7

loc_fffaccf5:  ; not directly referenced
mov esi, eax

loc_fffaccf7:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, esi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffacd01:  ; not directly referenced
cmp al, 1

fcn_fffacd03:  ; not directly referenced
push ebp
sbb eax, eax
dec edx
not eax
mov ebp, esp
and eax, 0x100
cmp dl, 8
ja short loc_fffacd5c  ; ja 0xfffacd5c
movzx edx, dl
jmp dword [edx*4 + ref_fffc9c90]  ; ujmp: jmp dword [edx*4 - 0x36370]

loc_fffacd1f:  ; not directly referenced
add eax, 0x200
jmp short loc_fffacd5c  ; jmp 0xfffacd5c

loc_fffacd26:  ; not directly referenced
add eax, 0x400
jmp short loc_fffacd5c  ; jmp 0xfffacd5c

loc_fffacd2d:  ; not directly referenced
add eax, 0x600
jmp short loc_fffacd5c  ; jmp 0xfffacd5c

loc_fffacd34:  ; not directly referenced
add eax, 0x1000
jmp short loc_fffacd5c  ; jmp 0xfffacd5c

loc_fffacd3b:  ; not directly referenced
add eax, 0x1200
jmp short loc_fffacd5c  ; jmp 0xfffacd5c

loc_fffacd42:  ; not directly referenced
add eax, 0x1400
jmp short loc_fffacd5c  ; jmp 0xfffacd5c

loc_fffacd49:  ; not directly referenced
add eax, 0x1600
jmp short loc_fffacd5c  ; jmp 0xfffacd5c

loc_fffacd50:  ; not directly referenced
add eax, 0x800
jmp short loc_fffacd5c  ; jmp 0xfffacd5c

loc_fffacd57:  ; not directly referenced
add eax, 0x3000

loc_fffacd5c:  ; not directly referenced
pop ebp
ret

fcn_fffacd5e:
push ebp
mov ebp, esp
push edi
mov edi, ecx
push esi
mov esi, eax
push ebx
lea esp, [esp - 0x1c]
mov al, byte [ebp + 8]
test dword [ebp + 0xc], 0xfffffffd
mov byte [ebp - 0x19], dl
movzx ebx, byte [ebp + 0x10]
mov byte [ebp - 0x1a], al
jne short loc_fffacd9f  ; jne 0xfffacd9f
movzx eax, bl
push eax
movzx eax, byte [ebp - 0x1a]
push 7
movzx ecx, cl
push 0x14
movzx edx, dl
push eax
mov eax, esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10

loc_fffacd9f:
mov eax, dword [ebp + 0xc]
dec eax
cmp eax, 1
ja short loc_fffacdc5  ; ja 0xfffacdc5
push ebx
movzx edx, byte [ebp - 0x19]
mov eax, edi
push 7
movzx ecx, al
push 8
movzx eax, byte [ebp - 0x1a]
push eax
mov eax, esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10

loc_fffacdc5:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffacdcd:
push ebp
mov ebp, esp
push edi
push esi
mov esi, 0x4340
push ebx
lea esp, [esp - 8]
mov byte [ebp - 0xe], cl
movzx ecx, byte [ebp + 8]
mov byte [ebp - 0xd], 0
mov dword [ebp - 0x14], ecx
jmp short loc_ffface36  ; jmp 0xffface36

loc_fffacdec:
cmp byte [ebp - 0xe], 0
lea ecx, [esi + 0x400]
cmove ecx, esi
add ecx, dword [eax + 0x2223]
mov ebx, dword [ecx]
test ebx, ebx
je short loc_ffface30  ; je 0xffface30
movzx ecx, byte [ebp - 0xd]
shl ecx, 7
add ecx, dword [ebp - 0x14]
movzx edi, word [edx + ecx*2]
mov word [ebp - 0x10], di
add edi, ebx
cmp edi, 0xffff
jbe short loc_ffface29  ; jbe 0xffface29
mov word [edx + ecx*2], 0xffff
jmp short loc_ffface30  ; jmp 0xffface30

loc_ffface29:
add ebx, dword [ebp - 0x10]
mov word [edx + ecx*2], bx

loc_ffface30:
inc byte [ebp - 0xd]
add esi, 4

loc_ffface36:
mov cl, byte [ebp - 0xd]
cmp cl, byte [eax + 0x20b5]
jb short loc_fffacdec  ; jb 0xfffacdec
pop ecx
pop ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_ffface48:
push ebp
mov ebp, esp
push edi
push esi
mov esi, edx
push ebx
lea esp, [esp - 0x82c]
mov dword [ebp - 0x828], eax
mov eax, dword [edx]
mov byte [ebp - 0x829], cl
test eax, eax
je loc_fffacf3a  ; je 0xfffacf3a
mov ecx, eax
lea edx, [ebp - 0x818]
neg ecx
mov dword [esi + 8], edx
mov edx, 0x1010101
mov dword [ebp - 0x81c], 0
mov edi, edx
shl edi, cl
mov cl, al
lea eax, [esi + 4]
mov dword [ebp - 0x830], eax
sar edx, cl
or edi, edx
mov ecx, edi
not ecx
mov dword [ebp - 0x824], ecx
jmp short loc_fffacf27  ; jmp 0xfffacf27

loc_fffacea8:
mov ebx, dword [ebp - 0x81c]
add ebx, dword [esi + 8]
add ebx, dword [ebp - 0x820]
xor ecx, ecx
mov edx, 8
mov eax, ebx
call fcn_fffa24c1  ; call 0xfffa24c1
mov eax, dword [ebp - 0x830]
call fcn_fffc04e5  ; call 0xfffc04e5
dec ax
jne short loc_fffacedb  ; jne 0xfffacedb
mov dword [ebx], edi
mov dword [ebx + 4], edi
jmp short loc_fffacee6  ; jmp 0xfffacee6

loc_fffacedb:
mov eax, dword [ebp - 0x824]
mov dword [ebx], eax
mov dword [ebx + 4], eax

loc_fffacee6:
lea eax, [esi + 6]
call fcn_fffc04e5  ; call 0xfffc04e5
dec ax
jne short loc_fffaceff  ; jne 0xfffaceff
mov ecx, dword [ebp - 0x824]
or dword [ebx], ecx
or dword [ebx + 4], ecx
jmp short loc_fffacf04  ; jmp 0xfffacf04

loc_fffaceff:
and dword [ebx], edi
and dword [ebx + 4], edi

loc_fffacf04:
add dword [ebp - 0x820], 8
cmp dword [ebp - 0x820], 0x40
jne short loc_fffacea8  ; jne 0xfffacea8
add dword [ebp - 0x81c], 0x40
cmp dword [ebp - 0x81c], 0x800
je short loc_fffacf36  ; je 0xfffacf36

loc_fffacf27:
mov dword [ebp - 0x820], 0
jmp near loc_fffacea8  ; jmp 0xfffacea8

loc_fffacf36:
inc dword [esi]
jmp short loc_fffacf47  ; jmp 0xfffacf47

loc_fffacf3a:
mov dword [edx + 8], ref_fffc9cb8  ; mov dword [edx + 8], 0xfffc9cb8
mov dword [edx], 1

loc_fffacf47:
sub esp, 0xc
mov ecx, dword [esi + 8]
push 0x20
movzx edx, byte [ebp - 0x829]
mov eax, dword [ebp - 0x828]
call fcn_fffc7760  ; call 0xfffc7760
mov dword [esi + 8], 0
add esp, 0x10
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffacf73:
push ebp
mov dword [edx], 0
mov dword [edx + 8], 0
mov ebp, esp
mov word [edx + 4], 0xabcd
mov word [edx + 6], 0x1234
pop ebp
ret

fcn_fffacf91:
push ebp
mov eax, ecx
mov ecx, 1
shl eax, 8
mov ebp, esp
push ebx
or eax, edx
lea esp, [esp - 0x1c]
mov ebx, dword [ebp + 8]
lea edx, [ebp - 0xc]
mov byte [ebx], 0
push edx
lea edx, [ebp - 0xd]
push edx
mov edx, eax
mov eax, 4
call fcn_fffc4947  ; call 0xfffc4947
add esp, 0x10
xor eax, eax
cmp dword [ebp - 0xc], 0
mov dl, byte [ebp - 0xd]
je short loc_fffacfd1  ; je 0xfffacfd1
mov dl, byte [ebx]
mov al, 1

loc_fffacfd1:
mov byte [ebx], dl
mov ebx, dword [ebp - 4]
leave
ret

fcn_fffacfd8:
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
push ebx
lea esp, [esp - 0x4c]
mov eax, dword [ebp + 8]
sub eax, 2
mov dword [ebp - 0x4c], edx
mov dword [ebp - 0x50], ecx
mov dword [ebp - 0x40], 0
mov byte [ebp - 0x29], 0
mov dword [ebp - 0x58], eax
jmp near loc_fffad357  ; jmp 0xfffad357

loc_fffad003:
mov edx, dword [ebp - 0x44]
mov dl, byte [edx]
test dl, dl
mov byte [ebp - 0x38], dl
jne short loc_fffad056  ; jne 0xfffad056
cmp byte [ebp - 0x34], 0
jne loc_fffad39c  ; jne 0xfffad39c
mov eax, dword [0xfeffc010]
mov ecx, dword [ebp - 0x48]
mov eax, dword [eax]
mov edx, dword [eax + 0x258]
imul eax, dword [ebp - 0x34], 0x46
add edx, 0xda
lea eax, [eax + ecx + 0x2100]
mov ecx, 0x35
lea eax, [esi + eax + 0xb]
call fcn_fffa2408  ; call 0xfffa2408
mov eax, dword [ebp - 0x3c]
mov dword [eax], 1
jmp near loc_fffad33a  ; jmp 0xfffad33a

loc_fffad056:
mov edx, dword [ebp - 0x4c]
mov eax, dword [edx + 9]
cmp dword [eax + 6], 3
jbe short loc_fffad069  ; jbe 0xfffad069
mov dword [eax + 6], 0

loc_fffad069:
cmp dword [ebp + 8], 4
jne short loc_fffad084  ; jne 0xfffad084
mov edx, dword [ebp - 0x4c]
xor edi, edi
mov eax, dword [edx + 9]
mov eax, dword [eax + 6]
test eax, eax
lea edx, [eax - 1]
cmovne edi, edx
jmp short loc_fffad091  ; jmp 0xfffad091

loc_fffad084:
mov eax, dword [ebp + 8]
xor edi, edi
dec eax
cmp dword [ebp + 8], 0
cmovne edi, eax

loc_fffad091:
cmp dword [ebp + 8], 4
mov ecx, edi
setne dl
cmp dword [ebp - 0x50], 2
sete al
mov byte [esi + 0x22f3], cl
or dl, al
je loc_fffad2d4  ; je 0xfffad2d4
imul eax, dword [ebp - 0x34], 0x46
mov edx, dword [ebp - 0x48]
movzx ecx, byte [ebp - 0x38]
mov byte [ebp - 0x30], 0
mov dword [ebp - 0x54], ecx
lea eax, [eax + edx + 0x2100]
lea ebx, [esi + eax + 0xb]
xor eax, eax
jmp short loc_fffad0f5  ; jmp 0xfffad0f5

loc_fffad0d0:
movzx eax, byte [ebp - 0x30]
sub esp, 0xc
lea edx, [eax + eax*2]
add eax, ebx
push eax
movzx ecx, byte [edi + edx + ref_fffcecb8]  ; movzx ecx, byte [edi + edx - 0x31348]
mov eax, esi
mov edx, dword [ebp - 0x54]
call fcn_fffacf91  ; call 0xfffacf91
inc byte [ebp - 0x30]
add esp, 0x10

loc_fffad0f5:
test eax, eax
sete cl
cmp byte [ebp - 0x30], 0x34
setbe dl
test cl, dl
jne short loc_fffad0d0  ; jne 0xfffad0d0
test eax, eax
je short loc_fffad117  ; je 0xfffad117
mov eax, dword [ebp - 0x3c]
mov dword [eax], 0
jmp near loc_fffad33a  ; jmp 0xfffad33a

loc_fffad117:
cmp byte [ebx + 9], 0
jne short loc_fffad121  ; jne 0xfffad121
mov byte [ebx + 9], 1

loc_fffad121:
mov edx, dword [ebp - 0x3c]
cmp dword [ebp - 0x58], 1
mov dword [edx], 1
ja loc_fffad254  ; ja 0xfffad254
sub esp, 0xc
lea ecx, [ebp - 0x19]
push ecx
movzx edx, byte [ebp - 0x38]
mov ecx, 0xb0
mov eax, esi
mov dword [ebp - 0x30], edx
call fcn_fffacf91  ; call 0xfffacf91
add esp, 0x10
cmp byte [ebp - 0x19], 0xc
je short loc_fffad15c  ; je 0xfffad15c
jmp near loc_fffad39c  ; jmp 0xfffad39c

loc_fffad15c:
sub esp, 0xc
lea eax, [ebp - 0x19]
push eax
mov ecx, 0xb1
mov edx, dword [ebp - 0x30]
mov eax, esi
call fcn_fffacf91  ; call 0xfffacf91
add esp, 0x10
cmp byte [ebp - 0x19], 0x4a
je short loc_fffad180  ; je 0xfffad180
jmp near loc_fffad39c  ; jmp 0xfffad39c

loc_fffad180:
sub esp, 0xc
lea edx, [ebp - 0x19]
push edx
mov ecx, 0xb2
mov edx, dword [ebp - 0x30]
mov eax, esi
call fcn_fffacf91  ; call 0xfffacf91
add esp, 0x10
cmp dword [ebp + 8], 2
setne al
inc eax
mov dl, al
and dl, byte [ebp - 0x19]
cmp dl, al
je short loc_fffad1af  ; je 0xfffad1af
jmp near loc_fffad39c  ; jmp 0xfffad39c

loc_fffad1af:
cmp byte [ebx + 0xa], 0
je loc_fffad39c  ; je 0xfffad39c
cmp byte [ebx + 0xb], 0
je loc_fffad39c  ; je 0xfffad39c
cmp byte [ebx + 0xc], 0
je loc_fffad39c  ; je 0xfffad39c
cmp byte [ebx + 0xe], 0
jne short loc_fffad1dd  ; jne 0xfffad1dd
cmp byte [ebx + 0xf], 0
je loc_fffad39c  ; je 0xfffad39c

loc_fffad1dd:
cmp byte [ebx + 0x10], 0
je loc_fffad39c  ; je 0xfffad39c
cmp byte [ebx + 0x11], 0
je loc_fffad39c  ; je 0xfffad39c
cmp byte [ebx + 0x12], 0
je loc_fffad39c  ; je 0xfffad39c
cmp byte [ebx + 0x13], 0
je loc_fffad39c  ; je 0xfffad39c
cmp byte [ebx + 0x14], 0
je loc_fffad39c  ; je 0xfffad39c
test byte [ebx + 0x15], 0xf
jne short loc_fffad21f  ; jne 0xfffad21f
cmp byte [ebx + 0x16], 0
je loc_fffad39c  ; je 0xfffad39c

loc_fffad21f:
cmp byte [ebx + 0x18], 0
jne short loc_fffad22f  ; jne 0xfffad22f
cmp byte [ebx + 0x19], 0
je loc_fffad39c  ; je 0xfffad39c

loc_fffad22f:
cmp byte [ebx + 0x1a], 0
je loc_fffad39c  ; je 0xfffad39c
cmp byte [ebx + 0x1b], 0
je loc_fffad39c  ; je 0xfffad39c
test byte [ebx + 0x1c], 0xf
jne short loc_fffad254  ; jne 0xfffad254
cmp byte [ebx + 0x1d], 0
jne short loc_fffad254  ; jne 0xfffad254
jmp near loc_fffad39c  ; jmp 0xfffad39c

loc_fffad254:
lea eax, [edi - 1]
cmp eax, 1
ja loc_fffad33a  ; ja 0xfffad33a
cmp edi, 1
mov eax, 0xf3
movzx ebx, byte [ebp - 0x38]
mov ecx, 0xd0
cmovne ecx, eax
sub esp, 0xc
lea eax, [ebp - 0x1a]
mov edx, ebx
push eax
mov eax, esi
call fcn_fffacf91  ; call 0xfffacf91
mov dl, byte [ebp - 0x1a]
add esp, 0x10
cmp dl, 8
je short loc_fffad2a1  ; je 0xfffad2a1
cmp dl, 0x10
mov al, 0x10
mov dl, 2
cmove eax, edx
mov byte [esi + 0x22e4], al
jmp short loc_fffad2a8  ; jmp 0xfffad2a8

loc_fffad2a1:
mov byte [esi + 0x22e4], 0

loc_fffad2a8:
dec edi
mov eax, 0xe1
mov ecx, 0xbe
mov edx, ebx
cmovne ecx, eax
sub esp, 0xc
lea eax, [ebp - 0x19]
push eax
mov eax, esi
call fcn_fffacf91  ; call 0xfffacf91
mov edx, dword [ebp - 0x44]
mov al, byte [ebp - 0x19]
add esp, 0x10
mov byte [edx - 0x52], al
jmp short loc_fffad33a  ; jmp 0xfffad33a

loc_fffad2d4:
cmp dword [ebp - 0x50], 3
jne short loc_fffad33a  ; jne 0xfffad33a
imul eax, dword [ebp - 0x34], 0x46
mov ecx, dword [ebp - 0x48]
movzx edx, byte [ebp - 0x38]
mov bl, 0x75
mov dword [ebp - 0x38], edx
lea eax, [eax + ecx + 0x2120]
lea eax, [esi + eax + 0x15]
mov dword [ebp - 0x30], eax
xor eax, eax
jmp short loc_fffad31a  ; jmp 0xfffad31a

loc_fffad2fc:
sub esp, 0xc
and edi, 0xff
add edi, dword [ebp - 0x30]
mov edx, dword [ebp - 0x38]
push edi
movzx ecx, bl
mov eax, esi
call fcn_fffacf91  ; call 0xfffacf91
inc ebx
add esp, 0x10

loc_fffad31a:
mov cl, bl
lea edi, [ebx - 0x75]
not ecx
shr cl, 7
test eax, eax
sete dl
test cl, dl
jne short loc_fffad2fc  ; jne 0xfffad2fc
mov ecx, dword [ebp - 0x3c]
test eax, eax
sete al
movzx eax, al
mov dword [ecx], eax

loc_fffad33a:
inc dword [ebp - 0x34]
inc dword [ebp - 0x44]
add dword [ebp - 0x3c], 0x46
cmp dword [ebp - 0x34], 2
jne loc_fffad003  ; jne 0xfffad003
inc dword [ebp - 0x40]
cmp dword [ebp - 0x40], 2
je short loc_fffad384  ; je 0xfffad384

loc_fffad357:
mov eax, dword [ebp - 0x40]
mov dword [ebp - 0x34], 0
lea eax, [esi + eax*2 + 0x22c6]
mov dword [ebp - 0x44], eax
imul eax, dword [ebp - 0x40], 0x8c
mov dword [ebp - 0x48], eax
lea edx, [esi + eax + 0x2107]
mov dword [ebp - 0x3c], edx
jmp near loc_fffad003  ; jmp 0xfffad003

loc_fffad384:
mov edx, dword [ebp + 8]
xor eax, eax
sub edx, 2
cmp edx, 1
ja short loc_fffad3a1  ; ja 0xfffad3a1
xor eax, eax
cmp byte [ebp - 0x29], 0
setne al
jmp short loc_fffad3a1  ; jmp 0xfffad3a1

loc_fffad39c:
inc byte [ebp - 0x29]
jmp short loc_fffad33a  ; jmp 0xfffad33a

loc_fffad3a1:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffad3a9:
push ebp
mov ebp, esp
push edi
push esi
lea ecx, [ebp - 0x20]
push ebx
mov ebx, eax
lea esp, [esp - 0x48]
mov eax, dword [eax + 0x2248]
mov edx, dword [eax]
push ecx
push 0
push 0
push ref_fffcfb1c  ; push 0xfffcfb1c
push eax
call dword [edx + 0x20]  ; ucall
add esp, 0x20
test eax, eax
js loc_fffad721  ; js 0xfffad721
mov eax, dword [ebp - 0x20]
mov dword [ebp - 0x34], eax
mov edx, dword [eax + 9]
cmp byte [edx + 0x27], 0
jne short loc_fffad450  ; jne 0xfffad450
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x5880], 7
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x5888]
and eax, 0xff000000
mov dword [edx + 0x5888], eax
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x58a8]
and eax, 0xffffffe0
mov dword [edx + 0x58a8], eax
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x4f84]
and eax, 0xff000000
mov dword [edx + 0x4f84], eax
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4f88], 0xffffffff
jmp near loc_fffad69f  ; jmp 0xfffad69f

loc_fffad450:
cmp byte [edx + 0x28], 1
sbb eax, eax
not eax
sub eax, 0x356e8e19
cmp byte [edx + 0x29], 0
jne short loc_fffad469  ; jne 0xfffad469
cmp byte [edx + 0x2a], 0
je short loc_fffad46c  ; je 0xfffad46c

loc_fffad469:
and eax, 0xfffffffb

loc_fffad46c:
mov ecx, eax
and ecx, 0xfffffffd
cmp byte [edx + 0x2b], 0
mov edx, dword [ebx + 0x2223]
cmovne eax, ecx
mov dword [edx + 0x5880], eax
mov edx, dword [ebp - 0x34]
mov edi, dword [ebx + 0x2223]
mov ecx, dword [edx + 9]
mov esi, dword [edi + 0x5888]
and esi, 0xff000000
mov dl, byte [ecx + 0x4d]
mov al, byte [ecx + 0x4c]
and edx, 0x7f
and eax, 0x7f
shl edx, 8
or eax, 0x808080
or edx, esi
or eax, edx
mov dl, byte [ecx + 0x4e]
and edx, 0x7f
shl edx, 0x10
or eax, edx
mov dword [edi + 0x5888], eax
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x58a8]
and eax, 0xffffffe0
mov dword [edx + 0x58a8], eax
mov edx, dword [ebp - 0x34]
mov eax, dword [edx + 9]
cmp byte [eax + 0x29], 0
jne short loc_fffad4f0  ; jne 0xfffad4f0
cmp byte [eax + 0x2a], 0
je loc_fffad69f  ; je 0xfffad69f

loc_fffad4f0:
cmp byte [eax + 0x2a], 0
je loc_fffad69f  ; je 0xfffad69f
mov dword [ebp - 0x40], ebx
mov dword [ebp - 0x38], ebx
mov dword [ebp - 0x3c], 0

loc_fffad507:
mov eax, dword [ebp - 0x38]
mov dword [ebp - 0x30], 0
cmp byte [eax + 0x3a], 0

loc_fffad515:
jne short loc_fffad534  ; jne 0xfffad534
add dword [ebp - 0x38], 0x1055
add dword [ebp - 0x40], 0x8c
add dword [ebp - 0x3c], 2
cmp dword [ebp - 0x3c], 4
jne short loc_fffad507  ; jne 0xfffad507
jmp near loc_fffad69f  ; jmp 0xfffad69f

loc_fffad534:
imul eax, dword [ebp - 0x30], 0x1d
mov edx, dword [ebp - 0x38]
cmp dword [edx + eax + 0xa], 0
je loc_fffad693  ; je 0xfffad693
mov edx, dword [ebp - 0x34]
mov eax, dword [ebp - 0x30]
add eax, dword [edx + 1]
mov edx, dword [ebp - 0x3c]
movzx eax, byte [edx + eax + 0x28]
lea edx, [ebp - 0x22]
push ecx
mov dword [ebp - 0x44], eax
lea eax, [ebp - 0x1c]
push ecx
mov ecx, 2
push eax
mov eax, 6
push edx
mov edx, dword [ebp - 0x44]
call fcn_fffc4947  ; call 0xfffc4947
add esp, 0x10
cmp dword [ebp - 0x1c], 0
mov di, word [ebp - 0x22]
jne loc_fffad693  ; jne 0xfffad693
rol di, 8
imul eax, dword [ebp - 0x30], 0x46
mov edx, dword [ebp - 0x40]
mov al, byte [edx + eax + 0x2132]
mov edx, edi
shr dx, 3
shr di, 1
and edx, 3
mov word [ebp - 0x2c], dx
and edi, 2
movzx edx, dx
mov si, word [edx + edx + ref_fffced58]  ; mov si, word [edx + edx - 0x312a8]
imul edx, esi, 0x55
imul edi, esi
and al, 0x1f
mov word [ebp - 0x2a], dx
jne short loc_fffad5ce  ; jne 0xfffad5ce
lea eax, [esi*8]
jmp short loc_fffad5e5  ; jmp 0xfffad5e5

loc_fffad5ce:
cmp al, 4
movzx eax, si
jne short loc_fffad5da  ; jne 0xfffad5da
imul eax, eax, 0x37
jmp short loc_fffad5dd  ; jmp 0xfffad5dd

loc_fffad5da:
imul eax, eax, 0x55

loc_fffad5dd:
mov ecx, 0xa
cdq
idiv ecx

loc_fffad5e5:
mov dx, word [ebp - 0x2a]
xor ecx, ecx
sub edx, eax
sub edx, edi
sub edx, esi
mov eax, edx
mov word [ebp - 0x2a], dx
xor edx, edx
div si
mov edi, eax
shl edi, 4
jmp short loc_fffad628  ; jmp 0xfffad628

loc_fffad603:
mov ax, word [ebp - 0x2a]
xor edx, edx
div si
add edx, edx
mov eax, edx
mov word [ebp - 0x2a], dx
xor edx, edx
div si
test ax, ax
je short loc_fffad627  ; je 0xfffad627
mov eax, 8
sar eax, cl
or edi, eax

loc_fffad627:
inc ecx

loc_fffad628:
mov ax, word [ebp - 0x2a]
xor edx, edx
div si
cmp cx, word [ebp - 0x2c]
mov word [ebp - 0x2a], dx
setb dl
cmp word [ebp - 0x2a], 0
setne al
test dl, al
jne short loc_fffad603  ; jne 0xfffad603
mov word [ebp - 0x22], di
lea eax, [ebp - 0x1c]
push edi
mov edx, dword [ebp - 0x44]
mov ecx, 2
push edi
or dh, 4
push eax
lea eax, [ebp - 0x22]
push eax
mov eax, 7
call fcn_fffc4947  ; call 0xfffc4947
pop eax
pop edx
lea eax, [ebp - 0x1c]
mov edx, dword [ebp - 0x44]
push eax
lea eax, [ebp - 0x22]
or dh, 1
push eax
mov ecx, 2
mov eax, 7
mov word [ebp - 0x22], 0x2c02
call fcn_fffc4947  ; call 0xfffc4947
add esp, 0x10

loc_fffad693:
inc dword [ebp - 0x30]
cmp dword [ebp - 0x30], 2
jmp near loc_fffad515  ; jmp 0xfffad515

loc_fffad69f:
mov ecx, dword [ebp - 0x20]
mov edx, dword [ebx + 0x2223]
mov dword [ebp - 0x30], 0
mov eax, dword [ecx + 9]
mov edi, dword [edx + 0x4294]
mov al, byte [eax + 0x26]
lea esi, [eax - 1]
mov eax, esi
cmp al, 1
ja short loc_fffad6d4  ; ja 0xfffad6d4
and esi, 0xff
movzx esi, byte [esi + ref_fffced60]  ; movzx esi, byte [esi - 0x312a0]
mov dword [ebp - 0x30], esi

loc_fffad6d4:
mov esi, edi
mov eax, dword [ebp - 0x30]
shl eax, 0x10
and esi, 0xfffcffff
or eax, esi
mov dword [edx + 0x4294], eax
mov eax, dword [ecx + 9]
mov edx, dword [ebx + 0x2223]
mov cl, byte [eax + 0x26]
xor eax, eax
dec ecx
mov ebx, dword [edx + 0x4694]
cmp cl, 1
ja short loc_fffad70e  ; ja 0xfffad70e
movzx ecx, cl
movzx eax, byte [ecx + ref_fffced60]  ; movzx eax, byte [ecx - 0x312a0]

loc_fffad70e:
shl eax, 0x10
mov ecx, ebx
and ecx, 0xfffcffff
or eax, ecx
mov dword [edx + 0x4694], eax

loc_fffad721:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffad729:  ; not directly referenced
cmp dword [eax + 0x2258], 1
jne short loc_fffad7a6  ; jne 0xfffad7a6
push ebp
mov ebp, esp
push ebx
mov ebx, edx
lea esp, [esp - 0x20]
mov eax, dword [eax + 0x2248]
lea ecx, [ebp - 0xc]
mov edx, dword [eax]
push ecx
push 0
push 0
push ref_fffcfb1c  ; push 0xfffcfb1c
push eax
call dword [edx + 0x20]  ; ucall
add esp, 0x20
test eax, eax
js short loc_fffad7a2  ; js 0xfffad7a2
mov edx, dword [ebp - 0xc]
mov eax, dword [edx + 9]
mov al, byte [eax + 0x2e]
cmp al, 1
je short loc_fffad775  ; je 0xfffad775
cmp al, 2
je short loc_fffad783  ; je 0xfffad783
and dword [ebx], 0x80ffffff
jmp short loc_fffad7a2  ; jmp 0xfffad7a2

loc_fffad775:  ; not directly referenced
mov eax, dword [ebx]
and eax, 0xc0ffffff
or eax, 0x40000000
jmp short loc_fffad7a0  ; jmp 0xfffad7a0

loc_fffad783:  ; not directly referenced
mov eax, dword [ebx]
mov ecx, eax
and eax, 0x80ffffff
and ecx, 0xbfffffff
mov dword [ebx], ecx
mov edx, dword [edx + 9]
movzx edx, byte [edx + 0x2f]
shl edx, 0x18
or eax, edx

loc_fffad7a0:  ; not directly referenced
mov dword [ebx], eax

loc_fffad7a2:  ; not directly referenced
mov ebx, dword [ebp - 4]
leave

loc_fffad7a6:  ; not directly referenced
ret

fcn_fffad7a7:
mov ecx, 0xce
rdmsr
shrd eax, edx, 8
push ebp
and eax, 0xff
mov ebp, esp
push edi
imul eax, eax, 0x186a0
push esi
push ebx
lea esp, [esp - 0x1c]
mov dword [ebp - 0x24], eax
rdtsc
xor ecx, ecx
mov dword [ebp - 0x18], eax
mov dword [ebp - 0x14], 0
add dword [ebp - 0x18], ecx
adc dword [ebp - 0x14], edx
xor ebx, ebx
mov eax, dword [ebp - 0x14]
cmp eax, dword [ebp - 0x24]
mov ecx, dword [ebp - 0x24]
mov dword [ebp - 0x20], 0
mov dword [ebp - 0x1c], 0
jb short loc_fffad816  ; jb 0xfffad816
xor edx, edx
mov edi, dword [ebp - 0x24]
div dword [ebp - 0x24]
xor esi, esi
mov dword [ebp - 0x20], 0
imul edi, eax
mov dword [ebp - 0x1c], eax
sub dword [ebp - 0x18], esi
sbb dword [ebp - 0x14], edi

loc_fffad816:
mov esi, 1
xor edi, edi
jmp short loc_fffad827  ; jmp 0xfffad827

loc_fffad81f:
add ecx, ecx
adc ebx, ebx
add esi, esi
adc edi, edi

loc_fffad827:
mov edx, ebx
sar edx, 0x1f
mov eax, edx
sub eax, ecx
mov al, 1
sbb edx, ebx
shr edx, 0x1f
cmp ebx, dword [ebp - 0x14]
jb short loc_fffad845  ; jb 0xfffad845
ja short loc_fffad843  ; ja 0xfffad843
cmp ecx, dword [ebp - 0x18]
jb short loc_fffad845  ; jb 0xfffad845

loc_fffad843:
xor eax, eax

loc_fffad845:
test dl, al
jne short loc_fffad81f  ; jne 0xfffad81f

loc_fffad849:
cmp dword [ebp - 0x14], ebx
jb short loc_fffad861  ; jb 0xfffad861
ja short loc_fffad855  ; ja 0xfffad855
cmp dword [ebp - 0x18], ecx
jb short loc_fffad861  ; jb 0xfffad861

loc_fffad855:
sub dword [ebp - 0x18], ecx
sbb dword [ebp - 0x14], ebx
add dword [ebp - 0x20], esi
adc dword [ebp - 0x1c], edi

loc_fffad861:
shrd esi, edi, 1
shr edi, 1
mov eax, edi
shrd ecx, ebx, 1
shr ebx, 1
or eax, esi
jne short loc_fffad849  ; jne 0xfffad849
mov eax, dword [ebp - 0x24]
shr eax, 1
cmp eax, dword [ebp - 0x18]
jae short loc_fffad885  ; jae 0xfffad885
add dword [ebp - 0x20], 1
adc dword [ebp - 0x1c], 0

loc_fffad885:
mov eax, dword [ebp - 0x20]
lea esp, [esp + 0x1c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffad891:
push ebp
mov ebp, esp
push edi
mov edi, eax
mov eax, edx
push esi
push ebx
push esi
mov esi, edx
out 0x80, ax
mov ebx, dword [edi + 0x2ead]
call fcn_fffad7a7  ; call 0xfffad7a7
cmp dword [edi + 0x2258], 0
jne loc_fffadbef  ; jne 0xfffadbef
cmp si, 0xdd41
je loc_fffadb40  ; je 0xfffadb40
ja loc_fffad9be  ; ja 0xfffad9be
cmp si, 0xdd2a
je loc_fffadaf0  ; je 0xfffadaf0
ja short loc_fffad941  ; ja 0xfffad941
cmp si, 0xdd23
je loc_fffadac8  ; je 0xfffadac8
ja short loc_fffad909  ; ja 0xfffad909
cmp si, 0xdd20
je loc_fffadab3  ; je 0xfffadab3
cmp si, 0xdd21
je loc_fffadac0  ; je 0xfffadac0
cmp si, 0x55
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadbe4  ; jmp 0xfffadbe4

loc_fffad909:
cmp si, 0xdd26
je loc_fffadad8  ; je 0xfffadad8
ja short loc_fffad926  ; ja 0xfffad926
cmp si, 0xdd24
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadad0  ; jmp 0xfffadad0

loc_fffad926:
cmp si, 0xdd27
je loc_fffadae0  ; je 0xfffadae0
cmp si, 0xdd29
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadae8  ; jmp 0xfffadae8

loc_fffad941:
cmp si, 0xdd39
je loc_fffadb18  ; je 0xfffadb18
ja short loc_fffad986  ; ja 0xfffad986
cmp si, 0xdd31
je loc_fffadb00  ; je 0xfffadb00
ja short loc_fffad96b  ; ja 0xfffad96b
cmp si, 0xdd30
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadaf8  ; jmp 0xfffadaf8

loc_fffad96b:
cmp si, 0xdd33
je loc_fffadb08  ; je 0xfffadb08
cmp si, 0xdd34
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadb10  ; jmp 0xfffadb10

loc_fffad986:
cmp si, 0xdd3c
je loc_fffadb28  ; je 0xfffadb28
ja short loc_fffad9a3  ; ja 0xfffad9a3
cmp si, 0xdd3a
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadb20  ; jmp 0xfffadb20

loc_fffad9a3:
cmp si, 0xdd3d
je loc_fffadb30  ; je 0xfffadb30
cmp si, 0xdd40
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadb38  ; jmp 0xfffadb38

loc_fffad9be:
cmp si, 0xdd52
je loc_fffadb88  ; je 0xfffadb88
ja short loc_fffada36  ; ja 0xfffada36
cmp si, 0xdd4a
je loc_fffadb60  ; je 0xfffadb60
ja short loc_fffad9fe  ; ja 0xfffad9fe
cmp si, 0xdd47
je loc_fffadb50  ; je 0xfffadb50
cmp si, 0xdd49
je loc_fffadb58  ; je 0xfffadb58
cmp si, 0xdd46
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadb48  ; jmp 0xfffadb48

loc_fffad9fe:
cmp si, 0xdd4d
je loc_fffadb70  ; je 0xfffadb70
ja short loc_fffada1b  ; ja 0xfffada1b
cmp si, 0xdd4c
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadb68  ; jmp 0xfffadb68

loc_fffada1b:
cmp si, 0xdd50
je loc_fffadb78  ; je 0xfffadb78
cmp si, 0xdd51
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadb80  ; jmp 0xfffadb80

loc_fffada36:
cmp si, 0xdd5b
je loc_fffadbb0  ; je 0xfffadbb0
ja short loc_fffada7b  ; ja 0xfffada7b
cmp si, 0xdd56
je loc_fffadb98  ; je 0xfffadb98
ja short loc_fffada60  ; ja 0xfffada60
cmp si, 0xdd53
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadb90  ; jmp 0xfffadb90

loc_fffada60:
cmp si, 0xdd57
je loc_fffadba0  ; je 0xfffadba0
cmp si, 0xdd59
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadba8  ; jmp 0xfffadba8

loc_fffada7b:
cmp si, 0xdd5e
je loc_fffadbc3  ; je 0xfffadbc3
ja short loc_fffada98  ; ja 0xfffada98
cmp si, 0xdd5c
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadbb8  ; jmp 0xfffadbb8

loc_fffada98:
cmp si, 0xdd5f
je loc_fffadbce  ; je 0xfffadbce
cmp si, 0xdd61
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadbd9  ; jmp 0xfffadbd9

loc_fffadab3:
mov dword [ebx], eax
mov dword [ebx + 0x98], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadac0:
mov dword [ebx + 4], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadac8:
mov dword [ebx + 8], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadad0:
mov dword [ebx + 0xc], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadad8:
mov dword [ebx + 0x10], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadae0:
mov dword [ebx + 0x14], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadae8:
mov dword [ebx + 0x18], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadaf0:
mov dword [ebx + 0x1c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadaf8:
mov dword [ebx + 0x20], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb00:
mov dword [ebx + 0x24], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb08:
mov dword [ebx + 0x28], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb10:
mov dword [ebx + 0x2c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb18:
mov dword [ebx + 0x30], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb20:
mov dword [ebx + 0x34], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb28:
mov dword [ebx + 0x38], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb30:
mov dword [ebx + 0x3c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb38:
mov dword [ebx + 0x40], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb40:
mov dword [ebx + 0x44], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb48:
mov dword [ebx + 0x48], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb50:
mov dword [ebx + 0x4c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb58:
mov dword [ebx + 0x50], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb60:
mov dword [ebx + 0x54], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb68:
mov dword [ebx + 0x58], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb70:
mov dword [ebx + 0x5c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb78:
mov dword [ebx + 0x60], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb80:
mov dword [ebx + 0x64], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb88:
mov dword [ebx + 0x68], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb90:
mov dword [ebx + 0x6c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadb98:
mov dword [ebx + 0x70], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadba0:
mov dword [ebx + 0x74], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadba8:
mov dword [ebx + 0x78], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadbb0:
mov dword [ebx + 0x7c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadbb8:
mov dword [ebx + 0x80], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadbc3:
mov dword [ebx + 0x84], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadbce:
mov dword [ebx + 0x88], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadbd9:
mov dword [ebx + 0x8c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadbe4:
mov dword [ebx + 0x9c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadbef:
cmp si, 0xdd41
je loc_fffade31  ; je 0xfffade31
ja loc_fffadc9d  ; ja 0xfffadc9d
cmp si, 0xdd2c
je loc_fffaddb0  ; je 0xfffaddb0
ja short loc_fffadc4f  ; ja 0xfffadc4f
cmp si, 0xdd23
je loc_fffadd5c  ; je 0xfffadd5c
ja short loc_fffadc34  ; ja 0xfffadc34
cmp si, 0x55
je loc_fffadf2c  ; je 0xfffadf2c
cmp si, 0xdd20
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadd46  ; jmp 0xfffadd46

loc_fffadc34:
cmp si, 0xdd26
je loc_fffadd71  ; je 0xfffadd71
cmp si, 0xdd29
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadd9b  ; jmp 0xfffadd9b

loc_fffadc4f:
cmp si, 0xdd3a
je loc_fffadde9  ; je 0xfffadde9
ja short loc_fffadc77  ; ja 0xfffadc77
cmp si, 0xdd36
je loc_fffaddc5  ; je 0xfffaddc5
cmp si, 0xdd39
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffaddd7  ; jmp 0xfffaddd7

loc_fffadc77:
cmp si, 0xdd3d
je loc_fffade0d  ; je 0xfffade0d
cmp si, 0xdd40
je loc_fffade1f  ; je 0xfffade1f
cmp si, 0xdd3c
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffaddfb  ; jmp 0xfffaddfb

loc_fffadc9d:
cmp si, 0xdd50
je loc_fffadf0a  ; je 0xfffadf0a
ja short loc_fffadcf8  ; ja 0xfffadcf8
cmp si, 0xdd49
je loc_fffade7c  ; je 0xfffade7c
ja short loc_fffadcd2  ; ja 0xfffadcd2
cmp si, 0xdd46
je loc_fffade55  ; je 0xfffade55
cmp si, 0xdd47
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffade6a  ; jmp 0xfffade6a

loc_fffadcd2:
cmp si, 0xdd4c
je loc_fffadea0  ; je 0xfffadea0
cmp si, 0xdd4d
je loc_fffadeb2  ; je 0xfffadeb2
cmp si, 0xdd4a
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffade8e  ; jmp 0xfffade8e

loc_fffadcf8:
cmp si, 0xdd59
je loc_fffadd86  ; je 0xfffadd86
ja short loc_fffadd20  ; ja 0xfffadd20
cmp si, 0xdd52
je loc_fffadf1e  ; je 0xfffadf1e
cmp si, 0xdd56
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffade43  ; jmp 0xfffade43

loc_fffadd20:
cmp si, 0xdd5f
je loc_fffadebd  ; je 0xfffadebd
cmp si, 0xdd65
je loc_fffadece  ; je 0xfffadece
cmp si, 0xdd5c
jne loc_fffadf35  ; jne 0xfffadf35
jmp near loc_fffadee5  ; jmp 0xfffadee5

loc_fffadd46:
cmp dword [ebx], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx], eax
mov dword [ebx + 0x98], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadd5c:
cmp dword [ebx + 4], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 4], eax
mov dword [ebx + 8], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadd71:
cmp dword [ebx + 0xc], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0xc], eax
mov dword [ebx + 0x10], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadd86:
cmp dword [ebx + 0x14], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x14], eax
mov dword [ebx + 0x78], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadd9b:
cmp dword [ebx + 0x7c], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x7c], eax
mov dword [ebx + 0x18], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffaddb0:
cmp dword [ebx + 0x1c], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x1c], eax
mov dword [ebx + 0x20], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffaddc5:
cmp dword [ebx + 0x2c], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x2c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffaddd7:
cmp dword [ebx + 0x30], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x30], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadde9:
cmp dword [ebx + 0x34], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x34], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffaddfb:
cmp dword [ebx + 0x38], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x38], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffade0d:
cmp dword [ebx + 0x3c], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x3c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffade1f:
cmp dword [ebx + 0x40], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x40], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffade31:
cmp dword [ebx + 0x44], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x44], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffade43:
cmp dword [ebx + 0x70], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x70], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffade55:
cmp dword [ebx + 0x74], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x74], eax
mov dword [ebx + 0x48], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffade6a:
cmp dword [ebx + 0x4c], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x4c], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffade7c:
cmp dword [ebx + 0x50], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x50], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffade8e:
cmp dword [ebx + 0x54], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x54], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadea0:
cmp dword [ebx + 0x58], 0
jne loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x58], eax
jmp near loc_fffadf35  ; jmp 0xfffadf35

loc_fffadeb2:
cmp dword [ebx + 0x5c], 0
jne short loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x5c], eax
jmp short loc_fffadf35  ; jmp 0xfffadf35

loc_fffadebd:
cmp dword [ebx + 0x88], 0
jne short loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x88], eax
jmp short loc_fffadf35  ; jmp 0xfffadf35

loc_fffadece:
cmp dword [ebx + 0x8c], 0
jne short loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x8c], eax
mov dword [ebx + 0x90], eax
jmp short loc_fffadf35  ; jmp 0xfffadf35

loc_fffadee5:
cmp dword [ebx + 0x8c], 0
jne short loc_fffadefc  ; jne 0xfffadefc
mov dword [ebx + 0x8c], eax
mov dword [ebx + 0x80], eax
jmp short loc_fffadf35  ; jmp 0xfffadf35

loc_fffadefc:
mov dword [ebx + 0x94], eax
mov dword [ebx + 0x80], eax
jmp short loc_fffadf35  ; jmp 0xfffadf35

loc_fffadf0a:
cmp dword [ebx + 0x84], 0
jne short loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x84], eax
mov dword [ebx + 0x60], eax
jmp short loc_fffadf35  ; jmp 0xfffadf35

loc_fffadf1e:
cmp dword [ebx + 0x64], 0
jne short loc_fffadf35  ; jne 0xfffadf35
mov dword [ebx + 0x64], eax
mov dword [ebx + 0x68], eax
jmp short loc_fffadf35  ; jmp 0xfffadf35

loc_fffadf2c:
mov dword [ebx + 0x6c], eax
mov dword [ebx + 0x9c], eax

loc_fffadf35:
pop ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffadf3b:
push ebp
mov ebp, esp
push edi
mov edi, ecx
push esi
xor esi, esi
push ebx
mov ebx, eax

loc_fffadf47:
mov al, 0xa
out 0x70, al
in al, 0x71
mov cl, al
inc esi
shr cl, 7
cmp esi, 0xffffe
setbe al
test cl, al
jne short loc_fffadf47  ; jne 0xfffadf47
cmp esi, 0xffffe
jbe short loc_fffadf8e  ; jbe 0xfffadf8e
mov cl, 0xb
mov al, cl
out 0x70, al
mov al, 0x82
out 0x71, al
mov al, 0xa
out 0x70, al
mov al, 0x26
out 0x71, al
mov al, 0xc
out 0x70, al
in al, 0x71
mov al, 0xd
out 0x70, al
in al, 0x71
mov al, cl
out 0x70, al
mov al, 2
out 0x71, al

loc_fffadf8e:
xor eax, eax
out 0x70, al
in al, 0x71
mov byte [ebx], al
mov al, 2
out 0x70, al
in al, 0x71
mov byte [edx], al
mov al, 4
out 0x70, al
in al, 0x71
mov byte [edi], al
mov al, 7
out 0x70, al
in al, 0x71
mov edx, dword [ebp + 8]
mov byte [edx], al
mov al, 8
out 0x70, al
in al, 0x71
mov edx, dword [ebp + 0xc]
mov byte [edx], al
mov al, 9
out 0x70, al
in al, 0x71
mov edx, dword [ebp + 0x10]
movzx eax, al
mov word [edx], ax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffadfd0:
push ebp
mov ebp, esp
push edi
push esi
mov esi, edx
mov edx, eax
push ebx
xor eax, eax
mov ebx, ecx
lea esp, [esp - 0x2c]
mov ecx, 0x6031
call fcn_fffa2408  ; call 0xfffa2408
sub esp, 0xc
xor edx, edx
push esi
xor eax, eax
mov ecx, 2
call fcn_fffacfd8  ; call 0xfffacfd8
add esp, 0x10
test eax, eax
jne loc_fffae356  ; jne 0xfffae356
cmp dword [0x2258], 0
jne loc_fffae0d2  ; jne 0xfffae0d2
mov dword [ebp - 0x1c], 0
mov dword [ebp - 0x20], 0xaf1
mov byte [ebp - 0x25], 0xff
xor esi, esi

loc_fffae02a:
xor eax, eax
mov edx, dword [ebp - 0x1c]
call fcn_fffc922c  ; call 0xfffc922c
imul eax, dword [ebp - 0x1c], 0x1055
cmp dword [eax + 0xa], 0
je short loc_fffae047  ; je 0xfffae047
cmp dword [eax + 0x27], 0
jne short loc_fffae052  ; jne 0xfffae052

loc_fffae047:
mov eax, esi
test al, al
mov al, 1
cmove esi, eax
jmp short loc_fffae057  ; jmp 0xfffae057

loc_fffae052:
mov esi, 2

loc_fffae057:
imul edx, dword [ebp - 0x1c], 0x8c
mov dword [ebp - 0x24], 0
mov dword [ebp - 0x2c], edx

loc_fffae068:
imul eax, dword [ebp - 0x24], 0x46
mov edx, dword [ebp - 0x2c]
lea edi, [eax + edx + 0x210b]
movzx edx, byte [edi + 0xa]
test dl, dl
je short loc_fffae0b0  ; je 0xfffae0b0
movzx ecx, byte [edi + 0xb]
test cl, cl
je short loc_fffae0b0  ; je 0xfffae0b0
push eax
movsx eax, byte [edi + 0x22]
push eax
movzx eax, byte [edi + 9]
push eax
movzx eax, byte [edi + 0xc]
push eax
xor eax, eax
call fcn_fffac440  ; call 0xfffac440
add esp, 0x10
cmp dword [ebp - 0x20], eax
cmovbe eax, dword [ebp - 0x20]
mov dword [ebp - 0x20], eax
mov al, byte [edi + 6]
and byte [ebp - 0x25], al

loc_fffae0b0:
inc dword [ebp - 0x24]
cmp dword [ebp - 0x24], 2
jne short loc_fffae068  ; jne 0xfffae068
inc dword [ebp - 0x1c]
cmp dword [ebp - 0x1c], 2
jne loc_fffae02a  ; jne 0xfffae02a
xor eax, eax
call fcn_fffbacbd  ; call 0xfffbacbd
jmp near loc_fffae22a  ; jmp 0xfffae22a

loc_fffae0d2:
mov dl, byte [0x22f3]
xor esi, esi
movzx eax, dl
mov byte [ebp - 0x2c], dl
mov dword [ebp - 0x1c], 0
mov byte [ebp - 0x25], 0xff
mov dword [ebp - 0x20], 0xaf1
mov dword [ebp - 0x34], eax

loc_fffae0f5:
imul eax, dword [ebp - 0x1c], 0x1055
cmp dword [eax + 0xa], 0
je short loc_fffae108  ; je 0xfffae108
cmp dword [eax + 0x27], 0
jne short loc_fffae113  ; jne 0xfffae113

loc_fffae108:
mov edx, esi
mov al, 1
test dl, dl
cmove esi, eax
jmp short loc_fffae118  ; jmp 0xfffae118

loc_fffae113:
mov esi, 2

loc_fffae118:
imul edx, dword [ebp - 0x1c], 0x8c
mov dword [ebp - 0x24], 0
mov dword [ebp - 0x30], edx

loc_fffae129:
imul eax, dword [ebp - 0x24], 0x46
mov edx, dword [ebp - 0x30]
lea edi, [eax + edx + 0x210b]
movzx edx, byte [edi + 0xa]
test dl, dl
je short loc_fffae172  ; je 0xfffae172
movzx ecx, byte [edi + 0xb]
test cl, cl
je short loc_fffae172  ; je 0xfffae172
push eax
movsx eax, byte [edi + 0x22]
push eax
movzx eax, byte [edi + 9]
push eax
movzx eax, byte [edi + 0xc]
push eax
mov eax, dword [ebp - 0x34]
call fcn_fffac440  ; call 0xfffac440
add esp, 0x10
cmp dword [ebp - 0x20], eax
cmovbe eax, dword [ebp - 0x20]
mov dword [ebp - 0x20], eax
mov al, byte [edi + 6]
and byte [ebp - 0x25], al

loc_fffae172:
inc dword [ebp - 0x24]
cmp dword [ebp - 0x24], 2
jne short loc_fffae129  ; jne 0xfffae129
inc dword [ebp - 0x1c]
cmp dword [ebp - 0x1c], 2
jne loc_fffae0f5  ; jne 0xfffae0f5
mov edx, dword [ebp - 0x20]
mov dword [0x20b6], edx
cmp byte [ebp - 0x2c], 0
jne short loc_fffae1b3  ; jne 0xfffae1b3
mov byte [0x2274], 0
mov byte [0x2275], 0
mov byte [0x2276], 0
mov byte [0x2277], 0

loc_fffae1b3:
mov al, byte [0x22d8]
test al, al
je short loc_fffae1ec  ; je 0xfffae1ec
mov dl, byte [0x2f]
add dl, byte [0x12]
mov byte [0x3a], dl
mov dl, byte [0x1084]
add dl, byte [0x1067]
mov byte [0x3b], al
mov byte [0x108f], dl
mov byte [0x1090], al
jmp short loc_fffae1f7  ; jmp 0xfffae1f7

loc_fffae1ec:
xor eax, eax
call fcn_fffc59e4  ; call 0xfffc59e4
test eax, eax
jne short loc_fffae21e  ; jne 0xfffae21e

loc_fffae1f7:
xor eax, eax
call fcn_fffc6278  ; call 0xfffc6278
test eax, eax
jne short loc_fffae21e  ; jne 0xfffae21e
call fcn_fffc6069  ; call 0xfffc6069
xor eax, eax
call fcn_fffc5e63  ; call 0xfffc5e63
xor eax, eax
call fcn_fffc5f66  ; call 0xfffc5f66
xor eax, eax
call fcn_fffc5d93  ; call 0xfffc5d93
jmp short loc_fffae223  ; jmp 0xfffae223

loc_fffae21e:
cmp eax, 0xb
je short loc_fffae1b3  ; je 0xfffae1b3

loc_fffae223:
xor eax, eax
call fcn_fffba3ca  ; call 0xfffba3ca

loc_fffae22a:
cmp dword [ebp - 0x20], 0x855
jbe short loc_fffae240  ; jbe 0xfffae240
cmp dword [0x2258], 1
jne loc_fffae356  ; jne 0xfffae356

loc_fffae240:
mov al, byte [0x1090]
mov dl, byte [0x3b]
cmp byte [0x3b], al
cmovae eax, edx
mov byte [ebx], al
mov al, byte [0x1092]
mov dl, byte [0x3d]
cmp byte [0x3d], al
cmovae eax, edx
mov byte [ebx + 2], al
mov al, byte [0x1094]
mov dl, byte [0x3f]
cmp byte [0x3f], al
cmovae eax, edx
mov byte [ebx + 4], al
mov al, byte [0x1093]
mov dl, byte [0x3e]
cmp byte [0x3e], al
cmovae eax, edx
mov byte [ebx + 3], al
movzx eax, byte [0x1095]
movzx edx, byte [0x40]
cmp byte [0x40], al
cmovae eax, edx
mov word [ebx + 5], ax
movzx eax, byte [0x1099]
movzx edx, byte [0x44]
cmp byte [0x44], al
cmovae eax, edx
mov word [ebx + 0xa], ax
mov al, byte [0x1098]
mov dl, byte [0x43]
cmp byte [0x43], al
cmovae eax, edx
mov byte [ebx + 9], al
mov al, byte [0x1097]
mov dl, byte [0x42]
cmp byte [0x42], al
cmovae eax, edx
mov byte [ebx + 8], al
mov al, byte [0x1096]
mov dl, byte [0x41]
cmp byte [0x41], al
cmovae eax, edx
mov byte [ebx + 7], al
mov eax, dword [0x109c]
cmp word [0x47], ax
cmovae ax, word [0x47]
mov word [ebx + 0xe], ax
mov al, byte [0x1091]
mov dl, byte [0x3c]
cmp byte [0x3c], al
cmovae eax, edx
mov dl, byte [ebp - 0x25]
mov byte [ebx + 1], al
mov eax, dword [ebp - 0x20]
mov dword [ebx + 0x16], eax
mov eax, esi
mov byte [ebx + 0x1a], dl
mov byte [ebx + 0xc], al

loc_fffae356:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffae35e:
push ebp
mov ebp, esp
push edi
push esi
mov esi, edx
push ebx
mov ebx, eax
lea esp, [esp - 0xc]
mov eax, dword [edx + 9]
cmp dword [eax + 6], 1
jne loc_fffae410  ; jne 0xfffae410
mov al, byte [eax + 0xa]
mov byte [ebx + 0x22d9], 0
mov byte [ebx + 0x22d8], al
mov eax, dword [edx + 9]
mov edi, 0x10
mov al, byte [eax + 0xb]
mov byte [ebx + 0x22db], al
mov eax, dword [edx + 9]
mov al, byte [eax + 0xc]
mov byte [ebx + 0x22dc], al
mov eax, dword [edx + 9]
mov ax, word [eax + 0xd]
mov word [ebx + 0x22dd], ax
mov eax, dword [edx + 9]
mov al, byte [eax + 0x12]
mov byte [ebx + 0x22da], al
mov eax, dword [edx + 9]
mov ax, word [eax + 0x13]
mov word [ebx + 0x22e6], ax
mov eax, dword [edx + 9]
mov al, byte [eax + 0x15]
mov byte [ebx + 0x22e1], al
mov eax, dword [edx + 9]
mov al, byte [eax + 0x16]
mov byte [ebx + 0x22df], al
mov eax, dword [edx + 9]
mov al, byte [eax + 0x17]
mov byte [ebx + 0x22e0], al
mov eax, dword [edx + 9]
mov ax, word [eax + 0x18]
mov word [ebx + 0x22ec], ax
mov eax, dword [edx + 9]
mov ax, word [eax + 0x1a]
mov word [ebx + 0x22e2], ax
jmp short loc_fffae437  ; jmp 0xfffae437

loc_fffae410:
cmp byte [ebx + 0x22f3], 0
mov edi, 0x10
je short loc_fffae425  ; je 0xfffae425
movzx edi, byte [ebx + 0x22e4]

loc_fffae425:
lea eax, [ebx + 0x22d8]
xor ecx, ecx
mov edx, 0x1b
call fcn_fffa24c1  ; call 0xfffa24c1

loc_fffae437:
mov eax, dword [esi + 9]
mov al, byte [eax + 0xf]
cmp al, 0x10
cmove eax, edi
mov byte [ebx + 0x22e4], al
lea esp, [esp + 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffae451:
db 0x00
db 0x00
db 0x00

fcn_fffae454:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x80]
mov dword [ebp - 0x84], eax
imul eax, edx, 0x1055
add eax, dword [ebp - 0x84]
movzx esi, byte [eax + 0x3e]
movzx ebx, byte [eax + 0x44]
mov dword [ebp - 0x80], edx
shr ebx, 2
mov dl, byte [eax + 0x43]
mov word [ebp - 0x5a], si
mov edi, dword [ebp + 8]
mov byte [ebp - 0x61], cl
mov byte [ebp - 0x4c], cl
mov dword [ebp - 0x6c], 8
mov word [ebp - 0x64], 0
lea esi, [ebx + 1]
inc ebx
mov dword [ebp - 0x7c], esi
mov byte [ebp - 0x62], 0
movzx esi, dl
cmp dword [ebp - 0x7c], esi
cmova edx, ebx
mov byte [ebp - 0x60], 4
mov byte [ebp - 0x58], dl
mov byte [ebp - 0x5f], 0x12
mov byte [ebp - 0x5e], 0
mov byte [ebp - 0x5d], 0
mov word [ebp - 0x5c], 4
mov dword [ebp - 0x68], 0
mov dword [ebp - 0x57], 9
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 2
mov byte [ebp - 0x4a], 0x12
mov byte [ebp - 0x49], 0
shl edi, 5
mov byte [ebp - 0x48], 0
movzx ebx, byte [eax + 0x41]
movzx edx, byte [eax + 0x3c]
cmp byte [eax + 0x42], 9
lea edx, [ebx + edx + 8]
movzx ebx, byte [eax + 0x42]
movzx eax, byte [eax + 0x3f]
mov word [ebp - 0x45], dx
mov edx, 8
cmovae edx, ebx
mov word [ebp - 0x1b], ax
movzx eax, byte [ebp + 0xc]
mov word [ebp - 0x47], di
mov byte [ebp - 0x37], cl
mov word [ebp - 0x32], di
mov word [ebp - 0x30], dx
mov byte [ebp - 0x22], cl
mov byte [ebp - 0x43], 4
mov dword [ebp - 0x53], 0
mov dword [ebp - 0x42], 4
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 2
mov byte [ebp - 0x35], 0x12
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
mov dword [ebp - 0x2d], 3
mov word [ebp - 0x25], 0x400
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x19], 4
mov dword [ebp - 0x29], 0
mov ecx, 3
push eax
lea eax, [ebp - 0x6c]
mov edx, dword [ebp - 0x80]
push eax
mov eax, dword [ebp - 0x84]
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
mov ebx, eax
add esp, 0x20
xor ecx, ecx
mov edx, dword [ebp - 0x80]
mov eax, dword [ebp - 0x84]
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
cmove eax, ebx
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffae5de:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x10]
mov ebx, dword [ebp + 8]
cmp bl, 9
mov dword [ebp - 0x18], ecx
mov byte [ebp - 0x12], dl
mov cl, byte [ebp + 0xc]
mov dl, bl
jne short loc_fffae608  ; jne 0xfffae608
mov dl, byte [eax + 0x20b5]
mov byte [ebp - 0x11], dl
xor edx, edx
jmp short loc_fffae60e  ; jmp 0xfffae60e

loc_fffae608:  ; not directly referenced
inc edx
mov byte [ebp - 0x11], dl
mov dl, bl

loc_fffae60e:  ; not directly referenced
movzx ebx, byte [ebp - 0x12]
imul ebx, ebx, 0x24
add ebx, dword [ebp + 0x10]
mov dword [ebp - 0x1c], ebx
mov ebx, ecx
shl ebx, 0x1b
or ebx, 0x80000
mov dword [ebp - 0x10], ebx
jmp short loc_fffae674  ; jmp 0xfffae674

loc_fffae62b:  ; not directly referenced
mov esi, dword [ebp - 0x1c]
xor edi, edi
movzx ecx, dl
cmp dword [ebp - 0x18], 3
mov ebx, dword [esi + ecx*4]
ja short loc_fffae646  ; ja 0xfffae646
mov ecx, dword [ebp - 0x18]
movzx edi, byte [ecx + ref_fffced64]  ; movzx edi, byte [ecx - 0x3129c]

loc_fffae646:  ; not directly referenced
movzx esi, dl
cmp byte [ebp - 0x12], 1
sbb ecx, ecx
mov esi, dword [esi*4 + ref_fffcf5b0]  ; mov esi, dword [esi*4 - 0x30a50]
not ecx
add esi, dword [eax + 0x2223]
and ecx, 0x100
and ebx, 0x7ffffff
add ecx, edi
or ebx, dword [ebp - 0x10]
add ecx, esi
inc edx
mov dword [ecx], ebx

loc_fffae674:  ; not directly referenced
cmp dl, byte [ebp - 0x11]
jb short loc_fffae62b  ; jb 0xfffae62b
lea esp, [esp + 0x10]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffae682:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x2c]
mov dword [ebp - 0x24], edx
imul edx, edx, 0x1055
mov al, byte [ebp + 8]
mov byte [ebp - 0x19], al
mov al, byte [ebp + 0xc]
cmp al, 9
lea edi, [ebx + edx + 0x4d]
jne short loc_fffae725  ; jne 0xfffae725
jmp short loc_fffae70b  ; jmp 0xfffae70b

loc_fffae6aa:  ; not directly referenced
movzx edx, byte [ebp - 0x20]
mov eax, dword [ebp - 0x2c]
add eax, edi
lea ecx, [edx + edx*4]
mov dword [ebp - 0x28], ecx
imul ecx, esi, 0x2d
add ecx, dword [ebp - 0x28]
movzx eax, byte [edx + eax + 0x2e1]
shl eax, 0xf
movzx ecx, byte [edi + ecx + 0xbc]
shl ecx, 8
and ecx, 0xfffc7fff
or eax, ecx
cmp byte [ebp - 0x19], 0x3f
jbe short loc_fffae6ee  ; jbe 0xfffae6ee
movzx ecx, byte [ebp - 0x19]
push 1
sub ecx, 0x40
jmp short loc_fffae6f4  ; jmp 0xfffae6f4

loc_fffae6ee:  ; not directly referenced
push 0
movzx ecx, byte [ebp - 0x19]

loc_fffae6f4:  ; not directly referenced
push ecx
mov ecx, esi
push eax
mov eax, ebx
push edx
mov edx, dword [ebp - 0x24]
call fcn_fffbfc84  ; call 0xfffbfc84
add esp, 0x10
inc byte [ebp - 0x20]
jmp short loc_fffae718  ; jmp 0xfffae718

loc_fffae70b:  ; not directly referenced
movzx esi, cl
mov byte [ebp - 0x20], 0
imul eax, esi, 0x12
mov dword [ebp - 0x2c], eax

loc_fffae718:  ; not directly referenced
mov cl, byte [ebp - 0x20]
cmp cl, byte [ebx + 0x20b5]
jb short loc_fffae6aa  ; jb 0xfffae6aa
jmp short loc_fffae781  ; jmp 0xfffae781

loc_fffae725:  ; not directly referenced
movzx ecx, cl
movzx edx, al
imul eax, ecx, 0x12
lea esi, [edx + edx*4]
mov dword [ebp - 0x20], esi
add eax, edi
imul esi, ecx, 0x2d
add esi, dword [ebp - 0x20]
movzx eax, byte [edx + eax + 0x2e1]
shl eax, 0xf
movzx esi, byte [edi + esi + 0xbc]
shl esi, 8
and esi, 0xfffc7fff
or eax, esi
cmp byte [ebp - 0x19], 0x3f
jbe short loc_fffae76b  ; jbe 0xfffae76b
movzx esi, byte [ebp - 0x19]
push 1
sub esi, 0x40
jmp short loc_fffae771  ; jmp 0xfffae771

loc_fffae76b:  ; not directly referenced
push 0
movzx esi, byte [ebp - 0x19]

loc_fffae771:  ; not directly referenced
push esi
push eax
mov eax, ebx
push edx
mov edx, dword [ebp - 0x24]
call fcn_fffbfc84  ; call 0xfffbfc84
add esp, 0x10

loc_fffae781:  ; not directly referenced
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffae789:  ; not directly referenced
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
lea esp, [esp - 0x6c]
mov esi, dword [ebp + 0x14]
mov ebx, dword [ebp + 0x1c]
mov byte [ebp - 0x54], dl
mov byte [ebp - 0x58], cl
mov word [ebp - 0x62], bx
xor ecx, ecx
lea ebx, [eax + 0x3c31]
mov word [esi], 0
mov edx, 0x900
mov eax, ebx
mov dword [ebp - 0x60], ebx
call fcn_fffa24c1  ; call 0xfffa24c1
mov al, byte [edi + 0x20b5]
xor ecx, ecx
mov byte [ebp - 0x50], al
mov word [ebp - 0x4a], 0x100
mov esi, 1
jmp short loc_fffae808  ; jmp 0xfffae808

loc_fffae7d9:  ; not directly referenced
mov edx, dword [ebp + 8]
mov eax, esi
shl eax, cl
not eax
and word [ebp - 0x4a], ax
mov bl, byte [edx + ecx]
mov edx, dword [ebp + 0xc]
movzx eax, bl
mov word [ebp + ecx*2 - 0x3c], ax
mov al, byte [edx + ecx]
movzx edx, al
mov word [ebp + ecx*2 - 0x2a], dx
inc ecx
cmp bl, al
ja loc_fffae96c  ; ja 0xfffae96c

loc_fffae808:  ; not directly referenced
cmp byte [ebp - 0x50], cl
ja short loc_fffae7d9  ; ja 0xfffae7d9
movzx ebx, byte [ebp - 0x58]
mov byte [ebp - 0x4b], 0
movzx esi, byte [ebp - 0x54]
mov dword [ebp - 0x58], ebx
mov dword [ebp - 0x54], esi
jmp near loc_fffae965  ; jmp 0xfffae965

loc_fffae824:  ; not directly referenced
movzx esi, word [ebp - 0x4a]
movzx ecx, bl
bt esi, ebx
movsx eax, word [ebp + ecx*2 - 0x2a]
movsx edx, word [ebp + ecx*2 - 0x3c]
jb short loc_fffae84b  ; jb 0xfffae84b
cmp eax, edx
jns short loc_fffae84b  ; jns 0xfffae84b
mov eax, 1
shl eax, cl
or word [ebp - 0x4a], ax
jmp short loc_fffae872  ; jmp 0xfffae872

loc_fffae84b:  ; not directly referenced
add eax, edx
mov esi, 2
cdq
idiv esi
push esi
mov edx, dword [ebp - 0x54]
push esi
push ecx
mov byte [ebp + ecx - 0x45], al
and eax, 0xff
push eax
mov ecx, dword [ebp - 0x58]
mov eax, edi
call fcn_fffae682  ; call 0xfffae682
add esp, 0x10

loc_fffae872:  ; not directly referenced
inc ebx

loc_fffae873:  ; not directly referenced
cmp bl, byte [edi + 0x20b5]
jb short loc_fffae824  ; jb 0xfffae824
push edx
xor eax, eax
cmp byte [ebp - 0x4b], 0
push edx
sete al
mov ecx, dword [ebp - 0x58]
push eax
movzx eax, word [ebp - 0x62]
mov edx, dword [ebp - 0x54]
push eax
mov eax, edi
call fcn_fffae454  ; call 0xfffae454
add esp, 0x10
test eax, eax
mov dword [ebp - 0x50], eax
jne loc_fffae980  ; jne 0xfffae980
push eax
mov edx, dword [ebp - 0x60]
mov ecx, dword [ebp - 0x54]
push eax
lea eax, [ebp - 0x45]
push 0
push eax
mov eax, edi
call fcn_fffc66a8  ; call 0xfffc66a8
movzx edx, word [ebp - 0x4a]
add esp, 0x10
mov word [ebp - 0x70], 0
xor eax, eax
mov dword [ebp - 0x68], edx
jmp short loc_fffae94e  ; jmp 0xfffae94e

loc_fffae8d0:  ; not directly referenced
movzx ecx, al
mov ebx, dword [ebp - 0x68]
bt ebx, eax
jb short loc_fffae91f  ; jb 0xfffae91f
mov esi, ecx
mov dl, byte [ebp + ecx - 0x45]
shl esi, 7
mov byte [ebp - 0x6d], dl
movzx ebx, dl
lea ebx, [ebx + esi + 0x1e18]
cmp word [edi + ebx*2 + 1], 0
jne short loc_fffae975  ; jne 0xfffae975
mov esi, 1
shl esi, cl
or word [ebp - 0x70], si
jmp short loc_fffae975  ; jmp 0xfffae975

loc_fffae906:  ; not directly referenced
mov esi, dword [ebp + 0x10]
mov bl, byte [ebp - 0x6d]
movzx edx, al
mov byte [esi + edx], bl
mov ebx, dword [ebp + 0x14]
mov edx, 1
shl edx, cl
or word [ebx], dx

loc_fffae91f:  ; not directly referenced
movzx edx, word [ebp - 0x70]
cmp dword [ebp + 0x18], 0
jne short loc_fffae935  ; jne 0xfffae935
bt edx, ecx
movzx edx, byte [ebp + ecx - 0x45]
jae short loc_fffae93f  ; jae 0xfffae93f
jmp short loc_fffae947  ; jmp 0xfffae947

loc_fffae935:  ; not directly referenced
bt edx, ecx
movzx edx, byte [ebp + ecx - 0x45]
jae short loc_fffae947  ; jae 0xfffae947

loc_fffae93f:  ; not directly referenced
inc edx
mov word [ebp + ecx*2 - 0x3c], dx
jmp short loc_fffae94d  ; jmp 0xfffae94d

loc_fffae947:  ; not directly referenced
dec edx
mov word [ebp + ecx*2 - 0x2a], dx

loc_fffae94d:  ; not directly referenced
inc eax

loc_fffae94e:  ; not directly referenced
cmp al, byte [edi + 0x20b5]
jb loc_fffae8d0  ; jb 0xfffae8d0
inc byte [ebp - 0x4b]
cmp word [ebp - 0x4a], 0x1ff
je short loc_fffae980  ; je 0xfffae980

loc_fffae965:  ; not directly referenced
xor ebx, ebx
jmp near loc_fffae873  ; jmp 0xfffae873

loc_fffae96c:  ; not directly referenced
mov dword [ebp - 0x50], 1
jmp short loc_fffae980  ; jmp 0xfffae980

loc_fffae975:  ; not directly referenced
movzx esi, word [ebp - 0x70]
bt esi, ecx
jb short loc_fffae906  ; jb 0xfffae906
jmp short loc_fffae91f  ; jmp 0xfffae91f

loc_fffae980:  ; not directly referenced
mov eax, dword [ebp - 0x50]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffae98b:  ; not directly referenced
push ebp
mov ebp, esp
push edi
mov edi, ecx
push esi
mov esi, eax
push ebx
xor ebx, ebx
lea esp, [esp - 0x3c]
mov byte [ebp - 0x28], dl
mov edx, dword [ebp + 0x1c]
mov eax, dword [ebp + 0x20]
mov word [ebp - 0x38], ax
lea ecx, [esi + 0x3c31]
mov dword [ebp - 0x34], ecx
mov ecx, 0xff
mov eax, dword [ebp - 0x34]
mov word [edx], 0
mov edx, 0x900
call fcn_fffa24c1  ; call 0xfffa24c1
mov byte [ebp - 0x2c], 0
jmp short loc_fffaea1b  ; jmp 0xfffaea1b

loc_fffae9ce:  ; not directly referenced
movzx eax, bl
mov ecx, dword [ebp + 0x18]
movzx edx, word [ecx]
bt edx, ebx
jae short loc_fffaea1a  ; jae 0xfffaea1a
mov edx, dword [ebp + 8]
mov ecx, dword [ebp + 0xc]
mov dl, byte [edx + eax]
mov byte [ebp - 0x45], dl
mov dl, byte [ecx + eax]
mov cl, byte [ebp - 0x2c]
sub dl, byte [ebp - 0x45]
cmp byte [ebp - 0x2c], dl
cmovb ecx, edx
shl eax, 7
mov byte [ebp - 0x2c], cl
movzx ecx, byte [ebp - 0x45]
movzx edx, dl
lea edx, [edx + edx + 2]
lea eax, [ecx + eax + 0x1e18]
xor ecx, ecx
lea eax, [esi + eax*2 + 1]
call fcn_fffa24c1  ; call 0xfffa24c1

loc_fffaea1a:  ; not directly referenced
inc ebx

loc_fffaea1b:  ; not directly referenced
cmp bl, byte [esi + 0x20b5]
jb short loc_fffae9ce  ; jb 0xfffae9ce
cmp byte [ebp - 0x28], 1
sbb eax, eax
xor ebx, ebx
and eax, 0xfffffc00
add eax, 0x476c
add eax, dword [esi + 0x2223]
mov eax, dword [eax]
mov eax, edi
movzx edi, al
mov dword [ebp - 0x30], edi
movzx edi, byte [ebp - 0x28]
jmp near loc_fffaeb05  ; jmp 0xfffaeb05

loc_fffaea4e:  ; not directly referenced
movzx eax, byte [ebp - 0x28]
mov ecx, dword [ebp + 0x18]
movzx edx, word [ecx]
mov cl, byte [ebp - 0x28]
bt edx, ecx
jae short loc_fffaea93  ; jae 0xfffaea93
mov ecx, dword [ebp + 8]
mov dl, byte [ecx + eax]
movzx ecx, dl
add ecx, dword [ebp - 0x40]
mov dword [ebp - 0x3c], ecx
mov ecx, dword [ebp + 0xc]
movzx ecx, byte [ecx + eax]
cmp dword [ebp - 0x3c], ecx
jg short loc_fffaea93  ; jg 0xfffaea93
push ecx
add edx, ebx
push ecx
movzx edx, dl
mov ecx, dword [ebp - 0x30]
push eax
mov eax, esi
push edx
mov edx, edi
call fcn_fffae682  ; call 0xfffae682
add esp, 0x10

loc_fffaea93:  ; not directly referenced
inc byte [ebp - 0x28]

loc_fffaea96:  ; not directly referenced
mov al, byte [ebp - 0x28]
cmp al, byte [esi + 0x20b5]
jb short loc_fffaea4e  ; jb 0xfffaea4e
push eax
mov ecx, dword [ebp - 0x30]
mov edx, edi
push eax
xor eax, eax
test bl, bl
sete al
push eax
movzx eax, word [ebp - 0x38]
push eax
mov eax, esi
call fcn_fffae454  ; call 0xfffae454
add esp, 0x10
test eax, eax
jne loc_fffaebee  ; jne 0xfffaebee
push eax
mov ecx, edi
mov edx, dword [ebp - 0x34]
push eax
movzx eax, bl
inc ebx
push eax
push dword [ebp + 8]
mov eax, esi
call fcn_fffc66a8  ; call 0xfffc66a8
add esp, 0x10
cmp bl, byte [ebp - 0x2c]
jbe short loc_fffaeb05  ; jbe 0xfffaeb05
imul edx, dword [ebp - 0x30], 0x24
imul edi, edi, 0x1055
mov dword [ebp - 0x2c], 0
mov byte [ebp - 0x28], 0
mov dword [ebp - 0x34], edx
mov dword [ebp - 0x38], edi
jmp near loc_fffaebdd  ; jmp 0xfffaebdd

loc_fffaeb05:  ; not directly referenced
movzx ecx, bl
mov byte [ebp - 0x28], 0
mov dword [ebp - 0x40], ecx
jmp short loc_fffaea96  ; jmp 0xfffaea96

loc_fffaeb11:  ; not directly referenced
mov edx, dword [ebp + 0x18]
mov cl, byte [ebp - 0x28]
movzx ebx, byte [ebp - 0x28]
movzx eax, word [edx]
bt eax, ecx
jae loc_fffaebda  ; jae 0xfffaebda
mov eax, dword [ebp + 0xc]
mov ecx, ebx
add eax, ebx
mov edx, 0x80
shl ecx, 7
mov dword [ebp - 0x30], eax
lea edi, [ebx + ebx*2]
movzx eax, byte [eax]
sub edx, eax
add edx, edx
lea eax, [eax + ecx + 0x1e19]
mov ecx, 0xff
lea eax, [esi + eax*2 + 1]
call fcn_fffa24c1  ; call 0xfffa24c1
mov eax, ebx
add edi, dword [ebp - 0x34]
shl eax, 8
add edi, dword [ebp - 0x38]
sub esp, 0xc
mov ecx, 0x80
lea edx, [esi + eax + 0x3c31]
lea eax, [esi + edi + 0x295]
add edi, esi
push eax
mov eax, esi
call fcn_fffc3287  ; call 0xfffc3287
mov dl, byte [edi + 0x296]
add esp, 0x10
test dl, dl
mov ecx, eax
mov al, byte [edi + 0x297]
mov edi, 0x7f
cmove edx, edi
test ecx, ecx
jne short loc_fffaebce  ; jne 0xfffaebce
mov ecx, dword [ebp + 8]
cmp byte [ecx + ebx], al
ja short loc_fffaebd3  ; ja 0xfffaebd3
mov ecx, dword [ebp - 0x30]
cmp dl, byte [ecx]
ja short loc_fffaebd3  ; ja 0xfffaebd3
mov cl, bl
mov edi, 1
shl edi, cl
mov ecx, dword [ebp + 0x1c]
or word [ecx], di
mov ecx, dword [ebp + 0x10]
mov byte [ecx + ebx], al
mov eax, dword [ebp + 0x14]
mov byte [eax + ebx], dl
jmp short loc_fffaebda  ; jmp 0xfffaebda

loc_fffaebce:  ; not directly referenced
mov dword [ebp - 0x2c], ecx
jmp short loc_fffaebda  ; jmp 0xfffaebda

loc_fffaebd3:  ; not directly referenced
mov dword [ebp - 0x2c], 0

loc_fffaebda:  ; not directly referenced
inc byte [ebp - 0x28]

loc_fffaebdd:  ; not directly referenced
mov dl, byte [ebp - 0x28]
cmp dl, byte [esi + 0x20b5]
jb loc_fffaeb11  ; jb 0xfffaeb11
jmp short loc_fffaebf1  ; jmp 0xfffaebf1

loc_fffaebee:  ; not directly referenced
mov dword [ebp - 0x2c], eax

loc_fffaebf1:  ; not directly referenced
mov eax, dword [ebp - 0x2c]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffaebfc:  ; not directly referenced
push ebp
shl edx, 8
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x1c]
mov ebx, dword [eax + 0x2223]
lea edi, [edx + ebx + 0xe3c]
mov ebx, dword [edi]
mov esi, ebx
and esi, 0x3f000000
shr esi, 0x18
mov edx, esi
cmp cl, dl
mov byte [ebp - 0x1d], dl
je short loc_fffaec90  ; je 0xfffaec90
mov edx, ebx
mov ebx, ecx
shl ebx, 0x18
and edx, 0xc0ffffff
or edx, ebx
cmp byte [ebp - 0x1d], 0x1f
mov dword [edi], edx
seta dl
cmp cl, 0x1f
seta bl
test dl, bl
jne short loc_fffaec5f  ; jne 0xfffaec5f
cmp byte [ebp - 0x1d], 0x1f
setbe dl
cmp cl, 0x1f
setbe bl
test dl, bl
je short loc_fffaec73  ; je 0xfffaec73

loc_fffaec5f:  ; not directly referenced
mov bl, byte [ebp - 0x1d]
mov dl, cl
sub ebx, ecx
sub dl, byte [ebp - 0x1d]
mov esi, edx
cmp byte [ebp - 0x1d], cl
cmovbe ebx, esi
jmp short loc_fffaec7c  ; jmp 0xfffaec7c

loc_fffaec73:  ; not directly referenced
and esi, 0x1f
and ecx, 0x1f
lea ebx, [ecx + esi]

loc_fffaec7c:  ; not directly referenced
cmp bl, 9
mov edx, 0x37ef
jbe short loc_fffaec8b  ; jbe 0xfffaec8b
mov edx, 0x6fde

loc_fffaec8b:  ; not directly referenced
call fcn_fffbfa08  ; call 0xfffbfa08

loc_fffaec90:  ; not directly referenced
lea esp, [esp + 0x1c]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffaec9b:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x7ac]
mov dword [ebp - 0x760], eax
mov esi, dword [ebp + 0x14]
mov dword [ebp - 0x79c], ecx
mov byte [ebp - 0x7a6], dl
xor ecx, ecx
mov edx, 0x6c0
lea eax, [ebp - 0x6d8]
movzx ebx, byte [ebp + 0x10]
mov word [ebp - 0x7a8], si
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x720]
call fcn_fffa24c1  ; call 0xfffa24c1
mov eax, dword [ebp - 0x760]
mov word [ebp - 0x78c], 0x1ff
movzx esi, byte [ebp - 0x7a6]
mov edi, dword [ebp + 8]
mov dword [ebp - 0x768], esi
mov dword [ebp - 0x7b0], ebx
mov ebx, dword [ebp - 0x768]
mov dword [ebp - 0x780], 0
cmp byte [eax + 0x20b5], 9
mov eax, 0xff
cmove ax, word [ebp - 0x78c]
mov dword [ebp - 0x76c], 0
shl ebx, 3
mov word [ebp - 0x78c], ax
imul eax, esi, 0x360
mov esi, dword [ebp + 0xc]
add edi, eax
add esi, eax
mov dword [ebp - 0x770], edi
lea edi, [ebp - 0x6d8]
add edi, eax
mov dword [ebp - 0x774], esi
mov dword [ebp - 0x7a4], edi
mov dword [ebp - 0x7b4], ebx

loc_fffaed76:  ; not directly referenced
mov ecx, dword [ebp - 0x79c]
mov esi, dword [ebp - 0x76c]
test byte [ecx + esi], 0xdf
jne loc_fffaee37  ; jne 0xfffaee37
xor ecx, ecx
mov edx, 0x10
lea eax, [ebp - 0x730]
call fcn_fffa24c1  ; call 0xfffa24c1
mov ecx, dword [ebp - 0x79c]
cmp byte [ecx + esi], 0x20
jne loc_fffaee37  ; jne 0xfffaee37
lea esi, [esi + esi*8]
xor ebx, ebx
mov dword [ebp - 0x75c], esi

loc_fffaedb9:  ; not directly referenced
mov ecx, dword [ebp - 0x768]
mov edx, ebx
mov eax, dword [ebp - 0x760]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffaee12  ; je 0xfffaee12
imul esi, ebx, 0xd8
mov edi, dword [ebp - 0x75c]
mov edx, dword [ebp - 0x770]
add edi, esi
mov eax, dword [ebp - 0x770]
add edx, esi
add eax, edi
mov ecx, 9
call fcn_fffa2408  ; call 0xfffa2408
mov edx, dword [ebp - 0x774]
mov eax, dword [ebp - 0x774]
add edx, esi
add eax, edi
mov ecx, 9
call fcn_fffa2408  ; call 0xfffa2408

loc_fffaee12:  ; not directly referenced
inc ebx
cmp ebx, 4
jne short loc_fffaedb9  ; jne 0xfffaedb9

loc_fffaee18:  ; not directly referenced
inc dword [ebp - 0x76c]
add dword [ebp - 0x780], 9
cmp dword [ebp - 0x76c], 0x18
jne loc_fffaed76  ; jne 0xfffaed76
jmp near loc_fffaf47d  ; jmp 0xfffaf47d

loc_fffaee37:  ; not directly referenced
mov eax, dword [ebp - 0x79c]
mov edi, dword [ebp - 0x76c]
mov edx, dword [ebp - 0x768]
movzx ecx, byte [eax + edi]
mov eax, dword [ebp - 0x760]
call fcn_fffaebfc  ; call 0xfffaebfc
lea edx, [ebp - 0x73c]
mov eax, dword [ebp - 0x760]
call fcn_fffacf73  ; call 0xfffacf73
mov ebx, dword [ebp - 0x780]
add ebx, dword [ebp - 0x7a4]
mov dword [ebp - 0x798], ebx
mov dword [ebp - 0x790], 0
jmp near loc_fffaf3bd  ; jmp 0xfffaf3bd

loc_fffaee8a:  ; not directly referenced
mov ecx, dword [ebp - 0x768]
lea edx, [ebp - 0x73c]
mov eax, dword [ebp - 0x760]
call fcn_ffface48  ; call 0xffface48
imul edi, dword [ebp - 0x76c], 9
mov esi, dword [ebp - 0x7b4]
movzx ebx, word [ebp - 0x7a8]
mov dword [ebp - 0x764], 0
mov dword [ebp - 0x75c], 0
mov dword [ebp - 0x7a0], edi
mov dword [ebp - 0x784], ebx
lea esi, [ebp + esi - 0x730]
mov dword [ebp - 0x778], esi

loc_fffaeee2:  ; not directly referenced
mov ecx, dword [ebp - 0x768]
mov edx, dword [ebp - 0x75c]
mov eax, dword [ebp - 0x760]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffaef22  ; jne 0xfffaef22

loc_fffaeefd:  ; not directly referenced
inc dword [ebp - 0x75c]
add dword [ebp - 0x778], 2
add dword [ebp - 0x764], 0xd8
cmp dword [ebp - 0x75c], 4
jne short loc_fffaeee2  ; jne 0xfffaeee2
jmp near loc_fffaf3b7  ; jmp 0xfffaf3b7

loc_fffaef22:  ; not directly referenced
mov esi, dword [ebp - 0x778]
mov ax, word [esi]
cmp ax, word [ebp - 0x78c]
je short loc_fffaeefd  ; je 0xfffaeefd
mov edi, dword [ebp - 0x760]
not eax
and eax, dword [ebp - 0x78c]
cmp byte [ebp - 0x7a6], 1
mov word [ebp - 0x752], ax
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x476c
add eax, dword [edi + 0x2223]
cmp dword [ebp - 0x790], 0
mov eax, dword [eax]
jne loc_fffaf14f  ; jne 0xfffaf14f
xor ecx, ecx
mov edx, 9
lea ebx, [ebp - 0x74e]
mov eax, ebx
call fcn_fffa24c1  ; call 0xfffa24c1
lea esi, [ebp - 0x745]
mov ecx, 0x7f
mov edx, 9
mov eax, esi
call fcn_fffa24c1  ; call 0xfffa24c1
cmp byte [ebp - 0x76c], 0
je short loc_fffaefd6  ; je 0xfffaefd6
mov al, byte [edi + 0x20b5]
mov ecx, dword [ebp - 0x764]
mov byte [ebp - 0x77c], al
mov ebx, dword [ebp - 0x770]
add ecx, dword [ebp - 0x798]
add ebx, dword [ebp - 0x780]
xor eax, eax
add ebx, dword [ebp - 0x764]
jmp near loc_fffaf0c8  ; jmp 0xfffaf0c8

loc_fffaefd6:  ; not directly referenced
push ecx
push dword [ebp - 0x784]
lea eax, [ebp - 0x750]
mov edx, dword [ebp - 0x774]
push eax
lea eax, [ebp - 0x752]
mov ecx, dword [ebp - 0x75c]
push eax
imul eax, dword [ebp - 0x75c], 0xd8
add edx, eax
add eax, dword [ebp - 0x770]
push edx
mov edx, dword [ebp - 0x768]
push eax
mov eax, dword [ebp - 0x760]
push esi
push ebx
call fcn_fffae98b  ; call 0xfffae98b
mov edx, dword [ebp - 0x760]
mov ebx, dword [ebp - 0x764]
movzx ecx, word [ebp - 0x750]
add ebx, dword [ebp - 0x7a4]
mov dword [ebp - 0x7ac], ecx
mov dword [ebp - 0x794], ebx
mov ecx, dword [ebp - 0x770]
mov ebx, dword [ebp - 0x774]
mov dl, byte [edx + 0x20b5]
add esp, 0x20
mov byte [ebp - 0x77c], dl
xor eax, eax
add ecx, dword [ebp - 0x764]
add ebx, dword [ebp - 0x764]
jmp short loc_fffaf095  ; jmp 0xfffaf095

loc_fffaf06e:  ; not directly referenced
mov esi, dword [ebp - 0x7ac]
bt esi, eax
jae loc_fffaf7ff  ; jae 0xfffaf7ff
movzx edx, byte [ecx + eax]
mov edi, dword [ebp - 0x794]
movzx esi, byte [ebx + eax]
add esi, edx
sar esi, 1
mov edx, esi
mov byte [edi + eax], dl
inc eax

loc_fffaf095:  ; not directly referenced
cmp byte [ebp - 0x77c], al
ja short loc_fffaf06e  ; ja 0xfffaf06e
jmp near loc_fffaeefd  ; jmp 0xfffaeefd

loc_fffaf0a2:  ; not directly referenced
movzx edi, byte [ebx + eax - 9]
mov esi, dword [ebp - 0x774]
add esi, dword [ebp - 0x780]
add esi, dword [ebp - 0x764]
movzx esi, byte [esi + eax - 9]
add esi, edi
sar esi, 1
mov edx, esi
mov byte [ecx + eax], dl
inc eax

loc_fffaf0c8:  ; not directly referenced
cmp byte [ebp - 0x77c], al
ja short loc_fffaf0a2  ; ja 0xfffaf0a2

loc_fffaf0d0:  ; not directly referenced
imul eax, dword [ebp - 0x768], 0x360
imul esi, dword [ebp - 0x75c], 0xd8
add esi, dword [ebp - 0x7a0]
push edx
mov ebx, dword [ebp - 0x770]
add eax, esi
push edx
push dword [ebp - 0x784]
add ebx, esi
lea edi, [ebp - 0x74e]
push 0
mov dword [ebp - 0x77c], ebx
lea ebx, [ebp - 0x750]
push ebx
push dword [ebp - 0x77c]
lea eax, [ebp + eax - 0x6d8]
mov ecx, dword [ebp - 0x75c]
push eax
mov dword [ebp - 0x788], eax
mov edx, dword [ebp - 0x768]
push edi
mov eax, dword [ebp - 0x760]
call fcn_fffae789  ; call 0xfffae789
add esp, 0x20
test eax, eax
mov edi, eax
je loc_fffaf1cc  ; je 0xfffaf1cc
jmp near loc_fffaf804  ; jmp 0xfffaf804

loc_fffaf14f:  ; not directly referenced
imul ebx, dword [ebp - 0x75c], 0xd8
mov edx, dword [ebp - 0x770]
add ebx, dword [ebp - 0x7a0]
mov ecx, 9
add edx, ebx
lea eax, [ebp - 0x74e]
call fcn_fffa2408  ; call 0xfffa2408
mov edx, dword [ebp - 0x774]
mov ecx, 9
add edx, ebx
lea eax, [ebp - 0x745]
call fcn_fffa2408  ; call 0xfffa2408
mov eax, dword [ebp - 0x760]
mov ecx, dword [ebp - 0x764]
add ecx, dword [ebp - 0x798]
mov dl, byte [eax + 0x20b5]
xor eax, eax
jmp short loc_fffaf1c3  ; jmp 0xfffaf1c3

loc_fffaf1ab:  ; not directly referenced
movzx esi, byte [ebp + eax - 0x74e]
movzx ebx, byte [ebp + eax - 0x745]
add ebx, esi
sar ebx, 1
mov byte [ecx + eax], bl
inc eax

loc_fffaf1c3:  ; not directly referenced
cmp dl, al
ja short loc_fffaf1ab  ; ja 0xfffaf1ab
jmp near loc_fffaf0d0  ; jmp 0xfffaf0d0

loc_fffaf1cc:  ; not directly referenced
mov dx, word [ebp - 0x752]
cmp word [ebp - 0x750], dx
je short loc_fffaf208  ; je 0xfffaf208
push eax
push dword [ebp - 0x784]
lea eax, [ebp - 0x752]
add esi, dword [ebp - 0x774]
push ebx
lea ecx, [ebp - 0x74e]
push eax
lea eax, [ebp - 0x745]
push esi
push dword [ebp - 0x77c]
push eax
push ecx
jmp short loc_fffaf284  ; jmp 0xfffaf284

loc_fffaf208:  ; not directly referenced
push eax
add esi, dword [ebp - 0x774]
mov ecx, dword [ebp - 0x75c]
push eax
push dword [ebp - 0x784]
mov dword [ebp - 0x794], esi
mov edx, dword [ebp - 0x768]
push 1
mov eax, dword [ebp - 0x760]
push ebx
push esi
lea esi, [ebp - 0x745]
push esi
push dword [ebp - 0x788]
call fcn_fffae789  ; call 0xfffae789
add esp, 0x20
test eax, eax
mov edi, eax
jne loc_fffaf804  ; jne 0xfffaf804
mov di, word [ebp - 0x752]
cmp word [ebp - 0x750], di
je short loc_fffaf29e  ; je 0xfffaf29e
push edi
push dword [ebp - 0x784]
lea eax, [ebp - 0x752]
push ebx
push eax
push dword [ebp - 0x794]
push dword [ebp - 0x77c]
lea eax, [ebp - 0x74e]
push esi
push eax

loc_fffaf284:  ; not directly referenced
mov ecx, dword [ebp - 0x75c]
mov edx, dword [ebp - 0x768]
mov eax, dword [ebp - 0x760]
call fcn_fffae98b  ; call 0xfffae98b
add esp, 0x20

loc_fffaf29e:  ; not directly referenced
imul esi, dword [ebp - 0x768], 0x24
imul eax, dword [ebp - 0x75c], 0xd8
mov ebx, dword [ebp - 0x774]
add eax, dword [ebp - 0x7a0]
mov dword [ebp - 0x794], esi
movzx edx, word [ebp - 0x750]
add ebx, eax
mov dword [ebp - 0x7ac], edx
mov dword [ebp - 0x77c], eax
xor edx, edx
mov dword [ebp - 0x788], ebx
jmp near loc_fffaf3a0  ; jmp 0xfffaf3a0

loc_fffaf2e3:  ; not directly referenced
movzx eax, dl
mov edi, dword [ebp - 0x7ac]
bt edi, edx
jb short loc_fffaf31d  ; jb 0xfffaf31d
mov cl, dl
mov ebx, 1
mov esi, dword [ebp - 0x778]
mov edi, dword [ebp - 0x788]
shl ebx, cl
mov ecx, dword [ebp - 0x770]
add ecx, dword [ebp - 0x77c]
mov byte [edi + eax], 0
or word [esi], bx
mov byte [ecx + eax], 0

loc_fffaf31d:  ; not directly referenced
mov esi, dword [ebp - 0x788]
mov ecx, dword [ebp - 0x770]
add ecx, dword [ebp - 0x77c]
add esi, eax
add ecx, eax
mov bl, byte [esi]
sub bl, byte [ecx]
cmp bl, 4
ja short loc_fffaf37a  ; ja 0xfffaf37a
imul edi, dword [ebp - 0x75c], 9
add edi, dword [ebp - 0x794]
mov dword [ebp - 0x7b8], edi
lea edi, [ebp - 0x18]
add edi, dword [ebp - 0x7b8]
cmp byte [eax + edi - 0x708], 9
jbe short loc_fffaf37a  ; jbe 0xfffaf37a
mov edi, dword [ebp - 0x778]
mov byte [esi], 0
mov byte [ecx], 0
mov cl, al
mov esi, 1
shl esi, cl
or word [edi], si

loc_fffaf37a:  ; not directly referenced
imul ecx, dword [ebp - 0x75c], 9
add ecx, dword [ebp - 0x794]
lea esi, [ebp - 0x18]
add ecx, esi
add eax, ecx
mov cl, byte [eax - 0x708]
cmp bl, cl
cmovb ebx, ecx
inc edx
mov byte [eax - 0x708], bl

loc_fffaf3a0:  ; not directly referenced
mov eax, dword [ebp - 0x760]
cmp dl, byte [eax + 0x20b5]
jb loc_fffaf2e3  ; jb 0xfffaf2e3
jmp near loc_fffaeefd  ; jmp 0xfffaeefd

loc_fffaf3b7:  ; not directly referenced
inc dword [ebp - 0x790]

loc_fffaf3bd:  ; not directly referenced
mov ebx, dword [ebp - 0x7b0]
cmp dword [ebp - 0x790], ebx
jb loc_fffaee8a  ; jb 0xfffaee8a
mov esi, dword [ebp - 0x770]
mov ebx, dword [ebp - 0x774]
add esi, dword [ebp - 0x780]
add ebx, dword [ebp - 0x780]
xor edi, edi
mov dword [ebp - 0x778], esi
mov dword [ebp - 0x784], ebx

loc_fffaf3f5:  ; not directly referenced
mov ecx, dword [ebp - 0x768]
mov edx, edi
mov eax, dword [ebp - 0x760]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffaf417  ; jne 0xfffaf417

loc_fffaf40c:  ; not directly referenced
inc edi
cmp edi, 4
jne short loc_fffaf3f5  ; jne 0xfffaf3f5
jmp near loc_fffaee18  ; jmp 0xfffaee18

loc_fffaf417:  ; not directly referenced
imul ebx, edi, 0xd8
mov eax, dword [ebp - 0x760]
mov esi, dword [ebp - 0x778]
mov ecx, dword [ebp - 0x784]
add esi, ebx
add ecx, ebx
add ebx, dword [ebp - 0x798]
mov dword [ebp - 0x788], esi
mov al, byte [eax + 0x20b5]
mov dword [ebp - 0x77c], ebx
mov byte [ebp - 0x75c], al
xor eax, eax
jmp short loc_fffaf473  ; jmp 0xfffaf473

loc_fffaf455:  ; not directly referenced
movzx esi, byte [ecx + eax]
mov edx, dword [ebp - 0x788]
movzx ebx, byte [edx + eax]
mov edx, dword [ebp - 0x77c]
add esi, ebx
sar esi, 1
mov ebx, esi
mov byte [edx + eax], bl
inc eax

loc_fffaf473:  ; not directly referenced
cmp byte [ebp - 0x75c], al
ja short loc_fffaf455  ; ja 0xfffaf455
jmp short loc_fffaf40c  ; jmp 0xfffaf40c

loc_fffaf47d:  ; not directly referenced
xor edi, edi
cmp dword [ebp + 0x18], 0
je loc_fffaf804  ; je 0xfffaf804
mov ebx, dword [ebp - 0x760]
mov eax, 0x3d09
xor edx, edx
mov byte [ebp - 0x778], 0
div dword [ebx + 0x20b6]
xor edx, edx
imul esi, dword [ebp - 0x768], 0x1055
mov dword [ebp - 0x7a4], esi
mov ecx, eax
mov eax, 0xfe
div ecx
xor edx, edx
mov dword [ebp - 0x794], eax
mov eax, 0x62
div ecx
mov bl, byte [ebp - 0x794]
shr bl, 1
mov byte [ebp - 0x79c], bl
mov bl, al
mov byte [ebp - 0x798], al
shr bl, 1
mov byte [ebp - 0x7a0], bl
movzx ebx, byte [ebp - 0x79c]
mov word [ebp - 0x7a6], bx
jmp near loc_fffaf7e6  ; jmp 0xfffaf7e6

loc_fffaf4fe:  ; not directly referenced
movzx esi, byte [ebp - 0x778]
mov ecx, dword [ebp - 0x768]
mov edx, esi
mov eax, dword [ebp - 0x760]
mov dword [ebp - 0x780], esi
xor edi, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffaf7e0  ; je 0xfffaf7e0
imul ebx, esi, 0xd8
mov edx, dword [ebp - 0x770]
mov eax, dword [ebp - 0x770]
mov ecx, 9
lea esi, [ebx + 0x1b]
add edx, esi
mov dword [ebp - 0x75c], esi
lea esi, [ebx + 0x12]
add eax, esi
call fcn_fffa2408  ; call 0xfffa2408
mov eax, dword [ebp - 0x774]
mov edx, dword [ebp - 0x774]
add eax, esi
add edx, dword [ebp - 0x75c]
mov ecx, 9
call fcn_fffa2408  ; call 0xfffa2408
imul eax, dword [ebp - 0x780], 0x24
mov esi, dword [ebp - 0x7a4]
mov edx, dword [ebp - 0x760]
mov byte [ebp - 0x75c], 0
mov dword [ebp - 0x77c], ebx
lea eax, [eax + esi + 0x290]
mov esi, dword [ebp - 0x770]
add esi, ebx
lea eax, [edx + eax + 0x20]
mov dword [ebp - 0x7b4], esi
mov dword [ebp - 0x7ac], eax
jmp near loc_fffaf7c4  ; jmp 0xfffaf7c4

loc_fffaf5b6:  ; not directly referenced
movzx eax, byte [ebp - 0x75c]
mov edx, dword [ebp - 0x77c]
add edx, eax
mov ecx, dword [ebp - 0x770]
mov esi, dword [ebp - 0x774]
mov dword [ebp - 0x784], eax
mov cl, byte [ecx + edx]
mov byte [ebp - 0x76c], cl
mov ecx, dword [ebp - 0x7b4]
add ecx, eax
mov dl, byte [esi + edx]
movzx ebx, byte [ebp - 0x76c]
mov byte [ebp - 0x764], dl
mov edx, dword [ebp - 0x77c]
movzx eax, byte [ecx + 0x12]
mov cl, byte [ecx + 9]
cmp al, bl
cmovb eax, ebx
movzx ebx, cl
cmp al, cl
movzx ecx, byte [ebp - 0x764]
cmovae ebx, eax
add edx, esi
add edx, dword [ebp - 0x784]
movzx eax, byte [edx + 0x12]
movzx edx, byte [edx + 9]
cmp al, cl
cmova eax, ecx
cmp al, dl
cmovbe edx, eax
cmp dl, bl
mov esi, edx
jb short loc_fffaf647  ; jb 0xfffaf647
movzx eax, bl
lea ecx, [esi + 1]
add eax, edx
sub ecx, ebx
shr eax, 1
jmp short loc_fffaf64b  ; jmp 0xfffaf64b

loc_fffaf647:  ; not directly referenced
xor eax, eax
xor ecx, ecx

loc_fffaf64b:  ; not directly referenced
cmp cl, byte [ebp - 0x798]
mov edx, 8
movzx ecx, byte [ebp - 0x764]
cmovb edi, edx
mov dword [ebp - 0x78c], ecx
movzx ecx, byte [ebp - 0x76c]
mov dword [ebp - 0x790], ecx
mov ecx, dword [ebp - 0x78c]
sub ecx, dword [ebp - 0x790]
cmp ecx, dword [ebp - 0x794]
movzx ecx, byte [ebp - 0x7a0]
mov word [ebp - 0x788], cx
cmovl edi, edx
movzx ecx, byte [ebp - 0x764]
movzx eax, al
mov word [ebp - 0x7a8], cx
mov cx, word [ebp - 0x7a6]
sub ecx, dword [ebp - 0x7a8]
add ecx, eax
mov word [ebp - 0x7a8], cx
mov ecx, eax
sub ecx, dword [ebp - 0x788]
mov word [ebp - 0x7b8], cx
movzx ecx, bl
sub word [ebp - 0x7b8], cx
mov ecx, dword [ebp - 0x7b8]
cmp word [ebp - 0x7a8], cx
cmovg edi, edx
movzx ecx, byte [ebp - 0x76c]
add cx, word [ebp - 0x7a6]
sub ecx, eax
mov word [ebp - 0x7a8], cx
mov ecx, esi
movzx edx, cl
sub edx, dword [ebp - 0x788]
sub edx, eax
cmp word [ebp - 0x7a8], dx
jg loc_fffaf7b9  ; jg 0xfffaf7b9
cmp edi, 8
je loc_fffaf7be  ; je 0xfffaf7be
movzx eax, byte [ebp - 0x79c]
mov ecx, dword [ebp - 0x790]
movzx edx, byte [ebp - 0x7a0]
add ecx, eax
add ebx, edx
cmp ebx, ecx
cmovge ecx, ebx
mov ebx, dword [ebp - 0x78c]
add ebx, dword [ebp - 0x790]
shr ebx, 1
cmp bl, cl
jb short loc_fffaf769  ; jb 0xfffaf769
and esi, 0xff
mov ecx, dword [ebp - 0x78c]
sub esi, edx
sub ecx, eax
cmp esi, ecx
cmovle ecx, esi
cmp cl, bl
cmova ecx, ebx

loc_fffaf769:  ; not directly referenced
imul edx, dword [ebp - 0x784], 3
imul eax, dword [ebp - 0x780], 0x24
mov ebx, dword [ebp - 0x7a4]
add eax, edx
mov esi, dword [ebp - 0x7ac]
lea edx, [eax + ebx + 0x280]
add edx, dword [ebp - 0x760]
mov bl, byte [ebp - 0x764]
mov byte [edx + 0x15], cl
lea eax, [edx + 0x15]
mov dl, byte [ebp - 0x76c]
mov byte [eax + 1], bl
shr cl, 6
mov byte [eax + 2], dl
movzx eax, byte [ebp - 0x75c]
mov byte [esi + eax], cl
jmp short loc_fffaf7be  ; jmp 0xfffaf7be

loc_fffaf7b9:  ; not directly referenced
mov edi, 8

loc_fffaf7be:  ; not directly referenced
inc byte [ebp - 0x75c]

loc_fffaf7c4:  ; not directly referenced
mov edx, dword [ebp - 0x760]
mov al, byte [ebp - 0x75c]
cmp al, byte [edx + 0x20b5]
jae short loc_fffaf7e0  ; jae 0xfffaf7e0
test edi, edi
je loc_fffaf5b6  ; je 0xfffaf5b6

loc_fffaf7e0:  ; not directly referenced
inc byte [ebp - 0x778]

loc_fffaf7e6:  ; not directly referenced
test edi, edi
sete dl
cmp byte [ebp - 0x778], 3
setbe al
test dl, al
jne loc_fffaf4fe  ; jne 0xfffaf4fe
jmp short loc_fffaf804  ; jmp 0xfffaf804

loc_fffaf7ff:  ; not directly referenced
mov edi, 1

loc_fffaf804:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, edi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffaf80e:
push ebp
mov ebp, esp
push edi
push esi
mov esi, ecx
push ebx
movzx ebx, dl
lea esp, [esp - 0x1c]
mov dword [ebp - 0x1c], eax
mov al, byte [ebp + 8]
mov byte [ebp - 0x1d], al
mov al, byte [ebp + 0xc]
cmp al, 9
jne short loc_fffaf869  ; jne 0xfffaf869
and esi, 0xff
cmp byte [ebp - 0x1d], 0x3f
jbe short loc_fffaf851  ; jbe 0xfffaf851
push 9
mov ecx, esi
mov edx, ebx
push 1
mov eax, dword [ebp - 0x1c]
push 0x13
push 1
call fcn_fffbfdae  ; call 0xfffbfdae
push 9
jmp short loc_fffaf88c  ; jmp 0xfffaf88c

loc_fffaf851:
push 9
mov ecx, esi
mov edx, ebx
push 1
mov eax, dword [ebp - 0x1c]
push 0x13
push 0
call fcn_fffbfdae  ; call 0xfffbfdae
push 9
jmp short loc_fffaf8ad  ; jmp 0xfffaf8ad

loc_fffaf869:
movzx edi, al
and esi, 0xff
cmp byte [ebp - 0x1d], 0x3f
jbe short loc_fffaf899  ; jbe 0xfffaf899
push edi
mov ecx, esi
mov edx, ebx
push 1
mov eax, dword [ebp - 0x1c]
push 0x13
push 1
call fcn_fffbfdae  ; call 0xfffbfdae
push edi

loc_fffaf88c:
push 6
movzx eax, byte [ebp - 0x1d]
push 0
sub eax, 0x40
jmp short loc_fffaf8b5  ; jmp 0xfffaf8b5

loc_fffaf899:
push edi
mov ecx, esi
mov edx, ebx
push 1
mov eax, dword [ebp - 0x1c]
push 0x13
push 0
call fcn_fffbfdae  ; call 0xfffbfdae
push edi

loc_fffaf8ad:
push 6
movzx eax, byte [ebp - 0x1d]
push 0

loc_fffaf8b5:
push eax
mov ecx, esi
mov edx, ebx
mov eax, dword [ebp - 0x1c]
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x20
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffaf8cd:
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
imul eax, edx, 0x1055
push ebx
xor ebx, ebx
lea esp, [esp - 0x3c]
mov dword [ebp - 0x30], ecx
mov dword [ebp - 0x34], edx
mov dword [ebp - 0x3c], eax

loc_fffaf8ea:
mov ecx, dword [ebp - 0x34]
mov edx, ebx
mov eax, esi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffaf90e  ; jne 0xfffaf90e

loc_fffaf8fa:
inc ebx
add dword [ebp - 0x30], 0x900
cmp ebx, 4
jne short loc_fffaf8ea  ; jne 0xfffaf8ea
xor eax, eax
jmp near loc_fffaf9a4  ; jmp 0xfffaf9a4

loc_fffaf90e:
imul edx, ebx, 0x24
mov byte [ebp - 0x29], 0
mov dword [ebp - 0x38], edx
jmp short loc_fffaf990  ; jmp 0xfffaf990

loc_fffaf91a:
sub esp, 0xc
lea eax, [ebp - 0x1b]
movzx edi, byte [ebp - 0x29]
mov ecx, 0x80
push eax
mov edx, edi
mov eax, esi
shl edx, 8
add edx, dword [ebp - 0x30]
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
test eax, eax
jne short loc_fffaf9a4  ; jne 0xfffaf9a4
mov edx, dword [ebp - 0x3c]
lea eax, [edi + edi*2]
add eax, dword [ebp - 0x38]
mov cl, byte [ebp - 0x19]
lea eax, [eax + edx + 0x280]
add eax, esi
mov dl, byte [ebp - 0x1b]
mov byte [eax + 0x17], cl
mov cl, byte [ebp - 0x1a]
mov byte [eax + 0x16], cl
mov ecx, dword [ebp - 0x38]
add ecx, dword [ebp - 0x3c]
mov byte [eax + 0x15], dl
shr dl, 6
add ecx, esi
mov byte [edi + ecx + 0x2b0], dl
mov ecx, ebx
push edx
push edx
mov edx, dword [ebp - 0x34]
push edi
movzx eax, byte [eax + 0x15]
push eax
mov eax, esi
call fcn_fffaf80e  ; call 0xfffaf80e
inc byte [ebp - 0x29]
add esp, 0x10

loc_fffaf990:
mov al, byte [ebp - 0x29]
cmp al, byte [esi + 0x20b5]
jb loc_fffaf91a  ; jb 0xfffaf91a
jmp near loc_fffaf8fa  ; jmp 0xfffaf8fa

loc_fffaf9a4:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffaf9ac:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x80]
cmp dl, 1
movzx edx, dl
sbb eax, eax
mov dword [ebp - 0x7c], edx
and eax, 0xfffffc00
add eax, 0x4404
add eax, dword [ebx + 0x2223]
imul edx, edx, 0x1055
mov eax, dword [eax]
mov esi, eax
and eax, 0xff0000
add edx, ebx
and esi, 0xf
shr eax, 0x12
mov byte [ebp - 0x61], cl
movzx edi, byte [edx + 0x3e]
mov word [ebp - 0x5a], di
lea edi, [eax + 1]
inc eax
cmp edi, esi
mov byte [ebp - 0x4c], cl
mov dword [ebp - 0x6c], 8
cmovbe eax, esi
mov word [ebp - 0x64], 0
movzx esi, byte [edx + 0x41]
mov byte [ebp - 0x58], al
mov byte [ebp - 0x62], 0
movzx eax, byte [edx + 0x3c]
mov byte [ebp - 0x60], 4
lea eax, [esi + eax + 8]
mov byte [ebp - 0x5f], 0x12
mov byte [ebp - 0x5e], 0
mov byte [ebp - 0x5d], 0
mov word [ebp - 0x5c], 4
mov dword [ebp - 0x68], 0
mov dword [ebp - 0x57], 9
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 2
mov byte [ebp - 0x4a], 0x12
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 0x1e0
mov byte [ebp - 0x43], 4
mov word [ebp - 0x45], ax
cmp byte [edx + 0x42], 9
movzx esi, byte [edx + 0x42]
mov eax, 8
mov byte [ebp - 0x37], cl
cmovae eax, esi
mov byte [ebp - 0x22], cl
mov word [ebp - 0x30], ax
mov dword [ebp - 0x53], 0
movzx eax, byte [edx + 0x3f]
push 1
mov word [ebp - 0x1b], ax
lea eax, [ebp - 0x6c]
push eax
mov dword [ebp - 0x42], 4
mov word [ebp - 0x3a], 0
push 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 2
push 0
mov byte [ebp - 0x35], 0x12
mov byte [ebp - 0x34], 0
push 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 0x1e0
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
mov dword [ebp - 0x2d], 3
mov word [ebp - 0x25], 0x400
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x19], 4
mov dword [ebp - 0x29], 0
push 0
mov ecx, 3
mov edx, dword [ebp - 0x7c]
push 1
mov eax, ebx
call fcn_fffbb6de  ; call 0xfffbb6de
mov esi, eax
add esp, 0x20
xor ecx, ecx
mov edx, dword [ebp - 0x7c]
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
cmove eax, esi
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffafb37:  ; not directly referenced
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
lea esi, [ebp - 0x1218]
push ebx
lea ebx, [ebp - 0x2418]
mov eax, ebx
lea esp, [esp - 0x248c]
mov dword [ebp - 0x246c], edx
mov dword [ebp - 0x2470], ecx
mov edx, 0x1200
xor ecx, ecx
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x1200
mov eax, esi
call fcn_fffa24c1  ; call 0xfffa24c1
mov ecx, 0x20
mov edx, 0x20
lea eax, [ebp - 0x2438]
call fcn_fffa24c1  ; call 0xfffa24c1
cmp byte [edi + 0x3a], 0
mov byte [ebp - 0x2438], 0
mov byte [ebp - 0x2437], 0xc
mov byte [ebp - 0x2435], 0x2c
je short loc_fffafbd2  ; je 0xfffafbd2
push eax
lea ecx, [ebp - 0x2438]
xor edx, edx
push eax
push dword [ebp + 0xc]
push dword [ebp + 8]
push dword [ebp - 0x2470]
push dword [ebp - 0x246c]
mov eax, edi
push esi
push ebx
call fcn_fffc6704  ; call 0xfffc6704
add esp, 0x20

loc_fffafbd2:  ; not directly referenced
cmp byte [edi + 0x108f], 0
jne loc_fffb000b  ; jne 0xfffb000b

loc_fffafbdf:  ; not directly referenced
cmp byte [edi + 0x3a], 0
jne loc_fffb0047  ; jne 0xfffb0047

loc_fffafbe9:  ; not directly referenced
cmp byte [edi + 0x108f], 0
jne loc_fffb0064  ; jne 0xfffb0064

loc_fffafbf6:  ; not directly referenced
lea ebx, [ebp - 0x2418]
mov dword [ebp - 0x2440], 0
mov dword [ebp - 0x2454], ebx
mov byte [ebp - 0x244f], 3
lea ebx, [ebp - 0x1218]
mov dword [ebp - 0x2468], ebx

loc_fffafc1f:  ; not directly referenced
imul eax, dword [ebp - 0x2440], 0x1055
cmp byte [edi + eax + 0x3a], 0
jne loc_fffb0084  ; jne 0xfffb0084
jmp near loc_fffaffdf  ; jmp 0xfffaffdf

loc_fffafc39:  ; not directly referenced
movzx ebx, byte [ebp - 0x244e]
mov ecx, dword [ebp - 0x2440]
mov edx, ebx
mov eax, edi
mov dword [ebp - 0x2458], ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne loc_fffafe8d  ; jne 0xfffafe8d
jmp near loc_fffafed6  ; jmp 0xfffafed6

loc_fffafc62:  ; not directly referenced
mov edx, dword [ebp - 0x2480]
mov eax, dword [ebp - 0x248c]
add eax, 0x18
cmp dword [ebp - 0x243c], 0
mov dword [ebp - 0x2464], eax
mov ebx, dword [ebp - 0x2454]
mov byte [ebp - 0x2444], 0
lea eax, [edi + edx + 0x1bd]
cmovne eax, dword [ebp - 0x2464]
imul ecx, dword [ebp - 0x2458], 0x240
imul edx, dword [ebp - 0x243c], 9
mov dword [ebp - 0x2464], eax
add edx, ecx
xor eax, eax
add ebx, edx
mov dword [ebp - 0x247c], edx
mov dword [ebp - 0x2488], ebx
jmp near loc_fffafe6a  ; jmp 0xfffafe6a

loc_fffafcc7:  ; not directly referenced
movzx edx, byte [ebp - 0x2444]
mov ecx, dword [ebp - 0x2488]
add ecx, edx
mov al, byte [ecx]
mov byte [ebp - 0x2448], al
movzx eax, byte [ecx + 0x36]
mov cl, byte [ecx + 0x12]
movzx ebx, byte [ebp - 0x2448]
cmp al, bl
cmovb eax, ebx
movzx ebx, cl
cmp al, cl
cmovae ebx, eax
mov eax, dword [ebp - 0x2468]
add eax, dword [ebp - 0x247c]
add edx, eax
mov al, byte [edx]
mov byte [ebp - 0x244c], al
movzx eax, byte [edx + 0x36]
movzx ecx, byte [ebp - 0x244c]
movzx edx, byte [edx + 0x12]
cmp al, cl
cmova eax, ecx
cmp al, dl
cmovbe edx, eax
cmp dl, bl
mov byte [ebp - 0x244d], dl
jb short loc_fffafd40  ; jb 0xfffafd40
movzx eax, bl
mov cl, dl
inc ecx
add edx, eax
shr edx, 1
sub ecx, ebx
jmp short loc_fffafd44  ; jmp 0xfffafd44

loc_fffafd40:  ; not directly referenced
xor edx, edx
xor ecx, ecx

loc_fffafd44:  ; not directly referenced
movzx eax, byte [ebp - 0x244c]
mov dword [ebp - 0x245c], eax
mov esi, dword [ebp - 0x245c]
movzx eax, byte [ebp - 0x2448]
sub esi, eax
cmp esi, dword [ebp - 0x2478]
mov dword [ebp - 0x2460], eax
mov eax, 1
jl short loc_fffafd7e  ; jl 0xfffafd7e
xor eax, eax
cmp cl, byte [ebp - 0x2450]
setb al

loc_fffafd7e:  ; not directly referenced
movzx ecx, byte [ebp - 0x2472]
mov word [ebp - 0x2474], cx
mov si, word [ebp - 0x2482]
movzx ecx, byte [ebp - 0x244c]
movzx edx, dl
sub esi, ecx
mov ecx, edx
add esi, edx
sub ecx, dword [ebp - 0x2474]
mov word [ebp - 0x2484], si
movzx esi, bl
sub ecx, esi
cmp word [ebp - 0x2484], cx
mov ecx, 1
cmovg eax, ecx
movzx esi, byte [ebp - 0x2448]
movzx ecx, byte [ebp - 0x244d]
add si, word [ebp - 0x2482]
sub ecx, dword [ebp - 0x2474]
sub esi, edx
sub ecx, edx
cmp si, cx
jg short loc_fffafe5f  ; jg 0xfffafe5f
cmp eax, 1
je short loc_fffafe64  ; je 0xfffafe64
movzx eax, byte [ebp - 0x2471]
mov ecx, dword [ebp - 0x2460]
movzx edx, byte [ebp - 0x2472]
add ecx, eax
add ebx, edx
cmp ebx, ecx
cmovge ecx, ebx
mov ebx, dword [ebp - 0x245c]
add ebx, dword [ebp - 0x2460]
shr ebx, 1
cmp bl, cl
jb short loc_fffafe37  ; jb 0xfffafe37
movzx esi, byte [ebp - 0x244d]
mov ecx, dword [ebp - 0x245c]
sub esi, edx
sub ecx, eax
cmp esi, ecx
cmovle ecx, esi
cmp cl, bl
cmova ecx, ebx

loc_fffafe37:  ; not directly referenced
movzx eax, byte [ebp - 0x2444]
mov bl, byte [ebp - 0x2448]
mov dl, byte [ebp - 0x244c]
lea eax, [eax + eax*2]
add eax, dword [ebp - 0x2464]
mov byte [eax], cl
mov byte [eax + 2], bl
mov byte [eax + 1], dl
xor eax, eax
jmp short loc_fffafe64  ; jmp 0xfffafe64

loc_fffafe5f:  ; not directly referenced
mov eax, 1

loc_fffafe64:  ; not directly referenced
inc byte [ebp - 0x2444]

loc_fffafe6a:  ; not directly referenced
mov cl, byte [ebp - 0x2444]
cmp cl, byte [edi + 0x20b5]
jae short loc_fffafe85  ; jae 0xfffafe85
test eax, eax
je loc_fffafcc7  ; je 0xfffafcc7
mov eax, 1

loc_fffafe85:  ; not directly referenced
inc dword [ebp - 0x243c]
jmp short loc_fffafebf  ; jmp 0xfffafebf

loc_fffafe8d:  ; not directly referenced
imul ecx, dword [ebp - 0x2458], 0x36
imul edx, dword [ebp - 0x2440], 0x1055
mov dword [ebp - 0x243c], 0
add edx, ecx
xor eax, eax
mov dword [ebp - 0x2480], edx
lea ebx, [edi + edx + 0x1c0]
mov dword [ebp - 0x248c], ebx

loc_fffafebf:  ; not directly referenced
test eax, eax
sete cl
cmp dword [ebp - 0x243c], 1
setbe dl
test cl, dl
jne loc_fffafc62  ; jne 0xfffafc62

loc_fffafed6:  ; not directly referenced
inc byte [ebp - 0x244e]

loc_fffafedc:  ; not directly referenced
test eax, eax
sete cl
cmp byte [ebp - 0x244e], 3
setbe dl
test cl, dl
jne loc_fffafc39  ; jne 0xfffafc39
test eax, eax
jne loc_fffaffcc  ; jne 0xfffaffcc
imul ebx, dword [ebp - 0x2440], 0x1055
xor esi, esi
mov dword [ebp - 0x244c], ebx

loc_fffaff0d:  ; not directly referenced
mov ecx, dword [ebp - 0x2440]
mov edx, esi
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffaff2b  ; jne 0xfffaff2b

loc_fffaff20:  ; not directly referenced
inc esi
cmp esi, 4
jne short loc_fffaff0d  ; jne 0xfffaff0d
jmp near loc_fffaffdf  ; jmp 0xfffaffdf

loc_fffaff2b:  ; not directly referenced
imul eax, esi, 0x36
xor ebx, ebx
mov dword [ebp - 0x2448], eax

loc_fffaff36:  ; not directly referenced
test ebx, ebx
mov ecx, dword [ebp - 0x2448]
mov edx, dword [ebp - 0x244c]
jne short loc_fffaff53  ; jne 0xfffaff53
lea eax, [ecx + edx + 0x1b0]
lea eax, [edi + eax + 0xd]
jmp short loc_fffaff5e  ; jmp 0xfffaff5e

loc_fffaff53:  ; not directly referenced
lea eax, [ecx + edx + 0x1c0]
lea eax, [edi + eax + 0x18]

loc_fffaff5e:  ; not directly referenced
mov dword [ebp - 0x2444], eax
mov byte [ebp - 0x243c], 0
jmp short loc_fffaffaf  ; jmp 0xfffaffaf

loc_fffaff6d:  ; not directly referenced
push eax
movzx eax, byte [ebp - 0x243c]
mov edx, dword [ebp - 0x2444]
push dword [ebp + 0xc]
push dword [ebp + 8]
push dword [ebp - 0x2470]
push dword [ebp - 0x246c]
mov ecx, esi
push eax
lea eax, [eax + eax*2]
push ebx
movzx eax, byte [edx + eax]
mov edx, dword [ebp - 0x2440]
push eax
mov eax, edi
call fcn_fffac5bc  ; call 0xfffac5bc
inc byte [ebp - 0x243c]
add esp, 0x20

loc_fffaffaf:  ; not directly referenced
mov cl, byte [ebp - 0x243c]
cmp cl, byte [edi + 0x20b5]
jb short loc_fffaff6d  ; jb 0xfffaff6d
inc ebx
cmp ebx, 2
jne loc_fffaff36  ; jne 0xfffaff36
jmp near loc_fffaff20  ; jmp 0xfffaff20

loc_fffaffcc:  ; not directly referenced
mov cl, byte [ebp - 0x2440]
mov eax, 0xfffffffe
rol eax, cl
and byte [ebp - 0x244f], al

loc_fffaffdf:  ; not directly referenced
inc dword [ebp - 0x2440]
add dword [ebp - 0x2454], 0x900
add dword [ebp - 0x2468], 0x900
cmp dword [ebp - 0x2440], 2
jne loc_fffafc1f  ; jne 0xfffafc1f
jmp near loc_fffb00e5  ; jmp 0xfffb00e5

loc_fffb000b:  ; not directly referenced
push ecx
lea eax, [ebp - 0x1218]
mov edx, 1
push ecx
push dword [ebp + 0xc]
push dword [ebp + 8]
push dword [ebp - 0x2470]
push dword [ebp - 0x246c]
lea ecx, [ebp - 0x2438]
push eax
lea eax, [ebp - 0x2418]
push eax
mov eax, edi
call fcn_fffc6704  ; call 0xfffc6704
add esp, 0x20
jmp near loc_fffafbdf  ; jmp 0xfffafbdf

loc_fffb0047:  ; not directly referenced
mov edx, 9
xor eax, eax
call fcn_fffacd01  ; call 0xfffacd01
add eax, dword [edi + 0x2223]
mov dword [eax], 0
jmp near loc_fffafbe9  ; jmp 0xfffafbe9

loc_fffb0064:  ; not directly referenced
mov edx, 9
mov eax, 1
call fcn_fffacd01  ; call 0xfffacd01
add eax, dword [edi + 0x2223]
mov dword [eax], 0
jmp near loc_fffafbf6  ; jmp 0xfffafbf6

loc_fffb0084:  ; not directly referenced
mov eax, 0x3d09
xor edx, edx
div dword [edi + 0x20b6]
xor edx, edx
mov byte [ebp - 0x244e], 0
mov ecx, eax
mov eax, 0xeb
div ecx
xor edx, edx
mov dword [ebp - 0x2478], eax
mov eax, 0x62
div ecx
mov bl, byte [ebp - 0x2478]
shr bl, 1
mov byte [ebp - 0x2471], bl
mov bl, al
mov byte [ebp - 0x2450], al
shr bl, 1
xor eax, eax
mov byte [ebp - 0x2472], bl
movzx ebx, byte [ebp - 0x2471]
mov word [ebp - 0x2482], bx
jmp near loc_fffafedc  ; jmp 0xfffafedc

loc_fffb00e5:  ; not directly referenced
mov al, byte [ebp - 0x244f]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb00f3:  ; not directly referenced
push ebp
mov ebp, esp
push edi
mov edi, edx
push esi
push ebx
lea esp, [esp - 0x274c]
mov dword [ebp - 0x26ec], eax
mov dword [ebp - 0x2724], ecx
xor eax, eax

loc_fffb0110:  ; not directly referenced
lea edx, [eax + eax]
mov byte [ebp + eax - 0x26c0], dl
inc eax
cmp eax, 0x10
jne short loc_fffb0110  ; jne 0xfffb0110
lea edx, [ebp - 0x26b0]
mov al, 0x20

loc_fffb0128:  ; not directly referenced
mov byte [edx], al
add eax, 2
inc edx
cmp al, 0x40
jne short loc_fffb0128  ; jne 0xfffb0128
lea ebx, [ebp - 0x2418]
xor ecx, ecx
mov edx, 0x1200
mov eax, ebx
call fcn_fffa24c1  ; call 0xfffa24c1
lea esi, [ebp - 0x1218]
xor ecx, ecx
mov edx, 0x1200
mov eax, esi
call fcn_fffa24c1  ; call 0xfffa24c1
mov eax, edi
lea ecx, [ebp - 0x26c0]
movzx edi, al
push eax
mov edx, edi
mov dword [ebp - 0x26f4], edi
push eax
push dword [ebp + 0x10]
push dword [ebp + 0xc]
push dword [ebp + 8]
push dword [ebp - 0x2724]
mov eax, dword [ebp - 0x26ec]
push esi
push ebx
call fcn_fffc6704  ; call 0xfffc6704
mov dword [ebp - 0x2740], eax
add esp, 0x20
xor ecx, ecx
mov edx, 9
lea eax, [ebp - 0x26d2]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 9
lea eax, [ebp - 0x26c9]
call fcn_fffa24c1  ; call 0xfffa24c1
mov ecx, 0xff
mov edx, 0x120
lea eax, [ebp - 0x2658]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x120
lea eax, [ebp - 0x2538]
call fcn_fffa24c1  ; call 0xfffa24c1
mov edx, 0x24
xor ecx, ecx
lea eax, [ebp - 0x26a0]
call fcn_fffa24c1  ; call 0xfffa24c1
imul eax, edi, 0x900
mov edx, dword [ebp - 0x26ec]
add ebx, eax
add esi, eax
mov dword [ebp - 0x2700], ebx
mov dword [ebp - 0x26fc], esi
lea ebx, [ebp - 0x2538]
lea edi, [ebp - 0x2658]
mov dl, byte [edx + 0x20b5]
mov dword [ebp - 0x26e0], ebx
mov dword [ebp - 0x26e4], ebx
mov byte [ebp - 0x26e8], dl
xor ebx, ebx
jmp near loc_fffb035f  ; jmp 0xfffb035f

loc_fffb0238:  ; not directly referenced
mov eax, dword [ebp - 0x26fc]
mov edx, dword [ebp - 0x2700]
add eax, ebx
add edx, ebx
xor esi, esi
mov dword [ebp - 0x2710], eax
mov dword [ebp - 0x2714], edx

loc_fffb0256:  ; not directly referenced
mov ecx, esi
cmp cl, 0x10
je loc_fffb0335  ; je 0xfffb0335
imul eax, esi, 0x12
mov edx, dword [ebp - 0x2710]
mov ecx, dword [ebp - 0x2714]
add edx, eax
add ecx, eax
mov dword [ebp - 0x26f0], edx
mov dword [ebp - 0x26f8], ecx
mov dword [ebp - 0x26dc], 0
mov dword [ebp - 0x2708], eax

loc_fffb0290:  ; not directly referenced
mov ecx, dword [ebp - 0x26f4]
mov edx, dword [ebp - 0x26dc]
mov eax, dword [ebp - 0x26ec]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffb02bc  ; jne 0xfffb02bc

loc_fffb02ab:  ; not directly referenced
inc dword [ebp - 0x26dc]
cmp dword [ebp - 0x26dc], 4
jne short loc_fffb0290  ; jne 0xfffb0290
jmp short loc_fffb0318  ; jmp 0xfffb0318

loc_fffb02bc:  ; not directly referenced
imul edx, dword [ebp - 0x26dc], 0x240
mov eax, dword [ebp - 0x26fc]
add edx, dword [ebp - 0x2708]
add eax, edx
add edx, dword [ebp - 0x2700]
mov al, byte [eax + ebx]
inc eax
sub al, byte [edx + ebx]
cmp al, byte [edi + esi]
jae short loc_fffb02e9  ; jae 0xfffb02e9
mov byte [edi + esi], al

loc_fffb02e9:  ; not directly referenced
imul edx, dword [ebp - 0x26dc], 0x240
mov eax, dword [ebp - 0x26f0]
mov ecx, dword [ebp - 0x26f8]
mov al, byte [eax + edx + 9]
mov byte [ebp - 0x2720], al
inc eax
sub al, byte [ecx + edx + 9]
cmp al, byte [edi + esi]
jae short loc_fffb02ab  ; jae 0xfffb02ab
mov byte [edi + esi], al
jmp short loc_fffb02ab  ; jmp 0xfffb02ab

loc_fffb0318:  ; not directly referenced
mov al, byte [edi + esi]
cmp al, 4
jbe short loc_fffb0335  ; jbe 0xfffb0335
mov edx, dword [ebp - 0x26e4]
sub eax, 5
mov byte [edx + esi], al
movzx eax, al
add dword [ebp + ebx*4 - 0x26a0], eax

loc_fffb0335:  ; not directly referenced
inc esi
cmp esi, 0x20
jne loc_fffb0256  ; jne 0xfffb0256
cmp dword [ebp + ebx*4 - 0x26a0], 0
jne short loc_fffb0354  ; jne 0xfffb0354
mov dword [ebp + ebx*4 - 0x26a0], 1

loc_fffb0354:  ; not directly referenced
inc ebx
add dword [ebp - 0x26e4], 0x20
add edi, 0x20

loc_fffb035f:  ; not directly referenced
cmp byte [ebp - 0x26e8], bl
ja loc_fffb0238  ; ja 0xfffb0238
xor ecx, ecx
jmp near loc_fffb0431  ; jmp 0xfffb0431

loc_fffb0372:  ; not directly referenced
mov ebx, dword [ebp + ecx*4 - 0x26a0]
xor eax, eax
shr ebx, 1
mov dword [ebp - 0x26dc], ebx
xor ebx, ebx

loc_fffb0385:  ; not directly referenced
mov edi, dword [ebp - 0x26e0]
lea edx, [ebx + 0x1f]
mov byte [ebp - 0x26e4], dl
movzx esi, byte [edi + ebx + 0x1f]
mov edx, esi
test dl, dl
je short loc_fffb03cb  ; je 0xfffb03cb
and esi, 0xff
add eax, esi
cmp eax, dword [ebp - 0x26dc]
jb short loc_fffb03cb  ; jb 0xfffb03cb
sub eax, dword [ebp - 0x26dc]
mov bl, byte [ebp - 0x26e4]
imul eax, eax, 0x64
xor edx, edx
mov byte [ebp + ecx - 0x26d2], bl
div esi
jmp short loc_fffb0409  ; jmp 0xfffb0409

loc_fffb03cb:  ; not directly referenced
dec ebx
cmp ebx, 0xfffffff1
jne short loc_fffb0385  ; jne 0xfffb0385
cmp eax, dword [ebp - 0x26dc]
jae short loc_fffb0429  ; jae 0xfffb0429
xor esi, esi

loc_fffb03db:  ; not directly referenced
mov edi, dword [ebp - 0x26e0]
movzx ebx, byte [edi + esi]
test bl, bl
je short loc_fffb0423  ; je 0xfffb0423
add eax, ebx
cmp eax, dword [ebp - 0x26dc]
jb short loc_fffb0423  ; jb 0xfffb0423
sub eax, dword [ebp - 0x26dc]
mov edx, esi
imul eax, eax, 0x64
mov byte [ebp + ecx - 0x26d2], dl
xor edx, edx
div ebx

loc_fffb0409:  ; not directly referenced
cmp al, 0x4a
jbe short loc_fffb0417  ; jbe 0xfffb0417
mov byte [ebp + ecx - 0x26c9], 0xff
jmp short loc_fffb0429  ; jmp 0xfffb0429

loc_fffb0417:  ; not directly referenced
cmp al, 0x19
setbe byte [ebp + ecx - 0x26c9]
jmp short loc_fffb0429  ; jmp 0xfffb0429

loc_fffb0423:  ; not directly referenced
inc esi
cmp esi, 0x10
jne short loc_fffb03db  ; jne 0xfffb03db

loc_fffb0429:  ; not directly referenced
inc ecx
add dword [ebp - 0x26e0], 0x20

loc_fffb0431:  ; not directly referenced
cmp byte [ebp - 0x26e8], cl
ja loc_fffb0372  ; ja 0xfffb0372
xor ecx, ecx
jmp short loc_fffb04a9  ; jmp 0xfffb04a9

loc_fffb0441:  ; not directly referenced
movzx edx, cl
movzx eax, byte [ebp + edx - 0x26d2]
mov bl, byte [ebp + eax - 0x26c0]
mov al, byte [ebp + edx - 0x26c9]
cmp al, 1
jne short loc_fffb0466  ; jne 0xfffb0466
lea eax, [ebx - 1]
lea esi, [ebx + 1]
jmp short loc_fffb0474  ; jmp 0xfffb0474

loc_fffb0466:  ; not directly referenced
inc al
jne short loc_fffb0480  ; jne 0xfffb0480
test bl, bl
je short loc_fffb047e  ; je 0xfffb047e
lea eax, [ebx + 1]
lea esi, [ebx - 1]

loc_fffb0474:  ; not directly referenced
cmp bl, 0x20
mov bl, al
cmovb ebx, esi
jmp short loc_fffb0480  ; jmp 0xfffb0480

loc_fffb047e:  ; not directly referenced
mov bl, 0x21

loc_fffb0480:  ; not directly referenced
mov eax, dword [ebp - 0x26f4]
mov byte [ebp - 0x2750], cl
call fcn_fffacd01  ; call 0xfffacd01
shl ebx, 0x18
mov esi, dword [ebp - 0x26ec]
add eax, dword [esi + 0x2223]
mov dword [eax], ebx
mov cl, byte [ebp - 0x2750]
inc ecx

loc_fffb04a9:  ; not directly referenced
mov eax, dword [ebp - 0x26ec]
cmp cl, byte [eax + 0x20b5]
jb short loc_fffb0441  ; jb 0xfffb0441
imul ebx, dword [ebp - 0x26f4], 0x1055
mov dword [ebp - 0x26f0], 0
mov dword [ebp - 0x273c], ebx

loc_fffb04d1:  ; not directly referenced
mov ecx, dword [ebp - 0x26f4]
mov edx, dword [ebp - 0x26f0]
mov eax, dword [ebp - 0x26ec]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb0b26  ; je 0xfffb0b26
jmp near loc_fffb0aea  ; jmp 0xfffb0aea

loc_fffb04f5:  ; not directly referenced
movzx eax, byte [ebp - 0x2710]
mov dl, 0
mov edi, eax
mov byte [ebp - 0x271e], 0xf
mov dword [ebp - 0x26e8], 0
mov bl, byte [ebp + eax - 0x26d2]
cmp bl, 0x10
mov byte [ebp - 0x26dc], bl
movzx esi, byte [ebp - 0x26dc]
cmovne edx, ebx
mov dword [ebp - 0x272c], esi
imul eax, esi, 0x12
add eax, dword [ebp - 0x2708]
mov byte [ebp - 0x26f8], dl
add eax, edi
mov bl, byte [ebp - 0x26f8]
sub byte [ebp - 0x271e], bl
mov ebx, dword [ebp - 0x2700]
add edx, 0xf
add ebx, eax
add eax, dword [ebp - 0x26fc]
lea esi, [edi + edi*2]
mov byte [ebp - 0x271f], dl
mov dword [ebp - 0x2718], ebx
mov dword [ebp - 0x271c], eax
mov dword [ebp - 0x2734], esi

loc_fffb057a:  ; not directly referenced
xor ecx, ecx
mov edx, 0x90
lea eax, [ebp - 0x2538]
mov esi, 2
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x26a0]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x2658]
call fcn_fffa24c1  ; call 0xfffa24c1
mov ebx, dword [ebp - 0x2718]
mov dword [ebp - 0x26e4], 0
mov dword [ebp - 0x2704], 0
mov bl, byte [ebx]
mov byte [ebp - 0x2714], bl
mov ebx, dword [ebp - 0x271c]
mov bl, byte [ebx]
movzx ecx, bl
mov byte [ebp - 0x271d], bl
mov eax, ecx
mov dword [ebp - 0x274c], ecx
movzx ebx, byte [ebp - 0x2714]
sub eax, ebx
mov dword [ebp - 0x2748], ebx
cdq
idiv esi
mov dword [ebp - 0x2730], eax

loc_fffb0608:  ; not directly referenced
mov al, byte [ebp - 0x26e4]
mov bl, byte [ebp - 0x2714]
cmp byte [ebp - 0x271d], al
mov byte [ebp - 0x26e0], al
setb dl
cmp al, bl
setb al
or dl, al
jne loc_fffb09ca  ; jne 0xfffb09ca
mov ecx, dword [ebp - 0x272c]
mov edx, 2
lea eax, [ebp - 0x26d4]
call fcn_fffa24c1  ; call 0xfffa24c1
cmp byte [ebp - 0x26dc], 0x10
mov al, byte [ebp - 0x26d3]
je short loc_fffb0662  ; je 0xfffb0662
cmp byte [ebp - 0x26dc], 0xf
ja loc_fffb07b1  ; ja 0xfffb07b1

loc_fffb0662:  ; not directly referenced
imul esi, dword [ebp - 0x26e8], 9
mov dl, byte [ebp - 0x26f8]
xor ecx, ecx
mov dword [ebp - 0x270c], esi
jmp short loc_fffb067b  ; jmp 0xfffb067b

loc_fffb0679:  ; not directly referenced
mov dl, bl

loc_fffb067b:  ; not directly referenced
movzx ebx, dl
mov esi, dword [ebp - 0x2700]
imul ebx, ebx, 0x12
add ebx, dword [ebp - 0x270c]
add ebx, dword [ebp - 0x2708]
add esi, ebx
mov dword [ebp - 0x2728], ebx
mov bl, byte [ebp - 0x26e0]
cmp byte [esi + edi], bl
jbe short loc_fffb06c6  ; jbe 0xfffb06c6

loc_fffb06a6:  ; not directly referenced
mov byte [ebp - 0x26d3], al

loc_fffb06ac:  ; not directly referenced
imul edx, dword [ebp - 0x26e8], 9
mov al, byte [ebp - 0x26d4]
xor esi, esi
mov dword [ebp - 0x270c], edx
jmp near loc_fffb078e  ; jmp 0xfffb078e

loc_fffb06c6:  ; not directly referenced
mov esi, dword [ebp - 0x2728]
add esi, dword [ebp - 0x26fc]
mov bl, byte [ebp - 0x26e0]
cmp bl, byte [esi + edi]
jbe short loc_fffb06df  ; jbe 0xfffb06df
jmp short loc_fffb06a6  ; jmp 0xfffb06a6

loc_fffb06df:  ; not directly referenced
cmp dl, 0xf
lea ebx, [edx + 1]
ja short loc_fffb06f1  ; ja 0xfffb06f1
test dl, dl
mov bl, 0x11
lea eax, [edx - 1]
cmovne ebx, eax

loc_fffb06f1:  ; not directly referenced
inc ecx
cmp cl, byte [ebp - 0x271f]
mov al, dl
jbe loc_fffb0679  ; jbe 0xfffb0679
mov byte [ebp - 0x26d3], dl
jmp short loc_fffb06ac  ; jmp 0xfffb06ac

loc_fffb0708:  ; not directly referenced
movzx ecx, dl
mov ebx, dword [ebp - 0x2700]
imul ecx, ecx, 0x12
add ecx, dword [ebp - 0x270c]
add ecx, dword [ebp - 0x2708]
add ebx, ecx
mov dword [ebp - 0x2728], ecx
mov cl, byte [ebp - 0x26e0]
cmp byte [ebx + edi], cl
jbe short loc_fffb0772  ; jbe 0xfffb0772

loc_fffb0733:  ; not directly referenced
mov byte [ebp - 0x26d4], al

loc_fffb0739:  ; not directly referenced
mov ebx, dword [ebp - 0x26e4]
mov dl, byte [ebp - 0x26d4]
lea eax, [ebp + ebx*2 - 0x2538]
mov byte [eax], dl
mov dl, byte [ebp - 0x26d3]
mov byte [eax + 1], dl
mov al, byte [ebp + ebx*2 - 0x2538]
cmp al, 0xf
mov dl, byte [ebp + ebx*2 - 0x2537]
jbe loc_fffb08e1  ; jbe 0xfffb08e1
jmp near loc_fffb0908  ; jmp 0xfffb0908

loc_fffb0772:  ; not directly referenced
mov ecx, dword [ebp - 0x2728]
add ecx, dword [ebp - 0x26fc]
inc esi
mov bl, byte [ebp - 0x26e0]
cmp bl, byte [ecx + edi]
jbe short loc_fffb078c  ; jbe 0xfffb078c
jmp short loc_fffb0733  ; jmp 0xfffb0733

loc_fffb078c:  ; not directly referenced
mov al, dl

loc_fffb078e:  ; not directly referenced
mov ecx, esi
mov dl, byte [ebp - 0x26f8]
add edx, ecx
cmp dl, 0x1f
seta bl
cmp cl, byte [ebp - 0x271e]
setbe cl
or bl, cl
jne loc_fffb0708  ; jne 0xfffb0708
jmp short loc_fffb0733  ; jmp 0xfffb0733

loc_fffb07b1:  ; not directly referenced
imul esi, dword [ebp - 0x26e8], 9
mov byte [ebp - 0x2744], 0x1f
mov bl, byte [ebp - 0x26dc]
xor edx, edx
sub byte [ebp - 0x2744], bl
mov dword [ebp - 0x2728], esi

loc_fffb07d3:  ; not directly referenced
mov bl, byte [ebp - 0x26dc]
mov ecx, dword [ebp - 0x2700]
add ebx, edx
movzx esi, bl
imul esi, esi, 0x12
add esi, dword [ebp - 0x2728]
add esi, dword [ebp - 0x2708]
add ecx, esi
mov dword [ebp - 0x2754], esi
mov esi, ecx
mov cl, byte [ebp - 0x26e0]
cmp byte [esi + edi], cl
jbe short loc_fffb0838  ; jbe 0xfffb0838

loc_fffb0808:  ; not directly referenced
imul esi, dword [ebp - 0x26e8], 9
mov bl, byte [ebp - 0x26dc]
dec ebx
mov byte [ebp - 0x26d3], al
mov byte [ebp - 0x270c], bl
mov cl, byte [ebp - 0x26d4]
mov al, byte [ebp - 0x26dc]
xor edx, edx
mov dword [ebp - 0x2744], esi
jmp short loc_fffb0864  ; jmp 0xfffb0864

loc_fffb0838:  ; not directly referenced
mov esi, dword [ebp - 0x2754]
add esi, dword [ebp - 0x26fc]
mov cl, byte [ebp - 0x26e0]
cmp cl, byte [esi + edi]
jbe short loc_fffb0851  ; jbe 0xfffb0851
jmp short loc_fffb0808  ; jmp 0xfffb0808

loc_fffb0851:  ; not directly referenced
inc edx
cmp byte [ebp - 0x2744], dl
mov al, bl
jae loc_fffb07d3  ; jae 0xfffb07d3
jmp short loc_fffb0808  ; jmp 0xfffb0808

loc_fffb0862:  ; not directly referenced
mov eax, esi

loc_fffb0864:  ; not directly referenced
movzx ebx, al
imul esi, ebx, 0x12
mov dword [ebp - 0x2754], ebx
add esi, dword [ebp - 0x2744]
mov ebx, dword [ebp - 0x2700]
add esi, dword [ebp - 0x2708]
add ebx, esi
mov dword [ebp - 0x2758], esi
mov esi, ebx
mov bl, byte [ebp - 0x26e0]
cmp byte [esi + edi], bl
jbe short loc_fffb0899  ; jbe 0xfffb0899
jmp short loc_fffb08b0  ; jmp 0xfffb08b0

loc_fffb0899:  ; not directly referenced
mov esi, dword [ebp - 0x2758]
add esi, dword [ebp - 0x26fc]
mov bl, byte [ebp - 0x26e0]
cmp bl, byte [esi + edi]
jbe short loc_fffb08bb  ; jbe 0xfffb08bb

loc_fffb08b0:  ; not directly referenced
mov byte [ebp - 0x26d4], cl
jmp near loc_fffb0739  ; jmp 0xfffb0739

loc_fffb08bb:  ; not directly referenced
cmp al, 0x10
lea esi, [eax + 1]
jbe short loc_fffb08d1  ; jbe 0xfffb08d1
xor esi, esi
cmp dword [ebp - 0x2754], 0x11
lea ecx, [eax - 1]
cmovne esi, ecx

loc_fffb08d1:  ; not directly referenced
inc edx
cmp dl, byte [ebp - 0x270c]
mov cl, al
jbe short loc_fffb0862  ; jbe 0xfffb0862
jmp near loc_fffb0733  ; jmp 0xfffb0733

loc_fffb08e1:  ; not directly referenced
cmp byte [ebp - 0x26dc], 0xf
ja short loc_fffb08f7  ; ja 0xfffb08f7
sub eax, dword [ebp - 0x26dc]
cmp dl, 0xf
jbe short loc_fffb0917  ; jbe 0xfffb0917
jmp short loc_fffb092c  ; jmp 0xfffb092c

loc_fffb08f7:  ; not directly referenced
mov bl, byte [ebp - 0x26dc]
cmp dl, 0xf
lea eax, [ebx + eax - 0x10]
jbe short loc_fffb0917  ; jbe 0xfffb0917
jmp short loc_fffb0938  ; jmp 0xfffb0938

loc_fffb0908:  ; not directly referenced
mov bl, byte [ebp - 0x26dc]
sub ebx, eax
cmp dl, 0xf
mov al, bl
ja short loc_fffb0923  ; ja 0xfffb0923

loc_fffb0917:  ; not directly referenced
mov bl, byte [ebp - 0x26dc]
sub ebx, edx
mov dl, bl
jmp short loc_fffb093e  ; jmp 0xfffb093e

loc_fffb0923:  ; not directly referenced
cmp byte [ebp - 0x26dc], 0xf
ja short loc_fffb0938  ; ja 0xfffb0938

loc_fffb092c:  ; not directly referenced
mov bl, byte [ebp - 0x26dc]
lea edx, [ebx + edx - 0x10]
jmp short loc_fffb093e  ; jmp 0xfffb093e

loc_fffb0938:  ; not directly referenced
sub edx, dword [ebp - 0x26dc]

loc_fffb093e:  ; not directly referenced
movzx ebx, al
movzx ecx, dl
add ecx, ebx
cmp ecx, 8
jle short loc_fffb09ca  ; jle 0xfffb09ca
mov esi, dword [ebp - 0x26e4]
cmp al, dl
cmova eax, edx
cmp al, byte [ebp - 0x2704]
mov byte [ebp + esi - 0x2658], al
jae short loc_fffb0971  ; jae 0xfffb0971
and dword [ebp - 0x2704], 0xff
jmp short loc_fffb097a  ; jmp 0xfffb097a

loc_fffb0971:  ; not directly referenced
movzx eax, al
mov dword [ebp - 0x2704], eax

loc_fffb097a:  ; not directly referenced
mov edx, dword [ebp - 0x26e4]
mov eax, dword [ebp - 0x274c]
sub edx, dword [ebp - 0x2748]
sub eax, dword [ebp - 0x26e4]
cmp edx, eax
jg short loc_fffb09b1  ; jg 0xfffb09b1
mov ebx, dword [ebp - 0x26e4]
mov al, byte [ebp - 0x26e0]
sub eax, dword [ebp - 0x2714]
mov byte [ebp + ebx - 0x26a0], al
jmp short loc_fffb09ca  ; jmp 0xfffb09ca

loc_fffb09b1:  ; not directly referenced
mov esi, dword [ebp - 0x26e4]
mov al, byte [ebp - 0x271d]
sub eax, dword [ebp - 0x26e0]
mov byte [ebp + esi - 0x26a0], al

loc_fffb09ca:  ; not directly referenced
inc dword [ebp - 0x26e4]
cmp dword [ebp - 0x26e4], 0x48
jne loc_fffb0608  ; jne 0xfffb0608
mov dl, byte [ebp - 0x2714]
xor eax, eax
add edx, dword [ebp - 0x2730]
xor esi, esi

loc_fffb09ed:  ; not directly referenced
movzx ebx, byte [ebp + eax - 0x2658]
movzx ecx, byte [ebp + eax - 0x26a0]
imul ebx, dword [ebp - 0x2730]
imul ecx, dword [ebp - 0x2704]
add ecx, ebx
cmp esi, ecx
jae short loc_fffb0a15  ; jae 0xfffb0a15
mov esi, ecx
mov dl, al

loc_fffb0a15:  ; not directly referenced
inc eax
cmp eax, 0x48
jne short loc_fffb09ed  ; jne 0xfffb09ed
mov eax, dword [ebp - 0x2734]
add eax, dword [ebp - 0x2738]
cmp dword [ebp - 0x26e8], 0
mov ebx, dword [ebp - 0x273c]
jne short loc_fffb0a49  ; jne 0xfffb0a49
mov esi, dword [ebp - 0x26ec]
lea eax, [eax + ebx + 0x1b0]
lea eax, [esi + eax + 0xd]
jmp short loc_fffb0a5a  ; jmp 0xfffb0a5a

loc_fffb0a49:  ; not directly referenced
mov esi, dword [ebp - 0x26ec]
lea eax, [eax + ebx + 0x1c0]
lea eax, [esi + eax + 0x18]

loc_fffb0a5a:  ; not directly referenced
mov ebx, dword [ebp - 0x2718]
mov esi, dword [ebp - 0x271c]
cmp dword [ebp - 0x26e8], 0
mov byte [eax], dl
mov cl, byte [ebx]
mov byte [eax + 2], cl
mov cl, byte [esi]
mov byte [eax + 1], cl
jne short loc_fffb0a90  ; jne 0xfffb0a90
push eax
push dword [ebp + 0x10]
push dword [ebp + 0xc]
push dword [ebp + 8]
push dword [ebp - 0x2724]
push edi
push 0
jmp short loc_fffb0aa3  ; jmp 0xfffb0aa3

loc_fffb0a90:  ; not directly referenced
push eax
push dword [ebp + 0x10]
push dword [ebp + 0xc]
push dword [ebp + 8]
push dword [ebp - 0x2724]
push edi
push 1

loc_fffb0aa3:  ; not directly referenced
movzx edx, dl
mov ecx, dword [ebp - 0x26f0]
push edx
mov eax, dword [ebp - 0x26ec]
mov edx, dword [ebp - 0x26f4]
call fcn_fffac5bc  ; call 0xfffac5bc
add esp, 0x20
inc dword [ebp - 0x26e8]
add dword [ebp - 0x2718], 9
add dword [ebp - 0x271c], 9
cmp dword [ebp - 0x26e8], 2
jne loc_fffb057a  ; jne 0xfffb057a
inc byte [ebp - 0x2710]
jmp short loc_fffb0b0e  ; jmp 0xfffb0b0e

loc_fffb0aea:  ; not directly referenced
imul edi, dword [ebp - 0x26f0], 0x240
imul ebx, dword [ebp - 0x26f0], 0x36
mov byte [ebp - 0x2710], 0
mov dword [ebp - 0x2708], edi
mov dword [ebp - 0x2738], ebx

loc_fffb0b0e:  ; not directly referenced
mov eax, dword [ebp - 0x26ec]
mov bl, byte [ebp - 0x2710]
cmp bl, byte [eax + 0x20b5]
jb loc_fffb04f5  ; jb 0xfffb04f5

loc_fffb0b26:  ; not directly referenced
inc dword [ebp - 0x26f0]
cmp dword [ebp - 0x26f0], 4
jne loc_fffb04d1  ; jne 0xfffb04d1
mov eax, dword [ebp - 0x2740]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffb0b47:
db 0x00

fcn_fffb0b48:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0xbc]
mov ebx, dword [ebp + 8]
mov eax, dword [ebx + 0x2223]
mov edx, dword [eax + 0x42a0]
mov esi, dword [eax + 0x46a0]
or esi, edx
mov eax, ebx
shl esi, 0x13
mov edx, 0xdd5f
sar esi, 0x1f
call fcn_fffad891  ; call 0xfffad891
and esi, 0xa
mov dword [ebp - 0x6c], 8
mov word [ebp - 0x64], 0
mov byte [ebp - 0x62], 0
mov byte [ebp - 0x60], 4
mov byte [ebp - 0x5f], 0x12
mov byte [ebp - 0x5e], 0
mov byte [ebp - 0x5d], 0
mov word [ebp - 0x5c], 4
mov word [ebp - 0x5a], 0x28
mov byte [ebp - 0x58], 0x28
mov dword [ebp - 0x68], 0
mov dword [ebp - 0x57], 9
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 2
mov byte [ebp - 0x4a], 0x12
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 0x64
mov word [ebp - 0x45], 0x28
mov byte [ebp - 0x43], 4
mov dword [ebp - 0x53], 0
mov dword [ebp - 0x42], 4
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 2
mov byte [ebp - 0x35], 0x12
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 0x64
mov word [ebp - 0x30], 0x28
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
xor eax, eax
mov dword [ebp - 0x2d], 3
mov word [ebp - 0x25], 0x400
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0x12
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov word [ebp - 0x1b], 0x28
mov byte [ebp - 0x19], 3
mov dword [ebp - 0x29], 0

loc_fffb0c63:
test al, 1
jne short loc_fffb0c7f  ; jne 0xfffb0c7f
mov dword [ebp + eax*8 - 0xac], 0x12345678
mov dword [ebp + eax*8 - 0xa8], 0x12345678
jmp short loc_fffb0c95  ; jmp 0xfffb0c95

loc_fffb0c7f:
mov dword [ebp + eax*8 - 0xac], 0x98765432
mov dword [ebp + eax*8 - 0xa8], 0x98765432

loc_fffb0c95:
inc eax
cmp eax, 8
jne short loc_fffb0c63  ; jne 0xfffb0c63
cmp byte [ebx + 0x3a], 0
jne loc_fffb0e55  ; jne 0xfffb0e55

loc_fffb0ca5:
cmp byte [ebx + 0x108f], 0
jne loc_fffb0e71  ; jne 0xfffb0e71

loc_fffb0cb2:
mov dword [ebp - 0xbc], 0

loc_fffb0cbc:
mov al, byte [ebp - 0xbc]
xor edi, edi
mov byte [ebp - 0x61], al
mov byte [ebp - 0x4c], al
mov byte [ebp - 0x37], al
mov byte [ebp - 0x22], al

loc_fffb0cd0:
mov ecx, edi
mov edx, dword [ebp - 0xbc]
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb0e14  ; je 0xfffb0e14
test esi, esi
jne loc_fffb0e14  ; jne 0xfffb0e14
mov eax, 0x4f40

loc_fffb0cf4:
mov edx, dword [ebx + 0x2223]
add edx, eax
mov dword [edx], 0
mov edx, dword [ebx + 0x2223]
lea edx, [eax + edx - 0x200]
add eax, 4
cmp eax, 0x4f64
mov dword [edx], 0
jne short loc_fffb0cf4  ; jne 0xfffb0cf4
push eax
lea eax, [ebp - 0x6c]
mov ecx, 3
push 1
mov edx, edi
push eax
mov eax, ebx
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ecx, eax
je short loc_fffb0d64  ; je 0xfffb0d64
mov edx, 0xdd60
mov eax, ebx
mov dword [ebp - 0xc4], ecx
call fcn_fffad891  ; call 0xfffad891
mov ecx, dword [ebp - 0xc4]
jmp near loc_fffb0e90  ; jmp 0xfffb0e90

loc_fffb0d64:
xor ecx, ecx
mov edx, edi
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne short loc_fffb0d94  ; jne 0xfffb0d94
mov dl, byte [ebx + 0x20b5]
mov ax, 0x4140
mov byte [ebp - 0xbf], dl
mov edx, edi
mov byte [ebp - 0xbd], 0
mov byte [ebp - 0xbe], dl
jmp short loc_fffb0e06  ; jmp 0xfffb0e06

loc_fffb0d94:
mov edx, 0xdd60
mov eax, ebx
call fcn_fffad891  ; call 0xfffad891
mov ecx, 0xc
jmp near loc_fffb0e90  ; jmp 0xfffb0e90

loc_fffb0daa:
cmp byte [ebp - 0xbe], 1
mov edx, dword [ebx + 0x2223]
sbb ecx, ecx
and ecx, 0xfffffc00
lea ecx, [ecx + edx + 0x4740]
mov ecx, dword [ecx]
test ecx, ecx
je short loc_fffb0dfd  ; je 0xfffb0dfd
cmp byte [ebp - 0xbe], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
mov esi, 1
add ecx, edx
cmp byte [ebp - 0xbe], 1
mov ecx, dword [ecx]
sbb ecx, ecx
and ecx, 0xfffffc00
lea edx, [ecx + edx + 0x46ac]
mov edx, dword [edx]

loc_fffb0dfd:
inc byte [ebp - 0xbd]
add eax, 4

loc_fffb0e06:
mov dl, byte [ebp - 0xbf]
cmp byte [ebp - 0xbd], dl
jne short loc_fffb0daa  ; jne 0xfffb0daa

loc_fffb0e14:
inc edi
cmp edi, 2
jne loc_fffb0cd0  ; jne 0xfffb0cd0
inc dword [ebp - 0xbc]
cmp dword [ebp - 0xbc], 4
jne loc_fffb0cbc  ; jne 0xfffb0cbc
test esi, esi
jne short loc_fffb0e45  ; jne 0xfffb0e45
mov edx, 0xdd61
mov eax, ebx
call fcn_fffad891  ; call 0xfffad891
xor ecx, ecx
jmp short loc_fffb0e90  ; jmp 0xfffb0e90

loc_fffb0e45:
mov edx, 0xdd60
mov eax, ebx
call fcn_fffad891  ; call 0xfffad891
mov ecx, esi
jmp short loc_fffb0e90  ; jmp 0xfffb0e90

loc_fffb0e55:
sub esp, 0xc
lea ecx, [ebp - 0xac]
push 1
xor edx, edx
mov eax, ebx
call fcn_fffc7760  ; call 0xfffc7760
add esp, 0x10
jmp near loc_fffb0ca5  ; jmp 0xfffb0ca5

loc_fffb0e71:
sub esp, 0xc
lea ecx, [ebp - 0xac]
push 1
mov edx, 1
mov eax, ebx
call fcn_fffc7760  ; call 0xfffc7760
add esp, 0x10
jmp near loc_fffb0cb2  ; jmp 0xfffb0cb2

loc_fffb0e90:
lea esp, [ebp - 0xc]
mov eax, ecx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb0e9a:
push ebp
mov edx, 0xdd5c
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x8c]
call fcn_fffad891  ; call 0xfffad891
lea eax, [ebp - 0x6c]
lea edx, [ebp - 0x2c]

loc_fffb0eb9:
mov byte [eax], 0
inc eax
cmp eax, edx
jne short loc_fffb0eb9  ; jne 0xfffb0eb9
cmp byte [ebx + 0x3a], 0
je short loc_fffb0eff  ; je 0xfffb0eff
cmp dword [ebx + 0x20b1], 1
je short loc_fffb0ee6  ; je 0xfffb0ee6

loc_fffb0ed0:
sub esp, 0xc
lea ecx, [ebp - 0x6c]
push 1
xor edx, edx
mov eax, ebx
call fcn_fffc7760  ; call 0xfffc7760
add esp, 0x10
jmp short loc_fffb0eff  ; jmp 0xfffb0eff

loc_fffb0ee6:
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x5004]
or eax, 0x3000000
mov dword [edx + 0x5004], eax
jmp short loc_fffb0ed0  ; jmp 0xfffb0ed0

loc_fffb0eff:
cmp byte [ebx + 0x108f], 0
jne loc_fffb1126  ; jne 0xfffb1126
jmp short loc_fffb0f3c  ; jmp 0xfffb0f3c

loc_fffb0f0e:
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x5008]
or eax, 0x3000000
mov dword [edx + 0x5008], eax

loc_fffb0f25:
sub esp, 0xc
lea ecx, [ebp - 0x6c]
push 1
mov edx, 1
mov eax, ebx
call fcn_fffc7760  ; call 0xfffc7760
add esp, 0x10

loc_fffb0f3c:
mov esi, ebx
mov dword [ebp - 0x7c], 0
jmp near loc_fffb10fc  ; jmp 0xfffb10fc

loc_fffb0f4a:
mov al, byte [ebp - 0x88]
mov ecx, dword [ebp - 0x7c]
mov byte [ebp - 0x7e], al
mov edx, dword [ebp - 0x88]
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb10c8  ; je 0xfffb10c8
xor eax, eax
cmp byte [ebp - 0x7e], 1
seta al
mov byte [ebp - 0x7d], 0
imul eax, eax, 0x1d
add eax, dword [ebp - 0x90]
mov eax, dword [ebx + eax + 4]
mov dword [ebp - 0x8c], eax
jmp near loc_fffb10bc  ; jmp 0xfffb10bc

loc_fffb0f90:
mov al, byte [ebp - 0x7e]
mov dl, byte [esi + 0x43]
mov byte [ebp - 0x61], al
mov eax, dword [ebp - 0x84]
mov word [ebp - 0x64], ax
mov al, byte [ebp - 0x7d]
mov byte [ebp - 0x62], al
mov dword [ebp - 0x6c], 8
movzx eax, byte [esi + 0x3e]
mov word [ebp - 0x5a], ax
mov al, byte [esi + 0x44]
shr al, 2
mov byte [ebp - 0x60], 1
cmp dl, al
mov byte [ebp - 0x5f], 0x12
mov byte [ebp - 0x5e], 0
mov byte [ebp - 0x5d], 0
mov word [ebp - 0x5c], 1
mov dword [ebp - 0x68], 0
lea ecx, [eax + 1]
mov al, byte [ebp - 0x7e]
mov byte [ebp - 0x4c], al
mov eax, dword [ebp - 0x84]
mov word [ebp - 0x4f], ax
mov al, byte [ebp - 0x7d]
mov byte [ebp - 0x4d], al
cmovbe edx, ecx
movzx eax, byte [esi + 0x3d]
add eax, 0xd
mov byte [ebp - 0x58], dl
mov word [ebp - 0x45], ax
mov dword [ebp - 0x57], 9
mov byte [ebp - 0x4b], 2
mov byte [ebp - 0x4a], 9
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 0x81
mov byte [ebp - 0x43], 4
mov dword [ebp - 0x53], 0
mov al, byte [ebp - 0x7e]
mov byte [ebp - 0x37], al
mov al, byte [ebp - 0x7d]
mov byte [ebp - 0x38], al
mov ecx, 2
movzx eax, byte [esi + 0x3f]
push edx
mov word [ebp - 0x30], ax
lea eax, [ebp - 0x6c]
push 1
mov edx, dword [ebp - 0x7c]
mov dword [ebp - 0x42], 3
push eax
mov eax, ebx
mov word [ebp - 0x3a], 0x400
push 0
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0x12
push 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
push 0
mov word [ebp - 0x32], 1
mov byte [ebp - 0x2e], 3
push 0
mov dword [ebp - 0x3e], 0
push 0x10
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov edi, eax
jne short loc_fffb1118  ; jne 0xfffb1118
add dword [ebp - 0x84], 0x10

loc_fffb10a1:
mov eax, dword [ebp - 0x8c]
cmp dword [ebp - 0x84], eax
jb loc_fffb0f90  ; jb 0xfffb0f90
inc byte [ebp - 0x7d]
cmp byte [ebp - 0x7d], 8
je short loc_fffb10c8  ; je 0xfffb10c8

loc_fffb10bc:
mov dword [ebp - 0x84], 0
jmp short loc_fffb10a1  ; jmp 0xfffb10a1

loc_fffb10c8:
inc dword [ebp - 0x88]
cmp dword [ebp - 0x88], 4
jne loc_fffb0f4a  ; jne 0xfffb0f4a
xor ecx, ecx
mov edx, dword [ebp - 0x7c]
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov edi, eax
jne short loc_fffb1118  ; jne 0xfffb1118
inc dword [ebp - 0x7c]
add esi, 0x1055
cmp dword [ebp - 0x7c], 2
je short loc_fffb1138  ; je 0xfffb1138

loc_fffb10fc:
imul eax, dword [ebp - 0x7c], 0x1055
mov dword [ebp - 0x88], 0
mov dword [ebp - 0x90], eax
jmp near loc_fffb0f4a  ; jmp 0xfffb0f4a

loc_fffb1118:
mov edx, 0xdd5d
mov eax, ebx
call fcn_fffad891  ; call 0xfffad891
jmp short loc_fffb1138  ; jmp 0xfffb1138

loc_fffb1126:
cmp dword [ebx + 0x20b1], 1
jne loc_fffb0f25  ; jne 0xfffb0f25
jmp near loc_fffb0f0e  ; jmp 0xfffb0f0e

loc_fffb1138:
mov eax, ebx
mov edx, 0xdd5e
call fcn_fffad891  ; call 0xfffad891
lea esp, [ebp - 0xc]
mov eax, edi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb114e:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x12fc]
cmp dword [eax + 0x2254], 1
mov dword [ebp - 0x12a8], eax
jbe short loc_fffb117a  ; jbe 0xfffb117a
mov eax, dword [eax + 0x2223]
mov dword [eax + 0x4ea8], 1

loc_fffb117a:  ; not directly referenced
mov ecx, 0xff
mov edx, 0x18c
lea eax, [ebp - 0xf24]
lea ebx, [ebp - 0xd98]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x1244]
lea esi, [ebp - 0x6d8]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x11fc]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x12
lea eax, [ebp - 0x1280]
call fcn_fffa24c1  ; call 0xfffa24c1
mov ecx, 0x20
mov edx, 0x18
lea eax, [ebp - 0x125c]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x6c0
mov eax, ebx
mov byte [ebp - 0x125c], 0
mov byte [ebp - 0x125b], 0xf
mov byte [ebp - 0x1259], 0x2f
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x6c0
mov eax, esi
call fcn_fffa24c1  ; call 0xfffa24c1
mov eax, dword [ebp - 0x12a8]
cmp byte [eax + 0x3a], 0
je short loc_fffb1250  ; je 0xfffb1250
sub esp, 0xc
xor edx, edx
push 1
lea ecx, [ebp - 0x125c]
push 0xf
push 0x20
push esi
push ebx
call fcn_fffaec9b  ; call 0xfffaec9b
add esp, 0x20
cmp eax, 1
mov dword [ebp - 0x12d4], eax
sbb ebx, ebx
not ebx
add ebx, 3
jmp short loc_fffb125c  ; jmp 0xfffb125c

loc_fffb1250:  ; not directly referenced
mov bl, 3
mov dword [ebp - 0x12d4], 0

loc_fffb125c:  ; not directly referenced
mov eax, dword [ebp - 0x12a8]
cmp byte [eax + 0x108f], 0
jne loc_fffb29f0  ; jne 0xfffb29f0

loc_fffb126f:  ; not directly referenced
cmp bl, 3
je short loc_fffb1291  ; je 0xfffb1291
movzx eax, bl
mov dl, byte [eax + ref_fffcedac]  ; mov dl, byte [eax - 0x31254]
mov al, byte [eax + ref_fffcedaf]  ; mov al, byte [eax - 0x31251]
mov byte [ebp - 0x129c], dl
mov byte [ebp - 0x12b6], al
jmp short loc_fffb129f  ; jmp 0xfffb129f

loc_fffb1291:  ; not directly referenced
mov byte [ebp - 0x12b6], 1
mov byte [ebp - 0x129c], 0

loc_fffb129f:  ; not directly referenced
mov cl, byte [ebp - 0x129c]
mov byte [ebp - 0x12b5], cl
jmp near loc_fffb1368  ; jmp 0xfffb1368

loc_fffb12b0:  ; not directly referenced
movzx esi, byte [ebp - 0x12b5]
mov eax, dword [ebp - 0x12a8]
imul edi, esi, 0x1055
mov dword [ebp - 0x12a4], esi
cmp byte [eax + edi + 0x3a], 0
jne loc_fffb2a3a  ; jne 0xfffb2a3a

loc_fffb12d4:  ; not directly referenced
inc byte [ebp - 0x12b5]
jmp near loc_fffb1368  ; jmp 0xfffb1368

loc_fffb12df:  ; not directly referenced
mov ecx, dword [ebp - 0x12a4]
mov edx, esi
mov eax, dword [ebp - 0x12a8]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffb1342  ; jne 0xfffb1342

loc_fffb12f6:  ; not directly referenced
inc esi
cmp esi, 4
jne short loc_fffb12df  ; jne 0xfffb12df
jmp short loc_fffb12d4  ; jmp 0xfffb12d4

loc_fffb12fe:  ; not directly referenced
movzx eax, byte [ebp - 0x12a0]
mov ecx, esi
push edx
push edx
mov edx, dword [ebp - 0x12a8]
push eax
lea eax, [eax + eax*2]
add eax, dword [ebp - 0x12ac]
lea eax, [eax + edi + 0x280]
movzx eax, byte [edx + eax + 0x15]
mov edx, dword [ebp - 0x12a4]
push eax
mov eax, dword [ebp - 0x12a8]
call fcn_fffae682  ; call 0xfffae682
inc byte [ebp - 0x12a0]
add esp, 0x10
jmp short loc_fffb1352  ; jmp 0xfffb1352

loc_fffb1342:  ; not directly referenced
imul ecx, esi, 0x24
mov byte [ebp - 0x12a0], 0
mov dword [ebp - 0x12ac], ecx

loc_fffb1352:  ; not directly referenced
mov edx, dword [ebp - 0x12a8]
mov al, byte [ebp - 0x12a0]
cmp al, byte [edx + 0x20b5]
jb short loc_fffb12fe  ; jb 0xfffb12fe
jmp short loc_fffb12f6  ; jmp 0xfffb12f6

loc_fffb1368:  ; not directly referenced
mov cl, byte [ebp - 0x12b6]
cmp byte [ebp - 0x12b5], cl
jbe loc_fffb12b0  ; jbe 0xfffb12b0
cmp byte [ebp - 0x129c], cl
jne short loc_fffb13a3  ; jne 0xfffb13a3
mov byte [ebp - 0x12b5], 1
mov al, byte [ebp - 0x129c]
sub byte [ebp - 0x12b5], al
mov dl, byte [ebp - 0x12b5]
mov byte [ebp - 0x12b6], dl
jmp short loc_fffb13b1  ; jmp 0xfffb13b1

loc_fffb13a3:  ; not directly referenced
mov byte [ebp - 0x12b6], 1
mov byte [ebp - 0x12b5], 0

loc_fffb13b1:  ; not directly referenced
cmp bl, 3
je loc_fffb29c8  ; je 0xfffb29c8
xor eax, eax

loc_fffb13bc:  ; not directly referenced
lea edx, [eax + eax]
mov byte [ebp + eax - 0x125c], dl
inc eax
cmp eax, 0xc
jne short loc_fffb13bc  ; jne 0xfffb13bc
lea edx, [ebp - 0x1250]
mov al, 0x20

loc_fffb13d4:  ; not directly referenced
mov byte [edx], al
add eax, 2
inc edx
cmp al, 0x38
jne short loc_fffb13d4  ; jne 0xfffb13d4
jmp near loc_fffb2a54  ; jmp 0xfffb2a54

loc_fffb13e3:  ; not directly referenced
mov eax, dword [eax + 0x5f08]

loc_fffb13e9:  ; not directly referenced
mov ecx, dword [ebp - 0x12a8]
test ah, 1
mov eax, dword [ecx + 0x2223]
jne short loc_fffb13e3  ; jne 0xfffb13e3
mov edx, dword [eax + 0x5f08]
mov bl, byte [ebp - 0x12b5]
or edx, 1
mov byte [ebp - 0x128b], 0xa
mov dword [eax + 0x5f08], edx
mov byte [ebp - 0x128a], 8
mov byte [ebp - 0x1289], 6
mov byte [ebp - 0x1288], 4
mov byte [ebp - 0x1287], 2
mov byte [ebp - 0x1286], 0
mov byte [ebp - 0x1285], 0x12
mov byte [ebp - 0x1284], 0x14
mov byte [ebp - 0x1283], 0x16
mov byte [ebp - 0x1282], 0x18
mov byte [ebp - 0x1281], 0x1a
mov byte [ebp - 0x12a0], bl
jmp near loc_fffb1550  ; jmp 0xfffb1550

loc_fffb1467:  ; not directly referenced
movzx esi, byte [ebp - 0x12a0]
imul eax, esi, 0x1055
add eax, dword [ebp - 0x12a8]
mov dword [ebp - 0x12a4], esi
cmp byte [eax + 0x3a], 0
jne loc_fffb2a8e  ; jne 0xfffb2a8e

loc_fffb148a:  ; not directly referenced
inc byte [ebp - 0x12a0]
jmp near loc_fffb1550  ; jmp 0xfffb1550

loc_fffb1495:  ; not directly referenced
mov al, byte [eax + 0x12]
test al, al
je short loc_fffb14a8  ; je 0xfffb14a8
cmp al, 2
mov esi, 1
sbb ebx, ebx
inc ebx
jmp short loc_fffb14ac  ; jmp 0xfffb14ac

loc_fffb14a8:  ; not directly referenced
xor ebx, ebx
xor esi, esi

loc_fffb14ac:  ; not directly referenced
imul eax, dword [ebp - 0x12a4], 9
mov byte [ebp - 0x129c], 0
mov dword [ebp - 0x12b0], eax
jmp short loc_fffb1533  ; jmp 0xfffb1533

loc_fffb14c2:  ; not directly referenced
test esi, esi
je short loc_fffb14f6  ; je 0xfffb14f6
push eax
movzx edi, byte [ebp - 0x129c]
xor ecx, ecx
push 0x1b
mov edx, dword [ebp - 0x12a4]
mov eax, dword [ebp - 0x12a8]
push 0
push edi
call fcn_fffbfee2  ; call 0xfffbfee2
add edi, dword [ebp - 0x12b0]
add esp, 0x10
mov dword [ebp + edi*4 - 0x1244], eax

loc_fffb14f6:  ; not directly referenced
test ebx, ebx
je short loc_fffb152d  ; je 0xfffb152d
push edi
movzx edi, byte [ebp - 0x129c]
mov ecx, 1
push 0x1b
mov edx, dword [ebp - 0x12a4]
mov eax, dword [ebp - 0x12a8]
push 0
push edi
call fcn_fffbfee2  ; call 0xfffbfee2
add edi, dword [ebp - 0x12b0]
add esp, 0x10
mov dword [ebp + edi*4 - 0x11fc], eax

loc_fffb152d:  ; not directly referenced
inc byte [ebp - 0x129c]

loc_fffb1533:  ; not directly referenced
mov eax, dword [ebp - 0x12a8]
mov dl, byte [ebp - 0x129c]
cmp dl, byte [eax + 0x20b5]
jb loc_fffb14c2  ; jb 0xfffb14c2
jmp near loc_fffb148a  ; jmp 0xfffb148a

loc_fffb1550:  ; not directly referenced
mov bl, byte [ebp - 0x12b6]
cmp byte [ebp - 0x12a0], bl
jbe loc_fffb1467  ; jbe 0xfffb1467
mov dword [ebp - 0x129c], 0
jmp near loc_fffb17eb  ; jmp 0xfffb17eb

loc_fffb1571:  ; not directly referenced
movzx esi, bl
mov edx, dword [ebp - 0x12a8]
imul eax, esi, 0x1055
cmp byte [edx + eax + 0x3a], 0
jne loc_fffb2a9d  ; jne 0xfffb2a9d

loc_fffb158b:  ; not directly referenced
inc ebx

loc_fffb158c:  ; not directly referenced
cmp bl, byte [ebp - 0x12b6]
jbe short loc_fffb1571  ; jbe 0xfffb1571
xor ecx, ecx
mov edx, 0x6c0
lea eax, [ebp - 0xd98]
lea esi, [ebp - 0x6d8]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x6c0
mov eax, esi
call fcn_fffa24c1  ; call 0xfffa24c1
mov bl, byte [ebp - 0x12b5]
jmp short loc_fffb15dd  ; jmp 0xfffb15dd

loc_fffb15c2:  ; not directly referenced
movzx edx, bl
mov ecx, dword [ebp - 0x12a8]
imul eax, edx, 0x1055
cmp byte [ecx + eax + 0x3a], 0
jne loc_fffb2aec  ; jne 0xfffb2aec

loc_fffb15dc:  ; not directly referenced
inc ebx

loc_fffb15dd:  ; not directly referenced
cmp bl, byte [ebp - 0x12b6]
jbe short loc_fffb15c2  ; jbe 0xfffb15c2
imul esi, dword [ebp - 0x129c], 0x24
mov bl, byte [ebp - 0x12b5]
mov byte [ebp - 0x12a4], bl
mov dword [ebp - 0x12cc], esi
jmp near loc_fffb17ac  ; jmp 0xfffb17ac

loc_fffb1603:  ; not directly referenced
movzx ebx, byte [ebp - 0x12a4]
mov esi, dword [ebp - 0x12a8]
imul eax, ebx, 0x1055
mov dword [ebp - 0x12a0], ebx
cmp byte [esi + eax + 0x3a], 0
jne loc_fffb2b16  ; jne 0xfffb2b16

loc_fffb1627:  ; not directly referenced
inc byte [ebp - 0x12a4]
jmp near loc_fffb17ac  ; jmp 0xfffb17ac

loc_fffb1632:  ; not directly referenced
mov ecx, dword [ebp - 0x12a0]
mov edx, dword [ebp - 0x12d0]
mov eax, dword [ebp - 0x12a8]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffb1667  ; jne 0xfffb1667

loc_fffb164d:  ; not directly referenced
inc dword [ebp - 0x12d0]
add edi, 0x12
add esi, 0x12
cmp dword [ebp - 0x12d0], 4
jne short loc_fffb1632  ; jne 0xfffb1632
jmp near loc_fffb170b  ; jmp 0xfffb170b

loc_fffb1667:  ; not directly referenced
mov eax, dword [ebp - 0x12a8]
xor edx, edx
imul ecx, dword [ebp - 0x12d0], 0xd8
mov al, byte [eax + 0x20b5]
mov byte [ebp - 0x12bc], al
mov dword [ebp - 0x12c4], ecx

loc_fffb168b:  ; not directly referenced
lea eax, [edx + edx*8]
add eax, dword [ebp - 0x12c4]
add eax, dword [ebp - 0x12c8]
lea ebx, [ebp - 0xd98]
add ebx, eax
mov dword [ebp - 0x12b0], ebx
lea eax, [ebp + eax - 0x6d8]
mov dword [ebp - 0x12b4], eax
xor eax, eax
jmp short loc_fffb16f8  ; jmp 0xfffb16f8

loc_fffb16b9:  ; not directly referenced
mov ebx, dword [ebp - 0x12b4]
cmp byte [ebp + edx - 0x125c], 0x16
movzx ecx, byte [ebx + eax]
ja short loc_fffb16e3  ; ja 0xfffb16e3
mov ebx, dword [ebp - 0x12b0]
add cx, word [edi + eax*2]
movzx ebx, byte [ebx + eax]
sub ecx, ebx
mov word [edi + eax*2], cx
jmp short loc_fffb16f7  ; jmp 0xfffb16f7

loc_fffb16e3:  ; not directly referenced
mov ebx, dword [ebp - 0x12b0]
add cx, word [esi + eax*2]
movzx ebx, byte [ebx + eax]
sub ecx, ebx
mov word [esi + eax*2], cx

loc_fffb16f7:  ; not directly referenced
inc eax

loc_fffb16f8:  ; not directly referenced
cmp byte [ebp - 0x12bc], al
ja short loc_fffb16b9  ; ja 0xfffb16b9
inc edx
cmp edx, 0x18
jne short loc_fffb168b  ; jne 0xfffb168b
jmp near loc_fffb164d  ; jmp 0xfffb164d

loc_fffb170b:  ; not directly referenced
imul eax, dword [ebp - 0x12a0], 0x12
mov ebx, dword [ebp - 0x12a8]
add eax, dword [ebp - 0x12cc]
mov bl, byte [ebx + 0x20b5]
mov byte [ebp - 0x12b4], bl
lea edi, [ebp + eax - 0xf24]
xor ebx, ebx
jmp short loc_fffb177d  ; jmp 0xfffb177d

loc_fffb1735:  ; not directly referenced
mov ecx, dword [ebp - 0x12a0]
mov edx, esi
mov eax, dword [ebp - 0x12a8]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffb1776  ; je 0xfffb1776
imul eax, esi, 0x12
mov ecx, dword [ebp - 0x12bc]
mov dx, word [ecx + eax]
mov ecx, dword [ebp - 0x12b0]
cmp word [ecx + eax], dx
cmovbe dx, word [ecx + eax]
mov ax, word [edi + ebx*2]
cmp dx, ax
cmovbe eax, edx
mov word [edi + ebx*2], ax

loc_fffb1776:  ; not directly referenced
inc esi
cmp esi, 4
jne short loc_fffb1735  ; jne 0xfffb1735
inc ebx

loc_fffb177d:  ; not directly referenced
cmp byte [ebp - 0x12b4], bl
jbe loc_fffb1627  ; jbe 0xfffb1627
lea eax, [ebx + ebx]
lea esi, [ebp - 0x116c]
add esi, eax
mov dword [ebp - 0x12b0], esi
lea esi, [ebp - 0x11b4]
add esi, eax
mov dword [ebp - 0x12bc], esi
xor esi, esi
jmp short loc_fffb1735  ; jmp 0xfffb1735

loc_fffb17ac:  ; not directly referenced
mov bl, byte [ebp - 0x12b6]
cmp byte [ebp - 0x12a4], bl
jbe loc_fffb1603  ; jbe 0xfffb1603
inc dword [ebp - 0x129c]
cmp dword [ebp - 0x129c], 0xb
jne short loc_fffb17eb  ; jne 0xfffb17eb
movzx esi, byte [ebp - 0x12ac]
mov bl, byte [ebp - 0x12b5]
mov byte [ebp - 0x12a0], bl
mov dword [ebp - 0x12c4], esi
jmp near loc_fffb19ac  ; jmp 0xfffb19ac

loc_fffb17eb:  ; not directly referenced
mov bl, byte [ebp - 0x12b5]
jmp near loc_fffb158c  ; jmp 0xfffb158c

loc_fffb17f6:  ; not directly referenced
movzx eax, byte [ebp - 0x12a0]
mov ecx, dword [ebp - 0x12a8]
imul edx, eax, 0x1055
cmp byte [ecx + edx + 0x3a], 0
jne short loc_fffb181b  ; jne 0xfffb181b

loc_fffb1810:  ; not directly referenced
inc byte [ebp - 0x12a0]
jmp near loc_fffb19ac  ; jmp 0xfffb19ac

loc_fffb181b:  ; not directly referenced
imul edx, eax, 0x12
mov ebx, dword [ebp - 0x12a8]
lea eax, [eax + eax*8]
lea esi, [ebp - 0xf24]
lea ecx, [ebp + eax - 0x126e]
mov dword [ebp - 0x12b4], ecx
lea ecx, [ebp - 0x18]
add ecx, eax
mov bl, byte [ebx + 0x20b5]
add esi, edx
mov byte [ebp - 0x12ac], bl
mov dword [ebp - 0x129c], eax
lea ebx, [ebp + eax - 0x1280]
xor edi, edi
mov dword [ebp - 0x12bc], ebx
mov dword [ebp - 0x12a4], eax
mov dword [ebp - 0x12c0], ecx
jmp near loc_fffb1986  ; jmp 0xfffb1986

loc_fffb1873:  ; not directly referenced
imul ecx, eax, 0x24
movzx ecx, word [ebx + ecx]
cmp ecx, edx
jbe short loc_fffb188d  ; jbe 0xfffb188d
mov edx, dword [ebp - 0x12c0]
mov byte [edi + edx - 0x1256], al
mov edx, ecx

loc_fffb188d:  ; not directly referenced
inc eax
cmp eax, 0xb
jne short loc_fffb1873  ; jne 0xfffb1873
mov ecx, dword [ebp - 0x12b4]
movzx eax, byte [ecx + edi]
test al, al
jne short loc_fffb18b2  ; jne 0xfffb18b2
mov cx, word [esi + 0x24]
mov word [ebp - 0x12d0], 0
mov dl, 0xa0
jmp short loc_fffb1900  ; jmp 0xfffb1900

loc_fffb18b2:  ; not directly referenced
cmp al, 0xa
jne short loc_fffb18ca  ; jne 0xfffb18ca
mov bx, word [esi + 0x144]
xor ecx, ecx
mov word [ebp - 0x12d0], bx
mov dl, 0xa
jmp short loc_fffb1900  ; jmp 0xfffb1900

loc_fffb18ca:  ; not directly referenced
movzx edx, al
lea ecx, [edx - 1]
inc edx
imul ecx, ecx, 0x12
imul edx, edx, 0x12
add ecx, dword [ebp - 0x12a4]
add ecx, edi
add edx, dword [ebp - 0x12a4]
add edx, edi
mov cx, word [ebp + ecx*2 - 0xf24]
mov word [ebp - 0x12d0], cx
mov cx, word [ebp + edx*2 - 0xf24]
mov dl, 0xee

loc_fffb1900:  ; not directly referenced
imul eax, eax, 0x12
add eax, dword [ebp - 0x12a4]
add eax, edi
mov ebx, dword [ebp - 0x12bc]
mov ax, word [ebp + eax*2 - 0xf24]
mov byte [ebx + edi], dl
mov word [ebp - 0x12b0], ax
mov ebx, 0x64
movzx eax, word [esi + 0xb4]
imul eax, dword [ebp - 0x12c4]
cdq
mov dword [ebp - 0x12c8], eax
idiv ebx
xor edx, edx
mov dword [ebp - 0x12cc], eax

loc_fffb1947:  ; not directly referenced
mov word [esi + edx], 0xffff
add edx, 0x24
cmp edx, 0x18c
jne short loc_fffb1947  ; jne 0xfffb1947
mov ebx, dword [ebp - 0x12d0]
mov eax, dword [ebp - 0x12cc]
mov word [esi], bx
mov ebx, dword [ebp - 0x12b0]
mov word [esi + 0x144], ax
mov word [esi + 0x90], bx
mov word [esi + 0x120], cx
inc edi
add esi, 2

loc_fffb1986:  ; not directly referenced
mov eax, edi
cmp byte [ebp - 0x12ac], al
jbe loc_fffb1810  ; jbe 0xfffb1810
mov eax, dword [ebp - 0x129c]
xor edx, edx
add eax, edi
lea ebx, [ebp + eax*2 - 0xf24]
xor eax, eax
jmp near loc_fffb1873  ; jmp 0xfffb1873

loc_fffb19ac:  ; not directly referenced
mov bl, byte [ebp - 0x12b6]
cmp byte [ebp - 0x12a0], bl
jbe loc_fffb17f6  ; jbe 0xfffb17f6
mov dword [ebp - 0x12a0], 1

loc_fffb19c8:  ; not directly referenced
mov al, byte [ebp - 0x12a0]
cmp al, 4
je short loc_fffb1a05  ; je 0xfffb1a05
mov cl, al
dec eax
mov bl, byte [ebp - 0x12b5]
mov dword [ebp - 0x12b0], 1
movzx esi, al
mov byte [ebp - 0x129c], bl
shl dword [ebp - 0x12b0], cl
mov byte [ebp - 0x12ac], al
mov dword [ebp - 0x12bc], esi
jmp near loc_fffb1b43  ; jmp 0xfffb1b43

loc_fffb1a05:  ; not directly referenced
inc dword [ebp - 0x12a0]
cmp dword [ebp - 0x12a0], 8
jne short loc_fffb19c8  ; jne 0xfffb19c8
mov bl, byte [ebp - 0x12b5]
mov byte [ebp - 0x12ac], 4
mov byte [ebp - 0x129c], bl
jmp near loc_fffb1ed8  ; jmp 0xfffb1ed8

loc_fffb1a2c:  ; not directly referenced
movzx esi, byte [ebp - 0x129c]
mov edx, dword [ebp - 0x12a8]
imul eax, esi, 0x1055
mov byte [ebp - 0x12a4], 0
cmp byte [edx + eax + 0x3a], 0
jne loc_fffb1b18  ; jne 0xfffb1b18

loc_fffb1a51:  ; not directly referenced
inc byte [ebp - 0x129c]
jmp near loc_fffb1b43  ; jmp 0xfffb1b43

loc_fffb1a5c:  ; not directly referenced
movzx edi, byte [ebp - 0x12a4]
mov eax, dword [ebp - 0x12b4]
add eax, edi
movzx edx, byte [eax - 0x1268]
test dword [ebp - 0x12b0], edx
je loc_fffb1b10  ; je 0xfffb1b10
cmp byte [ebp - 0x12ac], 6
mov al, byte [eax - 0x1256]
ja short loc_fffb1abe  ; ja 0xfffb1abe
mov ebx, dword [ebp - 0x12bc]
jmp dword [ebx*4 + ref_fffced68]  ; ujmp: jmp dword [ebx*4 - 0x31298]

loc_fffb1a9a:  ; not directly referenced
lea edx, [eax + 1]
jmp short loc_fffb1aa1  ; jmp 0xfffb1aa1

loc_fffb1a9f:  ; not directly referenced
mov dl, al

loc_fffb1aa1:  ; not directly referenced
lea ebx, [eax - 1]
jmp short loc_fffb1aba  ; jmp 0xfffb1aba

loc_fffb1aa6:  ; not directly referenced
mov bl, al
dec eax
jmp short loc_fffb1ac0  ; jmp 0xfffb1ac0

loc_fffb1aab:  ; not directly referenced
mov bl, al
inc eax
jmp short loc_fffb1ac0  ; jmp 0xfffb1ac0

loc_fffb1ab0:  ; not directly referenced
lea edx, [eax - 1]
jmp short loc_fffb1ab7  ; jmp 0xfffb1ab7

loc_fffb1ab5:  ; not directly referenced
mov dl, al

loc_fffb1ab7:  ; not directly referenced
lea ebx, [eax + 1]

loc_fffb1aba:  ; not directly referenced
mov al, dl
jmp short loc_fffb1ac0  ; jmp 0xfffb1ac0

loc_fffb1abe:  ; not directly referenced
mov bl, al

loc_fffb1ac0:  ; not directly referenced
push ecx
lea edx, [ebp - 0x1244]
xor ecx, ecx
push edx
movzx eax, al
mov edx, esi
movzx eax, byte [ebp + eax - 0x128b]
push eax
movzx ebx, bl
mov eax, dword [ebp - 0x12a8]
push edi
call fcn_fffae5de  ; call 0xfffae5de
add esp, 0xc
lea eax, [ebp - 0x11fc]
push eax
movzx eax, byte [ebp + ebx - 0x128b]
mov ecx, 1
push eax
mov edx, esi
mov eax, dword [ebp - 0x12a8]
push edi
call fcn_fffae5de  ; call 0xfffae5de
add esp, 0x10

loc_fffb1b10:  ; not directly referenced
inc byte [ebp - 0x12a4]
jmp short loc_fffb1b26  ; jmp 0xfffb1b26

loc_fffb1b18:  ; not directly referenced
lea eax, [esi + esi*8]
lea ebx, [ebp - 0x18]
add ebx, eax
mov dword [ebp - 0x12b4], ebx

loc_fffb1b26:  ; not directly referenced
mov eax, dword [ebp - 0x12a8]
mov bl, byte [ebp - 0x12a4]
cmp bl, byte [eax + 0x20b5]
jb loc_fffb1a5c  ; jb 0xfffb1a5c
jmp near loc_fffb1a51  ; jmp 0xfffb1a51

loc_fffb1b43:  ; not directly referenced
mov bl, byte [ebp - 0x12b6]
cmp byte [ebp - 0x129c], bl
jbe loc_fffb1a2c  ; jbe 0xfffb1a2c
xor ecx, ecx
mov edx, 0x6c0
lea eax, [ebp - 0xd98]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x6c0
lea eax, [ebp - 0x6d8]
call fcn_fffa24c1  ; call 0xfffa24c1
mov bl, byte [ebp - 0x12b5]
jmp short loc_fffb1b9c  ; jmp 0xfffb1b9c

loc_fffb1b81:  ; not directly referenced
movzx edx, bl
mov esi, dword [ebp - 0x12a8]
imul eax, edx, 0x1055
cmp byte [esi + eax + 0x3a], 0
jne loc_fffb2b65  ; jne 0xfffb2b65

loc_fffb1b9b:  ; not directly referenced
inc ebx

loc_fffb1b9c:  ; not directly referenced
cmp bl, byte [ebp - 0x12b6]
jbe short loc_fffb1b81  ; jbe 0xfffb1b81
imul esi, dword [ebp - 0x12a0], 0x24
mov bl, byte [ebp - 0x12b5]
mov byte [ebp - 0x12ac], bl
mov dword [ebp - 0x12d0], esi
jmp near loc_fffb1d82  ; jmp 0xfffb1d82

loc_fffb1bc2:  ; not directly referenced
movzx ebx, byte [ebp - 0x12ac]
mov esi, dword [ebp - 0x12a8]
imul eax, ebx, 0x1055
mov dword [ebp - 0x129c], ebx
cmp byte [esi + eax + 0x3a], 0
jne loc_fffb2b95  ; jne 0xfffb2b95

loc_fffb1be6:  ; not directly referenced
inc byte [ebp - 0x12ac]
jmp near loc_fffb1d82  ; jmp 0xfffb1d82

loc_fffb1bf1:  ; not directly referenced
mov ecx, dword [ebp - 0x129c]
mov edx, dword [ebp - 0x12a4]
mov eax, dword [ebp - 0x12a8]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffb1c26  ; jne 0xfffb1c26

loc_fffb1c0c:  ; not directly referenced
inc dword [ebp - 0x12a4]
add ebx, 0x12
add edi, 0x12
cmp dword [ebp - 0x12a4], 4
jne short loc_fffb1bf1  ; jne 0xfffb1bf1
jmp near loc_fffb1ce1  ; jmp 0xfffb1ce1

loc_fffb1c26:  ; not directly referenced
mov eax, dword [ebp - 0x12a8]
xor edx, edx
imul ecx, dword [ebp - 0x12a4], 0xd8
mov al, byte [eax + 0x20b5]
mov byte [ebp - 0x12bc], al
mov dword [ebp - 0x12c8], ecx

loc_fffb1c4a:  ; not directly referenced
lea esi, [edx + edx*8]
add esi, dword [ebp - 0x12c8]
add esi, dword [ebp - 0x12cc]
lea eax, [ebp - 0xd98]
lea ecx, [ebp - 0x6d8]
add eax, esi
add ecx, esi
mov dword [ebp - 0x12b4], eax
mov dword [ebp - 0x12d8], ecx
xor eax, eax
jmp short loc_fffb1cca  ; jmp 0xfffb1cca

loc_fffb1c79:  ; not directly referenced
mov ecx, dword [ebp - 0x12c0]
movzx esi, byte [ecx + eax]
test dword [ebp - 0x12b0], esi
je short loc_fffb1cc9  ; je 0xfffb1cc9
mov esi, dword [ebp - 0x12d8]
cmp byte [ebp + edx - 0x125c], 0x16
movzx ecx, byte [esi + eax]
ja short loc_fffb1cb5  ; ja 0xfffb1cb5
mov esi, dword [ebp - 0x12b4]
add cx, word [ebx + eax*2]
movzx esi, byte [esi + eax]
sub ecx, esi
mov word [ebx + eax*2], cx
jmp short loc_fffb1cc9  ; jmp 0xfffb1cc9

loc_fffb1cb5:  ; not directly referenced
mov esi, dword [ebp - 0x12b4]
add cx, word [edi + eax*2]
movzx esi, byte [esi + eax]
sub ecx, esi
mov word [edi + eax*2], cx

loc_fffb1cc9:  ; not directly referenced
inc eax

loc_fffb1cca:  ; not directly referenced
cmp byte [ebp - 0x12bc], al
ja short loc_fffb1c79  ; ja 0xfffb1c79
inc edx
cmp edx, 0x18
jne loc_fffb1c4a  ; jne 0xfffb1c4a
jmp near loc_fffb1c0c  ; jmp 0xfffb1c0c

loc_fffb1ce1:  ; not directly referenced
imul eax, dword [ebp - 0x129c], 0x12
mov ebx, dword [ebp - 0x12a8]
add eax, dword [ebp - 0x12d0]
mov bl, byte [ebx + 0x20b5]
mov byte [ebp - 0x12b4], bl
lea edi, [ebp + eax - 0xf24]
xor ebx, ebx
jmp short loc_fffb1d53  ; jmp 0xfffb1d53

loc_fffb1d0b:  ; not directly referenced
mov ecx, dword [ebp - 0x129c]
mov edx, esi
mov eax, dword [ebp - 0x12a8]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffb1d4c  ; je 0xfffb1d4c
imul eax, esi, 0x12
mov ecx, dword [ebp - 0x12bc]
mov dx, word [ecx + eax]
mov ecx, dword [ebp - 0x12a4]
cmp word [ecx + eax], dx
cmovbe dx, word [ecx + eax]
mov ax, word [edi + ebx*2]
cmp dx, ax
cmovbe eax, edx
mov word [edi + ebx*2], ax

loc_fffb1d4c:  ; not directly referenced
inc esi
cmp esi, 4
jne short loc_fffb1d0b  ; jne 0xfffb1d0b
inc ebx

loc_fffb1d53:  ; not directly referenced
cmp byte [ebp - 0x12b4], bl
jbe loc_fffb1be6  ; jbe 0xfffb1be6
lea eax, [ebx + ebx]
lea esi, [ebp - 0x116c]
add esi, eax
mov dword [ebp - 0x12a4], esi
lea esi, [ebp - 0x11b4]
add esi, eax
mov dword [ebp - 0x12bc], esi
xor esi, esi
jmp short loc_fffb1d0b  ; jmp 0xfffb1d0b

loc_fffb1d82:  ; not directly referenced
mov bl, byte [ebp - 0x12b6]
cmp byte [ebp - 0x12ac], bl
jbe loc_fffb1bc2  ; jbe 0xfffb1bc2
jmp near loc_fffb1a05  ; jmp 0xfffb1a05

loc_fffb1d99:  ; not directly referenced
movzx esi, byte [ebp - 0x129c]
mov edx, dword [ebp - 0x12a8]
imul eax, esi, 0x1055
mov dword [ebp - 0x12a4], esi
cmp byte [edx + eax + 0x3a], 0
je loc_fffb1ed2  ; je 0xfffb1ed2
lea esi, [esi + esi*8]
lea ebx, [ebp - 0x18]
add ebx, esi
mov byte [ebp - 0x12a0], 0
mov dword [ebp - 0x12b0], ebx
jmp near loc_fffb1ea8  ; jmp 0xfffb1ea8

loc_fffb1dd7:  ; not directly referenced
imul ecx, eax, 0x24
movzx ecx, word [ebx + ecx]
cmp ecx, edx
jb short loc_fffb1dea  ; jb 0xfffb1dea
mov edx, ecx
mov byte [ebp - 0x12ac], al

loc_fffb1dea:  ; not directly referenced
inc eax
cmp eax, 0xa
jne short loc_fffb1dd7  ; jne 0xfffb1dd7
mov ebx, dword [ebp - 0x12b0]
cmp byte [ebp - 0x12ac], 9
mov al, byte [edi + ebx - 0x1256]
ja short loc_fffb1e14  ; ja 0xfffb1e14
movzx edx, byte [ebp - 0x12ac]
jmp dword [edx*4 + ref_fffced84]  ; ujmp: jmp dword [edx*4 - 0x3127c]

loc_fffb1e14:  ; not directly referenced
mov bl, al
jmp short loc_fffb1e4a  ; jmp 0xfffb1e4a

loc_fffb1e18:  ; not directly referenced
lea edx, [eax - 1]
jmp short loc_fffb1e1f  ; jmp 0xfffb1e1f

loc_fffb1e1d:  ; not directly referenced
mov dl, al

loc_fffb1e1f:  ; not directly referenced
lea ebx, [eax - 1]
jmp short loc_fffb1e42  ; jmp 0xfffb1e42

loc_fffb1e24:  ; not directly referenced
lea ebx, [eax - 1]
jmp short loc_fffb1e2b  ; jmp 0xfffb1e2b

loc_fffb1e29:  ; not directly referenced
mov bl, al

loc_fffb1e2b:  ; not directly referenced
inc eax
jmp short loc_fffb1e4a  ; jmp 0xfffb1e4a

loc_fffb1e2e:  ; not directly referenced
lea ebx, [eax + 1]
jmp short loc_fffb1e35  ; jmp 0xfffb1e35

loc_fffb1e33:  ; not directly referenced
mov bl, al

loc_fffb1e35:  ; not directly referenced
dec eax
jmp short loc_fffb1e4a  ; jmp 0xfffb1e4a

loc_fffb1e38:  ; not directly referenced
lea edx, [eax + 1]
jmp short loc_fffb1e3f  ; jmp 0xfffb1e3f

loc_fffb1e3d:  ; not directly referenced
mov dl, al

loc_fffb1e3f:  ; not directly referenced
lea ebx, [eax + 1]

loc_fffb1e42:  ; not directly referenced
mov al, dl
jmp short loc_fffb1e4a  ; jmp 0xfffb1e4a

loc_fffb1e46:  ; not directly referenced
mov bl, 5
mov al, 5

loc_fffb1e4a:  ; not directly referenced
push edx
lea edx, [ebp - 0x1244]
xor ecx, ecx
push edx
movzx eax, al
mov edx, dword [ebp - 0x12a4]
movzx eax, byte [ebp + eax - 0x128b]
push eax
movzx ebx, bl
mov eax, dword [ebp - 0x12a8]
push edi
call fcn_fffae5de  ; call 0xfffae5de
add esp, 0xc
lea eax, [ebp - 0x11fc]
push eax
movzx eax, byte [ebp + ebx - 0x128b]
mov ecx, 1
push eax
mov edx, dword [ebp - 0x12a4]
mov eax, dword [ebp - 0x12a8]
push edi
call fcn_fffae5de  ; call 0xfffae5de
inc byte [ebp - 0x12a0]
add esp, 0x10

loc_fffb1ea8:  ; not directly referenced
mov eax, dword [ebp - 0x12a8]
mov bl, byte [ebp - 0x12a0]
cmp bl, byte [eax + 0x20b5]
jae short loc_fffb1ed2  ; jae 0xfffb1ed2
movzx edi, bl
xor edx, edx
lea eax, [edi + esi]
lea ebx, [ebp + eax*2 - 0xf24]
xor eax, eax
jmp near loc_fffb1dd7  ; jmp 0xfffb1dd7

loc_fffb1ed2:  ; not directly referenced
inc byte [ebp - 0x129c]

loc_fffb1ed8:  ; not directly referenced
mov bl, byte [ebp - 0x12b6]
cmp byte [ebp - 0x129c], bl
jbe loc_fffb1d99  ; jbe 0xfffb1d99
mov eax, dword [ebp - 0x12a8]
xor ecx, ecx
lea esi, [ebp - 0x6d8]
mov edx, dword [eax + 0x2223]
mov eax, dword [edx + 0x5f08]
and eax, 0xfffffffe
mov dword [edx + 0x5f08], eax
mov edx, 0x6c0
lea eax, [ebp - 0xd98]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x6c0
mov eax, esi
call fcn_fffa24c1  ; call 0xfffa24c1
mov bl, byte [ebp - 0x12b5]
jmp short loc_fffb1f4e  ; jmp 0xfffb1f4e

loc_fffb1f33:  ; not directly referenced
movzx edx, bl
mov ecx, dword [ebp - 0x12a8]
imul eax, edx, 0x1055
cmp byte [ecx + eax + 0x3a], 0
jne loc_fffb2bf8  ; jne 0xfffb2bf8

loc_fffb1f4d:  ; not directly referenced
inc ebx

loc_fffb1f4e:  ; not directly referenced
cmp bl, byte [ebp - 0x12b6]
jbe short loc_fffb1f33  ; jbe 0xfffb1f33
jmp near loc_fffb29b6  ; jmp 0xfffb29b6

loc_fffb1f5b:  ; not directly referenced
movzx edx, byte [ebp - 0x12b5]
mov ecx, dword [ebp - 0x12a8]
imul eax, edx, 0x1055
mov dword [ebp - 0x12bc], edx
cmp byte [ecx + eax + 0x3a], 0
je loc_fffb29b0  ; je 0xfffb29b0
imul eax, edx, 0x360
lea ebx, [ebp - 0x6d8]
lea esi, [ebp - 0xd98]
add ebx, eax
add esi, eax
mov dword [ebp - 0x12c0], ebx
mov dword [ebp - 0x12c4], esi
xor ebx, ebx
xor edi, edi
mov dword [ebp - 0x129c], 0

loc_fffb1faf:  ; not directly referenced
cmp bl, 0xc
je loc_fffb2096  ; je 0xfffb2096
mov edx, dword [ebp - 0x12c0]
lea eax, [ebx + ebx*8]
add edx, eax
add eax, dword [ebp - 0x12c4]
mov word [ebp + ebx*2 - 0x10a4], 0xffff
mov word [ebp + ebx*2 - 0x1024], 0xffff
xor esi, esi
mov dword [ebp - 0x12b0], edx
mov dword [ebp - 0x12b4], eax

loc_fffb1feb:  ; not directly referenced
mov ecx, dword [ebp - 0x12bc]
mov edx, esi
mov eax, dword [ebp - 0x12a8]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffb200a  ; jne 0xfffb200a

loc_fffb2002:  ; not directly referenced
inc esi
cmp esi, 4
jne short loc_fffb1feb  ; jne 0xfffb1feb
jmp short loc_fffb206d  ; jmp 0xfffb206d

loc_fffb200a:  ; not directly referenced
mov ecx, dword [ebp - 0x12a8]
mov eax, dword [ebp - 0x12b0]
mov cl, byte [ecx + 0x20b5]
mov byte [ebp - 0x12a4], cl
imul ecx, esi, 0xd8
add eax, ecx
add ecx, dword [ebp - 0x12b4]
mov dword [ebp - 0x12a0], eax
xor eax, eax
jmp short loc_fffb2063  ; jmp 0xfffb2063

loc_fffb203a:  ; not directly referenced
mov edx, dword [ebp - 0x12a0]
mov dl, byte [edx + eax]
mov byte [ebp - 0x12fa], dl
inc edx
sub dl, byte [ecx + eax]
movzx edx, dl
cmp dx, word [ebp + ebx*2 - 0x10a4]
jae short loc_fffb2062  ; jae 0xfffb2062
mov word [ebp + ebx*2 - 0x10a4], dx

loc_fffb2062:  ; not directly referenced
inc eax

loc_fffb2063:  ; not directly referenced
cmp byte [ebp - 0x12a4], al
ja short loc_fffb203a  ; ja 0xfffb203a
jmp short loc_fffb2002  ; jmp 0xfffb2002

loc_fffb206d:  ; not directly referenced
mov dx, word [ebp + ebx*2 - 0x10a4]
cmp dx, 4
lea eax, [edx - 5]
mov word [ebp + ebx*2 - 0x1024], ax
jbe short loc_fffb2096  ; jbe 0xfffb2096
movzx eax, ax
mov edx, eax
add edi, eax
imul edx, ebx
add dword [ebp - 0x129c], edx

loc_fffb2096:  ; not directly referenced
inc ebx
cmp ebx, 0x18
jne loc_fffb1faf  ; jne 0xfffb1faf
test edi, edi
mov eax, 1
cmove edi, eax
mov eax, dword [ebp - 0x129c]
mov esi, edi
xor edx, edx
div edi
shr esi, 1
xor bl, bl
mov edi, 0x17
xor edx, edx

loc_fffb20c1:  ; not directly referenced
cmp word [ebp + ebx - 0x1076], 4
jbe short loc_fffb20e5  ; jbe 0xfffb20e5
movzx ecx, word [ebp + ebx - 0xff6]
add edx, ecx
cmp edx, esi
jb short loc_fffb20e5  ; jb 0xfffb20e5
sub edx, esi
imul eax, edx, 0x64
xor edx, edx
div ecx
jmp short loc_fffb2118  ; jmp 0xfffb2118

loc_fffb20e5:  ; not directly referenced
sub ebx, 2
dec edi
cmp ebx, 0xffffffea
jne short loc_fffb20c1  ; jne 0xfffb20c1
cmp edx, esi
jae short loc_fffb212b  ; jae 0xfffb212b
xor ecx, ecx

loc_fffb20f4:  ; not directly referenced
cmp word [ebp + ecx*2 - 0x10a4], 4
mov edi, ecx
jbe short loc_fffb2125  ; jbe 0xfffb2125
movzx ebx, word [ebp + ecx*2 - 0x1024]
add edx, ebx
cmp edx, esi
jb short loc_fffb2125  ; jb 0xfffb2125
sub edx, esi
imul eax, edx, 0x64
xor edx, edx
div ebx

loc_fffb2118:  ; not directly referenced
cmp al, 0x4a
mov cl, 0xff
ja short loc_fffb212f  ; ja 0xfffb212f
cmp al, 0x19
setbe cl
jmp short loc_fffb212f  ; jmp 0xfffb212f

loc_fffb2125:  ; not directly referenced
inc ecx
cmp ecx, 0xc
jne short loc_fffb20f4  ; jne 0xfffb20f4

loc_fffb212b:  ; not directly referenced
mov edi, eax
xor ecx, ecx

loc_fffb212f:  ; not directly referenced
mov ebx, 0x1e
jmp near loc_fffb21bc  ; jmp 0xfffb21bc

loc_fffb2139:  ; not directly referenced
mov edx, dword [ebp - 0x12ac]
cmp word [edx], bx
jb short loc_fffb2167  ; jb 0xfffb2167
add byte [ebp - 0x129c], 2
test al, al
je short loc_fffb2157  ; je 0xfffb2157
mov esi, dword [ebp - 0x12b0]
jmp short loc_fffb2165  ; jmp 0xfffb2165

loc_fffb2157:  ; not directly referenced
mov al, byte [ebp - 0x12b0]
mov byte [ebp - 0x12a4], al
mov esi, eax

loc_fffb2165:  ; not directly referenced
mov al, 1

loc_fffb2167:  ; not directly referenced
dec byte [ebp - 0x12b0]
sub dword [ebp - 0x12ac], 2
cmp byte [ebp - 0x12b0], 0xc
jne short loc_fffb2139  ; jne 0xfffb2139
xor edx, edx

loc_fffb217f:  ; not directly referenced
cmp word [ebp + edx*2 - 0x10a4], bx
jb short loc_fffb21a0  ; jb 0xfffb21a0
add byte [ebp - 0x129c], 2
test al, al
je short loc_fffb2196  ; je 0xfffb2196
jmp short loc_fffb219c  ; jmp 0xfffb219c

loc_fffb2196:  ; not directly referenced
mov byte [ebp - 0x12a4], dl

loc_fffb219c:  ; not directly referenced
mov esi, edx
mov al, 1

loc_fffb21a0:  ; not directly referenced
inc edx
cmp edx, 0xc
jne short loc_fffb217f  ; jne 0xfffb217f
cmp byte [ebp - 0x129c], 9
ja short loc_fffb21ec  ; ja 0xfffb21ec
dec ebx
dec byte [ebp - 0x12a0]
cmp bx, 4
je short loc_fffb21ec  ; je 0xfffb21ec

loc_fffb21bc:  ; not directly referenced
lea edx, [ebp - 0x1076]
mov byte [ebp - 0x12a0], bl
mov dword [ebp - 0x12ac], edx
mov byte [ebp - 0x12b0], 0x17
mov byte [ebp - 0x12a4], 0
xor esi, esi
xor eax, eax
mov byte [ebp - 0x129c], 0
jmp near loc_fffb2139  ; jmp 0xfffb2139

loc_fffb21ec:  ; not directly referenced
imul eax, dword [ebp - 0x12bc], 5
mov ebx, edi
mov edx, esi
cmp cl, 1
mov byte [ebp + eax - 0x1295], bl
mov bl, byte [ebp - 0x12a4]
mov byte [ebp + eax - 0x1293], bl
mov ebx, edi
movzx esi, bl
mov byte [ebp + eax - 0x1294], dl
mov byte [ebp - 0x12a4], bl
mov dl, byte [ebp - 0x12a0]
mov bl, byte [ebp + esi - 0x125c]
mov byte [ebp + eax - 0x1292], dl
mov byte [ebp + eax - 0x1291], cl
mov dword [ebp - 0x12e4], esi
mov byte [ebp - 0x12b4], bl
jne short loc_fffb2254  ; jne 0xfffb2254
mov al, bl
mov dl, bl
dec eax
inc edx
cmp bl, 0x17
jmp short loc_fffb2276  ; jmp 0xfffb2276

loc_fffb2254:  ; not directly referenced
inc cl
jne short loc_fffb2288  ; jne 0xfffb2288
cmp byte [ebp - 0x12b4], 0
je short loc_fffb2281  ; je 0xfffb2281
mov al, byte [ebp - 0x12b4]
mov dl, byte [ebp - 0x12b4]
inc eax
dec edx
cmp byte [ebp - 0x12b4], 0x17

loc_fffb2276:  ; not directly referenced
cmovb eax, edx
mov byte [ebp - 0x12b4], al
jmp short loc_fffb2288  ; jmp 0xfffb2288

loc_fffb2281:  ; not directly referenced
mov byte [ebp - 0x12b4], 0x21

loc_fffb2288:  ; not directly referenced
cmp byte [ebp - 0x12a4], 0xc
mov bl, 0
mov al, byte [ebp - 0x12a4]
mov byte [ebp - 0x12b8], 0xb
cmovne ebx, eax
mov dword [ebp - 0x12c8], 0
mov byte [ebp - 0x12cc], bl
add ebx, 0xb
mov byte [ebp - 0x12f9], bl
mov bl, byte [ebp - 0x12cc]
imul esi, dword [ebp - 0x12e4], 9
sub byte [ebp - 0x12b8], bl
imul ebx, dword [ebp - 0x12bc], 0x1055
mov dword [ebp - 0x12f4], esi
mov dword [ebp - 0x12f8], ebx

loc_fffb22e3:  ; not directly referenced
mov ecx, dword [ebp - 0x12bc]
mov edx, dword [ebp - 0x12c8]
mov eax, dword [ebp - 0x12a8]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb2985  ; je 0xfffb2985
jmp near loc_fffb2956  ; jmp 0xfffb2956

loc_fffb2307:  ; not directly referenced
xor ecx, ecx
mov edx, 0x100
lea eax, [ebp - 0x1024]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x80
lea eax, [ebp - 0x1124]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x80
lea eax, [ebp - 0x10a4]
call fcn_fffa24c1  ; call 0xfffa24c1
mov eax, dword [ebp - 0x12d0]
mov edx, dword [ebp - 0x12c4]
movzx edi, byte [ebp - 0x12b7]
add eax, dword [ebp - 0x12f4]
add edx, eax
add eax, dword [ebp - 0x12c0]
movzx edx, byte [edx + edi]
movzx eax, byte [eax + edi]
mov byte [ebp - 0x12ac], dl
cmp dl, al
mov byte [ebp - 0x12b0], al
jae short loc_fffb2392  ; jae 0xfffb2392
sub eax, edx
mov ecx, 2
cdq
mov dword [ebp - 0x12e0], 0
idiv ecx
mov dword [ebp - 0x12f0], eax
jmp short loc_fffb23c1  ; jmp 0xfffb23c1

loc_fffb2392:  ; not directly referenced
movzx edx, byte [ebp - 0x12ac]
mov eax, 0x80
sub eax, edx
mov ecx, 2
movzx edx, byte [ebp - 0x12b0]
mov dword [ebp - 0x12e0], 1
add eax, edx
cdq
idiv ecx
mov dword [ebp - 0x12f0], eax

loc_fffb23c1:  ; not directly referenced
movzx esi, byte [ebp - 0x12ac]
mov dword [ebp - 0x129c], 0
movzx ebx, byte [ebp - 0x12b0]
mov dword [ebp - 0x12d8], 0
mov dword [ebp - 0x12e8], esi
mov dword [ebp - 0x12ec], ebx
jmp near loc_fffb281c  ; jmp 0xfffb281c

loc_fffb23f4:  ; not directly referenced
cmp dword [ebp - 0x12e0], 0
jne short loc_fffb2416  ; jne 0xfffb2416
mov bl, byte [ebp - 0x12a0]
mov al, byte [ebp - 0x12ac]
cmp byte [ebp - 0x12b0], bl
setb dl
cmp bl, al
jmp short loc_fffb2431  ; jmp 0xfffb2431

loc_fffb2416:  ; not directly referenced
mov bl, byte [ebp - 0x12b0]
cmp byte [ebp - 0x12a0], bl
setb dl
mov bl, byte [ebp - 0x12a0]
cmp byte [ebp - 0x12ac], bl

loc_fffb2431:  ; not directly referenced
setb al
or dl, al
jne loc_fffb2816  ; jne 0xfffb2816
mov ecx, dword [ebp - 0x12e4]
mov edx, 2
lea eax, [ebp - 0x1297]
call fcn_fffa24c1  ; call 0xfffa24c1
cmp byte [ebp - 0x12a4], 0xc
mov al, byte [ebp - 0x1296]
je short loc_fffb246e  ; je 0xfffb246e
cmp byte [ebp - 0x12a4], 0xb
ja loc_fffb2597  ; ja 0xfffb2597

loc_fffb246e:  ; not directly referenced
mov cl, al
xor edx, edx
mov al, byte [ebp - 0x12cc]
jmp short loc_fffb247c  ; jmp 0xfffb247c

loc_fffb247a:  ; not directly referenced
mov al, bl

loc_fffb247c:  ; not directly referenced
movzx ebx, al
mov esi, dword [ebp - 0x12c4]
lea ebx, [ebx + ebx*8]
add ebx, dword [ebp - 0x12d0]
add esi, ebx
mov dword [ebp - 0x1300], ebx
mov bl, byte [ebp - 0x12a0]
cmp byte [esi + edi], bl
jbe short loc_fffb24b4  ; jbe 0xfffb24b4

loc_fffb24a1:  ; not directly referenced
mov byte [ebp - 0x1296], cl

loc_fffb24a7:  ; not directly referenced
mov al, byte [ebp - 0x1297]
xor esi, esi
jmp near loc_fffb2574  ; jmp 0xfffb2574

loc_fffb24b4:  ; not directly referenced
mov esi, dword [ebp - 0x1300]
add esi, dword [ebp - 0x12c0]
mov bl, byte [ebp - 0x12a0]
cmp bl, byte [esi + edi]
jbe short loc_fffb24cd  ; jbe 0xfffb24cd
jmp short loc_fffb24a1  ; jmp 0xfffb24a1

loc_fffb24cd:  ; not directly referenced
cmp al, 0xb
lea ebx, [eax + 1]
ja short loc_fffb24e1  ; ja 0xfffb24e1
test al, al
mov esi, 0xd
lea ebx, [eax - 1]
cmove ebx, esi

loc_fffb24e1:  ; not directly referenced
inc edx
cmp dl, byte [ebp - 0x12f9]
mov cl, al
jbe short loc_fffb247a  ; jbe 0xfffb247a
mov byte [ebp - 0x1296], al
jmp short loc_fffb24a7  ; jmp 0xfffb24a7

loc_fffb24f4:  ; not directly referenced
movzx edx, bl
mov ecx, dword [ebp - 0x12c4]
lea edx, [edx + edx*8]
add edx, dword [ebp - 0x12d0]
add ecx, edx
mov dword [ebp - 0x12dc], edx
mov dl, byte [ebp - 0x12a0]
cmp byte [ecx + edi], dl
jbe short loc_fffb2558  ; jbe 0xfffb2558

loc_fffb2519:  ; not directly referenced
mov byte [ebp - 0x1297], al

loc_fffb251f:  ; not directly referenced
mov ebx, dword [ebp - 0x129c]
mov dl, byte [ebp - 0x1297]
lea eax, [ebp + ebx*2 - 0x1024]
mov byte [eax], dl
mov dl, byte [ebp - 0x1296]
mov byte [eax + 1], dl
mov al, byte [ebp + ebx*2 - 0x1024]
cmp al, 0xb
mov dl, byte [ebp + ebx*2 - 0x1023]
jbe loc_fffb269d  ; jbe 0xfffb269d
jmp near loc_fffb26c4  ; jmp 0xfffb26c4

loc_fffb2558:  ; not directly referenced
mov edx, dword [ebp - 0x12dc]
add edx, dword [ebp - 0x12c0]
inc esi
mov cl, byte [ebp - 0x12a0]
cmp cl, byte [edx + edi]
jbe short loc_fffb2572  ; jbe 0xfffb2572
jmp short loc_fffb2519  ; jmp 0xfffb2519

loc_fffb2572:  ; not directly referenced
mov al, bl

loc_fffb2574:  ; not directly referenced
mov edx, esi
mov bl, byte [ebp - 0x12cc]
add ebx, edx
cmp bl, 0x17
setbe cl
cmp dl, byte [ebp - 0x12b8]
setbe dl
test cl, dl
jne loc_fffb24f4  ; jne 0xfffb24f4
jmp short loc_fffb2519  ; jmp 0xfffb2519

loc_fffb2597:  ; not directly referenced
mov byte [ebp - 0x1300], 0x17
mov bl, byte [ebp - 0x12a4]
xor edx, edx
sub byte [ebp - 0x1300], bl

loc_fffb25ac:  ; not directly referenced
mov bl, byte [ebp - 0x12a4]
mov ecx, dword [ebp - 0x12c4]
add ebx, edx
movzx esi, bl
lea esi, [esi + esi*8]
add esi, dword [ebp - 0x12d0]
add ecx, esi
mov dword [ebp - 0x1304], esi
mov esi, ecx
mov cl, byte [ebp - 0x12a0]
cmp byte [esi + edi], cl
jbe short loc_fffb25fe  ; jbe 0xfffb25fe

loc_fffb25db:  ; not directly referenced
mov bl, byte [ebp - 0x12a4]
mov byte [ebp - 0x1296], al
dec ebx
mov cl, byte [ebp - 0x1297]
mov byte [ebp - 0x12dc], bl
mov al, byte [ebp - 0x12a4]
xor edx, edx
jmp short loc_fffb2626  ; jmp 0xfffb2626

loc_fffb25fe:  ; not directly referenced
mov esi, dword [ebp - 0x1304]
add esi, dword [ebp - 0x12c0]
mov cl, byte [ebp - 0x12a0]
cmp cl, byte [esi + edi]
jbe short loc_fffb2617  ; jbe 0xfffb2617
jmp short loc_fffb25db  ; jmp 0xfffb25db

loc_fffb2617:  ; not directly referenced
inc edx
cmp byte [ebp - 0x1300], dl
mov al, bl
jae short loc_fffb25ac  ; jae 0xfffb25ac
jmp short loc_fffb25db  ; jmp 0xfffb25db

loc_fffb2624:  ; not directly referenced
mov eax, esi

loc_fffb2626:  ; not directly referenced
movzx ebx, al
lea esi, [ebx + ebx*8]
mov dword [ebp - 0x1304], ebx
add esi, dword [ebp - 0x12d0]
mov ebx, dword [ebp - 0x12c4]
add ebx, esi
mov dword [ebp - 0x1308], esi
mov esi, ebx
mov bl, byte [ebp - 0x12a0]
cmp byte [esi + edi], bl
jbe short loc_fffb2655  ; jbe 0xfffb2655
jmp short loc_fffb266c  ; jmp 0xfffb266c

loc_fffb2655:  ; not directly referenced
mov esi, dword [ebp - 0x1308]
add esi, dword [ebp - 0x12c0]
mov bl, byte [ebp - 0x12a0]
cmp bl, byte [esi + edi]
jbe short loc_fffb2677  ; jbe 0xfffb2677

loc_fffb266c:  ; not directly referenced
mov byte [ebp - 0x1297], cl
jmp near loc_fffb251f  ; jmp 0xfffb251f

loc_fffb2677:  ; not directly referenced
cmp al, 0xc
lea esi, [eax + 1]
jbe short loc_fffb268d  ; jbe 0xfffb268d
cmp dword [ebp - 0x1304], 0xd
mov cl, 0
lea esi, [eax - 1]
cmove esi, ecx

loc_fffb268d:  ; not directly referenced
inc edx
cmp dl, byte [ebp - 0x12dc]
mov cl, al
jbe short loc_fffb2624  ; jbe 0xfffb2624
jmp near loc_fffb2519  ; jmp 0xfffb2519

loc_fffb269d:  ; not directly referenced
cmp byte [ebp - 0x12a4], 0xb
ja short loc_fffb26b3  ; ja 0xfffb26b3
sub eax, dword [ebp - 0x12a4]
cmp dl, 0xb
jbe short loc_fffb26d3  ; jbe 0xfffb26d3
jmp short loc_fffb26e8  ; jmp 0xfffb26e8

loc_fffb26b3:  ; not directly referenced
mov bl, byte [ebp - 0x12a4]
cmp dl, 0xb
lea eax, [ebx + eax - 0xc]
jbe short loc_fffb26d3  ; jbe 0xfffb26d3
jmp short loc_fffb26f4  ; jmp 0xfffb26f4

loc_fffb26c4:  ; not directly referenced
mov bl, byte [ebp - 0x12a4]
sub ebx, eax
cmp dl, 0xb
mov al, bl
ja short loc_fffb26df  ; ja 0xfffb26df

loc_fffb26d3:  ; not directly referenced
mov bl, byte [ebp - 0x12a4]
sub ebx, edx
mov dl, bl
jmp short loc_fffb26fa  ; jmp 0xfffb26fa

loc_fffb26df:  ; not directly referenced
cmp byte [ebp - 0x12a4], 0xb
ja short loc_fffb26f4  ; ja 0xfffb26f4

loc_fffb26e8:  ; not directly referenced
mov bl, byte [ebp - 0x12a4]
lea edx, [ebx + edx - 0xc]
jmp short loc_fffb26fa  ; jmp 0xfffb26fa

loc_fffb26f4:  ; not directly referenced
sub edx, dword [ebp - 0x12a4]

loc_fffb26fa:  ; not directly referenced
movzx ebx, al
movzx ecx, dl
add ecx, ebx
cmp ecx, 8
jle loc_fffb2816  ; jle 0xfffb2816
mov esi, dword [ebp - 0x129c]
cmp al, dl
cmova eax, edx
cmp al, byte [ebp - 0x12d8]
mov byte [ebp + esi - 0x10a4], al
jae short loc_fffb2731  ; jae 0xfffb2731
and dword [ebp - 0x12d8], 0xff
jmp short loc_fffb273a  ; jmp 0xfffb273a

loc_fffb2731:  ; not directly referenced
movzx eax, al
mov dword [ebp - 0x12d8], eax

loc_fffb273a:  ; not directly referenced
cmp dword [ebp - 0x12e0], 0
jne short loc_fffb2778  ; jne 0xfffb2778
mov edx, dword [ebp - 0x129c]
mov eax, dword [ebp - 0x12ec]
sub edx, dword [ebp - 0x12e8]
sub eax, dword [ebp - 0x129c]
cmp edx, eax
jg short loc_fffb2770  ; jg 0xfffb2770
mov al, byte [ebp - 0x12a0]
sub eax, dword [ebp - 0x12ac]
jmp near loc_fffb2809  ; jmp 0xfffb2809

loc_fffb2770:  ; not directly referenced
mov al, byte [ebp - 0x12b0]
jmp short loc_fffb27a7  ; jmp 0xfffb27a7

loc_fffb2778:  ; not directly referenced
mov bl, byte [ebp - 0x12b0]
cmp byte [ebp - 0x12a0], bl
ja short loc_fffb27c0  ; ja 0xfffb27c0
mov eax, dword [ebp - 0x129c]
sub eax, dword [ebp - 0x12e8]
mov edx, dword [ebp - 0x12ec]
sub eax, 0xffffff80
sub edx, dword [ebp - 0x129c]
cmp edx, eax
jg short loc_fffb27af  ; jg 0xfffb27af
mov al, bl

loc_fffb27a7:  ; not directly referenced
sub eax, dword [ebp - 0x12a0]
jmp short loc_fffb27eb  ; jmp 0xfffb27eb

loc_fffb27af:  ; not directly referenced
mov al, byte [ebp - 0x12a0]
sub eax, dword [ebp - 0x12ac]
add eax, 0xffffff80
jmp short loc_fffb2809  ; jmp 0xfffb2809

loc_fffb27c0:  ; not directly referenced
mov eax, dword [ebp - 0x12ec]
sub eax, dword [ebp - 0x129c]
mov edx, dword [ebp - 0x129c]
sub eax, 0xffffff80
sub edx, dword [ebp - 0x12e8]
cmp edx, eax
jg short loc_fffb27fa  ; jg 0xfffb27fa
mov al, byte [ebp - 0x12a0]
sub eax, dword [ebp - 0x12ac]

loc_fffb27eb:  ; not directly referenced
mov esi, dword [ebp - 0x129c]
mov byte [ebp + esi - 0x1124], al
jmp short loc_fffb2816  ; jmp 0xfffb2816

loc_fffb27fa:  ; not directly referenced
mov al, byte [ebp - 0x12b0]
add eax, 0xffffff80
sub eax, dword [ebp - 0x12a0]

loc_fffb2809:  ; not directly referenced
mov ebx, dword [ebp - 0x129c]
mov byte [ebp + ebx - 0x1124], al

loc_fffb2816:  ; not directly referenced
inc dword [ebp - 0x129c]

loc_fffb281c:  ; not directly referenced
mov al, byte [ebp - 0x129c]
cmp dword [ebp - 0x129c], 0x80
mov byte [ebp - 0x12a0], al
jne loc_fffb23f4  ; jne 0xfffb23f4
cmp dword [ebp - 0x12e0], 0
jne short loc_fffb2867  ; jne 0xfffb2867
movzx edx, byte [ebp - 0x12ac]
mov ecx, 2
movzx eax, byte [ebp - 0x12b0]
sub eax, edx
cdq
idiv ecx
mov dl, byte [ebp - 0x12ac]
add edx, eax

loc_fffb2861:  ; not directly referenced
xor esi, esi
xor eax, eax
jmp short loc_fffb2892  ; jmp 0xfffb2892

loc_fffb2867:  ; not directly referenced
movzx ecx, byte [ebp - 0x12ac]
mov eax, dword [ebp - 0x129c]
movzx edx, byte [ebp - 0x12b0]
sub eax, ecx
add eax, edx
mov ebx, 2
cdq
idiv ebx
add eax, ecx
cdq
idiv dword [ebp - 0x129c]
jmp short loc_fffb2861  ; jmp 0xfffb2861

loc_fffb2892:  ; not directly referenced
movzx ecx, al
movzx ebx, byte [ebp + ecx - 0x10a4]
movzx ecx, byte [ebp + ecx - 0x1124]
imul ebx, dword [ebp - 0x12f0]
imul ecx, dword [ebp - 0x12d8]
add ecx, ebx
cmp esi, ecx
jae short loc_fffb28bd  ; jae 0xfffb28bd
mov esi, ecx
mov dl, al

loc_fffb28bd:  ; not directly referenced
inc eax
cmp al, 0x80
jne short loc_fffb2892  ; jne 0xfffb2892
imul ecx, dword [ebp - 0x12c8], 0x24
mov ebx, dword [ebp - 0x12f8]
lea eax, [edi + edi*2]
add eax, ecx
mov dword [ebp - 0x129c], ecx
mov esi, dword [ebp - 0x12d0]
mov ecx, dword [ebp - 0x12c4]
add esi, dword [ebp - 0x12f4]
add ecx, esi
add esi, dword [ebp - 0x12c0]
lea eax, [eax + ebx + 0x280]
add eax, dword [ebp - 0x12a8]
mov cl, byte [ecx + edi]
mov byte [eax + 0x17], cl
mov cl, byte [esi + edi]
mov byte [eax + 0x16], cl
mov ecx, dword [ebp - 0x129c]
add ecx, dword [ebp - 0x12f8]
add ecx, dword [ebp - 0x12a8]
mov byte [eax + 0x15], dl
shr dl, 6
mov byte [edi + ecx + 0x2b0], dl
mov ecx, dword [ebp - 0x12c8]
push ebx
mov edx, dword [ebp - 0x12bc]
push ebx
push edi
movzx eax, byte [eax + 0x15]
push eax
mov eax, dword [ebp - 0x12a8]
call fcn_fffaf80e  ; call 0xfffaf80e
inc byte [ebp - 0x12b7]
add esp, 0x10
jmp short loc_fffb296d  ; jmp 0xfffb296d

loc_fffb2956:  ; not directly referenced
imul ebx, dword [ebp - 0x12c8], 0xd8
mov byte [ebp - 0x12b7], 0
mov dword [ebp - 0x12d0], ebx

loc_fffb296d:  ; not directly referenced
mov eax, dword [ebp - 0x12a8]
mov bl, byte [ebp - 0x12b7]
cmp bl, byte [eax + 0x20b5]
jb loc_fffb2307  ; jb 0xfffb2307

loc_fffb2985:  ; not directly referenced
inc dword [ebp - 0x12c8]
cmp dword [ebp - 0x12c8], 4
jne loc_fffb22e3  ; jne 0xfffb22e3
movzx ecx, byte [ebp - 0x12b4]
mov edx, dword [ebp - 0x12bc]
mov eax, dword [ebp - 0x12a8]
call fcn_fffaebfc  ; call 0xfffaebfc

loc_fffb29b0:  ; not directly referenced
inc byte [ebp - 0x12b5]

loc_fffb29b6:  ; not directly referenced
mov bl, byte [ebp - 0x12b6]
cmp byte [ebp - 0x12b5], bl
jbe loc_fffb1f5b  ; jbe 0xfffb1f5b

loc_fffb29c8:  ; not directly referenced
mov eax, dword [ebp - 0x12a8]
cmp dword [eax + 0x2254], 1
jbe loc_fffb2c28  ; jbe 0xfffb2c28
mov eax, dword [eax + 0x2223]
mov dword [eax + 0x4ea8], 0
jmp near loc_fffb2c28  ; jmp 0xfffb2c28

loc_fffb29f0:  ; not directly referenced
sub esp, 0xc
lea eax, [ebp - 0x6d8]
push 1
lea ecx, [ebp - 0x125c]
mov edx, 1
push 0xf
push 0x20
push eax
lea eax, [ebp - 0xd98]
push eax
mov eax, dword [ebp - 0x12a8]
call fcn_fffaec9b  ; call 0xfffaec9b
mov dword [ebp - 0x12d4], eax
mov al, bl
and eax, 0xfffffffd
add esp, 0x20
cmp dword [ebp - 0x12d4], 0
cmovne ebx, eax
jmp near loc_fffb126f  ; jmp 0xfffb126f

loc_fffb2a3a:  ; not directly referenced
xor ecx, ecx
mov edx, dword [ebp - 0x12a4]
mov eax, dword [ebp - 0x12a8]
xor esi, esi
call fcn_fffaebfc  ; call 0xfffaebfc
jmp near loc_fffb12df  ; jmp 0xfffb12df

loc_fffb2a54:  ; not directly referenced
mov eax, dword [ebp - 0x12a8]
mov bl, 0x6e
cmp dword [eax + 0x2234], 1
mov al, 0x78
cmovne ebx, eax
mov eax, dword [ebp - 0x12a8]
mov byte [ebp - 0x12ac], bl
mov edx, dword [eax + 0x2223]
mov eax, dword [edx + 0x5f08]
or ah, 1
mov dword [edx + 0x5f08], eax
jmp near loc_fffb13e9  ; jmp 0xfffb13e9

loc_fffb2a8e:  ; not directly referenced
cmp dword [eax + 0xa], 1
je loc_fffb1495  ; je 0xfffb1495
jmp near loc_fffb14a8  ; jmp 0xfffb14a8

loc_fffb2a9d:  ; not directly referenced
mov edx, dword [ebp - 0x129c]
mov eax, dword [ebp - 0x12a8]
push ecx
lea ecx, [ebp - 0x1244]
push ecx
movzx edi, byte [ebp + edx - 0x128b]
xor ecx, ecx
push edi
mov edx, esi
push 9
call fcn_fffae5de  ; call 0xfffae5de
add esp, 0xc
lea eax, [ebp - 0x11fc]
push eax
mov ecx, 1
mov edx, esi
push edi
mov eax, dword [ebp - 0x12a8]
push 9
call fcn_fffae5de  ; call 0xfffae5de
add esp, 0x10
jmp near loc_fffb158b  ; jmp 0xfffb158b

loc_fffb2aec:  ; not directly referenced
sub esp, 0xc
lea eax, [ebp - 0xd98]
push 0
lea ecx, [ebp - 0x125c]
push 8
push 8
push esi
push eax
mov eax, dword [ebp - 0x12a8]
call fcn_fffaec9b  ; call 0xfffaec9b
add esp, 0x20
jmp near loc_fffb15dc  ; jmp 0xfffb15dc

loc_fffb2b16:  ; not directly referenced
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x11b4]
lea edi, [ebp - 0x11b4]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x116c]
lea esi, [ebp - 0x116c]
call fcn_fffa24c1  ; call 0xfffa24c1
imul ebx, dword [ebp - 0x12a0], 0x360
mov dword [ebp - 0x12d0], 0
mov dword [ebp - 0x12c8], ebx
jmp near loc_fffb1632  ; jmp 0xfffb1632

loc_fffb2b65:  ; not directly referenced
sub esp, 0xc
lea esi, [ebp - 0x6d8]
push 0
lea eax, [ebp - 0xd98]
lea ecx, [ebp - 0x125c]
push 8
push 8
push esi
push eax
mov eax, dword [ebp - 0x12a8]
call fcn_fffaec9b  ; call 0xfffaec9b
add esp, 0x20
jmp near loc_fffb1b9b  ; jmp 0xfffb1b9b

loc_fffb2b95:  ; not directly referenced
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x11b4]
lea ebx, [ebp - 0x11b4]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x116c]
lea edi, [ebp - 0x116c]
call fcn_fffa24c1  ; call 0xfffa24c1
imul eax, dword [ebp - 0x129c], 9
imul esi, dword [ebp - 0x129c], 0x360
mov dword [ebp - 0x12a4], 0
mov dword [ebp - 0x12cc], esi
lea eax, [ebp + eax - 0x1280]
mov dword [ebp - 0x12c0], eax
jmp near loc_fffb1bf1  ; jmp 0xfffb1bf1

loc_fffb2bf8:  ; not directly referenced
sub esp, 0xc
lea eax, [ebp - 0xd98]
push 0
lea ecx, [ebp - 0x125c]
push 0xf
push 0x20
push esi
push eax
mov eax, dword [ebp - 0x12a8]
call fcn_fffaec9b  ; call 0xfffaec9b
mov dword [ebp - 0x12d4], eax
add esp, 0x20
jmp near loc_fffb1f4d  ; jmp 0xfffb1f4d

loc_fffb2c28:  ; not directly referenced
mov eax, dword [ebp - 0x12d4]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffb2c36:
db 0x00
db 0x00

fcn_fffb2c38:  ; not directly referenced
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
lea esi, [edi + 0x3c31]
xor ebx, ebx
lea esp, [esp - 0x16c]
mov dword [ebp - 0x164], edx
lea edx, [ebp - 0x108]
mov dword [ebp - 0x154], ecx
call fcn_fffacf73  ; call 0xfffacf73
lea edx, [ebp - 0xfc]
mov eax, edi
call fcn_fffacf73  ; call 0xfffacf73
mov dword [ebp - 0x150], edi
mov dword [ebp - 0x12c], 0
mov dword [ebp - 0x168], esi

loc_fffb2c89:  ; not directly referenced
mov esi, dword [ebp - 0x150]
cmp byte [esi + 0x3a], 0
jne loc_fffb3df1  ; jne 0xfffb3df1
jmp near loc_fffb3dcf  ; jmp 0xfffb3dcf

loc_fffb2c9e:  ; not directly referenced
mov dword [ebp - 0x13c], 0

loc_fffb2ca8:  ; not directly referenced
xor ecx, ecx
mov edx, 0x2400
mov eax, dword [ebp - 0x168]
call fcn_fffa24c1  ; call 0xfffa24c1
cmp dword [ebp - 0x164], 1
sete byte [ebp - 0x146]
cmp dword [ebp - 0x154], 3
sete al
test byte [ebp - 0x146], al
je loc_fffb321f  ; je 0xfffb321f
mov eax, dword [ebp - 0x12c]
mov dword [ebp - 0x120], 0
shl eax, 8
add eax, 0xe3c
mov dword [ebp - 0x144], eax
imul eax, dword [ebp - 0x128], 0x1055
add eax, edi
mov dword [ebp - 0x138], eax

loc_fffb2d0e:  ; not directly referenced
mov ecx, dword [ebp - 0x12c]
mov edx, dword [ebp - 0x120]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb3207  ; je 0xfffb3207
mov al, byte [ebp - 0x120]
lea edx, [ebp - 0xf0]
mov byte [ebp - 0x61], al
mov byte [ebp - 0x4c], al
mov byte [ebp - 0x37], al
mov byte [ebp - 0x22], al
imul eax, dword [ebp - 0x120], 0x900
lea eax, [edi + eax + 0x3c31]
mov dword [ebp - 0x124], eax
mov eax, edi
call fcn_fffacf73  ; call 0xfffacf73
mov eax, edi
lea edx, [ebp - 0xe4]
call fcn_fffacf73  ; call 0xfffacf73
mov eax, dword [ebp - 0x144]
add eax, dword [edi + 0x2223]
mov eax, dword [eax]
mov dword [ebp - 0x11c], eax
and eax, 0x3f000000
shr eax, 0x18
mov dword [ebp - 0x130], eax
mov al, byte [ebp - 0x130]
cmp al, 0x1f
ja short loc_fffb2da0  ; ja 0xfffb2da0
mov byte [ebp - 0x134], al
jmp short loc_fffb2dad  ; jmp 0xfffb2dad

loc_fffb2da0:  ; not directly referenced
mov byte [ebp - 0x134], 0x20
sub byte [ebp - 0x134], al

loc_fffb2dad:  ; not directly referenced
mov dword [ebp - 0x140], 0
jmp near loc_fffb2f9f  ; jmp 0xfffb2f9f

loc_fffb2dbc:  ; not directly referenced
test bl, bl
jns short loc_fffb2dca  ; jns 0xfffb2dca
mov bl, 0x20
sub ebx, dword [ebp - 0x134]
sub ebx, eax

loc_fffb2dca:  ; not directly referenced
mov eax, dword [ebp - 0x11c]
mov esi, ebx
and eax, 0xc0ffffff
mov edx, 0x37ef
shl esi, 0x18
or esi, eax
mov eax, dword [ebp - 0x144]
add eax, dword [edi + 0x2223]
mov dword [ebp - 0x11c], esi
mov dword [eax], esi
mov eax, edi
call fcn_fffbfa08  ; call 0xfffbfa08
mov al, 0x1f
lea edx, [ebx - 1]
sub eax, ebx
cmp bl, 0x1f
mov dword [ebp - 0xf0], 0
mov dword [ebp - 0xe4], 0x140
cmova eax, edx
mov word [ebp - 0x146], 0x800
movzx eax, al
mov dword [ebp - 0x14c], eax

loc_fffb2e2f:  ; not directly referenced
mov ecx, dword [ebp - 0x12c]
lea edx, [ebp - 0xf0]
mov eax, edi
call fcn_ffface48  ; call 0xffface48
mov ebx, dword [ebp - 0x138]
cmp byte [ebx + 0x3a], 0
jne loc_fffb4114  ; jne 0xfffb4114

loc_fffb2e52:  ; not directly referenced
xor eax, eax
mov bl, byte [ebp - 0x12c]
jmp short loc_fffb2e7c  ; jmp 0xfffb2e7c

loc_fffb2e5c:  ; not directly referenced
movzx ecx, al
test bl, bl
jne short loc_fffb2e6c  ; jne 0xfffb2e6c
lea ecx, [ecx*4 + 0x4340]
jmp short loc_fffb2e73  ; jmp 0xfffb2e73

loc_fffb2e6c:  ; not directly referenced
lea ecx, [ecx*4 + 0x4740]

loc_fffb2e73:  ; not directly referenced
add edx, ecx
inc eax
mov dword [edx], 0

loc_fffb2e7c:  ; not directly referenced
cmp al, byte [edi + 0x20b5]
mov edx, dword [edi + 0x2223]
jb short loc_fffb2e5c  ; jb 0xfffb2e5c
mov esi, dword [edx + 0x5030]
mov ecx, 3
and esi, 0xffffffef
mov dword [edx + 0x5030], esi
mov edx, dword [ebp - 0x12c]
push eax
lea eax, [ebp - 0x6c]
push 1
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
jne loc_fffb3207  ; jne 0xfffb3207
cmp dword [ebp - 0x13c], 0
jne short loc_fffb2f04  ; jne 0xfffb2f04

loc_fffb2ed2:  ; not directly referenced
mov eax, dword [edi + 0x2223]
or esi, 0x10
xor ecx, ecx
mov edx, 0x64
mov dword [eax + 0x5030], esi
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne short loc_fffb2f16  ; jne 0xfffb2f16
mov dl, byte [ebp - 0x12c]
mov byte [ebp - 0x148], dl
jmp near loc_fffb2f84  ; jmp 0xfffb2f84

loc_fffb2f04:  ; not directly referenced
mov ebx, dword [ebp - 0x138]
cmp byte [ebx + 0x3a], 0
jne loc_fffb412c  ; jne 0xfffb412c
jmp short loc_fffb2ed2  ; jmp 0xfffb2ed2

loc_fffb2f16:  ; not directly referenced
mov ebx, 0xc
jmp near loc_fffb3207  ; jmp 0xfffb3207

loc_fffb2f20:  ; not directly referenced
cmp byte [ebp - 0x148], 0
mov ecx, dword [edi + 0x2223]
movzx edx, al
jne short loc_fffb2f3b  ; jne 0xfffb2f3b
lea edx, [edx*4 + 0x4340]
jmp short loc_fffb2f42  ; jmp 0xfffb2f42

loc_fffb2f3b:  ; not directly referenced
lea edx, [edx*4 + 0x4740]

loc_fffb2f42:  ; not directly referenced
add edx, ecx
mov esi, dword [ebp - 0x124]
mov ecx, dword [edx]
movzx edx, al
shl edx, 7
add edx, dword [ebp - 0x14c]
mov bx, word [esi + edx*2]
movzx esi, bx
add esi, ecx
cmp esi, 0xffff
jbe short loc_fffb2f77  ; jbe 0xfffb2f77
mov ebx, dword [ebp - 0x124]
mov word [ebx + edx*2], 0xffff
jmp short loc_fffb2f83  ; jmp 0xfffb2f83

loc_fffb2f77:  ; not directly referenced
mov esi, dword [ebp - 0x124]
add ecx, ebx
mov word [esi + edx*2], cx

loc_fffb2f83:  ; not directly referenced
inc eax

loc_fffb2f84:  ; not directly referenced
cmp al, byte [edi + 0x20b5]
jb short loc_fffb2f20  ; jb 0xfffb2f20
dec word [ebp - 0x146]
jne loc_fffb2e2f  ; jne 0xfffb2e2f
inc dword [ebp - 0x140]

loc_fffb2f9f:  ; not directly referenced
mov al, byte [ebp - 0x140]
mov bl, byte [ebp - 0x134]
add ebx, eax
cmp bl, 0x1f
jle loc_fffb2dbc  ; jle 0xfffb2dbc
mov dword [ebp - 0x140], 0
jmp near loc_fffb319e  ; jmp 0xfffb319e

loc_fffb2fc5:  ; not directly referenced
test bl, bl
jns short loc_fffb2fd2  ; jns 0xfffb2fd2
sub eax, dword [ebp - 0x134]
lea ebx, [eax + 0x20]

loc_fffb2fd2:  ; not directly referenced
mov eax, dword [ebp - 0x11c]
mov esi, ebx
and eax, 0xc0ffffff
mov edx, 0x37ef
shl esi, 0x18
or esi, eax
mov eax, dword [ebp - 0x144]
add eax, dword [edi + 0x2223]
mov dword [ebp - 0x11c], esi
mov dword [eax], esi
mov eax, edi
call fcn_fffbfa08  ; call 0xfffbfa08
mov al, 0x1f
lea edx, [ebx - 1]
sub eax, ebx
cmp bl, 0x1f
mov dword [ebp - 0xf0], 0
mov dword [ebp - 0xe4], 0x140
cmova eax, edx
mov word [ebp - 0x146], 0x800
movzx eax, al
mov dword [ebp - 0x14c], eax

loc_fffb3037:  ; not directly referenced
mov ecx, dword [ebp - 0x12c]
lea edx, [ebp - 0xf0]
mov eax, edi
call fcn_ffface48  ; call 0xffface48
mov ebx, dword [ebp - 0x138]
cmp byte [ebx + 0x3a], 0
jne loc_fffb4163  ; jne 0xfffb4163

loc_fffb305a:  ; not directly referenced
xor eax, eax
mov bl, byte [ebp - 0x12c]
jmp short loc_fffb3084  ; jmp 0xfffb3084

loc_fffb3064:  ; not directly referenced
movzx ecx, al
test bl, bl
jne short loc_fffb3074  ; jne 0xfffb3074
lea ecx, [ecx*4 + 0x4340]
jmp short loc_fffb307b  ; jmp 0xfffb307b

loc_fffb3074:  ; not directly referenced
lea ecx, [ecx*4 + 0x4740]

loc_fffb307b:  ; not directly referenced
add edx, ecx
inc eax
mov dword [edx], 0

loc_fffb3084:  ; not directly referenced
cmp al, byte [edi + 0x20b5]
mov edx, dword [edi + 0x2223]
jb short loc_fffb3064  ; jb 0xfffb3064
mov esi, dword [edx + 0x5030]
mov ecx, 3
and esi, 0xffffffef
mov dword [edx + 0x5030], esi
mov edx, dword [ebp - 0x12c]
push eax
lea eax, [ebp - 0x6c]
push 1
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
jne loc_fffb3207  ; jne 0xfffb3207
cmp dword [ebp - 0x13c], 0
jne short loc_fffb310d  ; jne 0xfffb310d

loc_fffb30da:  ; not directly referenced
mov eax, dword [edi + 0x2223]
or esi, 0x10
xor ecx, ecx
mov edx, 0x64
mov dword [eax + 0x5030], esi
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne loc_fffb2f16  ; jne 0xfffb2f16
mov dl, byte [ebp - 0x12c]
mov byte [ebp - 0x148], dl
jmp short loc_fffb3183  ; jmp 0xfffb3183

loc_fffb310d:  ; not directly referenced
mov ebx, dword [ebp - 0x138]
cmp byte [ebx + 0x3a], 0
jne loc_fffb417b  ; jne 0xfffb417b
jmp short loc_fffb30da  ; jmp 0xfffb30da

loc_fffb311f:  ; not directly referenced
cmp byte [ebp - 0x148], 0
mov ecx, dword [edi + 0x2223]
movzx edx, al
jne short loc_fffb313a  ; jne 0xfffb313a
lea edx, [edx*4 + 0x4340]
jmp short loc_fffb3141  ; jmp 0xfffb3141

loc_fffb313a:  ; not directly referenced
lea edx, [edx*4 + 0x4740]

loc_fffb3141:  ; not directly referenced
add edx, ecx
mov esi, dword [ebp - 0x124]
mov ecx, dword [edx]
movzx edx, al
shl edx, 7
add edx, dword [ebp - 0x14c]
mov bx, word [esi + edx*2]
movzx esi, bx
add esi, ecx
cmp esi, 0xffff
jbe short loc_fffb3176  ; jbe 0xfffb3176
mov ebx, dword [ebp - 0x124]
mov word [ebx + edx*2], 0xffff
jmp short loc_fffb3182  ; jmp 0xfffb3182

loc_fffb3176:  ; not directly referenced
mov esi, dword [ebp - 0x124]
add ecx, ebx
mov word [esi + edx*2], cx

loc_fffb3182:  ; not directly referenced
inc eax

loc_fffb3183:  ; not directly referenced
cmp al, byte [edi + 0x20b5]
jb short loc_fffb311f  ; jb 0xfffb311f
dec word [ebp - 0x146]
jne loc_fffb3037  ; jne 0xfffb3037
inc dword [ebp - 0x140]

loc_fffb319e:  ; not directly referenced
mov al, byte [ebp - 0x140]
mov bl, byte [ebp - 0x134]
sub ebx, eax
cmp bl, 0xe1
jge loc_fffb2fc5  ; jge 0xfffb2fc5
xor eax, eax
jmp short loc_fffb31cd  ; jmp 0xfffb31cd

loc_fffb31b9:  ; not directly referenced
movzx edx, al
mov ebx, dword [ebp - 0x124]
shl edx, 8
inc eax
mov word [ebx + edx + 0x7e], 0xff

loc_fffb31cd:  ; not directly referenced
cmp al, byte [edi + 0x20b5]
jb short loc_fffb31b9  ; jb 0xfffb31b9
mov eax, dword [ebp - 0x11c]
mov edx, dword [ebp - 0x130]
shl edx, 0x18
and eax, 0xc0ffffff
or eax, edx
mov edx, dword [ebp - 0x144]
add edx, dword [edi + 0x2223]
xor ebx, ebx
mov dword [edx], eax
mov edx, 0x37ef
mov eax, edi
call fcn_fffbfa08  ; call 0xfffbfa08

loc_fffb3207:  ; not directly referenced
inc dword [ebp - 0x120]
cmp dword [ebp - 0x120], 4
jne loc_fffb2d0e  ; jne 0xfffb2d0e
jmp near loc_fffb39b4  ; jmp 0xfffb39b4

loc_fffb321f:  ; not directly referenced
imul eax, dword [ebp - 0x128], 0x1055
mov word [ebp - 0x148], 0x800
add eax, edi
mov dword [ebp - 0x15c], eax

loc_fffb323a:  ; not directly referenced
mov ecx, dword [ebp - 0x12c]
lea edx, [ebp - 0x108]
mov eax, edi
call fcn_ffface48  ; call 0xffface48
mov esi, dword [ebp - 0x15c]
cmp byte [esi + 0x3a], 0
jne loc_fffb41b2  ; jne 0xfffb41b2

loc_fffb325d:  ; not directly referenced
mov dword [ebp - 0x124], 0

loc_fffb3267:  ; not directly referenced
mov ecx, dword [ebp - 0x12c]
mov edx, dword [ebp - 0x124]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb396d  ; je 0xfffb396d
mov al, byte [ebp - 0x124]
cmp byte [ebp - 0x146], 0
mov byte [ebp - 0x61], al
mov byte [ebp - 0x4c], al
mov byte [ebp - 0x37], al
mov byte [ebp - 0x22], al
je loc_fffb392f  ; je 0xfffb392f
imul eax, dword [ebp - 0x124], 0x900
lea esi, [edi + eax + 0x3c31]
mov al, byte [ebp - 0x12c]
test al, al
mov byte [ebp - 0x144], al
mov eax, dword [edi + 0x2223]
jne short loc_fffb32cc  ; jne 0xfffb32cc
mov edx, dword [eax]
jmp short loc_fffb32d2  ; jmp 0xfffb32d2

loc_fffb32cc:  ; not directly referenced
mov edx, dword [eax + 0x100]

loc_fffb32d2:  ; not directly referenced
and edx, 0xbfffffff
mov dword [eax + 0x4eb0], 0
mov cl, byte [edi + 0x20b5]
mov dword [ebp - 0x120], edx
mov byte [ebp - 0x11c], cl
xor ebx, ebx
mov byte [ebp - 0x134], 0xe0
mov byte [ebp - 0x130], 0x1f
jmp near loc_fffb3390  ; jmp 0xfffb3390

loc_fffb3309:  ; not directly referenced
mov edx, ebx
mov eax, dword [ebp - 0x12c]
mov dword [ebp + ebx*4 - 0xe4], 1
call fcn_fffacd01  ; call 0xfffacd01
add eax, dword [edi + 0x2223]
mov eax, dword [eax]
and eax, 0x3f000000
shr eax, 0x18
cmp al, 0x1f
mov dl, al
mov byte [ebp + ebx - 0xf0], al
ja short loc_fffb3361  ; ja 0xfffb3361
movsx edx, byte [ebp - 0x130]
cmp eax, edx
mov dl, byte [ebp - 0x130]
cmovl edx, eax
mov byte [ebp - 0x130], dl
movsx edx, byte [ebp - 0x134]
cmp eax, edx
jmp short loc_fffb3380  ; jmp 0xfffb3380

loc_fffb3361:  ; not directly referenced
mov al, 0x20
sub eax, edx
mov dl, byte [ebp - 0x130]
cmp byte [ebp - 0x130], al
cmovg edx, eax
cmp al, byte [ebp - 0x134]
mov byte [ebp - 0x130], dl

loc_fffb3380:  ; not directly referenced
mov cl, byte [ebp - 0x134]
cmovg ecx, eax
inc ebx
mov byte [ebp - 0x134], cl

loc_fffb3390:  ; not directly referenced
cmp byte [ebp - 0x11c], bl
ja loc_fffb3309  ; ja 0xfffb3309
mov dword [ebp - 0x14c], 0
mov byte [ebp - 0x140], 0
jmp near loc_fffb3611  ; jmp 0xfffb3611

loc_fffb33b2:  ; not directly referenced
cmp byte [ebp - 0x11c], 0
jns short loc_fffb33d4  ; jns 0xfffb33d4
mov byte [ebp - 0x11c], 0x20
mov bl, byte [ebp - 0x130]
sub byte [ebp - 0x11c], bl
sub byte [ebp - 0x11c], al

loc_fffb33d4:  ; not directly referenced
mov eax, dword [ebp - 0x120]
mov bl, byte [ebp - 0x11c]
shl ebx, 0x18
and eax, 0xc0ffffff
or ebx, eax
cmp byte [ebp - 0x144], 0
mov dword [ebp - 0x120], ebx
mov eax, dword [edi + 0x2223]
jne short loc_fffb3409  ; jne 0xfffb3409
mov dword [eax + 0x3000], ebx

loc_fffb3405:  ; not directly referenced
xor edx, edx
jmp short loc_fffb3466  ; jmp 0xfffb3466

loc_fffb3409:  ; not directly referenced
mov ebx, dword [ebp - 0x120]
mov dword [eax + 0x3100], ebx
jmp short loc_fffb3405  ; jmp 0xfffb3405

loc_fffb3417:  ; not directly referenced
movzx eax, dl
mov bl, byte [ebp - 0x11c]
cmp bl, byte [ebp + eax - 0xf0]
jne short loc_fffb3434  ; jne 0xfffb3434
mov dword [ebp + eax*4 - 0xe4], 0

loc_fffb3434:  ; not directly referenced
cmp dword [ebp + eax*4 - 0xe4], 0
jne short loc_fffb3465  ; jne 0xfffb3465
cmp byte [ebp - 0x144], 0
mov ecx, dword [edi + 0x2223]
jne short loc_fffb3456  ; jne 0xfffb3456
lea eax, [eax*4 + 0x4340]
jmp short loc_fffb345d  ; jmp 0xfffb345d

loc_fffb3456:  ; not directly referenced
lea eax, [eax*4 + 0x4740]

loc_fffb345d:  ; not directly referenced
add ecx, eax
mov dword [ecx], 0

loc_fffb3465:  ; not directly referenced
inc edx

loc_fffb3466:  ; not directly referenced
cmp dl, byte [edi + 0x20b5]
jb short loc_fffb3417  ; jb 0xfffb3417
mov eax, dword [edi + 0x2223]
mov ecx, 3
mov edx, dword [ebp - 0x12c]
mov ebx, dword [eax + 0x5030]
and ebx, 0xffffffef
mov dword [eax + 0x5030], ebx
mov dword [ebp - 0x138], ebx
push eax
lea eax, [ebp - 0x6c]
push 1
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
jne loc_fffb396d  ; jne 0xfffb396d
cmp dword [ebp - 0x13c], 0
jne short loc_fffb3517  ; jne 0xfffb3517

loc_fffb34c2:  ; not directly referenced
mov edx, dword [edi + 0x2223]
mov eax, dword [ebp - 0x138]
or eax, 0x10
xor ecx, ecx
mov dword [edx + 0x5030], eax
mov edx, 0x64
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne short loc_fffb3529  ; jne 0xfffb3529
mov dl, byte [ebp - 0x11c]
mov al, 0x1f
dec edx
sub eax, dword [ebp - 0x11c]
cmp byte [ebp - 0x11c], 0x1f
mov byte [ebp - 0x11c], 0
cmova eax, edx
movzx edx, al
mov dword [ebp - 0x138], edx
jmp near loc_fffb35f9  ; jmp 0xfffb35f9

loc_fffb3517:  ; not directly referenced
mov ebx, dword [ebp - 0x15c]
cmp byte [ebx + 0x3a], 0
jne loc_fffb41ca  ; jne 0xfffb41ca
jmp short loc_fffb34c2  ; jmp 0xfffb34c2

loc_fffb3529:  ; not directly referenced
mov ebx, 0xc
jmp near loc_fffb396d  ; jmp 0xfffb396d

loc_fffb3533:  ; not directly referenced
movzx edx, byte [ebp - 0x11c]
cmp dword [ebp + edx*4 - 0xe4], 0
jne loc_fffb35f3  ; jne 0xfffb35f3
test al, al
js loc_fffb3928  ; js 0xfffb3928
cmp byte [ebp - 0x144], 0
mov ebx, dword [edi + 0x2223]
jne short loc_fffb3568  ; jne 0xfffb3568
lea ecx, [edx*4 + 0x4340]
jmp short loc_fffb356f  ; jmp 0xfffb356f

loc_fffb3568:  ; not directly referenced
lea ecx, [edx*4 + 0x4740]

loc_fffb356f:  ; not directly referenced
add ecx, ebx
mov ecx, dword [ecx]
mov dword [ebp - 0x174], ecx
mov ecx, edx
shl ecx, 7
add ecx, dword [ebp - 0x138]
movzx ebx, word [esi + ecx*2]
mov word [ebp - 0x158], bx
add ebx, dword [ebp - 0x174]
cmp ebx, 0xffff
jbe short loc_fffb35a5  ; jbe 0xfffb35a5
mov word [esi + ecx*2], 0xffff
jmp short loc_fffb35b5  ; jmp 0xfffb35b5

loc_fffb35a5:  ; not directly referenced
mov ebx, dword [ebp - 0x174]
add ebx, dword [ebp - 0x158]
mov word [esi + ecx*2], bx

loc_fffb35b5:  ; not directly referenced
mov ecx, edx
shl ecx, 7
add ecx, dword [ebp - 0x138]
cmp word [esi + ecx*2], 0
je short loc_fffb35f3  ; je 0xfffb35f3
movzx ecx, byte [ebp - 0x11c]
mov dword [ebp + edx*4 - 0xe4], 1
shl ecx, 8
inc byte [ebp - 0x140]
add ecx, esi
xor edx, edx
jmp short loc_fffb35ef  ; jmp 0xfffb35ef

loc_fffb35e8:  ; not directly referenced
mov word [ecx + edx*2], 0xffff
inc edx

loc_fffb35ef:  ; not directly referenced
cmp al, dl
ja short loc_fffb35e8  ; ja 0xfffb35e8

loc_fffb35f3:  ; not directly referenced
inc byte [ebp - 0x11c]

loc_fffb35f9:  ; not directly referenced
mov dl, byte [ebp - 0x11c]
cmp dl, byte [edi + 0x20b5]
jb loc_fffb3533  ; jb 0xfffb3533
inc dword [ebp - 0x14c]

loc_fffb3611:  ; not directly referenced
mov al, byte [ebp - 0x14c]
mov bl, byte [ebp - 0x130]
add ebx, eax
cmp bl, 0x1f
mov byte [ebp - 0x11c], bl
jg short loc_fffb363c  ; jg 0xfffb363c
mov bl, byte [ebp - 0x140]
cmp bl, byte [edi + 0x20b5]
jb loc_fffb33b2  ; jb 0xfffb33b2

loc_fffb363c:  ; not directly referenced
movzx edx, byte [edi + 0x20b5]
xor eax, eax
jmp short loc_fffb3653  ; jmp 0xfffb3653

loc_fffb3647:  ; not directly referenced
mov dword [ebp + eax*4 - 0xe4], 1
inc eax

loc_fffb3653:  ; not directly referenced
cmp eax, edx
jl short loc_fffb3647  ; jl 0xfffb3647
mov dword [ebp - 0x140], 0
mov byte [ebp - 0x138], 0
jmp near loc_fffb38bd  ; jmp 0xfffb38bd

loc_fffb366d:  ; not directly referenced
cmp byte [ebp - 0x11c], 0
jns short loc_fffb3685  ; jns 0xfffb3685
sub eax, dword [ebp - 0x134]
add eax, 0x20
mov byte [ebp - 0x11c], al

loc_fffb3685:  ; not directly referenced
mov eax, dword [ebp - 0x120]
mov bl, byte [ebp - 0x11c]
shl ebx, 0x18
and eax, 0xc0ffffff
or ebx, eax
cmp byte [ebp - 0x144], 0
mov dword [ebp - 0x120], ebx
mov eax, dword [edi + 0x2223]
jne short loc_fffb36ba  ; jne 0xfffb36ba
mov dword [eax + 0x3000], ebx

loc_fffb36b6:  ; not directly referenced
xor edx, edx
jmp short loc_fffb3717  ; jmp 0xfffb3717

loc_fffb36ba:  ; not directly referenced
mov ebx, dword [ebp - 0x120]
mov dword [eax + 0x3100], ebx
jmp short loc_fffb36b6  ; jmp 0xfffb36b6

loc_fffb36c8:  ; not directly referenced
movzx eax, dl
mov bl, byte [ebp - 0x11c]
cmp bl, byte [ebp + eax - 0xf0]
jne short loc_fffb36e5  ; jne 0xfffb36e5
mov dword [ebp + eax*4 - 0xe4], 0

loc_fffb36e5:  ; not directly referenced
cmp dword [ebp + eax*4 - 0xe4], 0
jne short loc_fffb3716  ; jne 0xfffb3716
cmp byte [ebp - 0x144], 0
mov ecx, dword [edi + 0x2223]
jne short loc_fffb3707  ; jne 0xfffb3707
lea eax, [eax*4 + 0x4340]
jmp short loc_fffb370e  ; jmp 0xfffb370e

loc_fffb3707:  ; not directly referenced
lea eax, [eax*4 + 0x4740]

loc_fffb370e:  ; not directly referenced
add ecx, eax
mov dword [ecx], 0

loc_fffb3716:  ; not directly referenced
inc edx

loc_fffb3717:  ; not directly referenced
cmp dl, byte [edi + 0x20b5]
jb short loc_fffb36c8  ; jb 0xfffb36c8
mov eax, dword [edi + 0x2223]
mov ecx, 3
mov edx, dword [ebp - 0x12c]
mov ebx, dword [eax + 0x5030]
and ebx, 0xffffffef
mov dword [eax + 0x5030], ebx
mov dword [ebp - 0x130], ebx
push eax
lea eax, [ebp - 0x6c]
push 1
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
jne loc_fffb396d  ; jne 0xfffb396d
cmp dword [ebp - 0x13c], 0
jne short loc_fffb37cc  ; jne 0xfffb37cc

loc_fffb3773:  ; not directly referenced
mov edx, dword [edi + 0x2223]
mov eax, dword [ebp - 0x130]
or eax, 0x10
xor ecx, ecx
mov dword [edx + 0x5030], eax
mov edx, 0x64
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne loc_fffb3529  ; jne 0xfffb3529
mov dl, byte [ebp - 0x11c]
mov al, 0x1f
dec edx
sub eax, dword [ebp - 0x11c]
cmp byte [ebp - 0x11c], 0x1f
mov byte [ebp - 0x11c], 0
cmova eax, edx
movzx edx, al
mov dword [ebp - 0x130], edx
jmp near loc_fffb38a5  ; jmp 0xfffb38a5

loc_fffb37cc:  ; not directly referenced
mov ebx, dword [ebp - 0x15c]
cmp byte [ebx + 0x3a], 0
jne loc_fffb4201  ; jne 0xfffb4201
jmp short loc_fffb3773  ; jmp 0xfffb3773

loc_fffb37de:  ; not directly referenced
movzx edx, byte [ebp - 0x11c]
cmp dword [ebp + edx*4 - 0xe4], 0
jne loc_fffb389f  ; jne 0xfffb389f
cmp byte [ebp - 0x144], 0
mov ebx, dword [edi + 0x2223]
jne short loc_fffb380b  ; jne 0xfffb380b
lea ecx, [edx*4 + 0x4340]
jmp short loc_fffb3812  ; jmp 0xfffb3812

loc_fffb380b:  ; not directly referenced
lea ecx, [edx*4 + 0x4740]

loc_fffb3812:  ; not directly referenced
add ecx, ebx
mov ecx, dword [ecx]
mov dword [ebp - 0x160], ecx
mov ecx, edx
shl ecx, 7
add ecx, dword [ebp - 0x130]
movzx ebx, word [esi + ecx*2]
mov word [ebp - 0x14c], bx
add ebx, dword [ebp - 0x160]
cmp ebx, 0xffff
jbe short loc_fffb3848  ; jbe 0xfffb3848
mov word [esi + ecx*2], 0xffff
jmp short loc_fffb3858  ; jmp 0xfffb3858

loc_fffb3848:  ; not directly referenced
mov ebx, dword [ebp - 0x160]
add ebx, dword [ebp - 0x14c]
mov word [esi + ecx*2], bx

loc_fffb3858:  ; not directly referenced
mov ecx, edx
shl ecx, 7
add ecx, dword [ebp - 0x130]
cmp word [esi + ecx*2], 0
je short loc_fffb389f  ; je 0xfffb389f
movzx ebx, byte [ebp - 0x11c]
mov dword [ebp + edx*4 - 0xe4], 1
shl ebx, 8
inc byte [ebp - 0x138]
add ebx, esi
xor ecx, ecx
mov dl, 0x3f
jmp short loc_fffb3898  ; jmp 0xfffb3898

loc_fffb388d:  ; not directly referenced
mov word [ebx + ecx + 0x80], 0xffff
dec edx

loc_fffb3898:  ; not directly referenced
sub ecx, 2
cmp dl, al
ja short loc_fffb388d  ; ja 0xfffb388d

loc_fffb389f:  ; not directly referenced
inc byte [ebp - 0x11c]

loc_fffb38a5:  ; not directly referenced
mov dl, byte [ebp - 0x11c]
cmp dl, byte [edi + 0x20b5]
jb loc_fffb37de  ; jb 0xfffb37de
inc dword [ebp - 0x140]

loc_fffb38bd:  ; not directly referenced
mov al, byte [ebp - 0x140]
mov bl, byte [ebp - 0x134]
sub ebx, eax
cmp bl, 0xe1
mov byte [ebp - 0x11c], bl
jl short loc_fffb391a  ; jl 0xfffb391a
mov bl, byte [ebp - 0x138]
cmp bl, byte [edi + 0x20b5]
jb loc_fffb366d  ; jb 0xfffb366d
jmp short loc_fffb391a  ; jmp 0xfffb391a

loc_fffb38ea:  ; not directly referenced
movzx esi, bl
mov eax, dword [ebp - 0x12c]
mov edx, esi
inc ebx
call fcn_fffacd01  ; call 0xfffacd01
movzx ecx, byte [ebp + esi - 0xf0]
add eax, dword [edi + 0x2223]
shl ecx, 0x18
mov edx, dword [eax]
and edx, 0x80ffffff
or edx, ecx
mov dword [eax], edx
jmp short loc_fffb391c  ; jmp 0xfffb391c

loc_fffb391a:  ; not directly referenced
xor ebx, ebx

loc_fffb391c:  ; not directly referenced
cmp bl, byte [edi + 0x20b5]
jb short loc_fffb38ea  ; jb 0xfffb38ea
xor ebx, ebx
jmp short loc_fffb396d  ; jmp 0xfffb396d

loc_fffb3928:  ; not directly referenced
mov ebx, 2
jmp short loc_fffb396d  ; jmp 0xfffb396d

loc_fffb392f:  ; not directly referenced
imul eax, dword [ebp - 0x124], 0x900
sub esp, 0xc
mov ecx, dword [ebp - 0x12c]
lea edx, [edi + eax + 0x3c31]
lea eax, [ebp - 0x6c]
push eax
push dword [ebp - 0x13c]
mov eax, edi
push 0
push dword [ebp - 0x154]
push dword [ebp - 0x124]
call fcn_fffc7b0a  ; call 0xfffc7b0a
mov ebx, eax
add esp, 0x20

loc_fffb396d:  ; not directly referenced
inc dword [ebp - 0x124]
cmp dword [ebp - 0x124], 4
jne loc_fffb3267  ; jne 0xfffb3267
dec word [ebp - 0x148]
jne loc_fffb323a  ; jne 0xfffb323a
imul esi, dword [ebp - 0x12c], 0x1055
cmp byte [ebp - 0x146], 0
mov dword [ebp - 0x128], 0
mov dword [ebp - 0x11c], esi
je loc_fffb3b24  ; je 0xfffb3b24

loc_fffb39b4:  ; not directly referenced
imul esi, dword [ebp - 0x12c], 0x1055
mov eax, dword [ebp - 0x12c]
shl eax, 8
mov dword [ebp - 0x128], 0
add eax, 0xe3c
mov dword [ebp - 0x124], esi
mov dword [ebp - 0x13c], eax

loc_fffb39e2:  ; not directly referenced
mov ecx, dword [ebp - 0x12c]
mov edx, dword [ebp - 0x128]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne loc_fffb3ae6  ; jne 0xfffb3ae6
jmp near loc_fffb3b0c  ; jmp 0xfffb3b0c

loc_fffb3a02:  ; not directly referenced
movzx edx, byte [ebp - 0x11c]
mov esi, dword [ebp - 0x134]
add esi, edx
sub esp, 0xc
mov eax, esi
lea ecx, [ebp - 0x10b]
shl eax, 8
mov dword [ebp - 0x120], edx
push ecx
mov ecx, 0x40
lea edx, [edi + eax + 0x3c31]
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffb3ade  ; jne 0xfffb3ade
cmp dword [ebp - 0x154], 2
mov ecx, dword [edi + 0x2223]
ja short loc_fffb3aa7  ; ja 0xfffb3aa7
mov edx, dword [ebp - 0x120]
mov eax, dword [ebp - 0x12c]
mov dword [ebp - 0x170], ecx
call fcn_fffacd01  ; call 0xfffacd01
mov ecx, dword [ebp - 0x170]
mov edx, dword [ebp - 0x124]
add ecx, eax
mov eax, dword [ecx]
and eax, 0x3f000000
shr eax, 0x18
mov byte [ebp - 0x10b], al
lea eax, [edx + esi*2 + 0xee0]
add eax, edi
mov dl, byte [ebp - 0x10a]
mov byte [eax + 0xd], dl
mov dl, byte [ebp - 0x109]
mov byte [eax + 0xe], dl
jmp short loc_fffb3ade  ; jmp 0xfffb3ade

loc_fffb3aa7:  ; not directly referenced
add ecx, dword [ebp - 0x13c]
mov dl, byte [ebp - 0x10a]
mov eax, dword [ecx]
mov ecx, dword [ebp - 0x124]
and eax, 0x3f000000
shr eax, 0x18
mov byte [ebp - 0x10b], al
lea eax, [ecx + esi*2 + 0xf20]
add eax, edi
mov byte [eax + 0x15], dl
mov dl, byte [ebp - 0x109]
mov byte [eax + 0x16], dl

loc_fffb3ade:  ; not directly referenced
inc byte [ebp - 0x11c]
jmp short loc_fffb3afa  ; jmp 0xfffb3afa

loc_fffb3ae6:  ; not directly referenced
imul esi, dword [ebp - 0x128], 9
mov byte [ebp - 0x11c], 0
mov dword [ebp - 0x134], esi

loc_fffb3afa:  ; not directly referenced
mov al, byte [ebp - 0x11c]
cmp al, byte [edi + 0x20b5]
jb loc_fffb3a02  ; jb 0xfffb3a02

loc_fffb3b0c:  ; not directly referenced
inc dword [ebp - 0x128]
cmp dword [ebp - 0x128], 4
jne loc_fffb39e2  ; jne 0xfffb39e2
jmp near loc_fffb3dcf  ; jmp 0xfffb3dcf

loc_fffb3b24:  ; not directly referenced
mov ecx, dword [ebp - 0x12c]
mov edx, dword [ebp - 0x128]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb3dbc  ; je 0xfffb3dbc
cmp dword [ebp - 0x154], 1
je loc_fffb3ced  ; je 0xfffb3ced
jb loc_fffb3c5f  ; jb 0xfffb3c5f
cmp dword [ebp - 0x154], 2
je loc_fffb3d96  ; je 0xfffb3d96
cmp dword [ebp - 0x154], 3
jne loc_fffb3dbc  ; jne 0xfffb3dbc
jmp short loc_fffb3bd1  ; jmp 0xfffb3bd1

loc_fffb3b6e:  ; not directly referenced
movzx eax, byte [ebp - 0x120]
mov esi, dword [ebp - 0x124]
add esi, eax
sub esp, 0xc
mov eax, esi
lea ecx, [ebp - 0x10b]
shl eax, 8
push ecx
mov ecx, 0x80
lea edx, [edi + eax + 0x3c31]
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
test eax, eax
mov ebx, eax
jne short loc_fffb3bc9  ; jne 0xfffb3bc9
mov edx, dword [ebp - 0x11c]
lea eax, [edx + esi*2 + 0xf70]
add eax, edi
mov dl, byte [ebp - 0x10a]
mov byte [eax + 0xd], dl
mov dl, byte [ebp - 0x109]
mov byte [eax + 0xe], dl

loc_fffb3bc9:  ; not directly referenced
inc byte [ebp - 0x120]
jmp short loc_fffb3be5  ; jmp 0xfffb3be5

loc_fffb3bd1:  ; not directly referenced
imul esi, dword [ebp - 0x128], 9
mov byte [ebp - 0x120], 0
mov dword [ebp - 0x124], esi

loc_fffb3be5:  ; not directly referenced
mov al, byte [ebp - 0x120]
cmp al, byte [edi + 0x20b5]
jb loc_fffb3b6e  ; jb 0xfffb3b6e
jmp near loc_fffb3dbc  ; jmp 0xfffb3dbc

loc_fffb3bfc:  ; not directly referenced
movzx eax, byte [ebp - 0x120]
mov esi, dword [ebp - 0x124]
add esi, eax
sub esp, 0xc
mov eax, esi
lea ecx, [ebp - 0x10b]
shl eax, 8
push ecx
mov ecx, 0x48
lea edx, [edi + eax + 0x3c31]
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
test eax, eax
mov ebx, eax
jne short loc_fffb3c57  ; jne 0xfffb3c57
mov edx, dword [ebp - 0x11c]
lea eax, [edx + esi*2 + 0xfb0]
add eax, edi
mov dl, byte [ebp - 0x10a]
mov byte [eax + 0x15], dl
mov dl, byte [ebp - 0x109]
mov byte [eax + 0x16], dl

loc_fffb3c57:  ; not directly referenced
inc byte [ebp - 0x120]
jmp short loc_fffb3c73  ; jmp 0xfffb3c73

loc_fffb3c5f:  ; not directly referenced
imul esi, dword [ebp - 0x128], 9
mov byte [ebp - 0x120], 0
mov dword [ebp - 0x124], esi

loc_fffb3c73:  ; not directly referenced
mov al, byte [ebp - 0x120]
cmp al, byte [edi + 0x20b5]
jb loc_fffb3bfc  ; jb 0xfffb3bfc
jmp near loc_fffb3dbc  ; jmp 0xfffb3dbc

loc_fffb3c8a:  ; not directly referenced
movzx eax, byte [ebp - 0x120]
mov esi, dword [ebp - 0x124]
add esi, eax
sub esp, 0xc
mov eax, esi
lea ecx, [ebp - 0x10b]
shl eax, 8
push ecx
mov ecx, 0x48
lea edx, [edi + eax + 0x3c31]
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
test eax, eax
mov ebx, eax
jne short loc_fffb3ce5  ; jne 0xfffb3ce5
mov edx, dword [ebp - 0x11c]
lea eax, [edx + esi*2 + 0x1000]
add eax, edi
mov dl, byte [ebp - 0x10a]
mov byte [eax + 0xd], dl
mov dl, byte [ebp - 0x109]
mov byte [eax + 0xe], dl

loc_fffb3ce5:  ; not directly referenced
inc byte [ebp - 0x120]
jmp short loc_fffb3d01  ; jmp 0xfffb3d01

loc_fffb3ced:  ; not directly referenced
imul esi, dword [ebp - 0x128], 9
mov byte [ebp - 0x120], 0
mov dword [ebp - 0x124], esi

loc_fffb3d01:  ; not directly referenced
mov al, byte [ebp - 0x120]
cmp al, byte [edi + 0x20b5]
jb loc_fffb3c8a  ; jb 0xfffb3c8a
jmp near loc_fffb3dbc  ; jmp 0xfffb3dbc

loc_fffb3d18:  ; not directly referenced
movzx eax, byte [ebp - 0x120]
mov esi, dword [ebp - 0x124]
add esi, eax
sub esp, 0xc
mov eax, esi
lea ecx, [ebp - 0x10b]
shl eax, 8
push ecx
mov ecx, 0x48
lea edx, [edi + eax + 0x3c31]
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
test eax, eax
mov ebx, eax
jne short loc_fffb3d8e  ; jne 0xfffb3d8e
mov eax, dword [ebp - 0x11c]
mov dl, byte [ebp - 0x10a]
lea ecx, [eax + esi*2 + 0xfb0]
add ecx, edi
mov al, byte [ebp - 0x109]
mov byte [ecx + 0x15], dl
mov edx, dword [ebp - 0x11c]
mov byte [ecx + 0x16], al
lea ecx, [edx + esi*2 + 0x1000]
add ecx, edi
mov dl, byte [ebp - 0x10a]
mov byte [ecx + 0xd], dl
mov byte [ecx + 0xe], al

loc_fffb3d8e:  ; not directly referenced
inc byte [ebp - 0x120]
jmp short loc_fffb3daa  ; jmp 0xfffb3daa

loc_fffb3d96:  ; not directly referenced
imul esi, dword [ebp - 0x128], 9
mov byte [ebp - 0x120], 0
mov dword [ebp - 0x124], esi

loc_fffb3daa:  ; not directly referenced
mov al, byte [ebp - 0x120]
cmp al, byte [edi + 0x20b5]
jb loc_fffb3d18  ; jb 0xfffb3d18

loc_fffb3dbc:  ; not directly referenced
inc dword [ebp - 0x128]
cmp dword [ebp - 0x128], 4
jne loc_fffb3b24  ; jne 0xfffb3b24

loc_fffb3dcf:  ; not directly referenced
inc dword [ebp - 0x12c]
add dword [ebp - 0x150], 0x1055
cmp dword [ebp - 0x12c], 2
jne loc_fffb2c89  ; jne 0xfffb2c89
jmp near loc_fffb4238  ; jmp 0xfffb4238

loc_fffb3df1:  ; not directly referenced
mov al, byte [edi + 0x44]
mov esi, dword [ebp - 0x150]
shr al, 2
mov dword [ebp - 0x6c], 8
movzx esi, byte [esi + 0x3e]
movzx edx, al
mov word [ebp - 0x11c], si
mov dword [ebp - 0x120], edx
mov dl, byte [edi + 0x43]
movzx ecx, dl
mov word [ebp - 0x5a], si
mov dword [ebp - 0x124], ecx
lea esi, [eax + 1]
mov eax, dword [ebp - 0x124]
cmp dword [ebp - 0x120], eax
mov eax, esi
mov ecx, esi
cmovl eax, edx
mov esi, dword [ebp - 0x150]
mov byte [ebp - 0x13c], cl
mov byte [ebp - 0x58], al
movzx ecx, byte [esi + 0x41]
movzx eax, byte [esi + 0x3c]
mov word [ebp - 0x64], 0
lea eax, [ecx + eax + 8]
mov byte [ebp - 0x62], 0
mov byte [ebp - 0x60], 4
mov byte [ebp - 0x5f], 0x12
mov byte [ebp - 0x5e], 0
mov byte [ebp - 0x5d], 0
mov word [ebp - 0x5c], 4
mov dword [ebp - 0x68], 0
mov dword [ebp - 0x57], 9
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 2
mov byte [ebp - 0x4a], 0x12
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 0x1e0
mov byte [ebp - 0x43], 4
mov word [ebp - 0x130], ax
mov cl, byte [esi + 0x42]
movzx esi, cl
cmp cl, 9
mov word [ebp - 0x45], ax
mov eax, 8
mov dword [ebp - 0x53], 0
cmovae eax, esi
mov esi, dword [ebp - 0x150]
movzx esi, byte [esi + 0x3f]
mov word [ebp - 0x134], si
mov word [ebp - 0x1b], si
mov esi, dword [ebp - 0x12c]
mov word [ebp - 0x30], ax
inc esi
mov dword [ebp - 0x42], 4
and esi, 1
mov word [ebp - 0x3a], 0
imul eax, esi, 0x1055
mov byte [ebp - 0x38], 0
add eax, edi
mov byte [ebp - 0x36], 2
mov byte [ebp - 0x35], 0x12
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 0x1e0
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
cmp byte [eax + 0x3a], 0
mov dword [ebp - 0x2d], 3
mov word [ebp - 0x25], 0x400
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x19], 4
mov dword [ebp - 0x29], 0
mov dword [ebp - 0x108], 0
mov dword [ebp - 0xfc], 0x140
mov dword [ebp - 0x128], esi
je loc_fffb2c9e  ; je 0xfffb2c9e
cmp dword [eax + 0xa], 1
mov ecx, dword [ebp - 0x11c]
sbb eax, eax
mov esi, dword [ebp - 0x124]
and eax, 2
mov word [ebp - 0xae], cx
cmp dword [ebp - 0x120], esi
mov cl, byte [ebp - 0x13c]
mov esi, dword [ebp - 0x130]
cmovge edx, ecx
mov byte [ebp - 0xb5], al
mov byte [ebp - 0xa0], al
mov word [ebp - 0x99], si
mov byte [ebp - 0x8b], al
mov dword [ebp - 0xc0], 8
mov word [ebp - 0xb8], 0
mov byte [ebp - 0xb6], 0
mov byte [ebp - 0xb4], 4
mov byte [ebp - 0xb3], 0x12
mov byte [ebp - 0xb2], 0
mov byte [ebp - 0xb1], 0
mov word [ebp - 0xb0], 4
mov byte [ebp - 0xac], dl
mov dword [ebp - 0xbc], 0
mov dword [ebp - 0xab], 9
mov word [ebp - 0xa3], 0
mov byte [ebp - 0xa1], 0
mov byte [ebp - 0x9f], 2
mov byte [ebp - 0x9e], 0x12
mov byte [ebp - 0x9d], 0
mov byte [ebp - 0x9c], 0
mov word [ebp - 0x9b], 0x1e0
mov byte [ebp - 0x97], 4
mov dword [ebp - 0xa7], 0
mov dword [ebp - 0x96], 9
mov word [ebp - 0x8e], 0
mov byte [ebp - 0x8c], 0
mov byte [ebp - 0x76], al
mov eax, dword [ebp - 0x134]
mov word [ebp - 0x84], si
mov byte [ebp - 0x8a], 2
lea esi, [ebp - 0xc0]
mov byte [ebp - 0x89], 0x12
mov byte [ebp - 0x88], 0
mov byte [ebp - 0x87], 0
mov word [ebp - 0x86], 0x1e0
mov byte [ebp - 0x82], 4
mov dword [ebp - 0x92], 0
mov dword [ebp - 0x81], 3
mov word [ebp - 0x79], 0x400
mov byte [ebp - 0x77], 0
mov byte [ebp - 0x75], 0
mov byte [ebp - 0x74], 0
mov byte [ebp - 0x73], 0
mov byte [ebp - 0x72], 0
mov word [ebp - 0x71], 1
mov word [ebp - 0x6f], ax
mov byte [ebp - 0x6d], 4
mov dword [ebp - 0x7d], 0
mov dword [ebp - 0x13c], esi
jmp near loc_fffb2ca8  ; jmp 0xfffb2ca8

loc_fffb4114:  ; not directly referenced
mov ecx, dword [ebp - 0x128]
lea edx, [ebp - 0xe4]
mov eax, edi
call fcn_ffface48  ; call 0xffface48
jmp near loc_fffb2e52  ; jmp 0xfffb2e52

loc_fffb412c:  ; not directly referenced
push ebx
mov ecx, 3
mov edx, dword [ebp - 0x128]
push 1
push dword [ebp - 0x13c]
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
je loc_fffb2ed2  ; je 0xfffb2ed2
jmp near loc_fffb3207  ; jmp 0xfffb3207

loc_fffb4163:  ; not directly referenced
mov ecx, dword [ebp - 0x128]
lea edx, [ebp - 0xe4]
mov eax, edi
call fcn_ffface48  ; call 0xffface48
jmp near loc_fffb305a  ; jmp 0xfffb305a

loc_fffb417b:  ; not directly referenced
push ecx
mov edx, dword [ebp - 0x128]
mov ecx, 3
push 1
push dword [ebp - 0x13c]
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
je loc_fffb30da  ; je 0xfffb30da
jmp near loc_fffb3207  ; jmp 0xfffb3207

loc_fffb41b2:  ; not directly referenced
mov ecx, dword [ebp - 0x128]
lea edx, [ebp - 0xfc]
mov eax, edi
call fcn_ffface48  ; call 0xffface48
jmp near loc_fffb325d  ; jmp 0xfffb325d

loc_fffb41ca:  ; not directly referenced
push edx
mov ecx, 3
mov edx, dword [ebp - 0x128]
push 1
push dword [ebp - 0x13c]
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
je loc_fffb34c2  ; je 0xfffb34c2
jmp near loc_fffb396d  ; jmp 0xfffb396d

loc_fffb4201:  ; not directly referenced
push eax
mov ecx, 3
mov edx, dword [ebp - 0x128]
push 1
push dword [ebp - 0x13c]
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
je loc_fffb3773  ; je 0xfffb3773
jmp near loc_fffb396d  ; jmp 0xfffb396d

loc_fffb4238:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffb4242:
db 0x00
db 0x00

fcn_fffb4244:  ; not directly referenced
push ebp
xor edx, edx
mov ebp, esp
push ebx
mov ecx, dword [ebp + 8]
cmp dword [ecx + 0x22ac], 0
je short loc_fffb429e  ; je 0xfffb429e
mov dx, word [ecx + 0x22b0]
mov ebx, edx
and ebx, 0x7fff
test dl, 0xf
je short loc_fffb4288  ; je 0xfffb4288
xor eax, eax
test dl, 1
jne short loc_fffb428e  ; jne 0xfffb428e
test dl, 2
mov al, 1
jne short loc_fffb428e  ; jne 0xfffb428e
and edx, 4
cmp dx, 1
sbb eax, eax
not eax
add eax, 3
jmp short loc_fffb428e  ; jmp 0xfffb428e

loc_fffb4288:  ; not directly referenced
mov al, byte [ecx + 0x22b2]

loc_fffb428e:  ; not directly referenced
movzx eax, al
mov edx, ebx
shl eax, 0x15
or edx, 0x800000
or edx, eax

loc_fffb429e:  ; not directly referenced
mov eax, dword [ecx + 0x2223]
mov dword [eax + 0x5024], edx
xor eax, eax
pop ebx
pop ebp
ret

fcn_fffb42af:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0xc]
mov eax, dword [ebp + 8]
cmp dword [eax + 0x225c], 2
je short loc_fffb42ee  ; je 0xfffb42ee
mov esi, 0x8000f8a0
mov edi, 0xcf8
mov eax, esi
mov edx, edi
out dx, eax
mov ebx, 0xcfc
mov edx, ebx
in eax, dx
mov ecx, eax
mov edx, edi
mov eax, esi
out dx, eax
or ecx, 0x800000
mov edx, ebx
mov eax, ecx
out dx, eax

loc_fffb42ee:  ; not directly referenced
mov eax, dword [ebp + 8]
mov esi, 0x64
mov edx, dword [eax + 0x2223]
mov eax, dword [edx + 0x5030]
or eax, 1
mov dword [edx + 0x5030], eax
mov eax, dword [ebp + 8]
mov edx, dword [eax + 0x2223]
mov eax, dword [edx + 0x5030]
or al, 0x80
mov dword [edx + 0x5030], eax
mov edx, dword [ebp + 8]
mov eax, dword [edx + 0x2223]
mov dword [eax + 0x5f18], 0xfa
cmp byte [edx + 0x3a], 0
sete cl
mov edi, dword [edx + 0x2223]
cmp cl, 1
mov ebx, dword [edx + 0x20b6]
sbb eax, eax
xor edx, edx
shr ebx, 1
and eax, 0xfffffc00
lea eax, [edi + eax + 0x4690]
mov eax, dword [eax]
movzx eax, ah
imul eax, eax, 0x3e8
div ebx
xor edx, edx
add eax, 0x220
div esi
cmp cl, 1
mov esi, dword [edi + 0x5064]
sbb edx, edx
and edx, 0xfffffc00
lea edx, [edi + edx + 0x46a4]
mov edx, dword [edx]
and edx, 0xfff
imul ecx, eax, 0x64
test esi, 0x20000
je short loc_fffb43b4  ; je 0xfffb43b4
and esi, 0xfff
add edx, esi
imul eax, edx, 0x3e8
xor edx, edx
div ebx
add ecx, eax
jmp short loc_fffb43c5  ; jmp 0xfffb43c5

loc_fffb43b4:  ; not directly referenced
imul eax, edx, 0x3e8
xor edx, edx
div ebx
lea ecx, [ecx + eax + 0x1f4]

loc_fffb43c5:  ; not directly referenced
lea eax, [ecx + 0x1f3]
mov ebx, 0x1f4
xor edx, edx
div ebx
mov ecx, eax
mov eax, dword [edi + 0x5f10]
and eax, 0xfff00
shr eax, 8
imul edx, ecx, 0x1f4
imul eax, eax, 0xa
lea eax, [eax + edx + 0x1f3]
xor edx, edx
div ebx
mov esi, eax
mov eax, dword [edi + 0x5f00]
test al, 8
je short loc_fffb4420  ; je 0xfffb4420
mov eax, dword [edi + 0x5f20]
mov edx, dword [edi + 0x5f18]
and eax, 0xfff00
and edx, 0xff
shr eax, 8
jmp short loc_fffb4427  ; jmp 0xfffb4427

loc_fffb4420:  ; not directly referenced
mov edx, 0x32
xor eax, eax

loc_fffb4427:  ; not directly referenced
mov ebx, dword [edi + 0x5d10]
add eax, edx
and ebx, 0xffffc0c0
xor edx, edx
shl ecx, 8
or ebx, 0xc
or ebx, ecx
mov ecx, esi
imul eax, eax, 0xa
imul esi, esi, 0x1f4
and ebx, 0xffc0ffff
shl ecx, 0x10
or ecx, ebx
mov ebx, 0x1f4
and ecx, 0xc0ffffff
lea eax, [esi + eax + 0x1f3]
div ebx
mov edx, 0x55
shl eax, 0x18
or eax, ecx
mov dword [edi + 0x5d10], eax
mov eax, dword [ebp + 8]
call fcn_fffad891  ; call 0xfffad891
lea esp, [esp + 0xc]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb448c:  ; not directly referenced
push ebp
xor edx, edx
mov ebp, esp
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x400]

loc_fffb449c:  ; not directly referenced
mov esi, edx
mov eax, edx
shl eax, 0x10
not esi
mov ecx, esi
shl ecx, 0x18
or eax, ecx
mov ecx, esi
shl ecx, 8
or ecx, edx
or eax, ecx
mov ecx, esi
shl ecx, 0x10
mov dword [ebp + edx*8 - 0x408], eax
mov eax, edx
shl eax, 0x18
or ecx, eax
mov eax, edx
shl eax, 8
or eax, esi
or ecx, eax
mov dword [ebp + edx*8 - 0x404], ecx
inc edx
cmp edx, 0x80
jne short loc_fffb449c  ; jne 0xfffb449c
cmp byte [ebx + 0x3a], 0
jne short loc_fffb44f2  ; jne 0xfffb44f2

loc_fffb44e7:  ; not directly referenced
cmp byte [ebx + 0x108f], 0
jne short loc_fffb450b  ; jne 0xfffb450b
jmp short loc_fffb4525  ; jmp 0xfffb4525

loc_fffb44f2:  ; not directly referenced
sub esp, 0xc
lea ecx, [ebp - 0x408]
push 0x10
xor edx, edx
mov eax, ebx
call fcn_fffc7760  ; call 0xfffc7760
add esp, 0x10
jmp short loc_fffb44e7  ; jmp 0xfffb44e7

loc_fffb450b:  ; not directly referenced
sub esp, 0xc
lea ecx, [ebp - 0x408]
push 0x10
mov edx, 1
mov eax, ebx
call fcn_fffc7760  ; call 0xfffc7760
add esp, 0x10

loc_fffb4525:  ; not directly referenced
lea esp, [ebp - 8]
pop ebx
pop esi
pop ebp
ret

fcn_fffb452c:  ; not directly referenced
push ebp
mov edx, 0xdd65
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x6c]
mov ebx, dword [ebp + 8]
mov eax, ebx
call fcn_fffad891  ; call 0xfffad891
mov eax, ebx
mov dword [ebp - 0x57], 8
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 0
mov byte [ebp - 0x4a], 7
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 1
mov byte [ebp - 0x43], 4
mov dword [ebp - 0x53], 0
mov dword [ebp - 0x42], 9
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 7
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
mov dword [ebp - 0x2d], 3
mov word [ebp - 0x25], 0x400
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x19], 4
mov dword [ebp - 0x29], 0
call fcn_fffb448c  ; call 0xfffb448c
cmp byte [ebx + 0x20b5], 8
mov dword [ebp - 0x70], 0
ja short loc_fffb45ff  ; ja 0xfffb45ff
mov eax, dword [ebx + 0x2223]
mov edx, dword [eax + 0x40a0]
mov dword [eax + 0x40a0], 0xff
mov dword [ebp - 0x70], edx

loc_fffb45ff:  ; not directly referenced
mov eax, dword [ebx + 0x2223]
cmp byte [ebx + 0x20b5], 8
mov dword [ebp - 0x6c], 0
mov edx, dword [eax + 0x436c]
mov edx, dword [eax + 0x436c]
ja short loc_fffb4634  ; ja 0xfffb4634
mov edx, dword [eax + 0x44a0]
mov dword [eax + 0x44a0], 0xff
mov dword [ebp - 0x6c], edx

loc_fffb4634:  ; not directly referenced
mov eax, dword [ebx + 0x2223]
xor esi, esi
mov edx, dword [eax + 0x476c]
mov eax, dword [eax + 0x476c]

loc_fffb4648:  ; not directly referenced
imul eax, esi, 0x1055
mov dword [ebp - 0x5c], 0
add eax, ebx
mov dword [ebp - 0x60], eax

loc_fffb465a:  ; not directly referenced
mov al, byte [ebp - 0x5c]
mov ecx, esi
mov byte [ebp - 0x61], al
mov edx, dword [ebp - 0x5c]
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffb467e  ; jne 0xfffb467e

loc_fffb4670:  ; not directly referenced
inc dword [ebp - 0x5c]
cmp dword [ebp - 0x5c], 4
jne short loc_fffb465a  ; jne 0xfffb465a
jmp near loc_fffb4745  ; jmp 0xfffb4745

loc_fffb467e:  ; not directly referenced
xor eax, eax
cmp byte [ebp - 0x61], 1
seta al
mov edx, dword [ebp - 0x60]
imul eax, eax, 0x1d
mov eax, dword [edx + eax + 4]
mov dword [ebp - 0x68], eax
mov eax, esi
cmp al, 1
sbb eax, eax
xor edi, edi
and eax, 0xfffffc00
add eax, 0x4688
add eax, dword [ebx + 0x2223]
mov edx, dword [eax]
xor dh, dh
mov dword [eax], edx
jmp near loc_fffb4737  ; jmp 0xfffb4737

loc_fffb46b7:  ; not directly referenced
mov edx, dword [ebp - 0x60]
mov al, byte [ebp - 0x61]
mov byte [ebp - 0x4c], al
mov ecx, 2
movzx eax, byte [edx + 0x3e]
mov word [ebp - 0x45], ax
mov al, byte [ebp - 0x61]
mov byte [ebp - 0x37], al
mov word [ebp - 0x4f], di
movzx eax, byte [edx + 0x3c]
mov dl, byte [ebp - 0x61]
add eax, 8
mov byte [ebp - 0x22], dl
mov edx, dword [ebp - 0x60]
mov word [ebp - 0x30], ax
mov word [ebp - 0x3a], di
movzx eax, byte [edx + 0x3f]
push edx
mov word [ebp - 0x1b], ax
lea eax, [ebp - 0x57]
push 1
mov edx, esi
push eax
mov eax, ebx
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ecx, eax
jne loc_fffb48d0  ; jne 0xfffb48d0
mov edx, esi
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov ecx, eax
jne loc_fffb48d0  ; jne 0xfffb48d0
add edi, 0x1000

loc_fffb4737:  ; not directly referenced
cmp edi, dword [ebp - 0x68]
jb loc_fffb46b7  ; jb 0xfffb46b7
jmp near loc_fffb4670  ; jmp 0xfffb4670

loc_fffb4745:  ; not directly referenced
inc esi
cmp esi, 2
jne loc_fffb4648  ; jne 0xfffb4648
mov dword [ebp - 0x42], 4
xor si, si

loc_fffb4759:  ; not directly referenced
imul edi, esi, 0x1055
mov dword [ebp - 0x60], 0
add edi, ebx

loc_fffb4768:  ; not directly referenced
mov dl, byte [ebp - 0x60]
mov ecx, esi
mov byte [ebp - 0x61], dl
mov eax, ebx
mov edx, dword [ebp - 0x60]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffb478c  ; jne 0xfffb478c

loc_fffb477e:  ; not directly referenced
inc dword [ebp - 0x60]
cmp dword [ebp - 0x60], 4
jne short loc_fffb4768  ; jne 0xfffb4768
jmp near loc_fffb4864  ; jmp 0xfffb4864

loc_fffb478c:  ; not directly referenced
xor eax, eax
cmp byte [ebp - 0x61], 1
seta al
mov dword [ebp - 0x5c], 0
imul eax, eax, 0x1d
mov eax, dword [edi + eax + 4]
mov dword [ebp - 0x68], eax
mov eax, esi
cmp al, 1
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4688
add eax, dword [ebx + 0x2223]
mov edx, dword [eax]
and edx, 0xff00ffff
mov dword [eax], edx
jmp near loc_fffb4853  ; jmp 0xfffb4853

loc_fffb47cb:  ; not directly referenced
mov al, byte [ebp - 0x61]
mov edx, dword [ebp - 0x5c]
mov byte [ebp - 0x4c], al
mov word [ebp - 0x4f], dx
movzx eax, byte [edi + 0x3e]
mov word [ebp - 0x3a], dx
mov dl, byte [edi + 0x42]
movzx ecx, dl
cmp dl, 9
mov word [ebp - 0x45], ax
mov al, byte [ebp - 0x61]
lea edx, [ebp - 0x57]
mov byte [ebp - 0x37], al
mov eax, 8
cmovae eax, ecx
mov ecx, 2
mov word [ebp - 0x30], ax
mov al, byte [ebp - 0x61]
mov byte [ebp - 0x22], al
movzx eax, byte [edi + 0x3f]
mov word [ebp - 0x1b], ax
push eax
mov eax, ebx
push 1
push edx
mov edx, esi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ecx, eax
jne loc_fffb48d0  ; jne 0xfffb48d0
mov edx, esi
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov ecx, eax
jne loc_fffb48d0  ; jne 0xfffb48d0
add dword [ebp - 0x5c], 0x1000

loc_fffb4853:  ; not directly referenced
mov eax, dword [ebp - 0x68]
cmp dword [ebp - 0x5c], eax
jb loc_fffb47cb  ; jb 0xfffb47cb
jmp near loc_fffb477e  ; jmp 0xfffb477e

loc_fffb4864:  ; not directly referenced
inc esi
cmp esi, 2
jne loc_fffb4759  ; jne 0xfffb4759
mov eax, dword [ebx + 0x2223]
xor ecx, ecx
mov edx, dword [eax + 0x4368]
test edx, edx
je short loc_fffb4888  ; je 0xfffb4888
mov edx, dword [eax + 0x4eac]
mov cl, 0x12

loc_fffb4888:  ; not directly referenced
mov edx, dword [ebp - 0x70]
mov dword [eax + 0x40a0], edx
mov eax, dword [ebx + 0x2223]
mov edx, dword [eax + 0x4768]
test edx, edx
je short loc_fffb48ac  ; je 0xfffb48ac
mov edx, dword [eax + 0x4eac]
mov ecx, 0x12

loc_fffb48ac:  ; not directly referenced
mov edx, dword [ebp - 0x6c]
test ecx, ecx
mov dword [eax + 0x44a0], edx
mov edx, 0xdd67
je short loc_fffb48c3  ; je 0xfffb48c3
mov edx, 0xdd66

loc_fffb48c3:  ; not directly referenced
mov eax, ebx
mov dword [ebp - 0x74], ecx
call fcn_fffad891  ; call 0xfffad891
mov ecx, dword [ebp - 0x74]

loc_fffb48d0:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, ecx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb48da:  ; not directly referenced
push ebp
mov edx, 0xdd50
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x1c]
mov ebx, dword [ebp + 8]
mov eax, ebx
call fcn_fffad891  ; call 0xfffad891
mov eax, ebx
call fcn_fffbf66b  ; call 0xfffbf66b
cmp dword [ebx + 0x22f9], 1
jne short loc_fffb493a  ; jne 0xfffb493a
mov eax, dword [ebx + 0x2223]
mov esi, dword [eax + 0x5024]
test esi, 0x800000
jne loc_fffb4c05  ; jne 0xfffb4c05
xor edi, edi

loc_fffb491d:  ; not directly referenced
mov eax, ebx
call fcn_fffb0e9a  ; call 0xfffb0e9a
test edi, edi
je short loc_fffb493a  ; je 0xfffb493a
mov eax, dword [ebx + 0x2223]
or esi, 0x800000
mov dword [eax + 0x5024], esi

loc_fffb493a:  ; not directly referenced
cmp byte [ebx + 0x3a], 0
jne loc_fffb4c1b  ; jne 0xfffb4c1b
jmp short loc_fffb495d  ; jmp 0xfffb495d

loc_fffb4946:  ; not directly referenced
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x5004]
or eax, 0x3000000
mov dword [edx + 0x5004], eax

loc_fffb495d:  ; not directly referenced
cmp byte [ebx + 0x108f], 0
jne loc_fffb4c5d  ; jne 0xfffb4c5d
jmp short loc_fffb4983  ; jmp 0xfffb4983

loc_fffb496c:  ; not directly referenced
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x5008]
or eax, 0x3000000
mov dword [edx + 0x5008], eax

loc_fffb4983:  ; not directly referenced
mov eax, dword [ebx + 0x2223]
mov edx, dword [ebx + 0x2260]
mov dword [eax + 0x4cd4], edx
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x400c]
and ah, 0xcf
or ah, 0x10
mov dword [edx + 0x400c], eax
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x440c]
and ah, 0xcf
or ah, 0x10
mov dword [edx + 0x440c], eax
mov eax, dword [ebx + 0x2270]
cmp eax, 6
sete cl
cmp eax, 3
setbe dl
or cl, dl
jne short loc_fffb49e0  ; jne 0xfffb49e0
cmp eax, 7
jne short loc_fffb49e8  ; jne 0xfffb49e8

loc_fffb49e0:  ; not directly referenced
shl eax, 8
or eax, 0x40
jmp short loc_fffb4a12  ; jmp 0xfffb4a12

loc_fffb49e8:  ; not directly referenced
cmp dword [ebx + 0x2234], 1
mov eax, 0x40
jne short loc_fffb4a12  ; jne 0xfffb4a12
cmp byte [ebx + 0x20af], 8
ja short loc_fffb4a12  ; ja 0xfffb4a12
cmp byte [ebx + 0x20ae], 0x21
sbb eax, eax
and eax, 0x400
add eax, 0x240

loc_fffb4a12:  ; not directly referenced
mov edx, dword [ebx + 0x2223]
mov dword [edx + 0x4cb0], eax
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4380], 0xaaa
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4780], 0xaaa
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4f88], 0x5f7003ff
mov eax, ebx
call fcn_fffbff43  ; call 0xfffbff43
test eax, eax
mov ecx, eax
mov eax, 1
cmove ecx, eax
xor edx, edx
mov eax, 0x7a120
div ecx
mov edx, dword [ebx + 0x2223]
add eax, 3
or eax, 0x73000
mov dword [edx + 0x5064], eax
cmp dword [ebx + 0x225c], 2
jne loc_fffb4ca3  ; jne 0xfffb4ca3
cmp byte [ebx + 0x22ca], 1
jne loc_fffb4bf0  ; jne 0xfffb4bf0
mov edi, ebx
mov byte [ebp - 0x19], 0
jmp near loc_fffb4ba3  ; jmp 0xfffb4ba3

loc_fffb4aa3:  ; not directly referenced
mov cl, byte [edi + 0x2f]
mov byte [ebp - 0x1a], cl
dec cl
jne short loc_fffb4ac9  ; jne 0xfffb4ac9
mov ecx, esi
cmp cl, 0x31
mov ecx, 0x31
cmovb esi, ecx
cmp dl, 0x31
cmovb edx, ecx
cmp al, 0x37
mov cl, 0x37
cmovb eax, ecx
jmp short loc_fffb4adf  ; jmp 0xfffb4adf

loc_fffb4ac9:  ; not directly referenced
cmp byte [ebp - 0x1a], 2
mov cl, 0xa1
cmove esi, ecx
mov ecx, 0x6e
cmove edx, ecx
mov cl, 0x9b
cmove eax, ecx

loc_fffb4adf:  ; not directly referenced
cmp byte [ebx + 0x20fe], 0
je short loc_fffb4b65  ; je 0xfffb4b65
cmp dword [edi + 0xa], 0
je short loc_fffb4b0f  ; je 0xfffb4b0f
mov cl, byte [edi + 0x12]
cmp cl, 1
je short loc_fffb4b17  ; je 0xfffb4b17
xor eax, eax
cmp cl, 2
mov esi, 0x5d
mov edx, 0x44
cmovne esi, eax
cmovne edx, eax
mov eax, esi
jmp short loc_fffb4b23  ; jmp 0xfffb4b23

loc_fffb4b0f:  ; not directly referenced
xor esi, esi
xor edx, edx
xor eax, eax
jmp short loc_fffb4b23  ; jmp 0xfffb4b23

loc_fffb4b17:  ; not directly referenced
mov esi, 0x1d
mov edx, 0x1d
mov al, 0x21

loc_fffb4b23:  ; not directly referenced
cmp dword [edi + 0x27], 0
je short loc_fffb4b65  ; je 0xfffb4b65
mov cl, byte [edi + 0x2f]
mov byte [ebp - 0x1a], cl
dec cl
jne short loc_fffb4b4f  ; jne 0xfffb4b4f
mov ecx, esi
cmp cl, 0x1d
mov ecx, 0x1d
cmovb esi, ecx
cmp dl, 0x1d
cmovb edx, ecx
cmp al, 0x21
mov cl, 0x21
cmovb eax, ecx
jmp short loc_fffb4b65  ; jmp 0xfffb4b65

loc_fffb4b4f:  ; not directly referenced
cmp byte [ebp - 0x1a], 2
mov cl, 0x5d
cmove esi, ecx
mov ecx, 0x44
cmove edx, ecx
mov cl, 0x5d
cmove eax, ecx

loc_fffb4b65:  ; not directly referenced
shl edx, 8
and esi, 0xff
movzx eax, al
or edx, esi
shl eax, 0x10
or edx, eax
cmp byte [ebp - 0x19], 1
sbb eax, eax
inc byte [ebp - 0x19]
and eax, 0xfffffc00
add edi, 0x1055
add eax, 0x4784
add eax, dword [ebx + 0x2223]
cmp byte [ebp - 0x19], 2
mov dword [eax], edx
je loc_fffb4ca3  ; je 0xfffb4ca3

loc_fffb4ba3:  ; not directly referenced
cmp dword [edi + 0xa], 0
je short loc_fffb4bcd  ; je 0xfffb4bcd
mov cl, byte [edi + 0x12]
cmp cl, 1
je short loc_fffb4bd5  ; je 0xfffb4bd5
xor eax, eax
cmp cl, 2
mov esi, 0xffffffa1
mov edx, 0x6e
mov cl, 0x9b
cmovne esi, eax
cmovne edx, eax
cmove eax, ecx
jmp short loc_fffb4be1  ; jmp 0xfffb4be1

loc_fffb4bcd:  ; not directly referenced
xor esi, esi
xor edx, edx
xor eax, eax
jmp short loc_fffb4be1  ; jmp 0xfffb4be1

loc_fffb4bd5:  ; not directly referenced
mov esi, 0x31
mov edx, 0x31
mov al, 0x37

loc_fffb4be1:  ; not directly referenced
cmp dword [edi + 0x27], 0
jne loc_fffb4aa3  ; jne 0xfffb4aa3
jmp near loc_fffb4adf  ; jmp 0xfffb4adf

loc_fffb4bf0:  ; not directly referenced
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4f84], 0
jmp near loc_fffb4ca3  ; jmp 0xfffb4ca3

loc_fffb4c05:  ; not directly referenced
and esi, 0xfeffffff
mov edi, 1
mov dword [eax + 0x5024], esi
jmp near loc_fffb491d  ; jmp 0xfffb491d

loc_fffb4c1b:  ; not directly referenced
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x4004]
and eax, 0xdfffffff
mov dword [edx + 0x4004], eax
mov eax, ebx
call fcn_fffbbf31  ; call 0xfffbbf31
mov edx, dword [ebx + 0x2223]
and eax, 0xf
or ah, 0x10
mov dword [edx + 0x42a0], eax
cmp dword [ebx + 0x20b1], 1
jne loc_fffb495d  ; jne 0xfffb495d
jmp near loc_fffb4946  ; jmp 0xfffb4946

loc_fffb4c5d:  ; not directly referenced
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x4404]
and eax, 0xdfffffff
mov dword [edx + 0x4404], eax
lea eax, [ebx + 0x1055]
call fcn_fffbbf31  ; call 0xfffbbf31
mov edx, dword [ebx + 0x2223]
and eax, 0xf
or ah, 0x10
mov dword [edx + 0x46a0], eax
cmp dword [ebx + 0x20b1], 1
jne loc_fffb4983  ; jne 0xfffb4983
jmp near loc_fffb496c  ; jmp 0xfffb496c

loc_fffb4ca3:  ; not directly referenced
mov eax, ebx
call fcn_fffad3a9  ; call 0xfffad3a9
mov eax, ebx
mov edx, 0xdd51
call fcn_fffad891  ; call 0xfffad891
lea esp, [esp + 0x1c]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb4cc1:
push ebp
mov ebp, esp
push edi
xor edi, edi
push esi
push ebx
xor ebx, ebx
lea esp, [esp - 0x10]
mov dword [ebp - 0x14], edx
mov dword [ebp - 0x18], ecx
jmp short loc_fffb4d30  ; jmp 0xfffb4d30

loc_fffb4cd7:
mov ecx, dword [ebp - 0x18]
xor edx, edx
mov ecx, dword [ecx + edi*4]
mov dword [ebp - 0x10], ecx

loc_fffb4ce2:
mov cl, dl
mov esi, 0xf
shl esi, cl
and esi, dword [ebp - 0x10]
shr esi, cl
cmp esi, 0xf
jne short loc_fffb4d23  ; jne 0xfffb4d23
cmp ebx, dword [ebp + 0xc]
ja short loc_fffb4d39  ; ja 0xfffb4d39
mov esi, dword [ebp + 0x10]
add esi, edx
cmp dword [ebp + 0x14], 0
mov dword [ebp - 0x1c], esi
mov esi, dword [ebp - 0x14]
mov ecx, dword [esi + 4]
jne short loc_fffb4d18  ; jne 0xfffb4d18
add ecx, dword [ebp - 0x1c]
mov ecx, dword [ecx]
mov dword [eax + ebx], ecx
jmp short loc_fffb4d20  ; jmp 0xfffb4d20

loc_fffb4d18:
add ecx, dword [ebp - 0x1c]
mov esi, dword [eax + ebx]
mov dword [ecx], esi

loc_fffb4d20:
add ebx, 4

loc_fffb4d23:
add edx, 4
cmp edx, 0x20
jne short loc_fffb4ce2  ; jne 0xfffb4ce2
inc edi
add dword [ebp + 0x10], 0x20

loc_fffb4d30:
cmp edi, dword [ebp + 8]
jne short loc_fffb4cd7  ; jne 0xfffb4cd7
xor eax, eax
jmp short loc_fffb4d3e  ; jmp 0xfffb4d3e

loc_fffb4d39:
mov eax, 1

loc_fffb4d3e:
lea esp, [esp + 0x10]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb4d47:
push ebp
mov ebp, esp
push edi
mov edi, eax
lea eax, [eax + 0xb05]
push esi
mov esi, edx
push ebx
lea esp, [esp - 8]
mov byte [ebp - 0xd], 0
mov dword [ebp - 0x14], eax
jmp short loc_fffb4dbb  ; jmp 0xfffb4dbb

loc_fffb4d64:
imul eax, ebx, 0x32
cmp byte [ebp - 0xd], 0
jne short loc_fffb4d7e  ; jne 0xfffb4d7e
push esi
lea eax, [edi + eax + 0x2f3]
push dword [ebx*4 + ref_fffcf5b0]  ; push dword [ebx*4 - 0x30a50]
jmp short loc_fffb4d94  ; jmp 0xfffb4d94

loc_fffb4d7e:
push esi
mov edx, dword [ebx*4 + ref_fffcf5b0]  ; mov edx, dword [ebx*4 - 0x30a50]
lea eax, [edi + eax + 0x4b5]
add edx, 0x100
push edx

loc_fffb4d94:
push 0x32
mov ecx, ref_fffcedb4  ; mov ecx, 0xfffcedb4
mov edx, dword [ebp - 0x14]
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne short loc_fffb4dbf  ; jne 0xfffb4dbf
inc ebx
cmp ebx, 9
jne short loc_fffb4d64  ; jne 0xfffb4d64
inc byte [ebp - 0xd]
cmp byte [ebp - 0xd], 2
je short loc_fffb4dc4  ; je 0xfffb4dc4

loc_fffb4dbb:
xor ebx, ebx
jmp short loc_fffb4d64  ; jmp 0xfffb4d64

loc_fffb4dbf:
mov eax, 1

loc_fffb4dc4:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb4dcc:
push ebp
lea edx, [eax + 0xb05]
mov ecx, ref_fffc99d8  ; mov ecx, 0xfffc99d8
mov ebp, esp
push 0
push 0x4000
push 0x14a
push 0x1d
call fcn_fffb4cc1  ; call 0xfffb4cc1
leave
ret

loc_fffb4def:
db 0x00

fcn_fffb4df0:
push ebp
mov ecx, 1
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x4c]
mov eax, dword [eax + 0x2e0e]
mov byte [ebp - 0x37], 0
mov dword [ebp - 0x42], 7
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov word [ebp - 0x30], 0xf
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
mov byte [ebp - 0x22], 0
mov dword [ebp - 0x2d], 1
mov word [ebp - 0x25], 0x400
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 8
mov byte [ebp - 0x20], 0x14
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov word [ebp - 0x1b], 0x190
mov byte [ebp - 0x19], 4
mov dword [ebp - 0x29], 0
mov edi, dword [eax + 0x5030]
mov edx, edi
or edx, 4
mov dword [eax + 0x5030], edx
mov edx, 0x14
mov eax, ebx
call fcn_fffc16ce  ; call 0xfffc16ce
cmp byte [ebx + 0x3a], 0
mov dword [ebp - 0x4c], 0
je short loc_fffb4ec5  ; je 0xfffb4ec5
mov eax, ebx
call fcn_fffbbf31  ; call 0xfffbbf31
movzx eax, al
mov dword [ebp - 0x4c], eax
mov eax, dword [ebx + 0x2e0e]
mov edx, dword [ebp - 0x4c]
mov dword [eax + 0x42a0], edx

loc_fffb4ec5:
xor esi, esi
cmp byte [ebx + 0x108f], 0
je short loc_fffb4eea  ; je 0xfffb4eea
lea eax, [ebx + 0x1055]
call fcn_fffbbf31  ; call 0xfffbbf31
movzx esi, al
mov eax, dword [ebx + 0x2e0e]
mov dword [eax + 0x46a0], esi

loc_fffb4eea:
push eax
lea ecx, [ebp - 0x42]
mov edx, 0x64
push 1
mov eax, ebx
and edi, 0xffffffef
push ecx
xor ecx, ecx
push 1
push 1
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
mov dword [ebp - 0x50], eax
mov eax, dword [ebx + 0x2e0e]
mov edx, edi
add esp, 0x20
or edx, 4
mov dword [ebp - 0x54], edi
mov dword [eax + 0x5030], edx
mov eax, ebx
call fcn_fffbbf31  ; call 0xfffbbf31
mov byte [ebp - 0x55], al
lea eax, [ebx + 0x1055]
call fcn_fffbbf31  ; call 0xfffbbf31
push edx
mov edi, eax
lea eax, [ebp - 0x42]
push 1
mov ecx, 1
mov edx, 0x64
push eax
mov eax, ebx
push 1
push 0
push 0
push 0
push 4
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
cmove eax, dword [ebp - 0x50]
cmp byte [ebx + 0x3a], 0
je short loc_fffb4f89  ; je 0xfffb4f89
movzx edx, byte [ebp - 0x55]
mov ecx, dword [ebp - 0x4c]
shl edx, 4
and cl, 0xf
or edx, ecx
mov ecx, dword [ebx + 0x2e0e]
mov dword [ecx + 0x42a0], edx

loc_fffb4f89:
cmp byte [ebx + 0x108f], 0
je short loc_fffb4fae  ; je 0xfffb4fae
mov edx, dword [ebx + 0x2e0e]
mov ecx, esi
and edi, 0xff
and cl, 0xf
shl edi, 4
or edi, ecx
mov dword [edx + 0x46a0], edi

loc_fffb4fae:
mov edx, dword [ebx + 0x2e0e]
mov edi, dword [ebp - 0x54]
or edi, 0x1c
mov dword [edx + 0x5030], edi
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb4fc8:  ; not directly referenced
push ebp
mov ebp, esp
push edi
mov edi, eax
lea eax, [eax + 0xb05]
push esi
mov esi, edx
push ebx
lea esp, [esp - 0x1c]
mov byte [ebp - 0x19], 0
mov dword [ebp - 0x20], eax
jmp short loc_fffb503c  ; jmp 0xfffb503c

loc_fffb4fe5:  ; not directly referenced
imul eax, ebx, 0x32
cmp byte [ebp - 0x19], 0
jne short loc_fffb4fff  ; jne 0xfffb4fff
push esi
lea eax, [edi + eax + 0x2f3]
push dword [ebx*4 + ref_fffcf5b0]  ; push dword [ebx*4 - 0x30a50]
jmp short loc_fffb5015  ; jmp 0xfffb5015

loc_fffb4fff:  ; not directly referenced
push esi
mov edx, dword [ebx*4 + ref_fffcf5b0]  ; mov edx, dword [ebx*4 - 0x30a50]
lea eax, [edi + eax + 0x4b5]
add edx, 0x100
push edx

loc_fffb5015:  ; not directly referenced
push 0x32
mov ecx, ref_fffcedbc  ; mov ecx, 0xfffcedbc
mov edx, dword [ebp - 0x20]
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne short loc_fffb5040  ; jne 0xfffb5040
inc ebx
cmp ebx, 9
jne short loc_fffb4fe5  ; jne 0xfffb4fe5
inc byte [ebp - 0x19]
cmp byte [ebp - 0x19], 2
je short loc_fffb5045  ; je 0xfffb5045

loc_fffb503c:  ; not directly referenced
xor ebx, ebx
jmp short loc_fffb4fe5  ; jmp 0xfffb4fe5

loc_fffb5040:  ; not directly referenced
mov eax, 1

loc_fffb5045:  ; not directly referenced
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb504d:  ; not directly referenced
push ebp
mov edx, 0xdd20
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x2c]
mov edi, dword [ebp + 8]
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
lea edx, [ebp - 0x1c]
lea esi, [edi + 0x2305]
mov eax, esi
call fcn_fffc76c6  ; call 0xfffc76c6
mov edx, dword [edi + 0x2ea9]
cmp dword [ebp - 0x1c], edx
mov eax, 0xd
jne loc_fffb565c  ; jne 0xfffb565c
mov eax, dword [edi + 0x2a9c]
mov dl, byte [edi + 0x2aab]
mov dword [edi + 0x49], eax
mov al, byte [edi + 0x2aac]
test dl, dl
lea ecx, [eax + edx]
mov byte [edi + 0x3a], cl
je short loc_fffb50b3  ; je 0xfffb50b3
mov byte [edi + 0x12], dl
mov dword [edi + 0xa], 1

loc_fffb50b3:  ; not directly referenced
test al, al
je short loc_fffb50c1  ; je 0xfffb50c1
mov byte [edi + 0x2f], al
mov dword [edi + 0x27], 1

loc_fffb50c1:  ; not directly referenced
mov eax, dword [edi + 0x2aa0]
mov dl, byte [edi + 0x2aad]
mov dword [edi + 0x109e], eax
mov al, byte [edi + 0x2aae]
test dl, dl
lea ecx, [eax + edx]
mov byte [edi + 0x108f], cl
je short loc_fffb50f6  ; je 0xfffb50f6
mov byte [edi + 0x1067], dl
mov dword [edi + 0x105f], 1

loc_fffb50f6:  ; not directly referenced
test al, al
je short loc_fffb510a  ; je 0xfffb510a
mov byte [edi + 0x1084], al
mov dword [edi + 0x107c], 1

loc_fffb510a:  ; not directly referenced
mov eax, dword [edi + 0x2e12]
mov dword [edi + 0x2248], eax
mov eax, dword [edi + 0x2e0e]
mov dword [edi + 0x2223], eax
mov eax, dword [edi + 0x2e0a]
mov dword [edi + 0x221f], eax
mov al, byte [edi + 0x2aaa]
cmp al, 9
mov byte [edi + 0x20b5], al
jne short loc_fffb5148  ; jne 0xfffb5148
mov dword [edi + 0x20b1], 1

loc_fffb5148:  ; not directly referenced
mov eax, dword [edi + 0x2e2e]
mov bl, byte [edi + 0x2aa5]
movzx edx, bl
mov dword [edi + 0x20ff], eax
mov eax, dword [edi + 0x2e32]
mov dword [edi + 0x2103], eax
mov al, byte [edi + 0x2e09]
mov byte [edi + 0x20fe], al
movzx eax, byte [edi + 0x2aa4]
call fcn_fffc038a  ; call 0xfffc038a
mov dword [edi + 0x20b6], eax
xor eax, eax
test bl, bl
lea edx, [edi + 0x2a68]
setne al
mov ecx, 0x34
mov dword [edi + 0x20ba], eax
lea eax, [edi + 0x20c2]
mov dword [ebp - 0x2c], edx
call fcn_fffa2408  ; call 0xfffa2408
movzx eax, byte [edi + 0x2aa4]
movzx edx, byte [edi + 0x2aa5]
or eax, 0x80000000
shl edx, 8
or eax, edx
mov edx, dword [edi + 0x2e0e]
mov dword [edx + 0x5e00], eax
jmp short loc_fffb51d9  ; jmp 0xfffb51d9

loc_fffb51d3:  ; not directly referenced
mov eax, dword [eax + 0x5e00]

loc_fffb51d9:  ; not directly referenced
test eax, eax
mov eax, dword [edi + 0x2e0e]
js short loc_fffb51d3  ; js 0xfffb51d3
movzx ecx, byte [edi + 0x2aa4]
mov edx, dword [eax + 0x5e04]
mov ebx, edx
mov eax, 0xe
and ebx, 0xf
cmp ebx, ecx
jne loc_fffb565c  ; jne 0xfffb565c
shr edx, 8
movzx ecx, byte [edi + 0x2aa5]
cmp edx, ecx
jne loc_fffb565c  ; jne 0xfffb565c
push 1
lea ebx, [edi + 0x2e0a]
mov ecx, ref_fffcf4cc  ; mov ecx, 0xfffcf4cc
push 0x5000
mov edx, ebx
lea eax, [edi + 0x2599]
push 0x5f
push 8
call fcn_fffb4cc1  ; call 0xfffb4cc1
push 1
mov ecx, ref_fffcf4ec  ; mov ecx, 0xfffcf4ec
mov edx, ebx
push 0x4000
lea eax, [edi + 0x2305]
push 0x14a
push 0x1d
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x20
mov ecx, ref_fffcf4ec  ; mov ecx, 0xfffcf4ec
push 1
mov edx, ebx
lea eax, [edi + 0x244f]
push 0x4400
push 0x14a
push 0x1d
call fcn_fffb4cc1  ; call 0xfffb4cc1
mov edx, 1
mov eax, esi
call fcn_fffb4fc8  ; call 0xfffb4fc8
push 1
lea eax, [edi + 0x297c]
mov ecx, ref_fffcf56c  ; mov ecx, 0xfffcf56c
push 0xc00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x20
test eax, eax
jne loc_fffb565c  ; jne 0xfffb565c
push 1
lea eax, [edi + 0x299a]
mov ecx, ref_fffcf56c  ; mov ecx, 0xfffcf56c
push 0xd00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb565c  ; jne 0xfffb565c
push 1
lea eax, [edi + 0x29b8]
mov ecx, ref_fffcf564  ; mov ecx, 0xfffcf564
push 0xa00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb565c  ; jne 0xfffb565c
push 1
lea eax, [edi + 0x29d6]
mov ecx, ref_fffcf564  ; mov ecx, 0xfffcf564
push 0xb00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb565c  ; jne 0xfffb565c
push 1
lea eax, [edi + 0x29f4]
mov ecx, ref_fffcf564  ; mov ecx, 0xfffcf564
push 0xe00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb565c  ; jne 0xfffb565c
push 1
lea eax, [edi + 0x2a12]
mov ecx, ref_fffcf564  ; mov ecx, 0xfffcf564
push 0xf00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb565c  ; jne 0xfffb565c
push 1
lea eax, [edi + 0x2a30]
mov ecx, ref_fffcf560  ; mov ecx, 0xfffcf560
push 0x1800
mov edx, ebx
push 0x1c
push 1
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb565c  ; jne 0xfffb565c
push 1
lea eax, [edi + 0x2a4c]
mov ecx, ref_fffcf560  ; mov ecx, 0xfffcf560
push 0x1900
mov edx, ebx
push 0x1c
push 1
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb565c  ; jne 0xfffb565c
mov eax, dword [edi + 0x2e0a]
mov edx, dword [ebp - 0x2c]
call fcn_fffbeabd  ; call 0xfffbeabd
mov ecx, dword [edi + 0x2223]
mov eax, dword [ecx + 0x5004]
movzx edx, al
shl edx, 8
test eax, 0x10000
je short loc_fffb53f9  ; je 0xfffb53f9
and eax, 0xff00
mov dword [edi + 0x1d], edx
mov dword [edi], eax
jmp short loc_fffb5403  ; jmp 0xfffb5403

loc_fffb53f9:  ; not directly referenced
and eax, 0xff00
mov dword [edi], edx
mov dword [edi + 0x1d], eax

loc_fffb5403:  ; not directly referenced
mov eax, dword [ecx + 0x5008]
movzx edx, al
shl edx, 8
test eax, 0x10000
je short loc_fffb542d  ; je 0xfffb542d
and eax, 0xff00
mov dword [edi + 0x1072], edx
mov dword [edi + 0x1055], eax

loc_fffb5427:  ; not directly referenced
mov eax, edi
xor ecx, ecx
jmp short loc_fffb5440  ; jmp 0xfffb5440

loc_fffb542d:  ; not directly referenced
and eax, 0xff00
mov dword [edi + 0x1055], edx
mov dword [edi + 0x1072], eax
jmp short loc_fffb5427  ; jmp 0xfffb5427

loc_fffb5440:  ; not directly referenced
cmp byte [eax + 0x3a], 0
jne loc_fffb5567  ; jne 0xfffb5567
jmp short loc_fffb5451  ; jmp 0xfffb5451

loc_fffb544c:  ; not directly referenced
mov dl, 0x10

loc_fffb544e:  ; not directly referenced
mov byte [eax + 0x45], dl

loc_fffb5451:  ; not directly referenced
inc ecx
add eax, 0x1055
cmp cl, 2
jne short loc_fffb5440  ; jne 0xfffb5440
mov eax, dword [edi + 0x221f]
mov eax, dword [eax + 0xe4]
and eax, 0x180000
shr eax, 0x13
mov word [edi + 0x20f6], ax
mov al, byte [edi + 0x2aaf]
mov byte [edi + 0x212a], al
mov al, byte [edi + 0x2ab0]
mov byte [edi + 0x2170], al
mov al, byte [edi + 0x2ab1]
mov byte [edi + 0x21b6], al
mov al, byte [edi + 0x2ab2]
mov byte [edi + 0x21fc], al
mov eax, dword [edi + 0x2dc9]
mov dword [edi + 0x15], eax
mov eax, dword [edi + 0x2dcd]
mov dword [edi + 0x32], eax
mov eax, dword [edi + 0x2dd9]
mov dword [edi + 0x106a], eax
mov eax, dword [edi + 0x2ddd]
mov dword [edi + 0x1087], eax
mov eax, dword [edi + 0x2de9]
mov dword [edi + 4], eax
mov eax, dword [edi + 0x2ded]
mov dword [edi + 0x21], eax
mov eax, dword [edi + 0x2df9]
mov dword [edi + 0x1059], eax
mov eax, dword [edi + 0x2dfd]
mov dword [edi + 0x1076], eax
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
test eax, eax
jne loc_fffb565c  ; jne 0xfffb565c
mov eax, edi
call fcn_fffbc6ee  ; call 0xfffbc6ee
cmp dword [edi + 0x225c], 0
jne short loc_fffb554a  ; jne 0xfffb554a
mov esi, 0x8000f8a0
mov edx, 0xcf8
mov eax, esi
out dx, eax
mov ebx, 0xcfc
mov edx, ebx
in eax, dx
mov ecx, eax
mov dl, 0xf8
mov eax, esi
out dx, eax
and ecx, 0xfeff0000
mov edx, ebx
mov eax, ecx
out dx, eax
mov eax, edi
call fcn_fffb4df0  ; call 0xfffb4df0
jmp short loc_fffb5556  ; jmp 0xfffb5556

loc_fffb554a:  ; not directly referenced
sub esp, 0xc
push edi
call fcn_fffc7efc  ; call 0xfffc7efc
add esp, 0x10

loc_fffb5556:  ; not directly referenced
mov edx, dword [edi + 0x20f2]
mov dword [edi + 0x2288], edx
jmp near loc_fffb565c  ; jmp 0xfffb565c

loc_fffb5567:  ; not directly referenced
cmp cl, 1
mov ebx, dword [edi + 0x2223]
sbb edx, edx
and edx, 0xfffffc00
lea edx, [ebx + edx + 0x4400]
mov edx, dword [edx]
mov esi, edx
mov dword [ebp - 0x2c], edx
and esi, 0xf
mov edx, esi
mov esi, dword [ebp - 0x2c]
and esi, 0xf0
mov byte [eax + 0x3e], dl
shr esi, 4
mov edx, esi
mov esi, dword [ebp - 0x2c]
and esi, 0xf00
mov byte [eax + 0x3f], dl
shr esi, 8
mov edx, esi
mov esi, dword [ebp - 0x2c]
and esi, 0xf000
mov byte [eax + 0x3b], dl
shr esi, 0xc
mov edx, esi
mov byte [eax + 0x3c], dl
mov edx, dword [ebp - 0x2c]
shr edx, 0x10
cmp cl, 1
mov byte [eax + 0x40], dl
sbb edx, edx
and edx, 0xfffffc00
lea edx, [ebx + edx + 0x4698]
mov edx, dword [edx]
shr edx, 0x10
and edx, 0xff
cmp cl, 1
mov word [eax + 0x47], dx
sbb edx, edx
and edx, 0xfffffc00
lea edx, [ebx + edx + 0x4404]
mov edx, dword [edx]
mov ebx, edx
and ebx, 0x1f000000
shr ebx, 0x18
mov byte [eax + 0x3d], bl
mov ebx, edx
and ebx, 0xf0
shr ebx, 4
mov byte [eax + 0x42], bl
mov ebx, edx
and ebx, 0xf000
shr ebx, 0xc
mov byte [eax + 0x41], bl
mov ebx, edx
and ebx, 0xf
mov byte [eax + 0x43], bl
mov ebx, edx
shr ebx, 0x10
mov byte [eax + 0x44], bl
mov ebx, edx
shr edx, 0x1e
and ebx, 0x20000000
shr ebx, 0x1d
mov byte [eax + 0x46], bl
cmp byte [edi + 0x2e49], 0x10
jne loc_fffb544e  ; jne 0xfffb544e
jmp near loc_fffb544c  ; jmp 0xfffb544c

loc_fffb565c:  ; not directly referenced
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb5664:
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
push ebx
lea esp, [esp - 0x2c]
mov al, byte [ebp + 8]
mov byte [ebp - 0x1c], al
mov dword [ebp - 0x2c], edx
movzx eax, byte [ebp + 0xc]
mov byte [ebp - 0x19], cl
mov dword [ebp - 0x20], eax
mov byte [ebp - 0x1a], 0
imul eax, eax, 0x36
mov dword [ebp - 0x28], eax
jmp near loc_fffb5843  ; jmp 0xfffb5843

loc_fffb5692:
cmp dword [ebp - 0x2c], 1
je loc_fffb5731  ; je 0xfffb5731
jb short loc_fffb56aa  ; jb 0xfffb56aa
cmp dword [ebp - 0x2c], 2
jne loc_fffb5773  ; jne 0xfffb5773
jmp short loc_fffb56ef  ; jmp 0xfffb56ef

loc_fffb56aa:
movzx edx, byte [ebp - 0x1c]
mov ebx, dword [ebp - 0x28]
imul eax, edx, 0xd8
imul edx, edx, 0x90
movzx ecx, byte [ebp - 0x1a]
lea ecx, [ecx + ecx*2]
add ebx, ecx
add ebx, eax
add ebx, esi
movzx eax, byte [ebx + 0x2ae7]
mov bl, byte [ebx + 0x2b02]
mov byte [ebp - 0x1b], bl
imul ebx, dword [ebp - 0x20], 0x24
add ecx, ebx
add edx, ecx
movzx ebx, byte [esi + edx + 0x2c97]
jmp near loc_fffb577b  ; jmp 0xfffb577b

loc_fffb56ef:
movzx edx, byte [ebp - 0x1c]
mov ebx, dword [ebp - 0x28]
imul eax, edx, 0xd8
imul edx, edx, 0x90
movzx ecx, byte [ebp - 0x1a]
lea ecx, [ecx + ecx*2]
add ebx, ecx
add ebx, eax
add ebx, esi
movzx eax, byte [ebx + 0x2ae9]
mov bl, byte [ebx + 0x2b04]
mov byte [ebp - 0x1b], bl
imul ebx, dword [ebp - 0x20], 0x24
add ecx, ebx
add edx, ecx
movzx ebx, byte [esi + edx + 0x2c99]
jmp short loc_fffb577b  ; jmp 0xfffb577b

loc_fffb5731:
movzx edx, byte [ebp - 0x1c]
mov ebx, dword [ebp - 0x28]
imul eax, edx, 0xd8
imul edx, edx, 0x90
movzx ecx, byte [ebp - 0x1a]
lea ecx, [ecx + ecx*2]
add ebx, ecx
add ebx, eax
add ebx, esi
movzx eax, byte [ebx + 0x2ae8]
mov bl, byte [ebx + 0x2b03]
mov byte [ebp - 0x1b], bl
imul ebx, dword [ebp - 0x20], 0x24
add ecx, ebx
add edx, ecx
movzx ebx, byte [esi + edx + 0x2c98]
jmp short loc_fffb577b  ; jmp 0xfffb577b

loc_fffb5773:
xor ebx, ebx
mov byte [ebp - 0x1b], 0
xor eax, eax

loc_fffb577b:
cmp byte [ebp - 0x19], 0
jns short loc_fffb5790  ; jns 0xfffb5790
movsx ecx, byte [ebp - 0x19]
xor edx, edx
movzx edi, al
neg ecx
cmp edi, ecx
jl short loc_fffb579e  ; jl 0xfffb579e

loc_fffb5790:
movsx edx, byte [ebp - 0x19]
mov ecx, 0x48
add eax, edx
cdq
idiv ecx

loc_fffb579e:
movzx edi, byte [ebp - 0x1a]
mov ecx, dword [ebp - 0x20]
push edi
movzx edx, dl
push 7
movzx eax, byte [ebp - 0x1c]
push 0x14
mov dword [ebp - 0x24], eax
push edx
mov edx, eax
mov eax, esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10
cmp byte [ebp - 0x19], 0
jns short loc_fffb57d7  ; jns 0xfffb57d7
movsx ecx, byte [ebp - 0x19]
xor edx, edx
movzx eax, byte [ebp - 0x1b]
neg ecx
cmp eax, ecx
jl short loc_fffb57e9  ; jl 0xfffb57e9

loc_fffb57d7:
movzx edx, byte [ebp - 0x1b]
mov ecx, 0x48
movsx eax, byte [ebp - 0x19]
add eax, edx
cdq
idiv ecx

loc_fffb57e9:
push edi
movzx edx, dl
mov ecx, dword [ebp - 0x20]
push 7
mov eax, esi
push 8
push edx
mov edx, dword [ebp - 0x24]
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10
cmp byte [ebp - 0x19], 0
jns short loc_fffb5817  ; jns 0xfffb5817
movsx ecx, byte [ebp - 0x19]
xor edx, edx
movzx eax, bl
neg ecx
cmp eax, ecx
jl short loc_fffb5825  ; jl 0xfffb5825

loc_fffb5817:
movsx eax, byte [ebp - 0x19]
mov ecx, 0x80
add eax, ebx
cdq
idiv ecx

loc_fffb5825:
push ecx
movzx eax, byte [ebp - 0x1a]
push ecx
movzx edx, dl
mov ecx, dword [ebp - 0x20]
push eax
mov eax, esi
push edx
mov edx, dword [ebp - 0x24]
call fcn_fffaf80e  ; call 0xfffaf80e
inc byte [ebp - 0x1a]
add esp, 0x10

loc_fffb5843:
mov al, byte [ebp - 0x1a]
cmp al, byte [esi + 0x20b5]
jb loc_fffb5692  ; jb 0xfffb5692
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb585a:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0xc]
mov eax, dword [eax + 0x221f]
mov edx, dword [eax + 0xe4]
cmp dword [ebx + 0x2ab3], edx
jne short loc_fffb58ef  ; jne 0xfffb58ef
mov edx, dword [eax + 0xe8]
xor eax, eax
cmp dword [ebx + 0x2ab7], edx
jne short loc_fffb58f1  ; jne 0xfffb58f1
mov dword [ebp - 0x18], 0
jmp short loc_fffb58d2  ; jmp 0xfffb58d2

loc_fffb5893:
imul eax, ecx, 0x46
mov edx, dword [ebp - 0x14]
lea eax, [eax + edx + 0x2120]
lea esi, [ebx + eax + 0x15]
mov eax, dword [ebp - 0x10]
add eax, ecx
imul eax, eax, 0xb
lea edi, [ebx + eax + 0x2abb]
xor eax, eax

loc_fffb58b5:
mov dl, byte [edi + eax]
cmp byte [esi + eax], dl
jne short loc_fffb58ef  ; jne 0xfffb58ef
inc eax
cmp eax, 0xb
jne short loc_fffb58b5  ; jne 0xfffb58b5
inc ecx
cmp ecx, 2
jne short loc_fffb5893  ; jne 0xfffb5893
inc dword [ebp - 0x18]
cmp dword [ebp - 0x18], 2
je short loc_fffb58e8  ; je 0xfffb58e8

loc_fffb58d2:
imul eax, dword [ebp - 0x18], 0x8c
mov esi, dword [ebp - 0x18]
add esi, esi
xor ecx, ecx
mov dword [ebp - 0x10], esi
mov dword [ebp - 0x14], eax
jmp short loc_fffb5893  ; jmp 0xfffb5893

loc_fffb58e8:
mov eax, 1
jmp short loc_fffb58f1  ; jmp 0xfffb58f1

loc_fffb58ef:
xor eax, eax

loc_fffb58f1:
lea esp, [esp + 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb58fa:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
lea esp, [esp - 0x1c]
mov eax, dword [eax + 0x2a9c]
mov dl, byte [edi + 0x2aab]
mov dword [edi + 0x49], eax
mov al, byte [edi + 0x2aac]
test dl, dl
lea ecx, [eax + edx]
mov byte [edi + 0x3a], cl
je short loc_fffb592f  ; je 0xfffb592f
mov byte [edi + 0x12], dl
mov dword [edi + 0xa], 1

loc_fffb592f:
test al, al
je short loc_fffb593d  ; je 0xfffb593d
mov byte [edi + 0x2f], al
mov dword [edi + 0x27], 1

loc_fffb593d:
mov eax, dword [edi + 0x2aa0]
mov dl, byte [edi + 0x2aad]
mov dword [edi + 0x109e], eax
mov al, byte [edi + 0x2aae]
test dl, dl
lea ecx, [eax + edx]
mov byte [edi + 0x108f], cl
je short loc_fffb5972  ; je 0xfffb5972
mov byte [edi + 0x1067], dl
mov dword [edi + 0x105f], 1

loc_fffb5972:
test al, al
je short loc_fffb5986  ; je 0xfffb5986
mov byte [edi + 0x1084], al
mov dword [edi + 0x107c], 1

loc_fffb5986:
mov eax, dword [edi + 0x2e12]
mov dword [edi + 0x2248], eax
mov eax, dword [edi + 0x2e0e]
mov dword [edi + 0x2223], eax
mov eax, dword [edi + 0x2e0a]
mov dword [edi + 0x221f], eax
mov al, byte [edi + 0x2aaa]
cmp al, 9
mov byte [edi + 0x20b5], al
jne short loc_fffb59c4  ; jne 0xfffb59c4
mov dword [edi + 0x20b1], 1

loc_fffb59c4:
mov eax, dword [edi + 0x2e2e]
mov dl, byte [edi + 0x2aa4]
mov dword [edi + 0x20ff], eax
sub edx, 3
mov eax, dword [edi + 0x2e32]
mov dword [edi + 0x2103], eax
xor eax, eax
cmp dl, 5
ja short loc_fffb59f7  ; ja 0xfffb59f7
movzx edx, dl
movzx eax, word [edx + edx + ref_fffcf5a4]  ; movzx eax, word [edx + edx - 0x30a5c]

loc_fffb59f7:
lea edx, [edi + 0x2a68]
mov dword [edi + 0x20b6], eax
mov ecx, 0x34
lea eax, [edi + 0x20c2]
mov dword [ebp - 0x1c], edx
call fcn_fffa2408  ; call 0xfffa2408
movzx eax, byte [edi + 0x2aa4]
mov edx, dword [edi + 0x2e0e]
or eax, 0x80000000
mov dword [edx + 0x5e00], eax
jmp short loc_fffb5a36  ; jmp 0xfffb5a36

loc_fffb5a30:
mov eax, dword [eax + 0x5e00]

loc_fffb5a36:
test eax, eax
mov eax, dword [edi + 0x2e0e]
js short loc_fffb5a30  ; js 0xfffb5a30
movzx edx, byte [edi + 0x2aa4]
mov ecx, dword [eax + 0x5e04]
cmp ecx, edx
mov eax, 0xe
jne loc_fffb5ea1  ; jne 0xfffb5ea1
push 1
lea ebx, [edi + 0x2e0a]
mov ecx, ref_fffc99b8  ; mov ecx, 0xfffc99b8
push 0x5000
mov edx, ebx
lea eax, [edi + 0x2599]
push 0x5f
lea esi, [edi + 0x2305]
push 8
call fcn_fffb4cc1  ; call 0xfffb4cc1
push 1
mov ecx, ref_fffc99d8  ; mov ecx, 0xfffc99d8
mov edx, ebx
push 0x4000
mov eax, esi
push 0x14a
push 0x1d
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x20
mov ecx, ref_fffc99d8  ; mov ecx, 0xfffc99d8
push 1
mov edx, ebx
lea eax, [edi + 0x244f]
push 0x4400
push 0x14a
push 0x1d
call fcn_fffb4cc1  ; call 0xfffb4cc1
mov edx, 1
mov eax, esi
call fcn_fffb4d47  ; call 0xfffb4d47
push 1
lea eax, [edi + 0x297c]
mov ecx, ref_fffc9a58  ; mov ecx, 0xfffc9a58
push 0xc00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x20
test eax, eax
jne loc_fffb5ea1  ; jne 0xfffb5ea1
push 1
lea eax, [edi + 0x299a]
mov ecx, ref_fffc9a58  ; mov ecx, 0xfffc9a58
push 0xd00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb5ea1  ; jne 0xfffb5ea1
push 1
lea eax, [edi + 0x29b8]
mov ecx, ref_fffc9a50  ; mov ecx, 0xfffc9a50
push 0xa00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb5ea1  ; jne 0xfffb5ea1
push 1
lea eax, [edi + 0x29d6]
mov ecx, ref_fffc9a50  ; mov ecx, 0xfffc9a50
push 0xb00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb5ea1  ; jne 0xfffb5ea1
push 1
lea eax, [edi + 0x29f4]
mov ecx, ref_fffc9a50  ; mov ecx, 0xfffc9a50
push 0xe00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb5ea1  ; jne 0xfffb5ea1
push 1
lea eax, [edi + 0x2a12]
mov ecx, ref_fffc9a50  ; mov ecx, 0xfffc9a50
push 0xf00
mov edx, ebx
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb5ea1  ; jne 0xfffb5ea1
push 1
lea eax, [edi + 0x2a30]
mov ecx, ref_fffc9a4c  ; mov ecx, 0xfffc9a4c
push 0x1800
mov edx, ebx
push 0x1c
push 1
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb5ea1  ; jne 0xfffb5ea1
push 1
lea eax, [edi + 0x2a4c]
mov ecx, ref_fffc9a4c  ; mov ecx, 0xfffc9a4c
push 0x1900
mov edx, ebx
push 0x1c
push 1
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
jne loc_fffb5ea1  ; jne 0xfffb5ea1
mov edx, dword [edi + 0x2e0e]
mov eax, dword [edx + 0x5f08]
or ah, 1
mov dword [edx + 0x5f08], eax
mov edx, dword [ebp - 0x1c]
mov eax, dword [edi + 0x2e0a]
call fcn_fffbeabd  ; call 0xfffbeabd
mov ecx, dword [edi + 0x2223]
mov eax, dword [ecx + 0x5004]
movzx edx, al
shl edx, 8
test eax, 0x10000
je short loc_fffb5c56  ; je 0xfffb5c56
and eax, 0xff00
mov dword [edi + 0x1d], edx
mov dword [edi], eax
jmp short loc_fffb5c60  ; jmp 0xfffb5c60

loc_fffb5c56:
and eax, 0xff00
mov dword [edi], edx
mov dword [edi + 0x1d], eax

loc_fffb5c60:
mov eax, dword [ecx + 0x5008]
movzx edx, al
shl edx, 8
test eax, 0x10000
je short loc_fffb5c8a  ; je 0xfffb5c8a
and eax, 0xff00
mov dword [edi + 0x1072], edx
mov dword [edi + 0x1055], eax

loc_fffb5c84:
mov eax, edi
xor edx, edx
jmp short loc_fffb5c9d  ; jmp 0xfffb5c9d

loc_fffb5c8a:
and eax, 0xff00
mov dword [edi + 0x1055], edx
mov dword [edi + 0x1072], eax
jmp short loc_fffb5c84  ; jmp 0xfffb5c84

loc_fffb5c9d:
cmp byte [eax + 0x3a], 0
jne loc_fffb5dba  ; jne 0xfffb5dba
jmp short loc_fffb5cae  ; jmp 0xfffb5cae

loc_fffb5ca9:
mov cl, 0x10

loc_fffb5cab:
mov byte [eax + 0x45], cl

loc_fffb5cae:
inc edx
add eax, 0x1055
cmp dl, 2
jne short loc_fffb5c9d  ; jne 0xfffb5c9d
mov eax, dword [edi + 0x221f]
mov eax, dword [eax + 0xe4]
and eax, 0x180000
shr eax, 0x13
mov word [edi + 0x20f6], ax
mov al, byte [edi + 0x2aaf]
mov byte [edi + 0x212a], al
mov al, byte [edi + 0x2ab0]
mov byte [edi + 0x2170], al
mov al, byte [edi + 0x2ab1]
mov byte [edi + 0x21b6], al
mov al, byte [edi + 0x2ab2]
mov byte [edi + 0x21fc], al
mov eax, dword [edi + 0x2dc9]
mov dword [edi + 0x15], eax
mov eax, dword [edi + 0x2dcd]
mov dword [edi + 0x32], eax
mov eax, dword [edi + 0x2dd9]
mov dword [edi + 0x106a], eax
mov eax, dword [edi + 0x2ddd]
mov dword [edi + 0x1087], eax
mov eax, dword [edi + 0x2de9]
mov dword [edi + 4], eax
mov eax, dword [edi + 0x2ded]
mov dword [edi + 0x21], eax
mov eax, dword [edi + 0x2df9]
mov dword [edi + 0x1059], eax
mov eax, dword [edi + 0x2dfd]
mov dword [edi + 0x1076], eax
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
test eax, eax
jne loc_fffb5ea1  ; jne 0xfffb5ea1
mov eax, edi
call fcn_fffbc6ee  ; call 0xfffbc6ee
cmp dword [edi + 0x225c], 0
jne short loc_fffb5dac  ; jne 0xfffb5dac
mov esi, 0x8000f8a0
mov edx, 0xcf8
mov eax, esi
out dx, eax
mov ebx, 0xcfc
mov edx, ebx
in eax, dx
mov ecx, eax
mov dl, 0xf8
mov eax, esi
out dx, eax
and ecx, 0xfeff0000
mov edx, ebx
mov eax, ecx
out dx, eax
lea esp, [ebp - 0xc]
mov eax, edi
pop ebx
pop esi
pop edi
pop ebp
jmp near fcn_fffb4df0  ; jmp 0xfffb4df0

loc_fffb5dac:
lea esp, [ebp - 0xc]
mov eax, edi
pop ebx
pop esi
pop edi
pop ebp
jmp near fcn_fffbc722  ; jmp 0xfffbc722

loc_fffb5dba:
cmp dl, 1
mov ebx, dword [edi + 0x2223]
sbb ecx, ecx
and ecx, 0xfffffc00
lea ecx, [ebx + ecx + 0x4400]
mov ecx, dword [ecx]
mov esi, ecx
mov dword [ebp - 0x1c], ecx
and esi, 0xf
mov ecx, esi
mov esi, dword [ebp - 0x1c]
and esi, 0xf0
mov byte [eax + 0x3e], cl
shr esi, 4
mov ecx, esi
mov esi, dword [ebp - 0x1c]
and esi, 0xf00
mov byte [eax + 0x3f], cl
shr esi, 8
mov ecx, esi
mov esi, dword [ebp - 0x1c]
and esi, 0xf000
mov byte [eax + 0x3b], cl
shr esi, 0xc
mov ecx, esi
mov byte [eax + 0x3c], cl
mov ecx, dword [ebp - 0x1c]
shr ecx, 0x10
cmp dl, 1
mov byte [eax + 0x40], cl
sbb ecx, ecx
and ecx, 0xfffffc00
lea ecx, [ebx + ecx + 0x4698]
mov ecx, dword [ecx]
shr ecx, 0x10
and ecx, 0xff
cmp dl, 1
mov word [eax + 0x47], cx
sbb ecx, ecx
and ecx, 0xfffffc00
lea ecx, [ebx + ecx + 0x4404]
mov ecx, dword [ecx]
mov ebx, ecx
and ebx, 0x1f000000
shr ebx, 0x18
mov byte [eax + 0x3d], bl
mov ebx, ecx
and ebx, 0xf0
shr ebx, 4
mov byte [eax + 0x42], bl
mov ebx, ecx
and ebx, 0xf000
shr ebx, 0xc
mov byte [eax + 0x41], bl
mov ebx, ecx
and ebx, 0xf
mov byte [eax + 0x43], bl
mov ebx, ecx
shr ebx, 0x10
shr ecx, 0x1e
mov byte [eax + 0x44], bl
cmp byte [edi + 0x2e49], 0x10
jne loc_fffb5cab  ; jne 0xfffb5cab
jmp near loc_fffb5ca9  ; jmp 0xfffb5ca9

loc_fffb5ea1:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffb5ea9:
db 0x00
db 0x00
db 0x00

fcn_fffb5eac:  ; not directly referenced
push ebp
mov edx, 4
mov eax, ref_fffcfc20  ; mov eax, 0xfffcfc20
mov ebp, esp
lea esp, [esp - 8]
call fcn_fffa1df9  ; call 0xfffa1df9
test eax, eax
je short loc_fffb5ee3  ; je 0xfffb5ee3
mov cl, byte [eax + 0x2f]
test cl, cl
je short loc_fffb5ee3  ; je 0xfffb5ee3
mov dx, word [0xf00f8040]
and edx, 0xffffff80
add edx, 0x30
in eax, dx
or eax, 0x21
out dx, eax
mov al, cl
out 0xb2, al

loc_fffb5ee3:  ; not directly referenced
xor eax, eax
leave
ret

fcn_fffb5ee7:
shl edx, 0xf
shl eax, 0x14
shl ecx, 0xc
add eax, edx
add ecx, eax
push ebp
mov ebp, esp
mov edx, dword [ecx - 0xffff3cc]
mov eax, dword [ecx - 0xffffe30]
or eax, edx
mov edx, dword [ecx - 0xffffe3c]
or eax, edx
je short loc_fffb5f47  ; je 0xfffb5f47
mov dx, word [ecx - 0xfffff56]
mov word [ecx - 0xfffff56], 0xffff
mov dword [ecx - 0xffff264], 0xffff
mov dword [ecx - 0xffffe30], 0xffff
mov dword [ecx - 0xffffe3c], 0xffffffff
mov dword [ecx - 0xffff3cc], 0xffffffff

loc_fffb5f47:
mov dx, word [ecx - 0xfffff4e]
and edx, 0xf
cmp dx, 3
mov edx, 1
pop ebp
cmovne eax, edx
ret

fcn_fffb5f5f:
push ebp
shl edx, 0xf
shl eax, 0x14
mov ebp, esp
push edi
add eax, edx
push esi
push ebx
mov bl, cl
shl ecx, 0xc
lea esp, [esp - 8]
add ecx, eax
mov esi, dword [ebp + 0xc]
movzx edi, byte [ebp + 8]
lea eax, [ecx - 0xffff1f4]
mov dword [ebp - 0x14], eax
mov eax, edi
shl eax, 5
add eax, dword [ebp - 0x14]
mov eax, dword [eax]
shr eax, 0x10
and eax, 0xf
mov dword [ebp - 0x10], eax
lea eax, [edi + edi + 1]
mov edx, dword [ebp - 0x10]
shl eax, 4
add eax, dword [ebp - 0x14]
mov eax, dword [eax]
shr eax, 0x10
and eax, 0xf
or edx, eax
je loc_fffb6056  ; je 0xfffb6056
test esi, esi
mov dx, word [ecx - 0xfffff56]
mov word [ecx - 0xfffff56], 0xffff
mov dword [ecx - 0xffff264], 0xffff
mov dword [ecx - 0xffffe30], 0xffff
mov dword [ecx - 0xffffe3c], 0xffffffff
mov dword [ecx - 0xffff3cc], 0xffffffff
je short loc_fffb5ffb  ; je 0xfffb5ffb
cmp esi, 2
jne short loc_fffb6022  ; jne 0xfffb6022
jmp short loc_fffb6015  ; jmp 0xfffb6015

loc_fffb5ffb:
test bl, bl
mov esi, 4
je short loc_fffb6027  ; je 0xfffb6027
cmp bl, 1
mov esi, 2
je short loc_fffb6027  ; je 0xfffb6027
cmp bl, 2

loc_fffb6011:
je short loc_fffb6027  ; je 0xfffb6027
jmp short loc_fffb6022  ; jmp 0xfffb6022

loc_fffb6015:
test bl, bl
mov esi, 4
je short loc_fffb6027  ; je 0xfffb6027
dec bl
jmp short loc_fffb6011  ; jmp 0xfffb6011

loc_fffb6022:
mov esi, 8

loc_fffb6027:
xor edx, edx

loc_fffb6029:
mov edi, edx
shl edi, 5
add edi, dword [ebp - 0x14]
mov ebx, dword [edi]
or ebx, 0xf0000
mov dword [edi], ebx
lea edi, [edx + edx + 1]
inc edx
shl edi, 4
add edi, dword [ebp - 0x14]
mov ebx, dword [edi]
or ebx, 0xf0000
mov dword [edi], ebx
mov ebx, esi
cmp bl, dl
ja short loc_fffb6029  ; ja 0xfffb6029

loc_fffb6056:
mov dx, word [ecx - 0xfffff4e]
and edx, 0xf
cmp dx, 3
mov edx, 1
cmovne eax, edx
or eax, dword [ebp - 0x10]
pop edx
pop ecx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb6076:
push ebp
shl edx, 0xb
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 8]
mov dword [ebp - 0x14], eax
mov al, byte [ebp + 8]
mov dword [ebp - 0x10], ecx
movzx esi, byte [ebp + 8]
add eax, eax
movzx eax, al
mov edi, esi
lea ecx, [eax + 0xa0]
add eax, 0xa1
shl eax, 4
add esi, 0x48
shl ecx, 4
shl edi, 5
shl esi, 5
shl dword [ebp - 0x10], 0xa
mov ebx, dword [ecx - 0xfff8000]
and ebx, 0xffefffff
mov dword [ecx - 0xfff8000], ebx
mov ebx, dword [eax - 0xfff8000]
and ebx, 0xffefffff
mov dword [eax - 0xfff8000], ebx
mov ebx, dword [edi - 0xfff76f4]
and ebx, 0xfffe07ff
or ebx, edx
mov dword [edi - 0xfff76f4], ebx
mov edx, dword [esi - 0xfff8000]
and edx, 0xfffc03ff
or edx, dword [ebp - 0x10]
cmp dword [ebp - 0x14], 0
mov dword [esi - 0xfff8000], edx
je short loc_fffb612c  ; je 0xfffb612c
mov edx, dword [ecx - 0xfff8000]
or edx, 0x100000
mov dword [ecx - 0xfff8000], edx
mov edx, dword [eax - 0xfff8000]
or edx, 0x100000
mov dword [eax - 0xfff8000], edx

loc_fffb612c:
pop esi
pop edi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb6133:
push ebp
mov ebp, esp
push edi
mov edi, ecx
shr edi, 1
shl edi, 5
add edi, 0x91c
cmp byte [ebp + 0x10], 1
push esi
mov esi, ecx
sbb ecx, ecx
and ecx, 0xc0000000
and esi, 1
add ecx, 0x70000000
cmp esi, 1
push ebx
sbb esi, esi
mov ebx, dword [ebp + 8]
and esi, 0xfff80000
and ebx, 0x3f
add esi, 0x100000
add eax, edi
shl ebx, 0x15
or esi, ecx
mov ecx, dword [ebp + 0xc]
add ecx, ecx
and ecx, 0x7fff
or ecx, ebx
or ecx, esi
test edx, edx
je short loc_fffb6198  ; je 0xfffb6198
shl edx, 0xf
lea eax, [edi + edx - 0x10000000]

loc_fffb6198:
mov dword [eax], ecx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb619f:
push ebp
mov ebp, esp
push edi
mov edi, edx
push esi
push ebx
lea esp, [esp - 0x44]
mov dword [ebp - 0x30], eax
mov eax, dword [eax + 0xd]
mov bl, byte [ebp + 8]
mov dword [ebp - 0x20], 0x10
mov dword [ebp - 0x2c], ecx
mov byte [ebp - 0xe], bl
mov bl, byte [ebp + 0xc]
mov byte [ebp - 0x10], bl
cmp byte [eax + 4], 1
mov eax, 4
sete byte [ebp - 0x48]
dec ecx
cmove eax, dword [ebp - 0x20]
mov dword [ebp - 0x20], eax
shr eax, 1
cmp byte [ebp - 0xe], 8
mov dword [ebp - 0x18], eax
ja short loc_fffb620f  ; ja 0xfffb620f

loc_fffb61e7:
mov eax, dword [ebp - 0x2c]
lea ebx, [edi + 0xa00]
shl eax, 0xf
mov dword [ebp - 0x28], ebx
mov dword [ebp - 0x14], eax
sub eax, 0xffff5fc
mov dword [ebp - 0x4c], eax
mov eax, dword [ebp - 0x14]
sub eax, 0xffff600
mov edx, ebx
xor ecx, ecx
jmp short loc_fffb624d  ; jmp 0xfffb624d

loc_fffb620f:
mov esi, dword [ebp - 0x2c]
lea eax, [edx + 0x914]
shl esi, 0xf
xor edx, edx

loc_fffb621d:
test edi, edi
lea ebx, [eax + esi]
je short loc_fffb6230  ; je 0xfffb6230
mov ecx, dword [eax]
or ecx, 0x80000000
mov dword [eax], ecx
jmp short loc_fffb6242  ; jmp 0xfffb6242

loc_fffb6230:
mov ecx, dword [ebx - 0x10000000]
or ecx, 0x80000000
mov dword [ebx - 0x10000000], ecx

loc_fffb6242:
inc edx
add eax, 0x20
cmp edx, dword [ebp - 0x18]
jb short loc_fffb621d  ; jb 0xfffb621d
jmp short loc_fffb61e7  ; jmp 0xfffb61e7

loc_fffb624d:
test edi, edi
je short loc_fffb6266  ; je 0xfffb6266
mov ebx, dword [edx]
and ebx, 0xf3ffffff
mov dword [edx], ebx
mov ebx, dword [edx + 4]
or bh, 8
mov dword [edx + 4], ebx
jmp short loc_fffb6279  ; jmp 0xfffb6279

loc_fffb6266:
mov ebx, dword [eax]
and ebx, 0xf3ffffff
mov dword [eax], ebx
mov ebx, dword [eax + 4]
or bh, 8
mov dword [eax + 4], ebx

loc_fffb6279:
inc ecx
add edx, 0x10
add eax, 0x10
cmp ecx, dword [ebp - 0x20]
jb short loc_fffb624d  ; jb 0xfffb624d
test edi, edi
je short loc_fffb629f  ; je 0xfffb629f
mov eax, dword [edi + 0xc30]
and eax, 0xfffffff
or eax, 0x40000000
mov dword [edi + 0xc30], eax

loc_fffb629f:
cmp dword [ebp - 0x2c], 1
sete byte [ebp - 0xf]
cmp byte [ebp - 0xe], 3
mov bl, byte [ebp - 0xf]
seta byte [ebp - 0x35]
test byte [ebp - 0x35], bl
jne short loc_fffb62d4  ; jne 0xfffb62d4

loc_fffb62b7:
mov ebx, dword [ebp - 0x14]
lea esi, [edi + 0x904]
sub ebx, 0xffff6fc
mov dword [ebp - 0x1c], esi
mov dword [ebp - 0x24], ebx
mov eax, ebx
mov edx, esi
xor ecx, ecx
jmp short loc_fffb62f0  ; jmp 0xfffb62f0

loc_fffb62d4:
mov edx, 0xf0008700
xor ecx, ecx

loc_fffb62db:
mov eax, dword [edx]
inc ecx
and ah, 0xe3
or ah, 0x10
mov dword [edx], eax
add edx, 0x20
cmp ecx, dword [ebp - 0x18]
jb short loc_fffb62db  ; jb 0xfffb62db
jmp short loc_fffb62b7  ; jmp 0xfffb62b7

loc_fffb62f0:
test edi, edi
je short loc_fffb630c  ; je 0xfffb630c
mov ebx, dword [edx]
and ebx, 0xfe3fffff
mov dword [edx], ebx
mov ebx, dword [edx + 8]
and ebx, 0xfff1ffff
mov dword [edx + 8], ebx
jmp short loc_fffb6322  ; jmp 0xfffb6322

loc_fffb630c:
mov ebx, dword [eax]
and ebx, 0xfe3fffff
mov dword [eax], ebx
mov ebx, dword [eax + 8]
and ebx, 0xfff1ffff
mov dword [eax + 8], ebx

loc_fffb6322:
inc ecx
add edx, 0x20
add eax, 0x20
cmp ecx, dword [ebp - 0x18]
jb short loc_fffb62f0  ; jb 0xfffb62f0
test edi, edi
mov al, byte [ebp - 0xe]
setne byte [ebp - 0xd]
sub eax, 3
cmp al, 4
seta al
test byte [ebp - 0xd], al
jne short loc_fffb635e  ; jne 0xfffb635e
test edi, edi
je short loc_fffb635e  ; je 0xfffb635e

loc_fffb6348:
cmp byte [ebp - 0xe], 2
mov bl, byte [ebp - 0xd]
setbe byte [ebp - 0x34]
test byte [ebp - 0x34], bl
jne loc_fffb63e1  ; jne 0xfffb63e1
jmp short loc_fffb63d7  ; jmp 0xfffb63d7

loc_fffb635e:
cmp byte [ebp - 0xe], 2
mov esi, 0xf0000000
setbe al
and al, byte [ebp - 0xd]
cmp al, 1
mov dword [ebp - 0x50], 0
sbb edx, edx
and edx, 0xfffffffd
add edx, 8
cmp byte [ebp - 0xe], 7
seta cl
xor eax, eax
test byte [ebp - 0xd], cl
cmove eax, edx
lea edx, [edi + 0x90c]
shl eax, 0x15
sub esi, edi

loc_fffb6398:
mov ecx, dword [ebp - 0x14]
add ecx, edx
cmp byte [ebp - 0xd], 0
je short loc_fffb63b1  ; je 0xfffb63b1
mov ecx, dword [edx]
and ecx, 0xfe1fffff
or ecx, eax
mov dword [edx], ecx
jmp short loc_fffb63c4  ; jmp 0xfffb63c4

loc_fffb63b1:
add ecx, esi
mov ebx, ecx
mov dword [ebp - 0x34], ecx
mov ecx, dword [ecx]
and ecx, 0xfe1fffff
or ecx, eax
mov dword [ebx], ecx

loc_fffb63c4:
inc dword [ebp - 0x50]
add edx, 0x20
mov ebx, dword [ebp - 0x18]
cmp dword [ebp - 0x50], ebx
jb short loc_fffb6398  ; jb 0xfffb6398
jmp near loc_fffb6348  ; jmp 0xfffb6348

loc_fffb63d7:
mov eax, dword [ebp - 0x24]
mov edx, dword [ebp - 0x1c]
xor esi, esi
jmp short loc_fffb6427  ; jmp 0xfffb6427

loc_fffb63e1:
mov eax, dword [edi + 0xc08]
xor esi, esi
movzx ebx, byte [ebp - 0xe]
and eax, 0xfffffc0f
or al, 0x80
mov dword [edi + 0xc08], eax

loc_fffb63fa:
push ebx
mov ecx, esi
mov edx, dword [ebp - 0x2c]
push 0x40
mov eax, edi
push 0x2f
call fcn_fffb6133  ; call 0xfffb6133
push ebx
mov ecx, esi
mov edx, dword [ebp - 0x2c]
push 0x40
mov eax, edi
inc esi
push 0x38
call fcn_fffb6133  ; call 0xfffb6133
add esp, 0x18
cmp esi, dword [ebp - 0x20]
jb short loc_fffb63fa  ; jb 0xfffb63fa
jmp short loc_fffb63d7  ; jmp 0xfffb63d7

loc_fffb6427:
cmp byte [ebp - 0xd], 0
je short loc_fffb6451  ; je 0xfffb6451
mov ecx, dword [edx]
and ecx, 0xffc0ffff
or ecx, 0x180000
mov dword [edx], ecx
mov ecx, dword [edx + 8]
and ecx, 0xfffff81f
or ecx, 0x120
mov dword [edx + 8], ecx
jmp short loc_fffb6473  ; jmp 0xfffb6473

loc_fffb6451:
mov ecx, dword [eax]
and ecx, 0xffc0ffff
or ecx, 0x180000
mov dword [eax], ecx
mov ecx, dword [eax + 8]
and ecx, 0xfffff81f
or ecx, 0x120
mov dword [eax + 8], ecx

loc_fffb6473:
inc esi
add edx, 0x20
add eax, 0x20
cmp esi, dword [ebp - 0x18]
jb short loc_fffb6427  ; jb 0xfffb6427
cmp byte [ebp - 0x35], 0
jne short loc_fffb648e  ; jne 0xfffb648e

loc_fffb6485:
test edi, edi
je short loc_fffb64cb  ; je 0xfffb64cb
jmp near loc_fffb6e61  ; jmp 0xfffb6e61

loc_fffb648e:
mov ecx, 0xf0000000
lea eax, [edi + 0x700]
xor edx, edx
sub ecx, edi

loc_fffb649d:
mov ebx, dword [ebp - 0x14]
add ebx, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb64b4  ; je 0xfffb64b4
mov esi, dword [eax]
or esi, 0x8000
mov dword [eax], esi
jmp short loc_fffb64c0  ; jmp 0xfffb64c0

loc_fffb64b4:
add ebx, ecx
mov esi, dword [ebx]
or esi, 0x8000
mov dword [ebx], esi

loc_fffb64c0:
inc edx
add eax, 0x20
cmp edx, dword [ebp - 0x18]
jb short loc_fffb649d  ; jb 0xfffb649d
jmp short loc_fffb6485  ; jmp 0xfffb6485

loc_fffb64cb:
xor edx, edx

loc_fffb64cd:
mov esi, dword [ebp - 0x4c]
inc edx
mov eax, dword [esi]
and eax, 0xfff9ffff
or eax, 0x20000
mov dword [esi], eax
add esi, 0x10
cmp edx, dword [ebp - 0x20]
mov dword [ebp - 0x4c], esi
jb short loc_fffb64cd  ; jb 0xfffb64cd

loc_fffb64ea:
mov esi, 0xf0000000
mov eax, dword [ebp - 0x1c]
xor ecx, ecx
sub esi, edi

loc_fffb64f6:
mov edx, dword [ebp - 0x14]
add edx, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb6513  ; je 0xfffb6513
mov edx, dword [eax]
and edx, 0x9fffffff
or edx, 0x20000000
mov dword [eax], edx
jmp short loc_fffb6526  ; jmp 0xfffb6526

loc_fffb6513:
lea ebx, [esi + edx]
mov edx, dword [ebx]
and edx, 0x9fffffff
or edx, 0x20000000
mov dword [ebx], edx

loc_fffb6526:
inc ecx
add eax, 0x20
cmp ecx, dword [ebp - 0x18]
jb short loc_fffb64f6  ; jb 0xfffb64f6
mov ecx, 0xf0000000
lea eax, [edi + 0x910]
xor edx, edx
sub ecx, edi

loc_fffb653e:
mov ebx, dword [ebp - 0x14]
add ebx, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb6555  ; je 0xfffb6555
mov esi, dword [eax]
and esi, 0xffffc3ff
mov dword [eax], esi
jmp short loc_fffb6561  ; jmp 0xfffb6561

loc_fffb6555:
add ebx, ecx
mov esi, dword [ebx]
and esi, 0xffffc3ff
mov dword [ebx], esi

loc_fffb6561:
inc edx
add eax, 0x20
cmp edx, dword [ebp - 0x18]
jb short loc_fffb653e  ; jb 0xfffb653e
cmp byte [ebp - 0xf], 0
jne short loc_fffb657e  ; jne 0xfffb657e

loc_fffb6570:
mov esi, 0xf0000000
mov eax, dword [ebp - 0x28]
xor ecx, ecx
sub esi, edi
jmp short loc_fffb65cf  ; jmp 0xfffb65cf

loc_fffb657e:
xor eax, eax

loc_fffb6580:
xor edx, edx
cmp byte [ebp - 0x34], 0
jne short loc_fffb65ab  ; jne 0xfffb65ab
mov edx, dword [ebp - 0x30]
cmp byte [edx], 0x1b
jbe short loc_fffb659a  ; jbe 0xfffb659a
mov edx, dword [edx + 0xd]
movzx edx, byte [edx + eax + 0x65]
jmp short loc_fffb65ab  ; jmp 0xfffb65ab

loc_fffb659a:
mov edx, 0xc
jne short loc_fffb65ab  ; jne 0xfffb65ab
mov ebx, dword [ebp - 0x30]
mov edx, dword [ebx + 0xd]
movzx edx, byte [edx + 0x64]

loc_fffb65ab:
shl edx, 6
mov esi, eax
shl esi, 5
inc eax
mov ecx, dword [esi - 0xfff76f0]
and ecx, 0xfffffc3f
or edx, ecx
cmp eax, dword [ebp - 0x18]
mov dword [esi - 0xfff76f0], edx
jb short loc_fffb6580  ; jb 0xfffb6580
jmp short loc_fffb6570  ; jmp 0xfffb6570

loc_fffb65cf:
mov edx, dword [ebp - 0x14]
add edx, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb65e6  ; je 0xfffb65e6
mov edx, dword [eax]
and edx, 0xffffffc1
or edx, 0x18
mov dword [eax], edx
jmp short loc_fffb65f3  ; jmp 0xfffb65f3

loc_fffb65e6:
lea ebx, [esi + edx]
mov edx, dword [ebx]
and edx, 0xffffffc1
or edx, 0x18
mov dword [ebx], edx

loc_fffb65f3:
inc ecx
add eax, 0x10
cmp ecx, dword [ebp - 0x20]
jb short loc_fffb65cf  ; jb 0xfffb65cf
cmp byte [ebp - 0xd], 0
je short loc_fffb661a  ; je 0xfffb661a
movzx ebx, byte [ebp - 0x34]
mov eax, dword [edi + 0xc00]
shl ebx, 4
and eax, 0xffffffef
or ebx, eax
mov dword [edi + 0xc00], ebx

loc_fffb661a:
xor ecx, ecx
cmp byte [ebp - 0xe], 2
seta cl
mov esi, 0xf0000000
shl ecx, 0xc
lea eax, [edi + 0xa04]
mov dword [ebp - 0x34], 0
sub esi, edi

loc_fffb663a:
mov edx, dword [ebp - 0x14]
add edx, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb6650  ; je 0xfffb6650
mov edx, dword [eax]
and dh, 0xef
or edx, ecx
mov dword [eax], edx
jmp short loc_fffb6660  ; jmp 0xfffb6660

loc_fffb6650:
add edx, esi
mov ebx, edx
mov dword [ebp - 0x2c], edx
mov edx, dword [edx]
and dh, 0xef
or edx, ecx
mov dword [ebx], edx

loc_fffb6660:
inc dword [ebp - 0x34]
add eax, 0x10
mov ebx, dword [ebp - 0x20]
cmp dword [ebp - 0x34], ebx
jb short loc_fffb663a  ; jb 0xfffb663a
cmp byte [ebp - 0x35], 0
jne short loc_fffb6688  ; jne 0xfffb6688

loc_fffb6674:
mov ebx, 0xf0000000
lea eax, [edi + 0x908]
xor ecx, ecx
sub ebx, edi
jmp near loc_fffb67fa  ; jmp 0xfffb67fa

loc_fffb6688:
mov ecx, 0xf0000000
lea eax, [edi + 0x900]
xor edx, edx
sub ecx, edi

loc_fffb6697:
mov esi, dword [ebp - 0x14]
add esi, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb66ae  ; je 0xfffb66ae
mov ebx, dword [eax]
and ebx, 0xf3ffffff
mov dword [eax], ebx
jmp short loc_fffb66ba  ; jmp 0xfffb66ba

loc_fffb66ae:
add esi, ecx
mov ebx, dword [esi]
and ebx, 0xf3ffffff
mov dword [esi], ebx

loc_fffb66ba:
inc edx
add eax, 0x20
cmp edx, dword [ebp - 0x18]
jb short loc_fffb6697  ; jb 0xfffb6697
mov ebx, 0xf0000000
lea eax, [edi + 0x908]
xor ecx, ecx
sub ebx, edi

loc_fffb66d2:
mov esi, dword [ebp - 0x14]
add esi, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb66ef  ; je 0xfffb66ef
mov edx, dword [eax]
and edx, 0xe7ffffff
or edx, 0x10000000
mov dword [eax], edx
jmp short loc_fffb6701  ; jmp 0xfffb6701

loc_fffb66ef:
add esi, ebx
mov edx, dword [esi]
and edx, 0xe7ffffff
or edx, 0x10000000
mov dword [esi], edx

loc_fffb6701:
inc ecx
add eax, 0x20
cmp ecx, dword [ebp - 0x18]
jb short loc_fffb66d2  ; jb 0xfffb66d2
mov ebx, 0xf0000000
mov eax, dword [ebp - 0x28]
xor ecx, ecx
sub ebx, edi

loc_fffb6716:
mov esi, dword [ebp - 0x14]
add esi, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb6733  ; je 0xfffb6733
mov edx, dword [eax]
and edx, 0xfff9ffff
or edx, 0x40000
mov dword [eax], edx
jmp short loc_fffb6745  ; jmp 0xfffb6745

loc_fffb6733:
add esi, ebx
mov edx, dword [esi]
and edx, 0xfff9ffff
or edx, 0x40000
mov dword [esi], edx

loc_fffb6745:
inc ecx
add eax, 0x10
cmp ecx, dword [ebp - 0x20]
jb short loc_fffb6716  ; jb 0xfffb6716
mov ecx, 0xf0000000
lea eax, [edi + 0x700]
xor edx, edx
sub ecx, edi

loc_fffb675d:
mov esi, dword [ebp - 0x14]
add esi, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb6771  ; je 0xfffb6771
mov ebx, dword [eax]
or ebx, 8
mov dword [eax], ebx
jmp short loc_fffb677a  ; jmp 0xfffb677a

loc_fffb6771:
add esi, ecx
mov ebx, dword [esi]
or ebx, 8
mov dword [esi], ebx

loc_fffb677a:
inc edx
add eax, 0x20
cmp edx, dword [ebp - 0x18]
jb short loc_fffb675d  ; jb 0xfffb675d
mov ecx, 0xf0000000
xor edx, edx
sub ecx, edi

loc_fffb678c:
mov ebx, dword [ebp - 0x1c]
add ebx, dword [ebp - 0x14]
cmp byte [ebp - 0xd], 0
je short loc_fffb67a7  ; je 0xfffb67a7
mov esi, dword [ebp - 0x1c]
mov eax, dword [esi]
and ah, 0xf3
or ah, 4
mov dword [esi], eax
jmp short loc_fffb67b3  ; jmp 0xfffb67b3

loc_fffb67a7:
add ebx, ecx
mov eax, dword [ebx]
and ah, 0xf3
or ah, 4
mov dword [ebx], eax

loc_fffb67b3:
inc edx
add dword [ebp - 0x1c], 0x20
cmp edx, dword [ebp - 0x18]
jb short loc_fffb678c  ; jb 0xfffb678c
mov ecx, 0xf0000000
mov eax, dword [ebp - 0x28]
xor edx, edx
sub ecx, edi

loc_fffb67c9:
mov esi, dword [ebp - 0x14]
add esi, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb67e0  ; je 0xfffb67e0
mov ebx, dword [eax]
or ebx, 0x3000000
mov dword [eax], ebx
jmp short loc_fffb67ec  ; jmp 0xfffb67ec

loc_fffb67e0:
add esi, ecx
mov ebx, dword [esi]
or ebx, 0x3000000
mov dword [esi], ebx

loc_fffb67ec:
inc edx
add eax, 0x10
cmp edx, dword [ebp - 0x20]
jb short loc_fffb67c9  ; jb 0xfffb67c9
jmp near loc_fffb6674  ; jmp 0xfffb6674

loc_fffb67fa:
mov esi, dword [ebp - 0x14]
add esi, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb6817  ; je 0xfffb6817
mov edx, dword [eax]
and edx, 0x3fffffff
or edx, 0x40000000
mov dword [eax], edx
jmp short loc_fffb6829  ; jmp 0xfffb6829

loc_fffb6817:
add esi, ebx
mov edx, dword [esi]
and edx, 0x3fffffff
or edx, 0x40000000
mov dword [esi], edx

loc_fffb6829:
inc ecx
add eax, 0x20
cmp ecx, dword [ebp - 0x18]
jb short loc_fffb67fa  ; jb 0xfffb67fa
cmp byte [ebp - 0xd], 0
je loc_fffb6e7c  ; je 0xfffb6e7c
cmp byte [ebp - 0x35], 0
je loc_fffb695c  ; je 0xfffb695c
cmp byte [ebp - 0x10], 1
je short loc_fffb685f  ; je 0xfffb685f
mov eax, 0x14
cmp byte [ebp - 0x10], 2
mov edx, 3
cmove eax, edx
jmp short loc_fffb686c  ; jmp 0xfffb686c

loc_fffb685f:
mov al, byte [ebp - 0x48]
and eax, 1
lea eax, [eax*8 + 6]

loc_fffb686c:
mov edx, dword [edi + 0xc00]
mov bl, byte [ebp - 0x48]
shl eax, 0x19
and edx, 0xc1ffffff
or eax, edx
cmp byte [ebp - 0x10], 1
mov dword [edi + 0xc00], eax
sete al
xor ebx, 1
test al, bl
jne short loc_fffb68ff  ; jne 0xfffb68ff
jmp short loc_fffb690c  ; jmp 0xfffb690c

loc_fffb6896:
cmp byte [ebp - 0x10], 1
je short loc_fffb68ab  ; je 0xfffb68ab
xor eax, eax
cmp byte [ebp - 0x10], 2
setne al
lea eax, [eax + eax*2 + 2]
jmp short loc_fffb68b8  ; jmp 0xfffb68b8

loc_fffb68ab:
mov al, byte [ebp - 0x48]
xor eax, 1
movzx eax, al
lea eax, [eax + eax + 0xc]

loc_fffb68b8:
mov ecx, dword [ebp - 0x24]
xor ebx, ebx

loc_fffb68bd:
mov edx, dword [ecx]
inc ebx
and edx, 0xffffffe0
or edx, eax
mov dword [ecx], edx
add ecx, 0x20
cmp ebx, dword [ebp - 0x18]
jb short loc_fffb68bd  ; jb 0xfffb68bd
jmp near loc_fffb6e9a  ; jmp 0xfffb6e9a

loc_fffb68d4:
mov bl, byte [ebp - 0x48]
and ebx, 1
lea ebx, [ebx*8 + 6]

loc_fffb68e1:
shl ebx, 5
mov edx, dword [ebp - 0x24]
xor ecx, ecx

loc_fffb68e9:
mov eax, dword [edx]
inc ecx
and eax, 0xfffffc1f
or eax, ebx
mov dword [edx], eax
add edx, 0x20
cmp ecx, dword [ebp - 0x18]
jb short loc_fffb68e9  ; jb 0xfffb68e9
jmp short loc_fffb693a  ; jmp 0xfffb693a

loc_fffb68ff:
mov eax, dword [edi + 0xc0c]
or eax, 0x20000000
jmp short loc_fffb6932  ; jmp 0xfffb6932

loc_fffb690c:
mov dl, byte [ebp - 0x10]
xor eax, eax
dec edx
cmp dl, 1
ja short loc_fffb6921  ; ja 0xfffb6921
movzx edx, dl
movzx eax, byte [edx + ref_fffcee18]  ; movzx eax, byte [edx - 0x311e8]

loc_fffb6921:
shl eax, 0x17
mov edx, dword [edi + 0xc0c]
and edx, 0xe07fffff
or eax, edx

loc_fffb6932:
mov dword [edi + 0xc0c], eax
jmp short loc_fffb695c  ; jmp 0xfffb695c

loc_fffb693a:
mov edx, dword [ebp - 0x14]
xor ecx, ecx
sub edx, 0xffff6f4

loc_fffb6945:
mov eax, dword [edx]
inc ecx
and eax, 0xc1ffffff
or eax, 0xe000000
mov dword [edx], eax
add edx, 0x20
cmp ecx, dword [ebp - 0x18]
jb short loc_fffb6945  ; jb 0xfffb6945

loc_fffb695c:
cmp byte [ebp - 0xe], 4
jbe loc_fffb6b56  ; jbe 0xfffb6b56
mov ebx, 0xf0000000
lea eax, [edi + 0x700]
mov dword [ebp - 0x2c], 0
mov edx, eax
sub ebx, edi

loc_fffb697c:
mov esi, dword [ebp - 0x14]
add esi, edx
cmp byte [ebp - 0xd], 0
je short loc_fffb6993  ; je 0xfffb6993
mov esi, dword [edx]
or esi, 0x200000
mov dword [edx], esi
jmp short loc_fffb69a4  ; jmp 0xfffb69a4

loc_fffb6993:
add esi, ebx
mov ecx, esi
mov dword [ebp - 0x1c], esi
mov esi, dword [esi]
or esi, 0x200000
mov dword [ecx], esi

loc_fffb69a4:
inc dword [ebp - 0x2c]
add edx, 0x20
mov esi, dword [ebp - 0x18]
cmp dword [ebp - 0x2c], esi
jb short loc_fffb697c  ; jb 0xfffb697c
mov esi, 0xf0000000
mov edx, eax
mov dword [ebp - 0x2c], 0
sub esi, edi

loc_fffb69c2:
mov ecx, dword [ebp - 0x14]
add ecx, edx
cmp byte [ebp - 0xd], 0
je short loc_fffb69df  ; je 0xfffb69df
mov ecx, dword [edx]
and ecx, 0xfcffffff
or ecx, 0x1000000
mov dword [edx], ecx
jmp short loc_fffb69f6  ; jmp 0xfffb69f6

loc_fffb69df:
add ecx, esi
mov ebx, ecx
mov dword [ebp - 0x1c], ecx
mov ecx, dword [ecx]
and ecx, 0xfcffffff
or ecx, 0x1000000
mov dword [ebx], ecx

loc_fffb69f6:
inc dword [ebp - 0x2c]
add edx, 0x20
mov ebx, dword [ebp - 0x18]
cmp dword [ebp - 0x2c], ebx
jb short loc_fffb69c2  ; jb 0xfffb69c2
mov ebx, 0xf0000000
mov edx, eax
mov dword [ebp - 0x2c], 0
sub ebx, edi

loc_fffb6a14:
mov esi, dword [ebp - 0x14]
add esi, edx
cmp byte [ebp - 0xd], 0
je short loc_fffb6a2b  ; je 0xfffb6a2b
mov esi, dword [edx]
or esi, 0x80000
mov dword [edx], esi
jmp short loc_fffb6a3c  ; jmp 0xfffb6a3c

loc_fffb6a2b:
add esi, ebx
mov ecx, esi
mov dword [ebp - 0x1c], esi
mov esi, dword [esi]
or esi, 0x80000
mov dword [ecx], esi

loc_fffb6a3c:
inc dword [ebp - 0x2c]
add edx, 0x20
mov esi, dword [ebp - 0x18]
cmp dword [ebp - 0x2c], esi
jb short loc_fffb6a14  ; jb 0xfffb6a14
mov ebx, 0xf0000000
mov edx, eax
mov dword [ebp - 0x2c], 0
sub ebx, edi

loc_fffb6a5a:
mov esi, dword [ebp - 0x14]
add esi, edx
cmp byte [ebp - 0xd], 0
je short loc_fffb6a71  ; je 0xfffb6a71
mov esi, dword [edx]
or esi, 0x800000
mov dword [edx], esi
jmp short loc_fffb6a82  ; jmp 0xfffb6a82

loc_fffb6a71:
add esi, ebx
mov ecx, esi
mov dword [ebp - 0x1c], esi
mov esi, dword [esi]
or esi, 0x800000
mov dword [ecx], esi

loc_fffb6a82:
inc dword [ebp - 0x2c]
add edx, 0x20
mov esi, dword [ebp - 0x18]
cmp dword [ebp - 0x2c], esi
jb short loc_fffb6a5a  ; jb 0xfffb6a5a
mov ecx, 0xf0000000
xor edx, edx
sub ecx, edi

loc_fffb6a99:
mov esi, dword [ebp - 0x14]
add esi, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb6ab0  ; je 0xfffb6ab0
mov ebx, dword [eax]
or ebx, 0x400000
mov dword [eax], ebx
jmp short loc_fffb6abc  ; jmp 0xfffb6abc

loc_fffb6ab0:
add esi, ecx
mov ebx, dword [esi]
or ebx, 0x400000
mov dword [esi], ebx

loc_fffb6abc:
inc edx
add eax, 0x20
cmp edx, dword [ebp - 0x18]
jb short loc_fffb6a99  ; jb 0xfffb6a99
cmp byte [ebp - 0xe], 5
je loc_fffb6b56  ; je 0xfffb6b56
mov ebx, 0xf0000000
lea eax, [edi + 0x914]
mov dword [ebp - 0x2c], 0
mov edx, eax
sub ebx, edi

loc_fffb6ae5:
mov esi, dword [ebp - 0x14]
add esi, edx
cmp byte [ebp - 0xd], 0
je short loc_fffb6afc  ; je 0xfffb6afc
mov esi, dword [edx]
or esi, 0x200
mov dword [edx], esi
jmp short loc_fffb6b0d  ; jmp 0xfffb6b0d

loc_fffb6afc:
add esi, ebx
mov ecx, esi
mov dword [ebp - 0x1c], esi
mov esi, dword [esi]
or esi, 0x200
mov dword [ecx], esi

loc_fffb6b0d:
inc dword [ebp - 0x2c]
add edx, 0x20
mov esi, dword [ebp - 0x18]
cmp dword [ebp - 0x2c], esi
jb short loc_fffb6ae5  ; jb 0xfffb6ae5
mov ecx, 0xf0000000
xor edx, edx
sub ecx, edi
cmp byte [ebp - 0xe], 7
jbe short loc_fffb6b56  ; jbe 0xfffb6b56

loc_fffb6b2a:
mov esi, dword [ebp - 0x14]
add esi, eax
cmp byte [ebp - 0xd], 0
je short loc_fffb6b41  ; je 0xfffb6b41
mov ebx, dword [eax]
or ebx, 0x8000000
mov dword [eax], ebx
jmp short loc_fffb6b4d  ; jmp 0xfffb6b4d

loc_fffb6b41:
add esi, ecx
mov ebx, dword [esi]
or ebx, 0x8000000
mov dword [esi], ebx

loc_fffb6b4d:
inc edx
add eax, 0x20
cmp edx, dword [ebp - 0x18]
jb short loc_fffb6b2a  ; jb 0xfffb6b2a

loc_fffb6b56:
cmp byte [ebp - 0xe], 5
mov bl, byte [ebp - 0xf]
seta byte [ebp - 0x1c]
test byte [ebp - 0x1c], bl
je loc_fffb6c16  ; je 0xfffb6c16
mov ecx, 0xf0008000
lea eax, [edi + 0x914]
xor edx, edx
sub ecx, edi

loc_fffb6b79:
cmp byte [ebp - 0xd], 0
je short loc_fffb6b88  ; je 0xfffb6b88
mov ebx, dword [eax]
or bh, 4
mov dword [eax], ebx
jmp short loc_fffb6b92  ; jmp 0xfffb6b92

loc_fffb6b88:
lea esi, [ecx + eax]
mov ebx, dword [esi]
or bh, 4
mov dword [esi], ebx

loc_fffb6b92:
inc edx
add eax, 0x20
cmp edx, dword [ebp - 0x18]
jb short loc_fffb6b79  ; jb 0xfffb6b79
xor eax, eax
lea ecx, [edi + 0x700]

loc_fffb6ba3:
cmp byte [ebp - 0xd], 0
je short loc_fffb6bb2  ; je 0xfffb6bb2
mov ebx, eax
shl ebx, 5
add ebx, ecx
jmp short loc_fffb6bbb  ; jmp 0xfffb6bbb

loc_fffb6bb2:
lea ebx, [eax + 0x7800438]
shl ebx, 5

loc_fffb6bbb:
mov edx, dword [ebx]
inc eax
and edx, 0xe7ffffff
or edx, 0x8000000
mov dword [ebx], edx
cmp eax, dword [ebp - 0x18]
jb short loc_fffb6ba3  ; jb 0xfffb6ba3
xor eax, eax
lea ebx, [edi + 0x700]

loc_fffb6bd9:
cmp byte [ebp - 0xd], 0
je short loc_fffb6bf2  ; je 0xfffb6bf2
mov ecx, eax
shl ecx, 5
add ecx, ebx
mov edx, dword [ecx]
and edx, 0x1fffffff
mov dword [ecx], edx
jmp short loc_fffb6c05  ; jmp 0xfffb6c05

loc_fffb6bf2:
lea edx, [eax + 0x7800438]
shl edx, 5
mov ecx, dword [edx]
and ecx, 0x1fffffff
mov dword [edx], ecx

loc_fffb6c05:
inc eax
cmp eax, dword [ebp - 0x18]
jb short loc_fffb6bd9  ; jb 0xfffb6bd9

loc_fffb6c0b:
mov edx, 0xf0000000
xor eax, eax
sub edx, edi
jmp short loc_fffb6c22  ; jmp 0xfffb6c22

loc_fffb6c16:
cmp byte [ebp - 0x1c], 0
je loc_fffb6d4a  ; je 0xfffb6d4a
jmp short loc_fffb6c0b  ; jmp 0xfffb6c0b

loc_fffb6c22:
mov ebx, dword [ebp - 0x28]
add ebx, dword [ebp - 0x14]
cmp byte [ebp - 0xd], 0
je short loc_fffb6c3d  ; je 0xfffb6c3d
mov esi, dword [ebp - 0x28]
mov ecx, dword [esi]
or ecx, 0x200000
mov dword [esi], ecx
jmp short loc_fffb6c49  ; jmp 0xfffb6c49

loc_fffb6c3d:
add ebx, edx
mov ecx, dword [ebx]
or ecx, 0x200000
mov dword [ebx], ecx

loc_fffb6c49:
inc eax
add dword [ebp - 0x28], 0x10
cmp eax, dword [ebp - 0x20]
jb short loc_fffb6c22  ; jb 0xfffb6c22
jmp near loc_fffb6e8b  ; jmp 0xfffb6e8b

loc_fffb6c58:
xor edx, edx

loc_fffb6c5a:
mov eax, edx
shl eax, 0xc
mov ecx, dword [eax - 0xfff73c8]
and ecx, 0xf7ffffff
mov dword [eax - 0xfff73c8], ecx
mov ecx, dword [eax - 0xfff73c8]
and ecx, 0xfbffffff
mov dword [eax - 0xfff73c8], ecx
mov ecx, dword [ebp - 0x30]
cmp byte [ecx], 0x19
jbe short loc_fffb6ca6  ; jbe 0xfffb6ca6
mov ecx, dword [ecx + 0xd]
cmp byte [ecx + 0x63], 1
jne short loc_fffb6ca6  ; jne 0xfffb6ca6
mov ecx, dword [eax - 0xfff73c8]
or ecx, 0x4000000
mov dword [eax - 0xfff73c8], ecx

loc_fffb6ca6:
inc edx
cmp edx, 3
jne short loc_fffb6c5a  ; jne 0xfffb6c5a

loc_fffb6cac:
mov eax, dword [0xf0008258]
or eax, 0x20000000
mov dword [0xf0008258], eax
mov eax, dword [0xf0009258]
or eax, 0x20000000
mov dword [0xf0009258], eax
mov eax, dword [0xf000a258]
or eax, 0x20000000
mov dword [0xf000a258], eax
jmp near loc_fffb6d81  ; jmp 0xfffb6d81

loc_fffb6cde:
cmp byte [ebp - 0xe], 6
sete al
test byte [ebp - 0xd], al
je short loc_fffb6cfd  ; je 0xfffb6cfd
mov eax, dword [edi + 0xc38]
or eax, 0x8000000
mov dword [edi + 0xc38], eax
jmp short loc_fffb6d54  ; jmp 0xfffb6d54

loc_fffb6cfd:
test edi, edi
jne short loc_fffb6d54  ; jne 0xfffb6d54
mov esi, dword [ebp - 0x14]
mov eax, dword [esi - 0xffff3c8]
and eax, 0xf7ffffff
mov dword [esi - 0xffff3c8], eax
mov eax, dword [esi - 0xffff3c8]
and eax, 0xfbffffff
mov dword [esi - 0xffff3c8], eax
mov eax, dword [ebp - 0x30]
cmp byte [eax], 0x19
jbe short loc_fffb6d54  ; jbe 0xfffb6d54
mov eax, dword [eax + 0xd]
cmp byte [eax + 0x63], 1
jne short loc_fffb6d54  ; jne 0xfffb6d54
mov eax, dword [esi - 0xffff3c8]
or eax, 0x4000000
mov dword [esi - 0xffff3c8], eax
jmp short loc_fffb6d54  ; jmp 0xfffb6d54

loc_fffb6d4a:
cmp byte [ebp - 0xf], 0
jne loc_fffb6cac  ; jne 0xfffb6cac

loc_fffb6d54:
cmp byte [ebp - 0xd], 0
je short loc_fffb6d6d  ; je 0xfffb6d6d
mov eax, dword [edi + 0x258]
or eax, 0x20000000
mov dword [edi + 0x258], eax
jmp short loc_fffb6d81  ; jmp 0xfffb6d81

loc_fffb6d6d:
mov ebx, dword [ebp - 0x14]
mov eax, dword [ebx - 0xffffda8]
or eax, 0x20000000
mov dword [ebx - 0xffffda8], eax

loc_fffb6d81:
cmp byte [ebp - 0x1c], 0
jne short loc_fffb6d96  ; jne 0xfffb6d96

loc_fffb6d87:
cmp byte [ebp - 0xf], 0
je loc_fffb6eba  ; je 0xfffb6eba
jmp near loc_fffb6e37  ; jmp 0xfffb6e37

loc_fffb6d96:
mov ebx, 0xf0008000
lea eax, [edi + 0x914]
xor ecx, ecx
sub ebx, edi

loc_fffb6da5:
cmp byte [ebp - 0xd], 0
je short loc_fffb6dcf  ; je 0xfffb6dcf
mov edx, dword [eax - 0x10]
and edx, 0xe1ffffff
or edx, 0xa000000
mov dword [eax - 0x10], edx
mov edx, dword [eax]
and edx, 0xfffe1fff
cmp byte [ebp - 0xf], 0
mov dword [eax], edx
je short loc_fffb6e21  ; je 0xfffb6e21
jmp short loc_fffb6dfc  ; jmp 0xfffb6dfc

loc_fffb6dcf:
mov esi, dword [ebp - 0x24]
mov edx, dword [esi]
and edx, 0xe1ffffff
or edx, 0xa000000
mov dword [esi], edx
mov edx, dword [esi + 0x10]
and edx, 0xfffe1fff
or edx, 0x1a000
cmp byte [ebp - 0xf], 0
mov dword [esi + 0x10], edx
je short loc_fffb6e21  ; je 0xfffb6e21
jmp short loc_fffb6e0e  ; jmp 0xfffb6e0e

loc_fffb6dfc:
mov edx, dword [eax]
and edx, 0xffc3ffff
or edx, 0x140000
mov dword [eax], edx
jmp short loc_fffb6e21  ; jmp 0xfffb6e21

loc_fffb6e0e:
lea esi, [ebx + eax]
mov edx, dword [esi]
and edx, 0xffc3ffff
or edx, 0x140000
mov dword [esi], edx

loc_fffb6e21:
inc ecx
add eax, 0x20
add dword [ebp - 0x24], 0x20
cmp ecx, dword [ebp - 0x18]
jb loc_fffb6da5  ; jb 0xfffb6da5
jmp near loc_fffb6d87  ; jmp 0xfffb6d87

loc_fffb6e37:
mov eax, dword [0xf0009308]
and eax, 0xff80ff00
or eax, 0x12006c
mov dword [0xf0009308], eax
mov eax, dword [0xf0009314]
and eax, 0xff80ffff
or eax, 0x130000
mov dword [0xf0009314], eax
jmp short loc_fffb6eba  ; jmp 0xfffb6eba

loc_fffb6e61:
mov eax, dword [edi + 0xc04]
and eax, 0xe01fffff
or eax, 0xe600000
mov dword [edi + 0xc04], eax
jmp near loc_fffb64ea  ; jmp 0xfffb64ea

loc_fffb6e7c:
cmp byte [ebp - 0x35], 0
jne loc_fffb6896  ; jne 0xfffb6896
jmp near loc_fffb6b56  ; jmp 0xfffb6b56

loc_fffb6e8b:
cmp byte [ebp - 0xf], 0
je loc_fffb6cde  ; je 0xfffb6cde
jmp near loc_fffb6c58  ; jmp 0xfffb6c58

loc_fffb6e9a:
cmp byte [ebp - 0x10], 1
je loc_fffb68d4  ; je 0xfffb68d4
mov ebx, 0x14
cmp byte [ebp - 0x10], 2
mov eax, 3
cmove ebx, eax
jmp near loc_fffb68e1  ; jmp 0xfffb68e1

loc_fffb6eba:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb6ec2:
push ebp
cmp cl, dl
mov ebp, esp
push ebx
push ebx
mov byte [ebp - 5], dl
jbe short loc_fffb6ee4  ; jbe 0xfffb6ee4
movzx eax, ax
jmp short loc_fffb6ed9  ; jmp 0xfffb6ed9

loc_fffb6ed3:
bt eax, edx
jb short loc_fffb6ef4  ; jb 0xfffb6ef4
inc edx

loc_fffb6ed9:
mov bl, dl
sub bl, byte [ebp - 5]
cmp dl, cl
jbe short loc_fffb6ed3  ; jbe 0xfffb6ed3
jmp short loc_fffb6ef4  ; jmp 0xfffb6ef4

loc_fffb6ee4:
movzx eax, ax
xor ebx, ebx

loc_fffb6ee9:
bt eax, edx
jb short loc_fffb6ef4  ; jb 0xfffb6ef4
dec edx
inc ebx
cmp dl, cl
jae short loc_fffb6ee9  ; jae 0xfffb6ee9

loc_fffb6ef4:
lea eax, [ebx - 2]
cmp al, 1
jbe short loc_fffb6f04  ; jbe 0xfffb6f04
xor eax, eax
test bl, bl
setne al
jmp short loc_fffb6f09  ; jmp 0xfffb6f09

loc_fffb6f04:
mov eax, 3

loc_fffb6f09:
lea edx, [ebx - 4]
cmp dl, 3
mov edx, 7
cmovbe eax, edx
lea edx, [ebx - 8]
cmp dl, 7
jbe short loc_fffb6f2c  ; jbe 0xfffb6f2c
cmp bl, 0x10
mov edx, 0x1f
cmove eax, edx
jmp short loc_fffb6f31  ; jmp 0xfffb6f31

loc_fffb6f2c:
mov eax, 0xf

loc_fffb6f31:
pop edx
pop ebx
pop ebp
ret

fcn_fffb6f35:
push ebp
mov edx, eax
shl edx, 0x14
mov ebp, esp
push edi
xor edi, edi
push esi
mov esi, eax
push ebx
lea esp, [esp - 0x1c]
mov dword [ebp - 0x1c], edx
xor edx, edx

loc_fffb6f4d:
mov ebx, edi
shl ebx, 0xf
add ebx, dword [ebp - 0x1c]
mov cx, word [ebx - 0x10000000]
inc cx
je short loc_fffb6fa2  ; je 0xfffb6fa2
mov cx, word [ebx - 0xffffff6]
cmp cx, 0x604
jne short loc_fffb6fa2  ; jne 0xfffb6fa2
inc eax
mov edx, esi
mov byte [ebx - 0xfffffe8], dl
mov byte [ebx - 0xfffffe7], al
movzx eax, al
mov byte [ebx - 0xfffffe6], 0xff
mov edx, eax
shl edx, 0x14
mov word [edx - 0x10000000], 0
call fcn_fffb6f35  ; call 0xfffb6f35
mov dl, al
mov byte [ebx - 0xfffffe6], al

loc_fffb6fa2:
inc edi
cmp edi, 0x20
jne short loc_fffb6f4d  ; jne 0xfffb6f4d
test dl, dl
cmovne esi, edx
lea esp, [esp + 0x1c]
pop ebx
mov eax, esi
pop esi
pop edi
pop ebp
ret

fcn_fffb6fb8:
push ebp
shl edx, 0xf
shl eax, 0x14
mov ebp, esp
push edi
shl ecx, 0xc
add eax, edx
push esi
add ecx, eax
mov esi, dword [ebp + 8]
push ebx
mov ebx, 0x10
mov dword [esi], 0
mov al, byte [ecx - 0xffffff5]
cmp al, 6
lea edi, [ecx - 0x10000000]
je short loc_fffb702c  ; je 0xfffb702c

loc_fffb6fe9:
lea eax, [edi + ebx]
mov edx, dword [eax]
mov ecx, dword [eax]
mov dword [eax], 0
mov ecx, dword [eax]
mov dword [eax], 0xffffffff
mov ecx, dword [eax]
cmp edx, ecx
jne short loc_fffb7006  ; jne 0xfffb7006
jmp short loc_fffb700b  ; jmp 0xfffb700b

loc_fffb7006:
test dl, 1
je short loc_fffb700f  ; je 0xfffb700f

loc_fffb700b:
mov dword [eax], edx
jmp short loc_fffb7024  ; jmp 0xfffb7024

loc_fffb700f:
mov ecx, dword [eax]
and ecx, 0xfffffff0
sub dword [esi], ecx
mov dword [eax], edx
and edx, 6
cmp edx, 4
lea eax, [ebx + 4]
cmove ebx, eax

loc_fffb7024:
add ebx, 4
cmp ebx, 0x24
jbe short loc_fffb6fe9  ; jbe 0xfffb6fe9

loc_fffb702c:
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb7031:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
push ebx
lea esp, [esp - 0x2c]
mov dword [ebp - 0x20], ecx
mov cl, byte [ebp + 8]
cmp dword [ebp - 0x20], 1
mov dword [ebp - 0x34], edx
mov edi, dword [ebp + 0xc]
mov byte [ebp - 0x23], cl
jbe short loc_fffb706b  ; jbe 0xfffb706b
cmp dword [ebp + 0x10], 0
mov ebx, 0x80000002
sete dl
test edi, edi
sete al
or dl, al
jne loc_fffb74bb  ; jne 0xfffb74bb

loc_fffb706b:  ; not directly referenced
xor eax, eax
mov ebx, 0x80000012
call fcn_fffa0871  ; call 0xfffa0871
test al, 0x40
jne loc_fffb74bb  ; jne 0xfffb74bb
test al, 1
je short loc_fffb708f  ; je 0xfffb708f
mov edx, 0xff
xor eax, eax
jmp near loc_fffb74a7  ; jmp 0xfffb74a7

loc_fffb708f:  ; not directly referenced
movzx edx, al
xor eax, eax
call fcn_fffa0856  ; call 0xfffa0856
lea ecx, [esi + esi + 1]
mov byte [ebp - 0x2d], cl
dec ecx
mov dword [ebp - 0x28], 3
mov byte [ebp - 0x24], 0
mov byte [ebp - 0x21], cl

loc_fffb70af:  ; not directly referenced
mov cl, byte [ebp - 0x2d]
mov al, byte [ebp - 0x34]
cmp dword [ebp - 0x20], 0xb
mov byte [ebp - 0x1c], cl
mov byte [ebp - 0x22], al
ja loc_fffb720e  ; ja 0xfffb720e
mov ecx, dword [ebp - 0x20]
jmp dword [ecx*4 + ref_fffcedc4]  ; ujmp: jmp dword [ecx*4 - 0x3123c]

loc_fffb70cf:  ; not directly referenced
mov cl, byte [ebp - 0x21]
mov byte [ebp - 0x1c], cl

loc_fffb70d5:  ; not directly referenced
cmp byte [ebp - 0x23], 1
je loc_fffb7218  ; je 0xfffb7218
xor esi, esi
jmp near loc_fffb7208  ; jmp 0xfffb7208

loc_fffb70e6:  ; not directly referenced
mov ecx, dword [ebp + 0x10]
mov cl, byte [ecx]
mov byte [ebp - 0x22], cl
mov cl, byte [ebp - 0x21]
mov byte [ebp - 0x1c], cl

loc_fffb70f4:  ; not directly referenced
cmp dword [edi], 1
mov esi, 4
sbb ebx, ebx
mov dword [edi], 1
and ebx, 0x80000005
jmp near loc_fffb71f5  ; jmp 0xfffb71f5

loc_fffb710f:  ; not directly referenced
mov ecx, dword [ebp + 0x10]
mov eax, 5
movzx edx, byte [ecx]
call fcn_fffa0856  ; call 0xfffa0856
mov cl, byte [ebp - 0x21]
mov dword [edi], 1
mov byte [ebp - 0x1c], cl

loc_fffb712b:  ; not directly referenced
mov eax, dword [edi]
test eax, eax
je loc_fffb71f9  ; je 0xfffb71f9
cmp eax, 1
je loc_fffb7203  ; je 0xfffb7203
cmp eax, 0x100
ja loc_fffb720e  ; ja 0xfffb720e
cmp byte [ebp - 0x23], 1
je loc_fffb7218  ; je 0xfffb7218
mov esi, 0x18
jmp near loc_fffb7208  ; jmp 0xfffb7208

loc_fffb715d:  ; not directly referenced
mov cl, byte [ebp - 0x21]
mov eax, 6
mov byte [ebp - 0x1c], cl
mov ecx, dword [ebp + 0x10]
movzx edx, byte [ecx + 1]
call fcn_fffa0856  ; call 0xfffa0856
mov ecx, dword [ebp + 0x10]
mov eax, 5
movzx edx, byte [ecx]
call fcn_fffa0856  ; call 0xfffa0856

loc_fffb7184:  ; not directly referenced
cmp dword [edi], 2
mov esi, 0xc
sbb ebx, ebx
mov dword [edi], 2
and ebx, 0x80000005
jmp short loc_fffb71f5  ; jmp 0xfffb71f5

loc_fffb719c:  ; not directly referenced
movzx edx, byte [edi]
mov eax, 5
call fcn_fffa0856  ; call 0xfffa0856
mov cl, byte [ebp - 0x21]
mov byte [ebp - 0x1c], cl
mov cl, byte [edi]
mov byte [ebp - 0x24], cl

loc_fffb71b4:  ; not directly referenced
mov eax, dword [edi]
dec eax
cmp eax, 0x1f
jbe short loc_fffb7222  ; jbe 0xfffb7222
jmp short loc_fffb720e  ; jmp 0xfffb720e

loc_fffb71be:  ; not directly referenced
mov ecx, dword [ebp + 0x10]
mov eax, 6
mov esi, 0x10
movzx edx, byte [ecx + 1]
call fcn_fffa0856  ; call 0xfffa0856
mov ecx, dword [ebp + 0x10]
mov eax, 5
movzx edx, byte [ecx]
call fcn_fffa0856  ; call 0xfffa0856
cmp dword [edi], 2
mov dword [edi], 2
sbb ebx, ebx
and ebx, 0x80000005

loc_fffb71f5:  ; not directly referenced
xor edx, edx
jmp short loc_fffb722b  ; jmp 0xfffb722b

loc_fffb71f9:  ; not directly referenced
mov ebx, 0x80000005
jmp near loc_fffb7485  ; jmp 0xfffb7485

loc_fffb7203:  ; not directly referenced
mov esi, 8

loc_fffb7208:  ; not directly referenced
xor edx, edx

loc_fffb720a:  ; not directly referenced
xor ebx, ebx
jmp short loc_fffb7233  ; jmp 0xfffb7233

loc_fffb720e:  ; not directly referenced
mov ebx, 0x80000002
jmp near loc_fffb7485  ; jmp 0xfffb7485

loc_fffb7218:  ; not directly referenced
mov ebx, 0x80000003
jmp near loc_fffb7485  ; jmp 0xfffb7485

loc_fffb7222:  ; not directly referenced
mov esi, 0x14
mov dl, 2
jmp short loc_fffb720a  ; jmp 0xfffb720a

loc_fffb722b:  ; not directly referenced
test ebx, ebx
js loc_fffb7485  ; js 0xfffb7485

loc_fffb7233:  ; not directly referenced
mov al, dl
or eax, 1
cmp byte [ebp - 0x23], 1
cmove edx, eax
mov eax, 0xd
movzx edx, dl
call fcn_fffa0856  ; call 0xfffa0856
mov eax, 2
call fcn_fffa0871  ; call 0xfffa0871
cmp dword [ebp - 0x20], 9
je short loc_fffb728c  ; je 0xfffb728c

loc_fffb725c:  ; not directly referenced
movzx edx, byte [ebp - 0x1c]
mov eax, 4
call fcn_fffa0856  ; call 0xfffa0856
cmp dword [ebp - 0x20], 4
jne short loc_fffb72ac  ; jne 0xfffb72ac
jmp short loc_fffb729c  ; jmp 0xfffb729c

loc_fffb7272:  ; not directly referenced
mov eax, dword [ebp + 0x10]
movzx edx, byte [eax + ecx]
mov eax, 7
mov dword [ebp - 0x38], ecx
call fcn_fffa0856  ; call 0xfffa0856
mov ecx, dword [ebp - 0x38]
inc ecx
jmp short loc_fffb7295  ; jmp 0xfffb7295

loc_fffb728c:  ; not directly referenced
movzx edx, byte [ebp - 0x24]
xor ecx, ecx
mov dword [ebp - 0x2c], edx

loc_fffb7295:  ; not directly referenced
cmp ecx, dword [ebp - 0x2c]
jb short loc_fffb7272  ; jb 0xfffb7272
jmp short loc_fffb725c  ; jmp 0xfffb725c

loc_fffb729c:  ; not directly referenced
cmp dword [edi], 1
jbe short loc_fffb72ac  ; jbe 0xfffb72ac
movzx edx, byte [ebp - 0x22]
mov eax, 6
jmp short loc_fffb72b5  ; jmp 0xfffb72b5

loc_fffb72ac:  ; not directly referenced
movzx edx, byte [ebp - 0x22]
mov eax, 3

loc_fffb72b5:  ; not directly referenced
add esi, 0x40
call fcn_fffa0856  ; call 0xfffa0856
mov ecx, esi
mov eax, 2
movzx edx, cl
mov esi, 0x186a0
call fcn_fffa0856  ; call 0xfffa0856

loc_fffb72d1:  ; not directly referenced
xor eax, eax
call fcn_fffa0871  ; call 0xfffa0871
test al, 0x8e
jne loc_fffb74ae  ; jne 0xfffb74ae
mov eax, 0xa
call fcn_fffa0cba  ; call 0xfffa0cba
dec esi
jne short loc_fffb72d1  ; jne 0xfffb72d1
jmp near loc_fffb7414  ; jmp 0xfffb7414

loc_fffb72f2:  ; not directly referenced
mov eax, 0xc
call fcn_fffa0871  ; call 0xfffa0871
and eax, 1
cmp al, 1
sbb ebx, ebx
and ebx, 0xffffffec
sub ebx, 0x7fffffe5
jmp near loc_fffb7485  ; jmp 0xfffb7485

loc_fffb7311:  ; not directly referenced
test al, 8
je short loc_fffb7359  ; je 0xfffb7359
xor eax, eax
mov edx, 8
call fcn_fffa0856  ; call 0xfffa0856
xor eax, eax
mov edx, 0xff
call fcn_fffa0856  ; call 0xfffa0856
mov edx, 1
mov eax, 0xc
call fcn_fffa0856  ; call 0xfffa0856
mov eax, 0xa
call fcn_fffa0cba  ; call 0xfffa0cba
dec dword [ebp - 0x28]
jne loc_fffb70af  ; jne 0xfffb70af
mov ebx, 0x80000007
jmp near loc_fffb7485  ; jmp 0xfffb7485

loc_fffb7359:  ; not directly referenced
mov eax, dword [ebp - 0x20]
sub eax, 2
cmp eax, 8
ja loc_fffb7485  ; ja 0xfffb7485
jmp dword [eax*4 + ref_fffcedf4]  ; ujmp: jmp dword [eax*4 - 0x3120c]

loc_fffb736f:  ; not directly referenced
mov eax, 6
call fcn_fffa0871  ; call 0xfffa0871
mov ecx, dword [ebp + 0x10]
mov byte [ecx + 1], al
jmp near loc_fffb7426  ; jmp 0xfffb7426

loc_fffb7384:  ; not directly referenced
xor esi, esi
cmp dword [edi], 1
ja loc_fffb741c  ; ja 0xfffb741c
jmp near loc_fffb7426  ; jmp 0xfffb7426

loc_fffb7394:  ; not directly referenced
mov eax, 7
call fcn_fffa0871  ; call 0xfffa0871
mov ecx, dword [ebp + 0x10]
mov byte [ecx + esi], al
mov eax, dword [edi]
lea edx, [eax - 2]
cmp esi, edx
jne short loc_fffb73bf  ; jne 0xfffb73bf
mov eax, 2
call fcn_fffa0871  ; call 0xfffa0871
or eax, 0x20
movzx edx, al
jmp short loc_fffb73d6  ; jmp 0xfffb73d6

loc_fffb73bf:  ; not directly referenced
dec eax
cmp esi, eax
jne short loc_fffb73e0  ; jne 0xfffb73e0
mov eax, 2
call fcn_fffa0871  ; call 0xfffa0871
mov edx, eax
and edx, 0xdf

loc_fffb73d6:  ; not directly referenced
mov eax, 2
call fcn_fffa0856  ; call 0xfffa0856

loc_fffb73e0:  ; not directly referenced
xor eax, eax
mov edx, 0x80
call fcn_fffa0856  ; call 0xfffa0856
mov eax, dword [edi]
dec eax
cmp esi, eax
jae short loc_fffb741b  ; jae 0xfffb741b
mov dword [ebp - 0x1c], 0x64

loc_fffb73fa:  ; not directly referenced
xor eax, eax
call fcn_fffa0871  ; call 0xfffa0871
test al, al
js short loc_fffb741b  ; js 0xfffb741b
mov eax, 0xa
call fcn_fffa0cba  ; call 0xfffa0cba
dec dword [ebp - 0x1c]
jne short loc_fffb73fa  ; jne 0xfffb73fa

loc_fffb7414:  ; not directly referenced
mov ebx, 0x80000012
jmp short loc_fffb7485  ; jmp 0xfffb7485

loc_fffb741b:  ; not directly referenced
inc esi

loc_fffb741c:  ; not directly referenced
cmp esi, dword [edi]
jb loc_fffb7394  ; jb 0xfffb7394
jmp short loc_fffb7485  ; jmp 0xfffb7485

loc_fffb7426:  ; not directly referenced
mov eax, 5
call fcn_fffa0871  ; call 0xfffa0871
mov ecx, dword [ebp + 0x10]
mov byte [ecx], al
jmp short loc_fffb7485  ; jmp 0xfffb7485

loc_fffb7437:  ; not directly referenced
mov edx, 0x80
xor eax, eax
call fcn_fffa0856  ; call 0xfffa0856
jmp short loc_fffb7485  ; jmp 0xfffb7485

loc_fffb7445:  ; not directly referenced
mov eax, 5
xor esi, esi
call fcn_fffa0871  ; call 0xfffa0871
movzx edx, al
cmp dword [edi], edx
mov al, 1
jae short loc_fffb7473  ; jae 0xfffb7473
jmp short loc_fffb7479  ; jmp 0xfffb7479

loc_fffb745c:  ; not directly referenced
mov eax, 7
mov dword [ebp - 0x38], edx
call fcn_fffa0871  ; call 0xfffa0871
mov ecx, dword [ebp + 0x10]
mov byte [ecx + esi], al
inc esi
mov edx, dword [ebp - 0x38]

loc_fffb7473:  ; not directly referenced
cmp esi, edx
jb short loc_fffb745c  ; jb 0xfffb745c
xor eax, eax

loc_fffb7479:  ; not directly referenced
test al, al
mov eax, 0x80000005
mov dword [edi], edx
cmovne ebx, eax

loc_fffb7485:  ; not directly referenced
mov edx, 0xff
xor eax, eax
call fcn_fffa0856  ; call 0xfffa0856
mov edx, 1
mov eax, 0xc
call fcn_fffa0856  ; call 0xfffa0856
xor edx, edx
mov eax, 0xd

loc_fffb74a7:  ; not directly referenced
call fcn_fffa0856  ; call 0xfffa0856
jmp short loc_fffb74bb  ; jmp 0xfffb74bb

loc_fffb74ae:  ; not directly referenced
test al, 4
je loc_fffb7311  ; je 0xfffb7311
jmp near loc_fffb72f2  ; jmp 0xfffb72f2

loc_fffb74bb:  ; not directly referenced
lea esp, [esp + 0x2c]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffb74c6:
db 0x00
db 0x00

fcn_fffb74c8:
push ebp
mov edx, eax
mov ebp, esp
push edi
lea edi, [eax + 0x20aa]
push esi
mov esi, eax
push ebx
mov ebx, 1

loc_fffb74dd:
cmp byte [edx + 0x3a], 0
jne short loc_fffb750a  ; jne 0xfffb750a
jmp short loc_fffb74fe  ; jmp 0xfffb74fe

loc_fffb74e5:
xor ecx, ecx
cmp al, 0x10
jne short loc_fffb74fc  ; jne 0xfffb74fc
cmp dword [edx + 0xa], 0
mov cl, 1
je short loc_fffb74fc  ; je 0xfffb74fc
xor ecx, ecx
cmp dword [edx + 0x27], 0
sete cl

loc_fffb74fc:
and ebx, ecx

loc_fffb74fe:
add edx, 0x1055
cmp edx, edi
jne short loc_fffb74dd  ; jne 0xfffb74dd
jmp short loc_fffb751b  ; jmp 0xfffb751b

loc_fffb750a:
mov al, byte [esi + 0x22e4]
mov ecx, 1
test al, al
jne short loc_fffb74e5  ; jne 0xfffb74e5
jmp short loc_fffb74fc  ; jmp 0xfffb74fc

loc_fffb751b:
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb7522:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
mov esi, edx
push ebx
lea esp, [esp - 0x5c]
mov dword [ebp - 0x28], eax
mov dword [ebp - 0x20], 0

loc_fffb753a:
mov eax, dword [ebp - 0x28]
mov al, byte [eax + 0x45]
test al, al
mov byte [ebp - 0x1c], al
jne short loc_fffb7555  ; jne 0xfffb7555
mov bl, byte [esi + 2]
mov cl, byte [esi + 0xc]
mov dl, byte [esi + 0x16]
mov al, byte [esi + 0x20]
jmp short loc_fffb7561  ; jmp 0xfffb7561

loc_fffb7555:
mov bl, byte [esi + 5]
mov cl, byte [esi + 0xf]
mov dl, byte [esi + 0x19]
mov al, byte [esi + 0x23]

loc_fffb7561:
or bl, cl
js loc_fffb7684  ; js 0xfffb7684
or dl, al
js loc_fffb7684  ; js 0xfffb7684
imul eax, dword [ebp - 0x20], 0x1055
mov dword [ebp - 0x1c], 0
lea ebx, [edi + eax + 0x376]
lea eax, [edi + eax + 0x7b]
mov dword [ebp - 0x24], eax

loc_fffb758d:
mov ecx, dword [ebp - 0x20]
mov edx, dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb764d  ; je 0xfffb764d
mov edx, dword [ebp - 0x28]
imul eax, dword [ebp - 0x1c], 0xa
cmp byte [edx + 0x45], 0
jne short loc_fffb75b5  ; jne 0xfffb75b5
mov al, byte [esi + eax + 2]
jmp short loc_fffb75b9  ; jmp 0xfffb75b9

loc_fffb75b5:
mov al, byte [esi + eax + 5]

loc_fffb75b9:
mov cl, byte [ebx - 9]
mov byte [ebp - 0x30], al
mov byte [ebp - 0x48], cl
mov byte [ebx - 6], 0
movsx edx, byte [ebp - 0x30]
mov byte [ebx - 7], 0
movzx ecx, byte [ebx - 8]
mov dword [ebp - 0x34], edx
add ecx, edx
mov dword [ebp - 0x2c], ecx
mov eax, dword [ebp - 0x2c]
mov ecx, 0x40
cdq
idiv ecx
mov ecx, dword [ebp - 0x2c]
sub ecx, 0x40
cmp ecx, 0x3f
mov cl, byte [ebp - 0x48]
mov byte [ebx - 8], dl
ja short loc_fffb7601  ; ja 0xfffb7601
lea eax, [ecx + 1]
and eax, 1
mov byte [ebx - 9], al
jmp short loc_fffb7604  ; jmp 0xfffb7604

loc_fffb7601:
mov byte [ebx - 9], cl

loc_fffb7604:
movsx ax, byte [ebp - 0x30]
mov dl, 0x40
sub esp, 0xc
idiv dl
mov ecx, dword [ebp - 0x20]
mov edx, dword [ebp - 0x34]
mov byte [ebx], ah
mov byte [ebx - 1], al
push dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbde1b  ; call 0xfffbde1b
mov ecx, dword [ebp - 0x20]
mov edx, dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
mov edx, dword [ebp - 0x24]
mov ecx, dword [ebp - 0x20]
mov byte [edx], al
mov edx, dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
mov ecx, dword [ebp - 0x24]
add esp, 0x10
mov byte [ecx - 1], al

loc_fffb764d:
inc dword [ebp - 0x1c]
add ebx, 0xa
add dword [ebp - 0x24], 0x2f
cmp dword [ebp - 0x1c], 4
jne loc_fffb758d  ; jne 0xfffb758d

loc_fffb7661:
inc dword [ebp - 0x20]
add dword [ebp - 0x28], 0x1055
add esi, 0x28
cmp dword [ebp - 0x20], 2
jne loc_fffb753a  ; jne 0xfffb753a
mov dword [ebp - 0x24], 0
jmp near loc_fffb79cb  ; jmp 0xfffb79cb

loc_fffb7684:
xor ebx, ebx
mov byte [ebp - 0x24], 0

loc_fffb768a:
mov ecx, dword [ebp - 0x20]
mov edx, ebx
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffb76b9  ; je 0xfffb76b9
imul eax, ebx, 0xa
cmp byte [ebp - 0x1c], 0
jne short loc_fffb76a9  ; jne 0xfffb76a9
mov al, byte [esi + eax + 2]
jmp short loc_fffb76ad  ; jmp 0xfffb76ad

loc_fffb76a9:
mov al, byte [esi + eax + 5]

loc_fffb76ad:
cmp byte [ebp - 0x24], al
mov dl, byte [ebp - 0x24]
cmovg edx, eax
mov byte [ebp - 0x24], dl

loc_fffb76b9:
inc ebx
cmp ebx, 4
jne short loc_fffb768a  ; jne 0xfffb768a
movsx eax, byte [ebp - 0x24]
mov dword [ebp - 0x1c], 0
cdq
xor eax, edx
sub eax, edx
imul edx, dword [ebp - 0x20], 0x1055
mov ecx, eax
shr ecx, 6
and eax, 0x3f
mov byte [ebp - 0x58], cl
mov dword [ebp - 0x5c], eax
lea ebx, [edi + edx + 0x376]
lea edx, [edi + edx + 0x7b]
mov dword [ebp - 0x30], edx

loc_fffb76f2:
mov ecx, dword [ebp - 0x20]
mov edx, dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb77bd  ; je 0xfffb77bd
mov eax, dword [ebp - 0x28]
cmp byte [eax + 0x45], 0
jne short loc_fffb771a  ; jne 0xfffb771a
imul eax, dword [ebp - 0x1c], 0xa
mov al, byte [esi + eax + 2]
jmp short loc_fffb7722  ; jmp 0xfffb7722

loc_fffb771a:
imul eax, dword [ebp - 0x1c], 0xa
mov al, byte [esi + eax + 5]

loc_fffb7722:
sub eax, dword [ebp - 0x24]
mov cl, byte [ebx - 9]
mov dl, byte [ebp - 0x58]
mov byte [ebp - 0x48], al
mov byte [ebp - 0x34], cl
mov byte [ebx - 7], dl
movzx ecx, byte [ebx - 8]
mov al, byte [ebp - 0x5c]
movsx edx, byte [ebp - 0x48]
mov byte [ebx - 6], al
add ecx, edx
mov dword [ebp - 0x38], edx
mov dword [ebp - 0x2c], ecx
mov eax, dword [ebp - 0x2c]
mov ecx, 0x40
cdq
idiv ecx
mov ecx, dword [ebp - 0x2c]
sub ecx, 0x40
cmp ecx, 0x3f
mov cl, byte [ebp - 0x34]
mov byte [ebx - 8], dl
ja short loc_fffb7771  ; ja 0xfffb7771
lea eax, [ecx + 1]
and eax, 1
mov byte [ebx - 9], al
jmp short loc_fffb7774  ; jmp 0xfffb7774

loc_fffb7771:
mov byte [ebx - 9], cl

loc_fffb7774:
movsx ax, byte [ebp - 0x48]
mov dl, 0x40
sub esp, 0xc
idiv dl
mov ecx, dword [ebp - 0x20]
mov edx, dword [ebp - 0x38]
mov byte [ebx], ah
mov byte [ebx - 1], al
push dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbde1b  ; call 0xfffbde1b
mov ecx, dword [ebp - 0x20]
mov edx, dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
mov edx, dword [ebp - 0x30]
mov ecx, dword [ebp - 0x20]
mov byte [edx], al
mov edx, dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
mov ecx, dword [ebp - 0x30]
add esp, 0x10
mov byte [ecx - 1], al

loc_fffb77bd:
inc dword [ebp - 0x1c]
add ebx, 0xa
add dword [ebp - 0x30], 0x2f
cmp dword [ebp - 0x1c], 4
jne loc_fffb76f2  ; jne 0xfffb76f2
jmp near loc_fffb7661  ; jmp 0xfffb7661

loc_fffb77d6:
mov al, byte [ebp - 0x20]
mov ecx, dword [ebp - 0x24]
mov byte [ebp - 0x28], al
mov edx, dword [ebp - 0x20]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb79b2  ; je 0xfffb79b2
cmp byte [ebp - 0x28], 1
seta cl
movzx eax, cl
imul eax, eax, 0x1d
add eax, dword [ebp - 0x30]
cmp byte [edi + eax + 0x12], 1
jbe loc_fffb78aa  ; jbe 0xfffb78aa
test byte [ebp - 0x20], 1
je loc_fffb78aa  ; je 0xfffb78aa
cmp byte [ebp - 0x1c], 1
mov esi, dword [edi + 0x2223]
sbb eax, eax
mov cl, byte [ebx - 1]
xor al, al
add cl, byte [ebx + 9]
lea eax, [esi + eax + 0xf0c]
mov edx, dword [eax]
movzx eax, byte [ebx + 3]
and edx, 0xffffefc0
or edx, eax
movzx eax, byte [ebx + 2]
shl eax, 0xc
or edx, eax
mov al, byte [ebx - 2]
add al, byte [ebx + 8]
shl eax, 6
add eax, ecx
mov cl, 2
cbw
idiv cl
mov cl, 0x40
cbw
idiv cl
cmp byte [ebp - 0x28], 1
movsx ecx, ah
movsx ecx, cl
movsx eax, al
je short loc_fffb7884  ; je 0xfffb7884
shl ecx, 0x12
and edx, 0xff03ffff
shl eax, 0x18
or edx, ecx
and edx, 0xfeffffff
jmp short loc_fffb7895  ; jmp 0xfffb7895

loc_fffb7884:
shl ecx, 6
and edx, 0xfffff03f
shl eax, 0xf
or edx, ecx
and dh, 0x7f

loc_fffb7895:
or edx, eax
cmp byte [ebp - 0x1c], 1
sbb eax, eax
xor al, al
lea eax, [esi + eax + 0x330c]
mov dword [eax], edx
jmp short loc_fffb791d  ; jmp 0xfffb791d

loc_fffb78aa:
cmp byte [ebp - 0x1c], 1
mov esi, dword [edi + 0x2223]
movzx edx, byte [ebx + 3]
sbb eax, eax
xor al, al
lea eax, [esi + eax + 0xf0c]
mov eax, dword [eax]
and eax, 0xffffefc0
or eax, edx
movzx edx, byte [ebx + 2]
shl edx, 0xc
or eax, edx
test cl, cl
je short loc_fffb78f5  ; je 0xfffb78f5
movzx edx, byte [ebx + 9]
and eax, 0xff03ffff
shl edx, 0x12
or eax, edx
movzx edx, byte [ebx + 8]
and eax, 0xfeffffff
shl edx, 0x18
jmp short loc_fffb790a  ; jmp 0xfffb790a

loc_fffb78f5:
movzx edx, byte [ebx + 9]
and eax, 0xffff703f
shl edx, 6
or eax, edx
movzx edx, byte [ebx + 8]
shl edx, 0xf

loc_fffb790a:
or eax, edx
cmp byte [ebp - 0x1c], 1
sbb edx, edx
xor dl, dl
lea edx, [esi + edx + 0x330c]
mov dword [edx], eax

loc_fffb791d:
cmp byte [ebp - 0x1c], 1
mov edx, dword [edi + 0x2223]
sbb eax, eax
xor al, al
cmp byte [ebp - 0x28], 0
lea eax, [edx + eax + 0xd14]
mov eax, dword [eax]
jne short loc_fffb7943  ; jne 0xfffb7943
movzx ecx, byte [ebx + 1]
and eax, 0xffffffc0
jmp short loc_fffb7977  ; jmp 0xfffb7977

loc_fffb7943:
cmp byte [ebp - 0x28], 1
jne short loc_fffb7957  ; jne 0xfffb7957
movzx ecx, byte [ebx + 1]
and eax, 0xfffff03f
shl ecx, 6
jmp short loc_fffb7977  ; jmp 0xfffb7977

loc_fffb7957:
cmp byte [ebp - 0x28], 2
jne short loc_fffb796b  ; jne 0xfffb796b
movzx ecx, byte [ebx + 1]
and eax, 0xfffc0fff
shl ecx, 0xc
jmp short loc_fffb7977  ; jmp 0xfffb7977

loc_fffb796b:
movzx ecx, byte [ebx + 1]
and eax, 0xff03ffff
shl ecx, 0x12

loc_fffb7977:
or eax, ecx
cmp byte [ebp - 0x1c], 1
sbb ecx, ecx
xor cl, cl
lea edx, [edx + ecx + 0xd14]
mov dword [edx], eax
mov eax, ecx
mov edx, dword [edi + 0x2223]
mov cl, byte [ebp - 0x20]
lea esi, [edx + eax + 0xd18]
mov edx, 1
shl edx, cl
mov eax, dword [esi]
not edx
and eax, edx
movzx edx, byte [ebx]
shl edx, cl
or eax, edx
mov dword [esi], eax

loc_fffb79b2:
inc dword [ebp - 0x20]
add ebx, 0xa
cmp dword [ebp - 0x20], 4
jne loc_fffb77d6  ; jne 0xfffb77d6
inc dword [ebp - 0x24]
cmp dword [ebp - 0x24], 2
je short loc_fffb79ee  ; je 0xfffb79ee

loc_fffb79cb:
imul eax, dword [ebp - 0x24], 0x1055
mov dword [ebp - 0x20], 0
mov dword [ebp - 0x30], eax
lea ebx, [edi + eax + 0x36d]
mov al, byte [ebp - 0x24]
mov byte [ebp - 0x1c], al
jmp near loc_fffb77d6  ; jmp 0xfffb77d6

loc_fffb79ee:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb79f6:  ; not directly referenced
push ebp
xor ecx, ecx
mov edx, 0x50
mov ebp, esp
push edi
push esi
lea eax, [ebp - 0x8bc]
lea esi, [ebp - 0x86c]
push ebx
lea ebx, [ebp - 0x818]
lea esp, [esp - 0x8fc]
mov dword [ebp - 0x8e8], 0
mov edi, dword [ebp + 8]
call fcn_fffa24c1  ; call 0xfffa24c1
mov ecx, 3
mov edx, 0x800
mov eax, ebx
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 8
lea eax, [ebp - 0x8e4]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x20
lea eax, [ebp - 0x8dc]
call fcn_fffa24c1  ; call 0xfffa24c1
mov edx, esi
mov eax, edi
call fcn_fffbd650  ; call 0xfffbd650
mov dword [ebp - 0x8f0], 0xffffff81

loc_fffb7a76:  ; not directly referenced
mov edx, dword [ebp - 0x8f0]
mov eax, edi
call fcn_fffbda8b  ; call 0xfffbda8b
test eax, eax
mov ebx, eax
jne loc_fffb81a5  ; jne 0xfffb81a5
mov ecx, dword [ebp - 0x8f0]
lea eax, [ebp - 0x8e4]
add ecx, 0x7f
lea edx, [ebp - 0x8dc]
mov dword [ebp - 0x8f4], eax
mov dword [ebp - 0x8fc], edx
mov dword [ebp - 0x8ec], 0
mov dword [ebp - 0x904], ecx
jmp near loc_fffb7d43  ; jmp 0xfffb7d43

loc_fffb7ac3:  ; not directly referenced
mov ecx, dword [ebp - 0x8ec]
mov edx, esi
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb7d12  ; je 0xfffb7d12
mov eax, dword [ebp - 0x8fc]
cmp dword [eax + esi*4], 0
jne loc_fffb7d12  ; jne 0xfffb7d12
sub esp, 0xc
mov ecx, dword [ebp - 0x8ec]
push esi
mov edx, dword [ebp - 0x8f0]
mov eax, edi
call fcn_fffbde1b  ; call 0xfffbde1b
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffb81a5  ; jne 0xfffb81a5
mov dl, byte [ebp - 0x8ec]
mov ecx, dword [ebp - 0x8ec]
cmp dl, 1
mov byte [ebp - 0x900], dl
sbb edx, edx
and edx, 0xfffffc00
add edx, 0x4404
add edx, dword [edi + 0x2223]
mov eax, dword [edx]
and eax, 0x3fffffff
or eax, 0x80000000
mov dword [edx], eax
mov edx, esi
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
movzx eax, al
sub esp, 0xc
sub eax, 2
mov edx, esi
push eax
mov ecx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
add esp, 0x10
cmp word [ebp - 0x8f0], 0
setg dl
cmp dword [ebp - 0x8e8], 0
sete al
or dl, al
jne short loc_fffb7bbe  ; jne 0xfffb7bbe

loc_fffb7b83:  ; not directly referenced
push edx
push dword [ebp - 0x8f0]
lea ecx, [ebp - 0x86c]
lea eax, [ebp - 0x8e8]
push ecx
mov edx, dword [ebp - 0x8ec]
mov ecx, esi
push eax
mov eax, edi
mov word [ebp - 0x864], 0
call fcn_fffbd81a  ; call 0xfffbd81a
add esp, 0x10
test eax, eax
mov ebx, eax
je short loc_fffb7bf7  ; je 0xfffb7bf7
jmp near loc_fffb81a5  ; jmp 0xfffb81a5

loc_fffb7bbe:  ; not directly referenced
mov eax, edi
call fcn_fffc0529  ; call 0xfffc0529
test eax, eax
mov ebx, eax
jne loc_fffb81a5  ; jne 0xfffb81a5
sub esp, 0xc
push edi
call fcn_fffc7efc  ; call 0xfffc7efc
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffb81a5  ; jne 0xfffb81a5
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
test eax, eax
mov ebx, eax
je short loc_fffb7b83  ; je 0xfffb7b83
jmp near loc_fffb81a5  ; jmp 0xfffb81a5

loc_fffb7bf7:  ; not directly referenced
cmp dword [ebp - 0x8e8], 1
jne loc_fffb7ce2  ; jne 0xfffb7ce2
mov ecx, dword [ebp - 0x8f8]
mov edx, dword [ebp - 0x8f4]
mov eax, edi
inc byte [edx + esi]
mov byte [ecx], 2
mov byte [ecx + 1], 2
call fcn_fffb74c8  ; call 0xfffb74c8
dec eax
jne loc_fffb7d12  ; jne 0xfffb7d12
sub esp, 0xc
mov ecx, dword [ebp - 0x8ec]
push esi
mov edx, dword [ebp - 0x8f0]
mov eax, edi
call fcn_fffbde1b  ; call 0xfffbde1b
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffb81a5  ; jne 0xfffb81a5
cmp byte [ebp - 0x900], 1
mov ecx, dword [ebp - 0x8ec]
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4404
add eax, dword [edi + 0x2223]
mov edx, dword [eax]
and edx, 0x3fffffff
mov dword [eax], edx
mov edx, esi
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
movzx eax, al
sub esp, 0xc
sub eax, 4
mov ecx, dword [ebp - 0x8ec]
push eax
mov edx, esi
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
add esp, 0xc
lea eax, [ebp - 0x86c]
push dword [ebp - 0x8f0]
lea edx, [ebp - 0x8e8]
mov ecx, esi
push eax
mov eax, edi
push edx
mov edx, dword [ebp - 0x8ec]
call fcn_fffbd81a  ; call 0xfffbd81a
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffb81a5  ; jne 0xfffb81a5
cmp dword [ebp - 0x8e8], 1
jne short loc_fffb7d12  ; jne 0xfffb7d12
mov ecx, dword [ebp - 0x8f8]
mov byte [ecx], 0
mov byte [ecx + 1], 0
jmp short loc_fffb7d12  ; jmp 0xfffb7d12

loc_fffb7ce2:  ; not directly referenced
mov ecx, dword [ebp - 0x8f4]
mov eax, 0x80
sub eax, dword [ebp - 0x8f0]
movzx edx, byte [ecx + esi]
cmp eax, edx
jge short loc_fffb7d08  ; jge 0xfffb7d08
mov eax, dword [ebp - 0x8fc]
mov dword [eax + esi*4], 1

loc_fffb7d08:  ; not directly referenced
mov edx, dword [ebp - 0x8f4]
mov byte [edx + esi], 0

loc_fffb7d12:  ; not directly referenced
inc esi
add dword [ebp - 0x8f8], 0x100
cmp esi, 4
jne loc_fffb7ac3  ; jne 0xfffb7ac3
inc dword [ebp - 0x8ec]
add dword [ebp - 0x8f4], 4
add dword [ebp - 0x8fc], 0x10
cmp dword [ebp - 0x8ec], 2
je short loc_fffb7d67  ; je 0xfffb7d67

loc_fffb7d43:  ; not directly referenced
mov eax, dword [ebp - 0x8ec]
lea ecx, [ebp - 0x818]
shl eax, 0xa
add eax, dword [ebp - 0x904]
add ecx, eax
xor esi, esi
mov dword [ebp - 0x8f8], ecx
jmp near loc_fffb7ac3  ; jmp 0xfffb7ac3

loc_fffb7d67:  ; not directly referenced
add dword [ebp - 0x8f0], 2
cmp dword [ebp - 0x8f0], 0x81
jne loc_fffb7a76  ; jne 0xfffb7a76
mov dword [ebp - 0x8f8], edi
mov dword [ebp - 0x8ec], 0

loc_fffb7d8e:  ; not directly referenced
imul edx, dword [ebp - 0x8ec], 0x1055
mov eax, dword [ebp - 0x8f8]
lea esi, [ebp - 0x8bc]
mov dword [ebp - 0x8f4], 0
mov byte [eax + 0x45], 0
imul eax, dword [ebp - 0x8ec], 0x28
lea edx, [edi + edx + 0x371]
mov dword [ebp - 0x8f0], edx
mov edx, dword [ebp - 0x8ec]
shl edx, 2
add esi, eax
mov dword [ebp - 0x8fc], eax
mov dword [ebp - 0x900], edx

loc_fffb7ddd:  ; not directly referenced
mov ecx, dword [ebp - 0x8ec]
mov edx, dword [ebp - 0x8f4]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffb7e61  ; je 0xfffb7e61
imul ecx, dword [ebp - 0x8f4], 0xa
mov edx, dword [ebp - 0x8f4]
add edx, dword [ebp - 0x900]
add ecx, dword [ebp - 0x8fc]
shl edx, 8
lea eax, [ebp - 0x8bc]
add ecx, eax
lea eax, [ebp - 0x818]
add edx, eax
mov eax, edi
call fcn_fffbd45d  ; call 0xfffbd45d
test eax, eax
mov ebx, eax
jne loc_fffb81a5  ; jne 0xfffb81a5
mov edx, dword [ebp - 0x8f0]
mov al, byte [esi]
mov ecx, dword [ebp - 0x8f8]
mov byte [edx], al
mov al, byte [esi + 1]
mov byte [edx + 1], al
mov al, byte [esi + 3]
mov byte [edx + 2], al
mov al, byte [esi + 4]
mov byte [edx + 3], al
mov eax, dword [esi + 6]
movzx edx, byte [ecx + 0x45]
cmp edx, eax
jae short loc_fffb7e61  ; jae 0xfffb7e61
mov byte [ecx + 0x45], al

loc_fffb7e61:  ; not directly referenced
inc dword [ebp - 0x8f4]
add esi, 0xa
add dword [ebp - 0x8f0], 0xa
cmp dword [ebp - 0x8f4], 4
jne loc_fffb7ddd  ; jne 0xfffb7ddd
inc dword [ebp - 0x8ec]
add dword [ebp - 0x8f8], 0x1055
cmp dword [ebp - 0x8ec], 2
jne loc_fffb7d8e  ; jne 0xfffb7d8e
mov al, byte [edi + 0x109a]
mov dl, byte [edi + 0x45]
cmp dl, al
cmovae eax, edx
cmp al, 3
mov byte [edi + 0x45], al
mov byte [edi + 0x109a], al
je loc_fffb8154  ; je 0xfffb8154
cmp byte [edi + 0x3a], 0
jne loc_fffb815b  ; jne 0xfffb815b

loc_fffb7ec4:  ; not directly referenced
cmp byte [edi + 0x108f], 0
jne loc_fffb817d  ; jne 0xfffb817d

loc_fffb7ed1:  ; not directly referenced
lea edx, [ebp - 0x8bc]
mov eax, edi
call fcn_fffb7522  ; call 0xfffb7522
mov eax, edi
call fcn_fffc0529  ; call 0xfffc0529
test eax, eax
mov ebx, eax
jne loc_fffb81a5  ; jne 0xfffb81a5
sub esp, 0xc
push edi
call fcn_fffc7efc  ; call 0xfffc7efc
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffb81a5  ; jne 0xfffb81a5
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
test eax, eax
mov ebx, eax
jne loc_fffb81a5  ; jne 0xfffb81a5
mov dword [ebp - 0x8f0], 0
jmp near loc_fffb812f  ; jmp 0xfffb812f

loc_fffb7f25:  ; not directly referenced
mov ecx, dword [ebp - 0x8f0]
mov edx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffb7f50  ; jne 0xfffb7f50

loc_fffb7f3c:  ; not directly referenced
inc dword [ebp - 0x8ec]
cmp dword [ebp - 0x8ec], 4
jne short loc_fffb7f25  ; jne 0xfffb7f25
jmp near loc_fffb8120  ; jmp 0xfffb8120

loc_fffb7f50:  ; not directly referenced
mov edx, dword [ebp - 0x8fc]
mov al, byte [edi + edx + 0x45]
cmp al, 2
jne short loc_fffb7f7c  ; jne 0xfffb7f7c
mov ecx, dword [ebp - 0x8f0]
mov edx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
movzx eax, al
sub esp, 0xc
sub eax, 2
jmp short loc_fffb7f9c  ; jmp 0xfffb7f9c

loc_fffb7f7c:  ; not directly referenced
test al, al
jne short loc_fffb7fb3  ; jne 0xfffb7fb3
mov ecx, dword [ebp - 0x8f0]
mov edx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
movzx eax, al
sub esp, 0xc
sub eax, 4

loc_fffb7f9c:  ; not directly referenced
push eax
mov ecx, dword [ebp - 0x8f0]
mov edx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
add esp, 0x10

loc_fffb7fb3:  ; not directly referenced
imul ecx, dword [ebp - 0x8ec], 0x2f
mov byte [ebp - 0x8f8], 0
mov dword [ebp - 0x908], ecx
jmp near loc_fffb8109  ; jmp 0xfffb8109

loc_fffb7fcc:  ; not directly referenced
push eax
movzx esi, byte [ebp - 0x8f8]
mov ecx, dword [ebp - 0x8ec]
push 6
mov edx, dword [ebp - 0x8f0]
mov eax, edi
push 0
push esi
call fcn_fffbfee2  ; call 0xfffbfee2
lea edx, [esi + esi*4]
mov dword [ebp - 0x900], edx
add edx, dword [ebp - 0x908]
add edx, dword [ebp - 0x8f4]
add edx, edi
add esp, 0xc
mov dword [ebp - 0x904], edx
mov ecx, dword [ebp - 0x8ec]
mov byte [edx + 0x4f], al
mov edx, dword [ebp - 0x8f0]
push 3
mov eax, edi
push 0x10
push esi
call fcn_fffbfee2  ; call 0xfffbfee2
mov ecx, dword [ebp - 0x904]
add esp, 0xc
mov edx, dword [ebp - 0x8f0]
mov byte [ecx + 0x51], al
mov ecx, dword [ebp - 0x8ec]
push 6
mov eax, edi
push 0
push esi
call fcn_fffbfe93  ; call 0xfffbfe93
imul ecx, dword [ebp - 0x8ec], 0x24
lea edx, [esi + esi*2]
add edx, ecx
add edx, dword [ebp - 0x8f4]
add esp, 0xc
mov dword [ebp - 0x904], ecx
mov ecx, dword [ebp - 0x8ec]
mov byte [edi + edx + 0x295], al
mov edx, dword [ebp - 0x8f0]
push 1
mov eax, edi
push 0x13
push esi
call fcn_fffbfe93  ; call 0xfffbfe93
mov edx, dword [ebp - 0x904]
add edx, dword [ebp - 0x8f4]
add edx, edi
add esp, 0xc
mov ecx, dword [ebp - 0x8ec]
mov byte [esi + edx + 0x2b0], al
mov edx, dword [ebp - 0x8f0]
push 6
mov eax, edi
push 8
push esi
call fcn_fffbfe93  ; call 0xfffbfe93
imul edx, dword [ebp - 0x8ec], 0x2d
add edx, dword [ebp - 0x900]
add edx, dword [ebp - 0x8f4]
add esp, 0xc
mov ecx, dword [ebp - 0x8ec]
mov byte [edi + edx + 0x109], al
mov edx, dword [ebp - 0x8f0]
push 3
mov eax, edi
push 0xf
push esi
call fcn_fffbfe93  ; call 0xfffbfe93
imul edx, dword [ebp - 0x8ec], 0x12
add edx, dword [ebp - 0x8f4]
add edx, edi
inc byte [ebp - 0x8f8]
add esp, 0x10
mov byte [esi + edx + 0x32e], al

loc_fffb8109:  ; not directly referenced
mov al, byte [ebp - 0x8f8]
cmp al, byte [edi + 0x20b5]
jb loc_fffb7fcc  ; jb 0xfffb7fcc
jmp near loc_fffb7f3c  ; jmp 0xfffb7f3c

loc_fffb8120:  ; not directly referenced
inc dword [ebp - 0x8f0]
cmp dword [ebp - 0x8f0], 2
je short loc_fffb81a5  ; je 0xfffb81a5

loc_fffb812f:  ; not directly referenced
imul edx, dword [ebp - 0x8f0], 0x1055
mov dword [ebp - 0x8ec], 0
mov dword [ebp - 0x8fc], edx
mov dword [ebp - 0x8f4], edx
jmp near loc_fffb7f25  ; jmp 0xfffb7f25

loc_fffb8154:  ; not directly referenced
mov ebx, 1
jmp short loc_fffb81a5  ; jmp 0xfffb81a5

loc_fffb815b:  ; not directly referenced
shl eax, 0x1e
mov ecx, dword [edi + 0x2223]
mov edx, dword [ecx + 0x4004]
and edx, 0x3fffffff
or eax, edx
mov dword [ecx + 0x4004], eax
jmp near loc_fffb7ec4  ; jmp 0xfffb7ec4

loc_fffb817d:  ; not directly referenced
movzx edx, byte [edi + 0x109a]
mov ecx, dword [edi + 0x2223]
shl edx, 0x1e
mov eax, dword [ecx + 0x4404]
and eax, 0x3fffffff
or eax, edx
mov dword [ecx + 0x4404], eax
jmp near loc_fffb7ed1  ; jmp 0xfffb7ed1

loc_fffb81a5:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb81af:
push ebp
xor ecx, ecx
mov edx, 0x50
mov ebp, esp
push edi
mov edi, eax
push esi
lea eax, [ebp - 0x8bc]
lea esi, [ebp - 0x86c]
push ebx
lea ebx, [ebp - 0x818]
lea esp, [esp - 0x8fc]
mov dword [ebp - 0x8e8], 0
call fcn_fffa24c1  ; call 0xfffa24c1
mov ecx, 3
mov edx, 0x800
mov eax, ebx
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 8
lea eax, [ebp - 0x8e4]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x20
lea eax, [ebp - 0x8dc]
call fcn_fffa24c1  ; call 0xfffa24c1
mov edx, esi
mov eax, edi
call fcn_fffbd650  ; call 0xfffbd650
mov dword [ebp - 0x8f0], 0xffffff81

loc_fffb822e:
mov edx, dword [ebp - 0x8f0]
mov eax, edi
call fcn_fffbda8b  ; call 0xfffbda8b
test eax, eax
mov ebx, eax
jne loc_fffb8922  ; jne 0xfffb8922
mov ecx, dword [ebp - 0x8f0]
lea eax, [ebp - 0x8e4]
add ecx, 0x7f
lea edx, [ebp - 0x8dc]
mov dword [ebp - 0x8f4], eax
mov dword [ebp - 0x8fc], edx
mov dword [ebp - 0x8ec], 0
mov dword [ebp - 0x904], ecx
jmp near loc_fffb84f6  ; jmp 0xfffb84f6

loc_fffb827b:
mov ecx, dword [ebp - 0x8ec]
mov edx, esi
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb84c5  ; je 0xfffb84c5
mov eax, dword [ebp - 0x8fc]
cmp dword [eax + esi*4], 0
jne loc_fffb84c5  ; jne 0xfffb84c5
sub esp, 0xc
mov ecx, dword [ebp - 0x8ec]
push esi
mov edx, dword [ebp - 0x8f0]
mov eax, edi
call fcn_fffbde1b  ; call 0xfffbde1b
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffb8922  ; jne 0xfffb8922
mov dl, byte [ebp - 0x8ec]
mov ecx, dword [ebp - 0x8ec]
cmp dl, 1
mov byte [ebp - 0x900], dl
sbb edx, edx
and edx, 0xfffffc00
add edx, 0x4404
add edx, dword [edi + 0x2223]
mov eax, dword [edx]
and eax, 0x3fffffff
or eax, 0x80000000
mov dword [edx], eax
mov edx, esi
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
movzx eax, al
sub esp, 0xc
sub eax, 2
mov edx, esi
push eax
mov ecx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
add esp, 0x10
cmp word [ebp - 0x8f0], 0
setg dl
cmp dword [ebp - 0x8e8], 0
sete al
or dl, al
jne short loc_fffb8376  ; jne 0xfffb8376

loc_fffb833b:
push ebx
push dword [ebp - 0x8f0]
lea ecx, [ebp - 0x86c]
lea eax, [ebp - 0x8e8]
push ecx
mov edx, dword [ebp - 0x8ec]
mov ecx, esi
push eax
mov eax, edi
mov word [ebp - 0x864], 0
call fcn_fffbd81a  ; call 0xfffbd81a
add esp, 0x10
test eax, eax
mov ebx, eax
je short loc_fffb83aa  ; je 0xfffb83aa
jmp near loc_fffb8922  ; jmp 0xfffb8922

loc_fffb8376:
mov eax, edi
call fcn_fffc0529  ; call 0xfffc0529
test eax, eax
mov ebx, eax
jne loc_fffb8922  ; jne 0xfffb8922
mov eax, edi
call fcn_fffbc722  ; call 0xfffbc722
test eax, eax
mov ebx, eax
jne loc_fffb8922  ; jne 0xfffb8922
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
test eax, eax
mov ebx, eax
je short loc_fffb833b  ; je 0xfffb833b
jmp near loc_fffb8922  ; jmp 0xfffb8922

loc_fffb83aa:
cmp dword [ebp - 0x8e8], 1
jne loc_fffb8495  ; jne 0xfffb8495
mov ecx, dword [ebp - 0x8f8]
mov edx, dword [ebp - 0x8f4]
mov eax, edi
inc byte [edx + esi]
mov byte [ecx], 2
mov byte [ecx + 1], 2
call fcn_fffb74c8  ; call 0xfffb74c8
dec eax
jne loc_fffb84c5  ; jne 0xfffb84c5
sub esp, 0xc
mov ecx, dword [ebp - 0x8ec]
push esi
mov edx, dword [ebp - 0x8f0]
mov eax, edi
call fcn_fffbde1b  ; call 0xfffbde1b
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffb8922  ; jne 0xfffb8922
cmp byte [ebp - 0x900], 1
mov ecx, dword [ebp - 0x8ec]
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4404
add eax, dword [edi + 0x2223]
mov edx, dword [eax]
and edx, 0x3fffffff
mov dword [eax], edx
mov edx, esi
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
movzx eax, al
sub esp, 0xc
sub eax, 4
mov ecx, dword [ebp - 0x8ec]
push eax
mov edx, esi
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
add esp, 0xc
lea eax, [ebp - 0x86c]
push dword [ebp - 0x8f0]
lea edx, [ebp - 0x8e8]
mov ecx, esi
push eax
mov eax, edi
push edx
mov edx, dword [ebp - 0x8ec]
call fcn_fffbd81a  ; call 0xfffbd81a
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffb8922  ; jne 0xfffb8922
cmp dword [ebp - 0x8e8], 1
jne short loc_fffb84c5  ; jne 0xfffb84c5
mov ecx, dword [ebp - 0x8f8]
mov byte [ecx], 0
mov byte [ecx + 1], 0
jmp short loc_fffb84c5  ; jmp 0xfffb84c5

loc_fffb8495:
mov ecx, dword [ebp - 0x8f4]
mov eax, 0x80
sub eax, dword [ebp - 0x8f0]
movzx edx, byte [ecx + esi]
cmp eax, edx
jge short loc_fffb84bb  ; jge 0xfffb84bb
mov eax, dword [ebp - 0x8fc]
mov dword [eax + esi*4], 1

loc_fffb84bb:
mov edx, dword [ebp - 0x8f4]
mov byte [edx + esi], 0

loc_fffb84c5:
inc esi
add dword [ebp - 0x8f8], 0x100
cmp esi, 4
jne loc_fffb827b  ; jne 0xfffb827b
inc dword [ebp - 0x8ec]
add dword [ebp - 0x8f4], 4
add dword [ebp - 0x8fc], 0x10
cmp dword [ebp - 0x8ec], 2
je short loc_fffb851a  ; je 0xfffb851a

loc_fffb84f6:
mov eax, dword [ebp - 0x8ec]
lea ecx, [ebp - 0x818]
shl eax, 0xa
add eax, dword [ebp - 0x904]
add ecx, eax
xor esi, esi
mov dword [ebp - 0x8f8], ecx
jmp near loc_fffb827b  ; jmp 0xfffb827b

loc_fffb851a:
add dword [ebp - 0x8f0], 2
cmp dword [ebp - 0x8f0], 0x81
jne loc_fffb822e  ; jne 0xfffb822e
lea eax, [ebp - 0x8bc]
mov esi, edi
mov dword [ebp - 0x8f4], eax
mov dword [ebp - 0x8f0], 0

loc_fffb8549:
imul edx, dword [ebp - 0x8f0], 0x28
mov ecx, dword [ebp - 0x8f0]
shl ecx, 2
mov byte [esi + 0x45], 0
mov dword [ebp - 0x8ec], 0
mov dword [ebp - 0x8fc], edx
mov dword [ebp - 0x900], ecx

loc_fffb8573:
mov ecx, dword [ebp - 0x8f0]
mov edx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffb85ea  ; je 0xfffb85ea
imul eax, dword [ebp - 0x8ec], 0xa
mov ecx, dword [ebp - 0x8fc]
add ecx, eax
lea edx, [ebp - 0x8bc]
add ecx, edx
mov edx, dword [ebp - 0x8ec]
add edx, dword [ebp - 0x900]
mov dword [ebp - 0x8f8], eax
shl edx, 8
lea eax, [ebp - 0x818]
add edx, eax
mov eax, edi
call fcn_fffbd45d  ; call 0xfffbd45d
test eax, eax
mov ebx, eax
jne loc_fffb8922  ; jne 0xfffb8922
mov edx, dword [ebp - 0x8f8]
mov ecx, dword [ebp - 0x8f4]
mov eax, dword [ecx + edx + 6]
movzx edx, byte [esi + 0x45]
cmp edx, eax
jae short loc_fffb85ea  ; jae 0xfffb85ea
mov byte [esi + 0x45], al

loc_fffb85ea:
inc dword [ebp - 0x8ec]
cmp dword [ebp - 0x8ec], 4
jne loc_fffb8573  ; jne 0xfffb8573
inc dword [ebp - 0x8f0]
add esi, 0x1055
add dword [ebp - 0x8f4], 0x28
cmp dword [ebp - 0x8f0], 2
jne loc_fffb8549  ; jne 0xfffb8549
mov al, byte [edi + 0x109a]
mov dl, byte [edi + 0x45]
cmp dl, al
cmovae eax, edx
cmp al, 3
mov byte [edi + 0x45], al
mov byte [edi + 0x109a], al
je loc_fffb88d1  ; je 0xfffb88d1
cmp byte [edi + 0x3a], 0
jne loc_fffb88d8  ; jne 0xfffb88d8

loc_fffb8646:
cmp byte [edi + 0x108f], 0
jne loc_fffb88fa  ; jne 0xfffb88fa

loc_fffb8653:
lea edx, [ebp - 0x8bc]
mov eax, edi
call fcn_fffb7522  ; call 0xfffb7522
mov eax, edi
call fcn_fffc0529  ; call 0xfffc0529
test eax, eax
mov ebx, eax
jne loc_fffb8922  ; jne 0xfffb8922
mov eax, edi
call fcn_fffbc722  ; call 0xfffbc722
test eax, eax
mov ebx, eax
jne loc_fffb8922  ; jne 0xfffb8922
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
test eax, eax
mov ebx, eax
jne loc_fffb8922  ; jne 0xfffb8922
mov dword [ebp - 0x8f0], 0
jmp near loc_fffb88ac  ; jmp 0xfffb88ac

loc_fffb86a2:
mov ecx, dword [ebp - 0x8f0]
mov edx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffb86cd  ; jne 0xfffb86cd

loc_fffb86b9:
inc dword [ebp - 0x8ec]
cmp dword [ebp - 0x8ec], 4
jne short loc_fffb86a2  ; jne 0xfffb86a2
jmp near loc_fffb889d  ; jmp 0xfffb889d

loc_fffb86cd:
mov edx, dword [ebp - 0x8fc]
mov al, byte [edi + edx + 0x45]
cmp al, 2
jne short loc_fffb86f9  ; jne 0xfffb86f9
mov ecx, dword [ebp - 0x8f0]
mov edx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
movzx eax, al
sub esp, 0xc
sub eax, 2
jmp short loc_fffb8719  ; jmp 0xfffb8719

loc_fffb86f9:
test al, al
jne short loc_fffb8730  ; jne 0xfffb8730
mov ecx, dword [ebp - 0x8f0]
mov edx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
movzx eax, al
sub esp, 0xc
sub eax, 4

loc_fffb8719:
push eax
mov ecx, dword [ebp - 0x8f0]
mov edx, dword [ebp - 0x8ec]
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
add esp, 0x10

loc_fffb8730:
imul ecx, dword [ebp - 0x8ec], 0x2f
mov byte [ebp - 0x8f8], 0
mov dword [ebp - 0x908], ecx
jmp near loc_fffb8886  ; jmp 0xfffb8886

loc_fffb8749:
push ecx
movzx esi, byte [ebp - 0x8f8]
mov ecx, dword [ebp - 0x8ec]
push 6
mov edx, dword [ebp - 0x8f0]
mov eax, edi
push 0
push esi
call fcn_fffbfee2  ; call 0xfffbfee2
lea edx, [esi + esi*4]
mov dword [ebp - 0x900], edx
add edx, dword [ebp - 0x908]
add edx, dword [ebp - 0x8f4]
add edx, edi
add esp, 0xc
mov dword [ebp - 0x904], edx
mov ecx, dword [ebp - 0x8ec]
mov byte [edx + 0x4f], al
mov edx, dword [ebp - 0x8f0]
push 3
mov eax, edi
push 0x10
push esi
call fcn_fffbfee2  ; call 0xfffbfee2
mov ecx, dword [ebp - 0x904]
add esp, 0xc
mov edx, dword [ebp - 0x8f0]
mov byte [ecx + 0x51], al
mov ecx, dword [ebp - 0x8ec]
push 6
mov eax, edi
push 0
push esi
call fcn_fffbfe93  ; call 0xfffbfe93
imul ecx, dword [ebp - 0x8ec], 0x24
lea edx, [esi + esi*2]
add edx, ecx
add edx, dword [ebp - 0x8f4]
add esp, 0xc
mov dword [ebp - 0x904], ecx
mov ecx, dword [ebp - 0x8ec]
mov byte [edi + edx + 0x295], al
mov edx, dword [ebp - 0x8f0]
push 1
mov eax, edi
push 0x13
push esi
call fcn_fffbfe93  ; call 0xfffbfe93
mov edx, dword [ebp - 0x904]
add edx, dword [ebp - 0x8f4]
add edx, edi
add esp, 0xc
mov ecx, dword [ebp - 0x8ec]
mov byte [esi + edx + 0x2b0], al
mov edx, dword [ebp - 0x8f0]
push 6
mov eax, edi
push 8
push esi
call fcn_fffbfe93  ; call 0xfffbfe93
imul edx, dword [ebp - 0x8ec], 0x2d
add edx, dword [ebp - 0x900]
add edx, dword [ebp - 0x8f4]
add esp, 0xc
mov ecx, dword [ebp - 0x8ec]
mov byte [edi + edx + 0x109], al
mov edx, dword [ebp - 0x8f0]
push 3
mov eax, edi
push 0xf
push esi
call fcn_fffbfe93  ; call 0xfffbfe93
imul edx, dword [ebp - 0x8ec], 0x12
add edx, dword [ebp - 0x8f4]
add edx, edi
inc byte [ebp - 0x8f8]
add esp, 0x10
mov byte [esi + edx + 0x32e], al

loc_fffb8886:
mov al, byte [ebp - 0x8f8]
cmp al, byte [edi + 0x20b5]
jb loc_fffb8749  ; jb 0xfffb8749
jmp near loc_fffb86b9  ; jmp 0xfffb86b9

loc_fffb889d:
inc dword [ebp - 0x8f0]
cmp dword [ebp - 0x8f0], 2
je short loc_fffb8922  ; je 0xfffb8922

loc_fffb88ac:
imul edx, dword [ebp - 0x8f0], 0x1055
mov dword [ebp - 0x8ec], 0
mov dword [ebp - 0x8fc], edx
mov dword [ebp - 0x8f4], edx
jmp near loc_fffb86a2  ; jmp 0xfffb86a2

loc_fffb88d1:
mov ebx, 1
jmp short loc_fffb8922  ; jmp 0xfffb8922

loc_fffb88d8:
shl eax, 0x1e
mov ecx, dword [edi + 0x2223]
mov edx, dword [ecx + 0x4004]
and edx, 0x3fffffff
or eax, edx
mov dword [ecx + 0x4004], eax
jmp near loc_fffb8646  ; jmp 0xfffb8646

loc_fffb88fa:
movzx edx, byte [edi + 0x109a]
mov ecx, dword [edi + 0x2223]
shl edx, 0x1e
mov eax, dword [ecx + 0x4404]
and eax, 0x3fffffff
or eax, edx
mov dword [ecx + 0x4404], eax
jmp near loc_fffb8653  ; jmp 0xfffb8653

loc_fffb8922:
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb892c:
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
push ebx
mov ebx, edx
movzx edx, cl
lea esp, [esp - 0x1c]
mov byte [ebp - 0x1c], cl
mov ecx, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffb8a63  ; je 0xfffb8a63
mov eax, dword [esi + 0x20b6]
cmp eax, 0x640
je short loc_fffb8979  ; je 0xfffb8979
ja short loc_fffb8967  ; ja 0xfffb8967
cmp eax, 0x535
jne short loc_fffb8975  ; jne 0xfffb8975
jmp short loc_fffb898e  ; jmp 0xfffb898e

loc_fffb8967:
cmp eax, 0x74b
je short loc_fffb8980  ; je 0xfffb8980
cmp eax, 0x855
je short loc_fffb8987  ; je 0xfffb8987

loc_fffb8975:
xor edx, edx
jmp short loc_fffb8993  ; jmp 0xfffb8993

loc_fffb8979:
mov edx, 2
jmp short loc_fffb8993  ; jmp 0xfffb8993

loc_fffb8980:
mov edx, 3
jmp short loc_fffb8993  ; jmp 0xfffb8993

loc_fffb8987:
mov edx, 4
jmp short loc_fffb8993  ; jmp 0xfffb8993

loc_fffb898e:
mov edx, 1

loc_fffb8993:
xor ecx, ecx
cmp byte [ebp - 0x1c], 1
seta cl
lea eax, [esi + ebx*2]
cmp byte [ecx + eax + 0x22c6], 0
jne short loc_fffb89cc  ; jne 0xfffb89cc
imul eax, ecx, 0x46
movzx edi, dl
mov dword [ebp - 0x1c], eax
imul eax, ebx, 0x8c
add eax, dword [ebp - 0x1c]
add eax, esi
mov al, byte [edi + eax + 0x2140]
test al, al
jne loc_fffb8a65  ; jne 0xfffb8a65

loc_fffb89cc:
cmp dword [esi + 0x2238], 4
ja short loc_fffb8a15  ; ja 0xfffb8a15
mov eax, dword [esi + 0x2238]
imul edx, edx, 6
jmp dword [eax*4 + ref_fffcee1c]  ; ujmp: jmp dword [eax*4 - 0x311e4]

loc_fffb89e5:
imul eax, ebx, 0x1e
lea eax, [edx + eax + ref_fffcee80]  ; lea eax, [edx + eax - 0x31180]
jmp short loc_fffb8a22  ; jmp 0xfffb8a22

loc_fffb89f1:
imul eax, ebx, 0x1e
lea eax, [edx + eax + ref_fffceebc]  ; lea eax, [edx + eax - 0x31144]
jmp short loc_fffb8a22  ; jmp 0xfffb8a22

loc_fffb89fd:
imul eax, ebx, 0x1e
lea eax, [edx + eax + ref_fffceef8]  ; lea eax, [edx + eax - 0x31108]
jmp short loc_fffb8a22  ; jmp 0xfffb8a22

loc_fffb8a09:
imul eax, ebx, 0x1e
lea eax, [edx + eax + ref_fffcef34]  ; lea eax, [edx + eax - 0x310cc]
jmp short loc_fffb8a22  ; jmp 0xfffb8a22

loc_fffb8a15:
imul edx, edx, 6

loc_fffb8a18:
imul eax, ebx, 0x1e
lea eax, [edx + eax + ref_fffcee44]  ; lea eax, [edx + eax - 0x311bc]

loc_fffb8a22:
imul ecx, ecx, 0x46
imul ebx, ebx, 0x8c
add ecx, ebx
mov dl, byte [esi + ecx + 0x2132]
and edx, 0x1f
cmp dl, 4
ja short loc_fffb8a5e  ; ja 0xfffb8a5e
movzx edx, dl
jmp dword [edx*4 + ref_fffcee30]  ; ujmp: jmp dword [edx*4 - 0x311d0]

loc_fffb8a46:
mov al, byte [eax]
jmp short loc_fffb8a65  ; jmp 0xfffb8a65

loc_fffb8a4a:
mov al, byte [eax + 1]
jmp short loc_fffb8a65  ; jmp 0xfffb8a65

loc_fffb8a4f:
mov al, byte [eax + 2]
jmp short loc_fffb8a65  ; jmp 0xfffb8a65

loc_fffb8a54:
mov al, byte [eax + 3]
jmp short loc_fffb8a65  ; jmp 0xfffb8a65

loc_fffb8a59:
mov al, byte [eax + 4]
jmp short loc_fffb8a65  ; jmp 0xfffb8a65

loc_fffb8a5e:
mov al, byte [eax + 5]
jmp short loc_fffb8a65  ; jmp 0xfffb8a65

loc_fffb8a63:
mov al, 8

loc_fffb8a65:
lea esp, [esp + 0x1c]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffb8a6e:
db 0x00
db 0x00

fcn_fffb8a70:
push ebp
mov dword [edx], 0
mov word [edx + 8], 4
mov ebp, esp
mov byte [edx + 0xa], 3
push esi
mov byte [edx + 0xb], cl
mov byte [edx + 0xc], 0
push ebx
mov byte [edx + 0xd], 0
mov byte [edx + 0xe], 0
mov byte [edx + 0xf], 0
mov word [edx + 0x10], 1
movzx esi, byte [eax + 0x20aa]
mov ebx, dword [ebp + 0xc]
mov word [edx + 0x12], si
mov dword [edx + 4], ebx
mov dword [edx + 0x19], ebx
mov byte [edx + 0x14], 3
mov dword [edx + 0x15], 4
mov word [edx + 0x1d], 0
mov byte [edx + 0x1f], 0
mov byte [edx + 0x20], cl
mov byte [edx + 0x21], 0
mov byte [edx + 0x22], 0
mov byte [edx + 0x23], 0
mov byte [edx + 0x24], 0
mov word [edx + 0x25], 1
mov word [edx + 0x27], 4
mov byte [edx + 0x29], 3
mov dword [edx + 0x2a], 0xb
mov word [edx + 0x32], 0
mov byte [edx + 0x34], 0
mov byte [edx + 0x35], cl
mov byte [edx + 0x36], 0
mov byte [edx + 0x37], 0
movzx esi, byte [ebp + 8]
mov byte [edx + 0x38], 0
imul esi, esi, 0x1055
mov byte [edx + 0x39], 0
mov word [edx + 0x3a], 0xf
movzx esi, byte [eax + esi + 0x3b]
add esi, 0x24
mov dword [edx + 0x2e], ebx
mov word [edx + 0x3c], si
mov byte [edx + 0x3e], 4
mov dword [edx + 0x3f], 0
mov word [edx + 0x47], 0
mov byte [edx + 0x49], 3
mov byte [edx + 0x4a], cl
mov byte [edx + 0x4b], 0
mov byte [edx + 0x4c], 0
mov byte [edx + 0x4d], 0
mov byte [edx + 0x4e], 0
mov word [edx + 0x4f], 1
movzx eax, byte [eax + 0x20aa]
mov dword [edx + 0x43], ebx
mov word [edx + 0x51], ax
pop ebx
mov byte [edx + 0x53], 3
pop esi
pop ebp
ret

fcn_fffb8b71:
mov eax, dword [eax + 0x20b6]
cmp eax, 0x7d0
je loc_fffb8c09  ; je 0xfffb8c09
ja short loc_fffb8bc7  ; ja 0xfffb8bc7
cmp eax, 0x578
je loc_fffb8c55  ; je 0xfffb8c55
ja short loc_fffb8bac  ; ja 0xfffb8bac
cmp eax, 0x42b
je loc_fffb8c4e  ; je 0xfffb8c4e
cmp eax, 0x535
jne loc_fffb8c63  ; jne 0xfffb8c63
jmp near loc_fffb8c55  ; jmp 0xfffb8c55

loc_fffb8bac:
cmp eax, 0x708
je short loc_fffb8bfb  ; je 0xfffb8bfb
cmp eax, 0x74b
je short loc_fffb8c02  ; je 0xfffb8c02
cmp eax, 0x640
jne loc_fffb8c63  ; jne 0xfffb8c63
jmp short loc_fffb8c02  ; jmp 0xfffb8c02

loc_fffb8bc7:
cmp eax, 0x960
je short loc_fffb8c10  ; je 0xfffb8c10
ja short loc_fffb8be4  ; ja 0xfffb8be4
cmp eax, 0x855
je short loc_fffb8c09  ; je 0xfffb8c09
cmp eax, 0x898
jne loc_fffb8c63  ; jne 0xfffb8c63
jmp short loc_fffb8c09  ; jmp 0xfffb8c09

loc_fffb8be4:
cmp eax, 0xa6b
je short loc_fffb8c1e  ; je 0xfffb8c1e
cmp eax, 0xaf0
je short loc_fffb8c25  ; je 0xfffb8c25
cmp eax, 0xa28
jne short loc_fffb8c63  ; jne 0xfffb8c63
jmp short loc_fffb8c17  ; jmp 0xfffb8c17

loc_fffb8bfb:
mov eax, 0xc
jmp short loc_fffb8c5a  ; jmp 0xfffb8c5a

loc_fffb8c02:
mov eax, 0xf
jmp short loc_fffb8c5a  ; jmp 0xfffb8c5a

loc_fffb8c09:
mov eax, 0xd
jmp short loc_fffb8c5a  ; jmp 0xfffb8c5a

loc_fffb8c10:
mov eax, 0xa
jmp short loc_fffb8c5a  ; jmp 0xfffb8c5a

loc_fffb8c17:
mov eax, 8
jmp short loc_fffb8c5a  ; jmp 0xfffb8c5a

loc_fffb8c1e:
mov eax, 7
jmp short loc_fffb8c5a  ; jmp 0xfffb8c5a

loc_fffb8c25:
mov eax, 6
jmp short loc_fffb8c5a  ; jmp 0xfffb8c5a

loc_fffb8c2c:
cmp ax, word [ecx]
jge short fcn_fffb8c37  ; jge 0xfffb8c37
jmp short loc_fffb8c63  ; jmp 0xfffb8c63

loc_fffb8c33:
mov al, 3
jmp short loc_fffb8c61  ; jmp 0xfffb8c61

fcn_fffb8c37:
push ebp
mov ebp, esp
mov edx, dword [ebp + 8]
cmp ax, word [edx]
jl short loc_fffb8c33  ; jl 0xfffb8c33
mov edx, dword [ebp + 0xc]
cmp ax, word [edx]
jl short loc_fffb8c33  ; jl 0xfffb8c33
mov al, 2
jmp short loc_fffb8c61  ; jmp 0xfffb8c61

loc_fffb8c4e:
mov eax, 0x11
jmp short loc_fffb8c5a  ; jmp 0xfffb8c5a

loc_fffb8c55:
mov eax, 0x10

loc_fffb8c5a:
cmp ax, word [edx]
jl short loc_fffb8c63  ; jl 0xfffb8c63
jmp short loc_fffb8c2c  ; jmp 0xfffb8c2c

loc_fffb8c61:
pop ebp
ret

loc_fffb8c63:
mov al, 3
ret

fcn_fffb8c66:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
lea esp, [esp - 0x2c]
mov bl, byte [ebp + 8]
movzx eax, bl
mov byte [ebp - 0x24], dl
mov dword [ebp - 0x1c], eax
mov byte [ebp - 0x28], cl
movzx eax, dl
mov ecx, dword [ebp - 0x1c]
mov edx, eax
mov dword [ebp - 0x20], eax
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
movzx esi, al
mov ecx, dword [ebp - 0x1c]
mov edx, dword [ebp - 0x20]
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
imul edx, dword [ebp - 0x1c], 0x1055
movzx eax, al
add edx, edi
imul eax, eax, 0xffffffc0
movzx ecx, byte [edx + 0x3b]
imul ecx, ecx, 0xffffff80
shl esi, 6
movzx edx, byte [edx + 0x45]
lea eax, [esi + eax - 0x380]
add ecx, eax
cmp bl, 1
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4408
add eax, dword [edi + 0x2223]
mov eax, dword [eax]
and eax, 0x8000000
shr eax, 0x1b
shl eax, 7
add eax, ecx
test dl, dl
jne short loc_fffb8cf9  ; jne 0xfffb8cf9
add eax, 0xffffff80
mov dword [ebp - 0x2c], eax
jmp short loc_fffb8d01  ; jmp 0xfffb8d01

loc_fffb8cf9:
imul edx, edx, 0xffffff80
add edx, eax
mov dword [ebp - 0x2c], edx

loc_fffb8d01:
movzx eax, byte [ebp - 0x24]
mov byte [ebp - 0x20], 0
mov dword [ebp - 0x24], eax
movzx eax, byte [ebp - 0x28]
mov dword [ebp - 0x28], eax
jmp near loc_fffb8d9e  ; jmp 0xfffb8d9e

loc_fffb8d18:
push eax
movzx ebx, byte [ebp - 0x20]
mov ecx, dword [ebp - 0x24]
push 3
mov edx, dword [ebp - 0x1c]
mov eax, edi
push 0x10
push ebx
call fcn_fffbfee2  ; call 0xfffbfee2
add esp, 0xc
mov esi, eax
push 6
mov ecx, dword [ebp - 0x24]
mov edx, dword [ebp - 0x1c]
push 0
shl esi, 6
mov eax, edi
push ebx
call fcn_fffbfee2  ; call 0xfffbfee2
add esp, 0xc
add esi, eax
push 3
mov ecx, dword [ebp - 0x28]
mov edx, dword [ebp - 0x1c]
push 0xf
mov eax, edi
mov dword [ebp - 0x30], esi
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
add esp, 0xc
mov esi, eax
push 6
mov ecx, dword [ebp - 0x28]
mov edx, dword [ebp - 0x1c]
push 8
shl esi, 6
mov eax, edi
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
add esp, 0x10
cmp eax, 0x20
sbb eax, eax
not eax
and eax, 0x20
add esi, eax
mov eax, dword [ebp - 0x30]
sub eax, esi
mov esi, dword [ebp - 0x2c]
add esi, eax
cmp esi, 0xffffffe1
jge short loc_fffb8db1  ; jge 0xfffb8db1
inc byte [ebp - 0x20]

loc_fffb8d9e:
mov al, byte [ebp - 0x20]
cmp al, byte [edi + 0x20b5]
jb loc_fffb8d18  ; jb 0xfffb8d18
mov al, 1
jmp short loc_fffb8db3  ; jmp 0xfffb8db3

loc_fffb8db1:
mov al, 2

loc_fffb8db3:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb8dbb:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x4c]
mov eax, dword [ebp + 8]
mov dword [ebp - 0x48], eax
mov edi, eax
mov dword [ebp - 0x2c], 0

loc_fffb8dd4:
cmp byte [edi + 0x3a], 0
jne loc_fffb93a5  ; jne 0xfffb93a5
jmp near loc_fffb9389  ; jmp 0xfffb9389

loc_fffb8de3:
mov edx, dword [edi + 0x19]
mov eax, dword [edi + 0x36]
cmp edx, eax
jbe short loc_fffb8df5  ; jbe 0xfffb8df5
lea eax, [edx - 4]
mov byte [ebp - 0x41], al
jmp short loc_fffb8dfb  ; jmp 0xfffb8dfb

loc_fffb8df5:
lea ecx, [eax - 4]
mov byte [ebp - 0x41], cl

loc_fffb8dfb:
mov byte [ebp - 0x58], 2
jmp near loc_fffb8ef2  ; jmp 0xfffb8ef2

loc_fffb8e04:
mov ecx, dword [ebp - 0x2c]
mov edx, ebx
mov eax, dword [ebp + 8]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffb8e30  ; je 0xfffb8e30
sub esp, 0xc
mov ecx, ebx
push dword [ebp - 0x2c]
mov edx, ebx
mov eax, dword [ebp + 8]
call fcn_fffb8c66  ; call 0xfffb8c66
add esp, 0x10
cmp al, 2
mov esi, eax
je short loc_fffb8e36  ; je 0xfffb8e36

loc_fffb8e30:
inc ebx
cmp ebx, 4
jne short loc_fffb8e04  ; jne 0xfffb8e04

loc_fffb8e36:
mov ecx, dword [edi + 0x19]
mov edx, dword [edi + 0x36]
cmp ecx, edx
lea ebx, [edx - 6]
lea eax, [ecx - 6]
cmovbe eax, ebx
lea ebx, [ebp - 0x1e]
mov edx, dword [ebp - 0x2c]
lea ecx, [eax + esi]
mov byte [ebp - 0x58], cl
push ecx
lea eax, [ebp - 0x1a]
lea esi, [ebp - 0x1c]
push eax
lea ecx, [ebp - 0x20]
mov eax, dword [ebp + 8]
push esi
push ebx
call fcn_fffbeec5  ; call 0xfffbeec5
pop eax
pop edx
lea edx, [ebp - 0x1a]
mov ecx, ebx
push edx
mov eax, dword [ebp + 8]
lea edx, [ebp - 0x20]
push esi
call fcn_fffb8b71  ; call 0xfffb8b71
lea edx, [eax - 1]
add esp, 0x10
cmp dl, 1
mov byte [ebp - 0x41], dl
ja short loc_fffb8ede  ; ja 0xfffb8ede
jmp short loc_fffb8ed8  ; jmp 0xfffb8ed8

loc_fffb8e8c:
mov ecx, dword [ebp - 0x2c]
mov edx, esi
mov eax, dword [ebp + 8]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffb8eca  ; je 0xfffb8eca
mov ecx, dword [ebp - 0x2c]
mov edx, ebx
mov eax, dword [ebp + 8]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffb8eca  ; je 0xfffb8eca
sub esp, 0xc
mov ecx, ebx
push dword [ebp - 0x2c]
mov edx, esi
mov eax, dword [ebp + 8]
call fcn_fffb8c66  ; call 0xfffb8c66
add esp, 0x10
cmp al, 2
mov byte [ebp - 0x41], al
je short loc_fffb8ef2  ; je 0xfffb8ef2

loc_fffb8eca:
inc ebx
cmp ebx, 4
jne short loc_fffb8e8c  ; jne 0xfffb8e8c
inc esi
cmp esi, 4
jne short loc_fffb8eda  ; jne 0xfffb8eda
jmp short loc_fffb8ede  ; jmp 0xfffb8ede

loc_fffb8ed8:
xor esi, esi

loc_fffb8eda:
xor ebx, ebx
jmp short loc_fffb8e8c  ; jmp 0xfffb8e8c

loc_fffb8ede:
mov ecx, dword [edi + 0x19]
mov edx, dword [edi + 0x36]
cmp ecx, edx
lea eax, [ecx - 6]
lea ebx, [edx - 6]
cmovbe eax, ebx
add byte [ebp - 0x41], al

loc_fffb8ef2:
cmp dword [edi + 0xa], 0
mov dword [edi + 0x19], 6
mov dword [edi + 0x36], 6
je loc_fffb90d2  ; je 0xfffb90d2
cmp dword [edi + 0x27], 0
je loc_fffb90d2  ; je 0xfffb90d2
mov ecx, dword [ebp - 0x48]
cmp byte [ecx + 0x210e], 3
jne loc_fffb90d2  ; jne 0xfffb90d2
cmp byte [ecx + 0x2154], 3
jne loc_fffb90d2  ; jne 0xfffb90d2
mov al, byte [ecx + 0x2178]
mov dl, byte [ecx + 0x2132]
and eax, 0x1f
and edx, 0x1f
mov cl, al
or cl, dl
je loc_fffb90d2  ; je 0xfffb90d2
test dl, dl
sete byte [ebp - 0x30]
cmp al, 1
mov cl, byte [ebp - 0x30]
sete byte [ebp - 0x42]
test byte [ebp - 0x42], cl
jne loc_fffb90d2  ; jne 0xfffb90d2
cmp dl, 1
sete byte [ebp - 0x34]
cmp al, 1
setbe cl
test byte [ebp - 0x34], cl
jne loc_fffb90d2  ; jne 0xfffb90d2
cmp dl, 2
lea ecx, [eax - 1]
sete byte [ebp - 0x44]
cmp cl, 1
setbe cl
test byte [ebp - 0x44], cl
jne loc_fffb90d2  ; jne 0xfffb90d2
cmp al, 2
mov cl, byte [ebp - 0x34]
sete byte [ebp - 0x38]
test byte [ebp - 0x38], cl
jne loc_fffb90d2  ; jne 0xfffb90d2
test al, al
sete byte [ebp - 0x43]
mov cl, byte [ebp - 0x43]
test byte [ebp - 0x44], cl
jne loc_fffb90d2  ; jne 0xfffb90d2
mov cl, byte [ebp - 0x30]
test byte [ebp - 0x38], cl
jne loc_fffb90d2  ; jne 0xfffb90d2
cmp dl, 5
sete bl
cmp al, 5
sete cl
test cl, bl
jne loc_fffb90d2  ; jne 0xfffb90d2
test byte [ebp - 0x38], bl
jne loc_fffb90a2  ; jne 0xfffb90a2
test byte [ebp - 0x44], cl
je short loc_fffb8fe9  ; je 0xfffb8fe9
jmp near loc_fffb90a2  ; jmp 0xfffb90a2

loc_fffb8fe9:
test byte [ebp - 0x42], bl
jne loc_fffb90a2  ; jne 0xfffb90a2
test byte [ebp - 0x34], cl
je short loc_fffb8ffc  ; je 0xfffb8ffc
jmp near loc_fffb90a2  ; jmp 0xfffb90a2

loc_fffb8ffc:
test byte [ebp - 0x43], bl
jne loc_fffb90a2  ; jne 0xfffb90a2
test byte [ebp - 0x30], cl
je short loc_fffb900f  ; je 0xfffb900f
jmp near loc_fffb90a2  ; jmp 0xfffb90a2

loc_fffb900f:
cmp al, 3
sete byte [ebp - 0x3c]
test byte [ebp - 0x3c], bl
jne loc_fffb90c4  ; jne 0xfffb90c4
cmp dl, 3
sete byte [ebp - 0x40]
test byte [ebp - 0x40], cl
je short loc_fffb902f  ; je 0xfffb902f
jmp near loc_fffb90c4  ; jmp 0xfffb90c4

loc_fffb902f:
lea ecx, [edx - 2]
cmp cl, 1
setbe cl
test byte [ebp - 0x3c], cl
jne loc_fffb90d2  ; jne 0xfffb90d2
mov cl, byte [ebp - 0x38]
test byte [ebp - 0x40], cl
jne loc_fffb90d2  ; jne 0xfffb90d2
mov cl, byte [ebp - 0x34]
test byte [ebp - 0x3c], cl
jne short loc_fffb90d2  ; jne 0xfffb90d2
mov cl, byte [ebp - 0x42]
test byte [ebp - 0x40], cl
jne short loc_fffb90d2  ; jne 0xfffb90d2
mov cl, byte [ebp - 0x30]
test byte [ebp - 0x3c], cl
jne short loc_fffb90d2  ; jne 0xfffb90d2
mov cl, byte [ebp - 0x43]
test byte [ebp - 0x40], cl
jne short loc_fffb90d2  ; jne 0xfffb90d2
cmp dl, 4
sete dl
test cl, dl
jne short loc_fffb90a2  ; jne 0xfffb90a2
lea ecx, [eax - 4]
cmp cl, 1
setbe cl
cmp al, 4
sete al
test byte [ebp - 0x30], al
je short loc_fffb908c  ; je 0xfffb908c
jmp short loc_fffb90a2  ; jmp 0xfffb90a2

loc_fffb908c:
test byte [ebp - 0x42], dl
jne short loc_fffb90a2  ; jne 0xfffb90a2
test byte [ebp - 0x34], al
je short loc_fffb9098  ; je 0xfffb9098
jmp short loc_fffb90a2  ; jmp 0xfffb90a2

loc_fffb9098:
test byte [ebp - 0x38], dl
jne short loc_fffb90a2  ; jne 0xfffb90a2
test byte [ebp - 0x44], al
je short loc_fffb90b2  ; je 0xfffb90b2

loc_fffb90a2:
mov dword [edi + 0x19], 8
mov dword [edi + 0x36], 8
jmp short loc_fffb90d2  ; jmp 0xfffb90d2

loc_fffb90b2:
test cl, dl
jne short loc_fffb90d2  ; jne 0xfffb90d2
test al, bl
jne short loc_fffb90d2  ; jne 0xfffb90d2
test byte [ebp - 0x3c], dl
jne short loc_fffb90c4  ; jne 0xfffb90c4
test byte [ebp - 0x40], al
je short loc_fffb90d2  ; je 0xfffb90d2

loc_fffb90c4:
mov dword [edi + 0x19], 7
mov dword [edi + 0x36], 7

loc_fffb90d2:
sub esp, 0xc
xor edx, edx
push dword [edi + 0x19]
mov ecx, dword [ebp - 0x2c]
mov eax, dword [ebp + 8]
call fcn_fffc0316  ; call 0xfffc0316
pop ecx
push dword [edi + 0x36]
mov ecx, dword [ebp - 0x2c]
mov edx, 2
mov eax, dword [ebp + 8]
lea ebx, [ebp - 0x1c]
call fcn_fffc0316  ; call 0xfffc0316
mov edx, dword [ebp - 0x2c]
mov eax, dword [ebp + 8]
call fcn_fffbf181  ; call 0xfffbf181
add esp, 0xc
lea ecx, [ebp - 0x1a]
push ecx
mov edx, eax
lea eax, [ebp - 0x1e]
push ebx
and edx, 0x8f
lea ecx, [ebp - 0x20]
push eax
mov dword [ebp - 0x34], edx
mov eax, dword [ebp + 8]
mov edx, dword [ebp - 0x2c]
call fcn_fffbeec5  ; call 0xfffbeec5
pop esi
pop eax
lea edx, [ebp - 0x1a]
lea ecx, [ebp - 0x1e]
push edx
mov eax, dword [ebp + 8]
lea edx, [ebp - 0x20]
push ebx
call fcn_fffb8b71  ; call 0xfffb8b71
mov esi, dword [edi + 0x19]
mov cl, byte [edi + 0x36]
sub ecx, 6
add esp, 0xc
cmp esi, dword [edi + 0x36]
lea edx, [esi - 6]
cmovbe edx, ecx
lea ecx, [ebp - 0x1a]
add edx, eax
push ecx
lea eax, [ebp - 0x1e]
lea ecx, [ebp - 0x20]
push ebx
movzx esi, dl
mov edx, dword [ebp - 0x2c]
push eax
shl esi, 4
mov eax, dword [ebp + 8]
or esi, dword [ebp - 0x34]
call fcn_fffbeec5  ; call 0xfffbeec5
pop eax
pop edx
lea edx, [ebp - 0x1a]
lea ecx, [ebp - 0x1e]
push edx
mov eax, dword [ebp + 8]
lea edx, [ebp - 0x20]
push ebx
and esi, 0xfffff8ff
call fcn_fffb8b71  ; call 0xfffb8b71
mov ebx, dword [edi + 0x19]
mov cl, byte [edi + 0x36]
sub ecx, 6
add esp, 0x10
cmp ebx, dword [edi + 0x36]
lea edx, [ebx - 6]
cmovbe edx, ecx
add edx, eax
movzx edx, dl
shl edx, 8
or edx, esi
and dh, 0x8f
cmp byte [edi + 0x12], 2
mov dword [ebp - 0x30], edx
je short loc_fffb91c8  ; je 0xfffb91c8
cmp byte [edi + 0x2f], 2
jne loc_fffb92d6  ; jne 0xfffb92d6

loc_fffb91c8:
push ebx
lea ecx, [ebp - 0x1a]
lea esi, [ebp - 0x1c]
push ecx
lea ebx, [ebp - 0x1e]
lea ecx, [ebp - 0x20]
push esi
mov edx, dword [ebp - 0x2c]
mov eax, dword [ebp + 8]
push ebx
call fcn_fffbeec5  ; call 0xfffbeec5
pop eax
pop edx
lea eax, [ebp - 0x1a]
mov ecx, ebx
push eax
lea edx, [ebp - 0x20]
mov eax, dword [ebp + 8]
push esi
call fcn_fffb8b71  ; call 0xfffb8b71
add esp, 0x10
jmp near loc_fffb9314  ; jmp 0xfffb9314

loc_fffb91ff:
cmp dword [edi + 0xa], 0
je short loc_fffb9259  ; je 0xfffb9259
mov ecx, dword [ebp - 0x2c]
xor edx, edx
mov eax, dword [ebp + 8]
call fcn_fffbb493  ; call 0xfffbb493
push ecx
movzx ebx, byte [ebp - 0x34]
mov byte [ebp - 0x3c], al
push 6
xor ecx, ecx
mov edx, dword [ebp - 0x2c]
push 8
mov eax, dword [ebp + 8]
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
add esp, 0xc
mov esi, eax
push 3
xor ecx, ecx
mov edx, dword [ebp - 0x2c]
push 0xf
mov eax, dword [ebp + 8]
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
shl eax, 6
add esp, 0x10
add esi, eax
movzx eax, byte [ebp - 0x3c]
shr esi, 1
shl eax, 6
add eax, esi
mov dword [ebp - 0x3c], eax

loc_fffb9259:
cmp dword [edi + 0x27], 0
je short loc_fffb92bc  ; je 0xfffb92bc
mov edx, 2
mov ecx, dword [ebp - 0x2c]
mov eax, dword [ebp + 8]
call fcn_fffbb493  ; call 0xfffbb493
push edx
movzx ebx, byte [ebp - 0x34]
mov byte [ebp - 0x40], al
push 6
mov ecx, 2
mov edx, dword [ebp - 0x2c]
push 8
mov eax, dword [ebp + 8]
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
add esp, 0xc
mov esi, eax
push 3
mov ecx, 2
mov edx, dword [ebp - 0x2c]
push 0xf
mov eax, dword [ebp + 8]
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
shl eax, 6
add esp, 0x10
add esi, eax
movzx eax, byte [ebp - 0x40]
shr esi, 1
shl eax, 6
add eax, esi
mov dword [ebp - 0x40], eax

loc_fffb92bc:
mov eax, dword [ebp - 0x3c]
sub eax, dword [ebp - 0x40]
cdq
xor eax, edx
sub eax, edx
cmp dword [ebp - 0x38], eax
cmovae eax, dword [ebp - 0x38]
inc byte [ebp - 0x34]
mov dword [ebp - 0x38], eax
jmp short loc_fffb92ef  ; jmp 0xfffb92ef

loc_fffb92d6:
mov dword [ebp - 0x38], 0
mov dword [ebp - 0x40], 0
mov dword [ebp - 0x3c], 0
mov byte [ebp - 0x34], 0

loc_fffb92ef:
mov eax, dword [ebp + 8]
mov dl, byte [ebp - 0x34]
cmp dl, byte [eax + 0x20b5]
jb loc_fffb91ff  ; jb 0xfffb91ff
mov dl, byte [ebp - 0x38]
mov al, 2
add edx, 0x3f
shr dl, 6
test dl, dl
lea ecx, [edx + 1]
cmovne eax, ecx

loc_fffb9314:
mov ecx, dword [edi + 0x36]
mov ebx, dword [edi + 0x19]
cmp ebx, ecx
lea esi, [ecx - 6]
lea edx, [ebx - 6]
cmovbe edx, esi
add eax, edx
mov edx, dword [ebp - 0x2c]
movzx ebx, al
mov al, byte [ebp - 0x58]
shl eax, 0x18
shl ebx, 0xc
or ebx, dword [ebp - 0x30]
or ebx, eax
movzx eax, byte [ebp - 0x41]
and ebx, 0xfff8ffff
shl eax, 0x10
or ebx, eax
mov eax, dword [ebp + 8]
call fcn_fffbf0ab  ; call 0xfffbf0ab
movzx eax, al
and ebx, 0xff8fffff
shl eax, 0x14
mov dl, byte [ebp - 0x2c]
or eax, ebx
mov ecx, dword [ebp + 8]
and eax, 0x7ffffff
or eax, 0x8000000
cmp dl, 1
sbb edx, edx
and edx, 0xfffffc00
add edx, 0x4408
add edx, dword [ecx + 0x2223]
mov dword [edx], eax

loc_fffb9389:
inc dword [ebp - 0x2c]
add edi, 0x1055
add dword [ebp - 0x48], 0x8c
cmp dword [ebp - 0x2c], 2
jne loc_fffb8dd4  ; jne 0xfffb8dd4
jmp short loc_fffb93c4  ; jmp 0xfffb93c4

loc_fffb93a5:
mov eax, dword [ebp + 8]
cmp dword [eax + 0x20b6], 0x95f
jbe loc_fffb8de3  ; jbe 0xfffb8de3
xor ebx, ebx
mov esi, 1
jmp near loc_fffb8e04  ; jmp 0xfffb8e04

loc_fffb93c4:
mov eax, dword [ebp + 8]
mov edx, 0xdd4d
call fcn_fffad891  ; call 0xfffad891
lea esp, [ebp - 0xc]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb93db:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
movzx eax, cl
push ebx
lea ebx, [ebp - 0x3f0]
lea esp, [esp - 0x41c]
mov dword [ebp - 0x410], eax
mov dword [ebp - 0x414], edx
mov byte [ebp - 0x41b], cl
imul edx, edx, 0x2f
imul eax, eax, 0x1055
mov ecx, dword [ebp - 0x414]
lea eax, [edx + eax + 0x40]
mov dl, byte [edi + 0x20b5]
push dword [ebp + 8]
push dword [ebp - 0x410]
lea eax, [edi + eax + 0xd]
mov byte [ebp - 0x41a], dl
mov dword [ebp - 0x420], eax
mov edx, ebx
mov eax, edi
call fcn_fffb8a70  ; call 0xfffb8a70
pop ebx
pop esi
xor ecx, ecx
mov edx, 0x384
lea eax, [ebp - 0x39c]
call fcn_fffa24c1  ; call 0xfffa24c1
lea ecx, [ebp - 0x3ce]
mov byte [ebp - 0x419], 0xe7
mov dword [ebp - 0x418], ecx

loc_fffb9467:
xor ecx, ecx
mov edx, dword [ebp - 0x410]
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov ebx, eax
jne loc_fffb974a  ; jne 0xfffb974a
mov esi, dword [ebp - 0x420]
jmp near loc_fffb9518  ; jmp 0xfffb9518

loc_fffb948b:
mov dl, byte [esi + 4]
mov cl, byte [ebp - 0x419]
add cl, byte [esi + 2]
cmp byte [esi + 2], 0x3f
mov byte [ebp - 0x40c], cl
lea eax, [edx + 1]
ja short loc_fffb94bd  ; ja 0xfffb94bd
sub ecx, 0x40
cmp cl, 0x3f
ja short loc_fffb94b3  ; ja 0xfffb94b3
lea eax, [edx + 2]
jmp short loc_fffb94bd  ; jmp 0xfffb94bd

loc_fffb94b3:
cmp byte [ebp - 0x40c], 0xc0
cmova eax, edx

loc_fffb94bd:
push ebx
movzx eax, al
mov ecx, dword [ebp - 0x414]
push 3
mov edx, dword [ebp - 0x410]
add esi, 5
push 0x10
push eax
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
push ebx
mov al, byte [ebp - 0x40c]
mov edx, dword [ebp - 0x410]
push 6
and eax, 0x3f
mov ecx, dword [ebp - 0x414]
push 0
mov byte [ebp - 0x40c], al
movzx eax, al
push eax
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
mov dl, byte [ebp - 0x40c]
add esp, 0x20
mov byte [ebp + ebx - 0x3f9], dl
inc ebx

loc_fffb9518:
cmp byte [ebp - 0x41a], bl
ja loc_fffb948b  ; ja 0xfffb948b
mov dword [ebp - 0x40c], 0x32

loc_fffb952e:
push ecx
lea ecx, [ebp - 0x3f0]
mov edx, dword [ebp - 0x410]
push 1
mov eax, edi
push ecx
mov ecx, 3
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
jne loc_fffb974a  ; jne 0xfffb974a
xor ecx, ecx
mov edx, dword [ebp - 0x410]
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov ebx, eax
jne loc_fffb974a  ; jne 0xfffb974a
xor eax, eax
jmp short loc_fffb95d2  ; jmp 0xfffb95d2

loc_fffb957e:
cmp byte [ebp - 0x41b], 1
mov cl, byte [ebp + eax - 0x3f9]
sbb edx, edx
mov esi, dword [edi + 0x2223]
not edx
and edx, 0x100
cmp cl, 0x1f
jbe short loc_fffb95ae  ; jbe 0xfffb95ae
add edx, dword [eax*4 + ref_fffcf5b0]  ; add edx, dword [eax*4 - 0x30a50]
lea edx, [edx + esi + 8]
jmp short loc_fffb95b9  ; jmp 0xfffb95b9

loc_fffb95ae:
add edx, dword [eax*4 + ref_fffcf5b0]  ; add edx, dword [eax*4 - 0x30a50]
lea edx, [edx + esi + 4]

loc_fffb95b9:
mov esi, dword [edx]
and ecx, 0x1f
imul edx, eax, 0x64
inc eax
shr esi, cl
mov ecx, dword [ebp - 0x418]
and esi, 1
add word [ecx + edx + 0x32], si

loc_fffb95d2:
cmp byte [ebp - 0x41a], al
ja short loc_fffb957e  ; ja 0xfffb957e
dec dword [ebp - 0x40c]
jne loc_fffb952e  ; jne 0xfffb952e
inc byte [ebp - 0x419]
add dword [ebp - 0x418], 2
cmp byte [ebp - 0x419], 0x19
jne loc_fffb9467  ; jne 0xfffb9467
imul eax, dword [ebp - 0x410], 0x1055
imul edx, dword [ebp - 0x414], 0x2f
mov dword [ebp - 0x410], 0
lea eax, [edx + eax + 0x40]
lea ecx, [edi + eax + 0xf]
jmp near loc_fffb971f  ; jmp 0xfffb971f

loc_fffb9628:
imul edx, dword [ebp - 0x410], 0x64
mov al, byte [ecx]
lea edi, [ebp - 0x39c]
mov byte [ebp - 0x40c], al
add edi, edx
sub eax, 0x19
mov byte [ebp - 0x414], al
mov dword [ebp - 0x418], edi
mov esi, 0x32
xor eax, eax
jmp short loc_fffb96a7  ; jmp 0xfffb96a7

loc_fffb9657:
movzx edi, al
mov edx, dword [ebp - 0x418]
cmp word [edx + edi*2], 0
jne loc_fffb973a  ; jne 0xfffb973a
mov di, word [edx + edi*2 + 2]
test di, di
je short loc_fffb96a6  ; je 0xfffb96a6
cmp di, 0x31
ja short loc_fffb9697  ; ja 0xfffb9697
mov edx, esi
cmp dl, 0x32
jne short loc_fffb9697  ; jne 0xfffb9697
jmp short loc_fffb96a4  ; jmp 0xfffb96a4

loc_fffb9684:
mov edx, dword [ebp - 0x418]
cmp word [edx + edi*2 + 2], 0x32
jne short loc_fffb96a6  ; jne 0xfffb96a6
lea edi, [eax + 1]
jmp short loc_fffb96b0  ; jmp 0xfffb96b0

loc_fffb9697:
cmp di, 0x32
jne short loc_fffb96a6  ; jne 0xfffb96a6
lea edi, [eax + 1]
mov esi, eax
jmp short loc_fffb96b0  ; jmp 0xfffb96b0

loc_fffb96a4:
mov esi, eax

loc_fffb96a6:
inc eax

loc_fffb96a7:
cmp al, 0x31
jne short loc_fffb9657  ; jne 0xfffb9657
mov edi, 0x32

loc_fffb96b0:
mov eax, edi
mov edx, esi
cmp al, 0x32
sete al
cmp dl, 0x32
sete dl
or al, dl
jne short loc_fffb9733  ; jne 0xfffb9733
mov edx, edi
movzx eax, dl
mov edx, esi
movzx edi, dl
sub eax, edi
mov edi, 2
cdq
idiv edi
add esi, eax
mov al, byte [ebp - 0x414]
add eax, esi
cmp byte [ebp - 0x40c], 0x3f
setbe byte [ebp - 0x40c]
cmp al, 0xc0
seta dl
test byte [ebp - 0x40c], dl
je short loc_fffb9701  ; je 0xfffb9701
dec byte [ecx + 2]
jmp short loc_fffb9711  ; jmp 0xfffb9711

loc_fffb9701:
cmp al, 0x3f
seta dl
test byte [ebp - 0x40c], dl
je short loc_fffb9711  ; je 0xfffb9711
inc byte [ecx + 2]

loc_fffb9711:
and eax, 0x3f
inc dword [ebp - 0x410]
mov byte [ecx], al
add ecx, 5

loc_fffb971f:
mov al, byte [ebp - 0x410]
cmp byte [ebp - 0x41a], al
ja loc_fffb9628  ; ja 0xfffb9628
jmp short loc_fffb974a  ; jmp 0xfffb974a

loc_fffb9733:
mov ebx, 1
jmp short loc_fffb974a  ; jmp 0xfffb974a

loc_fffb973a:
mov edx, esi
cmp dl, 0x32
jne loc_fffb9684  ; jne 0xfffb9684
jmp near loc_fffb96a6  ; jmp 0xfffb96a6

loc_fffb974a:
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb9754:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
movzx eax, dl
lea esp, [esp - 0xac]
mov byte [ebp - 0xa2], dl
mov dword [ebp - 0xa0], eax
movzx edx, cl
mov byte [ebp - 0x9c], cl
mov dword [ebp - 0xa8], edx
xor ecx, ecx
imul edx, edx, 0x2f
imul eax, eax, 0x1055
lea eax, [edx + eax + 0x40]
mov edx, 0x24
lea esi, [ebx + eax + 0xd]
lea eax, [ebp - 0x90]
call fcn_fffa24c1  ; call 0xfffa24c1
cmp byte [ebx + 0x20b5], 8
jne short loc_fffb97b4  ; jne 0xfffb97b4
mov dword [ebp - 0x70], 1

loc_fffb97b4:
push eax
mov ecx, dword [ebp - 0xa8]
lea edx, [ebp - 0x6c]
push eax
push dword [ebp + 8]
push dword [ebp - 0xa0]
mov eax, ebx
xor edi, edi
call fcn_fffb8a70  ; call 0xfffb8a70
movzx ecx, byte [ebp - 0xa2]
add esp, 0x10
movzx edx, byte [ebp - 0x9c]
mov byte [ebp - 0xa1], 0
xor eax, eax
mov dword [ebp - 0xac], ecx
mov dword [ebp - 0xb0], edx
jmp near loc_fffb9997  ; jmp 0xfffb9997

loc_fffb97fc:
push eax
lea eax, [ebp - 0x6c]
mov ecx, 3
push 1
mov edx, dword [ebp - 0xa0]
push eax
mov eax, ebx
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov edx, dword [ebp - 0xa0]
cmovne edi, eax
xor ecx, ecx
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov eax, 0xc
mov dword [ebp - 0x9c], 0
cmovne edi, eax
mov al, byte [ebx + 0x20b5]
mov byte [ebp - 0xa3], al
xor eax, eax
jmp near loc_fffb98ec  ; jmp 0xfffb98ec

loc_fffb985d:
lea edx, [eax + eax*4]
mov dl, byte [esi + edx + 1]
mov cl, dl
and edx, 0x3f
and ecx, 0x1f
cmp dl, 0x1f
mov byte [ebp - 0xa4], cl
mov ecx, dword [ebx + 0x2223]
jbe short loc_fffb989b  ; jbe 0xfffb989b
cmp byte [ebp - 0xa2], 1
sbb edx, edx
not edx
and edx, 0x100
add edx, dword [eax*4 + ref_fffcf5b0]  ; add edx, dword [eax*4 - 0x30a50]
lea edx, [edx + ecx + 8]
jmp short loc_fffb98b7  ; jmp 0xfffb98b7

loc_fffb989b:
cmp byte [ebp - 0xa2], 1
sbb edx, edx
not edx
and edx, 0x100
add edx, dword [eax*4 + ref_fffcf5b0]  ; add edx, dword [eax*4 - 0x30a50]
lea edx, [edx + ecx + 4]

loc_fffb98b7:
mov edx, dword [edx]
mov cl, byte [ebp - 0xa4]
mov dword [ebp - 0xb8], edx
mov edx, 1
shl edx, cl
mov ecx, dword [ebp - 0xb8]
test edx, ecx
jne short loc_fffb98eb  ; jne 0xfffb98eb
mov dword [ebp + eax*4 - 0x90], 1
mov dword [ebp - 0x9c], 1

loc_fffb98eb:
inc eax

loc_fffb98ec:
cmp byte [ebp - 0xa3], al
ja loc_fffb985d  ; ja 0xfffb985d
cmp dword [ebp - 0x9c], 1
jne short loc_fffb996f  ; jne 0xfffb996f
xor eax, eax

loc_fffb9903:
cmp dword [ebp + eax*4 - 0x90], 0
je loc_fffb99b0  ; je 0xfffb99b0
inc eax
cmp eax, 9
jne short loc_fffb9903  ; jne 0xfffb9903
mov al, 1
jmp short loc_fffb9997  ; jmp 0xfffb9997

loc_fffb991b:
movzx eax, byte [ebp - 0x9c]
cmp dword [ebp + eax*4 - 0x90], 1
jne short loc_fffb9959  ; jne 0xfffb9959
lea ecx, [eax + eax*4]
add ecx, esi
mov dl, byte [ecx + 4]
add edx, 2
mov byte [ecx + 4], dl
mov ecx, dword [ebp - 0xa8]
push eax
movzx edx, dl
mov eax, ebx
push 3
push 0x10
push edx
mov edx, dword [ebp - 0xa0]
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10

loc_fffb9959:
inc byte [ebp - 0x9c]

loc_fffb995f:
mov al, byte [ebp - 0x9c]
cmp al, byte [ebx + 0x20b5]
jb short loc_fffb991b  ; jb 0xfffb991b
jmp short loc_fffb9995  ; jmp 0xfffb9995

loc_fffb996f:
mov al, byte [esi + 0x2d]
sub esp, 0xc
sub eax, 2
mov ecx, dword [ebp - 0xac]
mov byte [esi + 0x2d], al
mov edx, dword [ebp - 0xb0]
movzx eax, al
push eax
mov eax, ebx
call fcn_fffbb521  ; call 0xfffbb521
add esp, 0x10

loc_fffb9995:
xor eax, eax

loc_fffb9997:
cmp byte [ebp - 0xa1], 0xfd
setbe dl
test eax, eax
sete al
test dl, al
jne loc_fffb97fc  ; jne 0xfffb97fc
jmp short loc_fffb99e9  ; jmp 0xfffb99e9

loc_fffb99b0:
mov al, byte [esi + 0x2e]
sub esp, 0xc
add eax, 2
mov ecx, dword [ebp - 0xac]
mov byte [esi + 0x2e], al
mov edx, dword [ebp - 0xb0]
movzx eax, al
add byte [ebp - 0xa1], 2
push eax
mov eax, ebx
call fcn_fffbb5d0  ; call 0xfffbb5d0
add esp, 0x10
mov byte [ebp - 0x9c], 0
jmp near loc_fffb995f  ; jmp 0xfffb995f

loc_fffb99e9:
cmp byte [ebp - 0xa1], 0xfd
mov eax, 6
cmova edi, eax
lea esp, [ebp - 0xc]
pop ebx
mov eax, edi
pop esi
pop edi
pop ebp
ret

fcn_fffb9a02:
push ebp
mov byte [ecx], 0
mov ebp, esp
push edi
lea edi, [edx + edx*4]
add edi, eax
push esi
mov esi, dword [ebp + 8]
push ebx
mov byte [esi], 0x10
jmp short loc_fffb9a33  ; jmp 0xfffb9a33

loc_fffb9a18:
mov bl, byte [eax + 4]
mov dl, byte [esi]
cmp bl, dl
cmovbe edx, ebx
mov byte [esi], dl
mov bl, byte [eax + 4]
mov dl, byte [ecx]
cmp bl, dl
cmovae edx, ebx
add eax, 5
mov byte [ecx], dl

loc_fffb9a33:
cmp eax, edi
jne short loc_fffb9a18  ; jne 0xfffb9a18
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb9a3c:
push ebp
mov ebp, esp
push edi
push esi
mov esi, ecx
push ebx
lea esp, [esp - 0x10]
mov eax, dword [ebp + 8]
mov dword [ebp - 0x18], edx
mov byte [eax], 0
mov byte [eax + 2], 0
mov byte [eax + 3], 0
cmp dword [ecx], 1
jne loc_fffb9b3b  ; jne 0xfffb9b3b
jmp near loc_fffb9b6f  ; jmp 0xfffb9b6f

loc_fffb9a67:
test dl, dl
jne short loc_fffb9a72  ; jne 0xfffb9a72
mov ecx, dword [ebp - 0x18]
mov ecx, dword [ecx]
jmp short loc_fffb9a97  ; jmp 0xfffb9a97

loc_fffb9a72:
cmp dl, 0x20
jne short loc_fffb9a7f  ; jne 0xfffb9a7f
mov ecx, dword [ebp - 0x18]
mov ecx, dword [ecx + 4]
jmp short loc_fffb9a97  ; jmp 0xfffb9a97

loc_fffb9a7f:
cmp dl, 0x40
jne short loc_fffb9a8c  ; jne 0xfffb9a8c
mov ecx, dword [ebp - 0x18]
mov ecx, dword [ecx + 8]
jmp short loc_fffb9a97  ; jmp 0xfffb9a97

loc_fffb9a8c:
cmp dl, 0x60
jne short loc_fffb9a9f  ; jne 0xfffb9a9f
mov ecx, dword [ebp - 0x18]
mov ecx, dword [ecx + 0xc]

loc_fffb9a97:
mov dword [ebp - 0x10], ecx
mov edi, 1

loc_fffb9a9f:
test dword [ebp - 0x10], edi
je short loc_fffb9ab2  ; je 0xfffb9ab2
test bl, bl
mov cl, byte [ebp - 0x19]
cmove ecx, edx
inc ebx
mov byte [ebp - 0x19], cl
jmp short loc_fffb9acb  ; jmp 0xfffb9acb

loc_fffb9ab2:
test bl, bl
je short loc_fffb9acb  ; je 0xfffb9acb
cmp byte [ebp - 0x1a], bl
jae short loc_fffb9ac9  ; jae 0xfffb9ac9
mov cl, byte [ebp - 0x19]
mov byte [ebp - 0x1a], bl
mov byte [eax], cl
lea ecx, [edx - 1]
mov byte [eax + 2], cl

loc_fffb9ac9:
xor ebx, ebx

loc_fffb9acb:
inc edx
add edi, edi
cmp dl, 0x80
jne short loc_fffb9af7  ; jne 0xfffb9af7
test bl, bl
jne short loc_fffb9aee  ; jne 0xfffb9aee
mov dword [esi], 1
mov cl, byte [eax + 2]
sub cl, byte [eax]
mov byte [eax + 3], cl
shr cl, 1
add cl, byte [eax]
mov byte [eax + 1], cl
jmp short loc_fffb9af7  ; jmp 0xfffb9af7

loc_fffb9aee:
xor edx, edx
mov dword [ebp - 0x14], 1

loc_fffb9af7:
test bl, bl
sete cl
test byte [ebp - 0x14], cl
je short loc_fffb9b5a  ; je 0xfffb9b5a
mov dword [esi], 1
mov cl, byte [eax]
mov bl, byte [eax + 2]
cmp cl, bl
jbe short loc_fffb9b24  ; jbe 0xfffb9b24
add ebx, 0xffffff80
sub ebx, ecx
mov byte [eax + 3], bl
shr bl, 1
add ecx, ebx
and ecx, 0x7f
mov byte [eax + 1], cl
jmp short loc_fffb9b30  ; jmp 0xfffb9b30

loc_fffb9b24:
sub ebx, ecx
mov byte [eax + 3], bl
shr bl, 1
add ebx, ecx
mov byte [eax + 1], bl

loc_fffb9b30:
xor ebx, ebx
mov dword [ebp - 0x14], 1
jmp short loc_fffb9b5a  ; jmp 0xfffb9b5a

loc_fffb9b3b:
mov byte [ebp - 0x1a], 0
xor edx, edx
mov byte [ebp - 0x19], 0
xor ebx, ebx
mov dword [ebp - 0x14], 0
mov edi, 1
mov dword [ebp - 0x10], 0

loc_fffb9b5a:
cmp dword [esi], 0
je loc_fffb9a67  ; je 0xfffb9a67
cmp byte [eax + 3], 3
ja short loc_fffb9b6f  ; ja 0xfffb9b6f
mov dword [esi], 0

loc_fffb9b6f:
lea esp, [esp + 0x10]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb9b78:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
movzx esi, dl
push ebx
imul eax, esi, 0x1055
lea esp, [esp - 0x13c]
mov byte [ebp - 0x13d], dl
mov dword [ebp - 0x13c], ecx
imul edx, ecx, 0x2f
xor ecx, ecx
mov dword [ebp - 0x130], esi
lea eax, [edx + eax + 0x40]
mov edx, 0x24
lea eax, [edi + eax + 0xd]
mov dword [ebp - 0x144], eax
lea eax, [ebp - 0x120]
call fcn_fffa24c1  ; call 0xfffa24c1
cmp dword [edi + 0x20b1], 0
jne short loc_fffb9bd8  ; jne 0xfffb9bd8
mov dword [ebp - 0x100], 1

loc_fffb9bd8:
push eax
lea ebx, [ebp - 0xfc]
mov ecx, dword [ebp - 0x13c]
push eax
push dword [ebp + 8]
push dword [ebp - 0x130]
mov edx, ebx
mov eax, edi
call fcn_fffb8a70  ; call 0xfffb8a70
add esp, 0x10
mov dword [ebp - 0x148], 0
mov dword [ebp - 0x138], 0

loc_fffb9c0f:
push 9
mov ecx, dword [ebp - 0x13c]
mov edx, dword [ebp - 0x130]
push 3
mov eax, edi
xor esi, esi
push 0x10
push dword [ebp - 0x138]
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10
mov ebx, dword [ebp - 0x148]

loc_fffb9c39:
xor ecx, ecx
mov edx, dword [ebp - 0x130]
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
push 9
test eax, eax
mov ecx, dword [ebp - 0x13c]
push 6
cmovne ebx, eax
mov edx, dword [ebp - 0x130]
push 0
mov eax, edi
mov dword [ebp - 0x12c], ebx
push esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0xc
lea eax, [ebp - 0xfc]
push 1
mov ecx, 3
mov edx, dword [ebp - 0x130]
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
mov ebx, eax
add esp, 0x20
test eax, eax
lea eax, [esi + 2]
cmove ebx, dword [ebp - 0x12c]
inc esi
cmp dword [edi + 0x2240], 0
cmovne esi, eax
cmp esi, 0x3f
jbe short loc_fffb9c39  ; jbe 0xfffb9c39
xor ecx, ecx
mov edx, dword [ebp - 0x130]
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov dl, byte [edi + 0x20b5]
mov byte [ebp - 0x13e], dl
cmovne ebx, eax
lea eax, [ebp - 0xa8]
mov dword [ebp - 0x148], ebx
xor ecx, ecx
mov ebx, eax
jmp near loc_fffb9d75  ; jmp 0xfffb9d75

loc_fffb9ceb:
cmp dword [ebp + ecx*4 - 0x120], 0
jne short loc_fffb9d71  ; jne 0xfffb9d71
mov esi, dword [edi + 0x2223]
cmp dword [ebp - 0x138], 0
mov dword [ebp - 0x12c], esi
jne short loc_fffb9d3b  ; jne 0xfffb9d3b
cmp byte [ebp - 0x13d], 1
sbb edx, edx
not edx
and edx, 0x100
add edx, dword [ecx*4 + ref_fffcf5b0]  ; add edx, dword [ecx*4 - 0x30a50]
lea esi, [edx + esi + 4]
mov esi, dword [esi]
mov dword [ebx], esi
mov esi, dword [ebp - 0x12c]
lea edx, [edx + esi + 8]
mov edx, dword [edx]
mov dword [ebx + 4], edx
jmp short loc_fffb9d71  ; jmp 0xfffb9d71

loc_fffb9d3b:
cmp byte [ebp - 0x13d], 1
mov esi, dword [ebp - 0x12c]
sbb edx, edx
not edx
and edx, 0x100
add edx, dword [ecx*4 + ref_fffcf5b0]  ; add edx, dword [ecx*4 - 0x30a50]
lea esi, [edx + esi + 4]
mov esi, dword [esi]
mov dword [ebx + 8], esi
mov esi, dword [ebp - 0x12c]
lea edx, [edx + esi + 8]
mov edx, dword [edx]
mov dword [ebx + 0xc], edx

loc_fffb9d71:
inc ecx
add ebx, 0x10

loc_fffb9d75:
cmp byte [ebp - 0x13e], cl
ja loc_fffb9ceb  ; ja 0xfffb9ceb
inc dword [ebp - 0x138]
cmp dword [ebp - 0x138], 2
jne loc_fffb9c0f  ; jne 0xfffb9c0f
xor edx, edx
cmp dword [edi + 0x2240], 0
jne short loc_fffb9dd1  ; jne 0xfffb9dd1

loc_fffb9d9f:
xor ebx, ebx
jmp short loc_fffb9e07  ; jmp 0xfffb9e07

loc_fffb9da3:
mov ebx, dword [eax]
inc edx
lea ecx, [ebx + ebx]
or ecx, ebx
mov ebx, dword [eax + 4]
mov dword [eax], ecx
lea ecx, [ebx + ebx]
or ecx, ebx
mov ebx, dword [eax + 8]
mov dword [eax + 4], ecx
lea ecx, [ebx + ebx]
or ecx, ebx
mov ebx, dword [eax + 0xc]
mov dword [eax + 8], ecx
lea ecx, [ebx + ebx]
or ecx, ebx
mov dword [eax + 0xc], ecx
add eax, 0x10

loc_fffb9dd1:
cmp dl, byte [ebp - 0x13e]
jne short loc_fffb9da3  ; jne 0xfffb9da3
jmp short loc_fffb9d9f  ; jmp 0xfffb9d9f

loc_fffb9ddb:
mov edx, ebx
sub esp, 0xc
shl edx, 4
lea eax, [ebp - 0xa8]
add edx, eax
lea eax, [ebx + ebx*4]
add eax, dword [ebp - 0x144]
lea ecx, [ebp + ebx*4 - 0x120]
push eax
mov eax, edi
inc ebx
call fcn_fffb9a3c  ; call 0xfffb9a3c
add esp, 0x10

loc_fffb9e07:
movzx eax, byte [edi + 0x20b5]
cmp ebx, eax
jb short loc_fffb9ddb  ; jb 0xfffb9ddb
xor eax, eax

loc_fffb9e14:
cmp dword [ebp + eax*4 - 0x120], 0
jne short loc_fffb9e28  ; jne 0xfffb9e28
mov eax, dword [ebp - 0x144]
xor edx, edx
jmp short loc_fffb9e49  ; jmp 0xfffb9e49

loc_fffb9e28:
inc eax
cmp eax, 9
jne short loc_fffb9e14  ; jne 0xfffb9e14
mov eax, dword [ebp - 0x148]
jmp short loc_fffb9e59  ; jmp 0xfffb9e59

loc_fffb9e36:
mov byte [eax + 3], 0x40
mov byte [eax + 2], 0x3f
mov byte [eax], 0
mov byte [eax + 1], 0x20
inc edx
add eax, 5

loc_fffb9e49:
movzx ecx, byte [edi + 0x20b5]
cmp edx, ecx
jb short loc_fffb9e36  ; jb 0xfffb9e36
mov eax, 8

loc_fffb9e59:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffb9e61:
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [eax + 0x20b6]
mov ebx, dword [ebp + 8]
cmp eax, 0x640
mov esi, dword [ebp + 0xc]
je short loc_fffb9ed3  ; je 0xfffb9ed3
ja short loc_fffb9e8b  ; ja 0xfffb9e8b
cmp eax, 0x42b
je short loc_fffb9e9b  ; je 0xfffb9e9b
cmp eax, 0x535
jne short loc_fffb9f03  ; jne 0xfffb9f03
jmp short loc_fffb9eb5  ; jmp 0xfffb9eb5

loc_fffb9e8b:
cmp eax, 0x74b
je short loc_fffb9ed3  ; je 0xfffb9ed3
cmp eax, 0x855
jne short loc_fffb9f03  ; jne 0xfffb9f03
jmp short loc_fffb9ee7  ; jmp 0xfffb9ee7

loc_fffb9e9b:
cmp word [edx], 0x11
jle short loc_fffb9ea3  ; jle 0xfffb9ea3
jmp short loc_fffb9f03  ; jmp 0xfffb9f03

loc_fffb9ea3:
cmp word [ecx], 0x11
jg short loc_fffb9f03  ; jg 0xfffb9f03
cmp word [ebx], 0x11
jg short loc_fffb9f03  ; jg 0xfffb9f03
cmp word [esi], 0x11
jmp short loc_fffb9efd  ; jmp 0xfffb9efd

loc_fffb9eb5:
cmp word [edx], 0x10
jg short loc_fffb9f03  ; jg 0xfffb9f03
cmp word [ecx], 0x10
jg short loc_fffb9f03  ; jg 0xfffb9f03
cmp word [ebx], 0x10
jg short loc_fffb9f03  ; jg 0xfffb9f03
cmp word [esi], 0x10
jmp short loc_fffb9efd  ; jmp 0xfffb9efd

loc_fffb9ecd:
cmp word [esi], 0xf
jmp short loc_fffb9efd  ; jmp 0xfffb9efd

loc_fffb9ed3:
cmp word [edx], 0xf
jg short loc_fffb9f03  ; jg 0xfffb9f03
cmp word [ecx], 0xf
jg short loc_fffb9f03  ; jg 0xfffb9f03
cmp word [ebx], 0xf
jle short loc_fffb9ecd  ; jle 0xfffb9ecd
jmp short loc_fffb9f03  ; jmp 0xfffb9f03

loc_fffb9ee7:
cmp word [edx], 0xd
jg short loc_fffb9f03  ; jg 0xfffb9f03
cmp word [ecx], 0xd
jg short loc_fffb9f03  ; jg 0xfffb9f03
cmp word [ebx], 0xd
jg short loc_fffb9f03  ; jg 0xfffb9f03
cmp word [esi], 0xd

loc_fffb9efd:
jg short loc_fffb9f03  ; jg 0xfffb9f03
mov al, 2
jmp short loc_fffb9f05  ; jmp 0xfffb9f05

loc_fffb9f03:
mov al, 3

loc_fffb9f05:
pop ebx
pop esi
pop ebp
ret

loc_fffb9f09:
db 0x00
db 0x00
db 0x00

fcn_fffb9f0c:  ; not directly referenced
push ebp
mov ebp, esp
push edi
xor edi, edi
push esi
push ebx
lea esp, [esp - 0x2c]
mov ebx, dword [ebp + 8]
mov eax, ebx
call fcn_fffbbf31  ; call 0xfffbbf31
movzx eax, al
mov edx, dword [ebx + 0x2223]
mov dword [edx + 0xc00], eax
mov edx, dword [ebx + 0x2223]
mov dword [edx + 0x3200], eax
lea eax, [ebx + 0x1055]
call fcn_fffbbf31  ; call 0xfffbbf31
mov edx, dword [ebx + 0x2223]
mov dword [ebp - 0x28], ebx
movzx eax, al
mov dword [edx + 0xd00], eax
mov edx, dword [ebx + 0x2223]
mov dword [edx + 0x3300], eax

loc_fffb9f66:  ; not directly referenced
imul esi, edi, 0x1055
xor ecx, ecx
mov edx, 0xa
lea eax, [ebx + esi + 0x36d]
mov dword [ebp - 0x1c], eax
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
lea eax, [ebx + esi + 0x377]
mov edx, 0xa
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
lea eax, [ebx + esi + 0x381]
mov edx, 0xa
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
lea eax, [ebx + esi + 0x38b]
mov edx, 0xa
call fcn_fffa24c1  ; call 0xfffa24c1
mov edx, edi
mov ecx, dword [ebx + 0x2223]
cmp dl, 1
mov esi, dword [ebp - 0x28]
mov byte [ebp - 0x21], dl
sbb eax, eax
xor al, al
lea eax, [ecx + eax + 0xf0c]
mov edx, dword [eax]
mov eax, edx
and edx, 0xffff6000
and eax, 0xffffefc0
cmp dword [esi + 0xa], 0
cmovne eax, edx
mov edx, eax
and edx, 0xfe03ffff
cmp dword [esi + 0x27], 0
mov esi, dword [ebp - 0x1c]
mov dword [ebp - 0x1c], 0
cmovne eax, edx
cmp byte [ebp - 0x21], 1
sbb edx, edx
xor dl, dl
cmp byte [ebp - 0x21], 1
lea edx, [ecx + edx + 0x330c]
mov dword [edx], eax
sbb eax, eax
xor al, al
mov edx, dword [ebx + 0x2223]
lea eax, [eax + edx + 0xd14]
mov eax, dword [eax]
mov dword [ebp - 0x20], eax
lea eax, [ebx + edi*2]
mov dword [ebp - 0x34], eax

loc_fffba037:  ; not directly referenced
mov edx, dword [ebp - 0x1c]
mov ecx, edi
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
mov dl, 8
je loc_fffba1d5  ; je 0xfffba1d5
mov eax, dword [ebx + 0x20b6]
cmp eax, 0x7d0
je short loc_fffba0d7  ; je 0xfffba0d7
ja short loc_fffba089  ; ja 0xfffba089
cmp eax, 0x640
je short loc_fffba0c2  ; je 0xfffba0c2
ja short loc_fffba079  ; ja 0xfffba079
cmp eax, 0x535
je loc_fffba101  ; je 0xfffba101
cmp eax, 0x578
jne short loc_fffba0b7  ; jne 0xfffba0b7
jmp short loc_fffba0bb  ; jmp 0xfffba0bb

loc_fffba079:  ; not directly referenced
cmp eax, 0x708
je short loc_fffba0c9  ; je 0xfffba0c9
cmp eax, 0x74b
jne short loc_fffba0b7  ; jne 0xfffba0b7
jmp short loc_fffba0d0  ; jmp 0xfffba0d0

loc_fffba089:  ; not directly referenced
cmp eax, 0x960
je short loc_fffba0e5  ; je 0xfffba0e5
ja short loc_fffba0a2  ; ja 0xfffba0a2
cmp eax, 0x855
je short loc_fffba0f3  ; je 0xfffba0f3
cmp eax, 0x898
jne short loc_fffba0b7  ; jne 0xfffba0b7
jmp short loc_fffba0de  ; jmp 0xfffba0de

loc_fffba0a2:  ; not directly referenced
cmp eax, 0xa6b
je short loc_fffba0f3  ; je 0xfffba0f3
cmp eax, 0xaf0
je short loc_fffba0fa  ; je 0xfffba0fa
cmp eax, 0xa28
je short loc_fffba0ec  ; je 0xfffba0ec

loc_fffba0b7:  ; not directly referenced
xor eax, eax
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba0bb:  ; not directly referenced
mov eax, 2
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba0c2:  ; not directly referenced
mov eax, 3
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba0c9:  ; not directly referenced
mov eax, 4
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba0d0:  ; not directly referenced
mov eax, 5
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba0d7:  ; not directly referenced
mov eax, 6
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba0de:  ; not directly referenced
mov eax, 8
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba0e5:  ; not directly referenced
mov eax, 9
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba0ec:  ; not directly referenced
mov eax, 0xa
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba0f3:  ; not directly referenced
mov eax, 7
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba0fa:  ; not directly referenced
mov eax, 0xc
jmp short loc_fffba106  ; jmp 0xfffba106

loc_fffba101:  ; not directly referenced
mov eax, 1

loc_fffba106:  ; not directly referenced
xor edx, edx
cmp byte [ebp - 0x1c], 1
seta dl
mov ecx, dword [ebp - 0x34]
mov dword [ebp - 0x2c], edx
cmp byte [edx + ecx + 0x22c6], 0
jne short loc_fffba142  ; jne 0xfffba142
imul edx, edx, 0x46
movzx ecx, al
mov dword [ebp - 0x30], edx
imul edx, edi, 0x8c
add edx, dword [ebp - 0x30]
add edx, ebx
mov dl, byte [ecx + edx + 0x2140]
test dl, dl
jne loc_fffba1d5  ; jne 0xfffba1d5

loc_fffba142:  ; not directly referenced
mov ecx, dword [ebx + 0x2238]
cmp ecx, 1
je short loc_fffba15b  ; je 0xfffba15b
jb short loc_fffba188  ; jb 0xfffba188
cmp ecx, 2
je short loc_fffba16a  ; je 0xfffba16a
cmp ecx, 3
jne short loc_fffba188  ; jne 0xfffba188
jmp short loc_fffba179  ; jmp 0xfffba179

loc_fffba15b:  ; not directly referenced
imul eax, eax, 6
imul ecx, edi, 0x4e
lea eax, [eax + ecx + ref_fffcf020]  ; lea eax, [eax + ecx - 0x30fe0]
jmp short loc_fffba195  ; jmp 0xfffba195

loc_fffba16a:  ; not directly referenced
imul eax, eax, 6
imul ecx, edi, 0x4e
lea eax, [eax + ecx + ref_fffcf0bc]  ; lea eax, [eax + ecx - 0x30f44]
jmp short loc_fffba195  ; jmp 0xfffba195

loc_fffba179:  ; not directly referenced
imul eax, eax, 6
imul ecx, edi, 0x4e
lea eax, [eax + ecx + ref_fffcf158]  ; lea eax, [eax + ecx - 0x30ea8]
jmp short loc_fffba195  ; jmp 0xfffba195

loc_fffba188:  ; not directly referenced
imul eax, eax, 6
imul ecx, edi, 0x4e
lea eax, [eax + ecx + ref_fffcef84]  ; lea eax, [eax + ecx - 0x3107c]

loc_fffba195:  ; not directly referenced
imul edx, dword [ebp - 0x2c], 0x46
imul ecx, edi, 0x8c
add edx, ecx
mov dl, byte [ebx + edx + 0x2132]
and edx, 0x1f
cmp dl, 4
ja short loc_fffba1d2  ; ja 0xfffba1d2
movzx edx, dl
jmp dword [edx*4 + ref_fffcef70]  ; ujmp: jmp dword [edx*4 - 0x31090]

loc_fffba1ba:  ; not directly referenced
mov dl, byte [eax]
jmp short loc_fffba1d5  ; jmp 0xfffba1d5

loc_fffba1be:  ; not directly referenced
mov dl, byte [eax + 1]
jmp short loc_fffba1d5  ; jmp 0xfffba1d5

loc_fffba1c3:  ; not directly referenced
mov dl, byte [eax + 2]
jmp short loc_fffba1d5  ; jmp 0xfffba1d5

loc_fffba1c8:  ; not directly referenced
mov dl, byte [eax + 3]
jmp short loc_fffba1d5  ; jmp 0xfffba1d5

loc_fffba1cd:  ; not directly referenced
mov dl, byte [eax + 4]
jmp short loc_fffba1d5  ; jmp 0xfffba1d5

loc_fffba1d2:  ; not directly referenced
mov dl, byte [eax + 5]

loc_fffba1d5:  ; not directly referenced
imul ecx, dword [ebp - 0x1c], 6
mov eax, 0x3f
shl eax, cl
not eax
and eax, dword [ebp - 0x20]
mov dword [ebp - 0x2c], eax
movzx eax, dl
shl eax, cl
mov ecx, dword [ebp - 0x2c]
or eax, ecx
cmp dl, 0x3f
mov dword [ebp - 0x20], eax
jbe short loc_fffba207  ; jbe 0xfffba207
mov al, dl
mov byte [esi], 1
and eax, 0x3f
mov byte [esi + 1], al
jmp short loc_fffba20d  ; jmp 0xfffba20d

loc_fffba207:  ; not directly referenced
mov byte [esi], 0
mov byte [esi + 1], dl

loc_fffba20d:  ; not directly referenced
inc dword [ebp - 0x1c]
add esi, 0xa
cmp dword [ebp - 0x1c], 4
jne loc_fffba037  ; jne 0xfffba037
cmp byte [ebp - 0x21], 1
mov edx, dword [ebx + 0x2223]
sbb eax, eax
mov esi, dword [ebp - 0x20]
xor al, al
cmp byte [ebp - 0x21], 1
lea eax, [eax + edx + 0xd14]
mov dword [eax], esi
sbb eax, eax
xor al, al
mov edx, dword [ebx + 0x2223]
xor ecx, ecx
lea eax, [edx + eax + 0xd18]
mov eax, dword [eax]

loc_fffba250:  ; not directly referenced
mov esi, 1
shl esi, cl
not esi
and esi, eax
imul eax, ecx, 0xa
mov dword [ebp - 0x1c], esi
mov esi, dword [ebp - 0x28]
movzx eax, byte [esi + eax + 0x36d]
shl eax, cl
inc ecx
or eax, dword [ebp - 0x1c]
cmp ecx, 4
jne short loc_fffba250  ; jne 0xfffba250
cmp byte [ebp - 0x21], 1
sbb ecx, ecx
inc edi
xor cl, cl
add esi, 0x1055
cmp edi, 2
mov dword [ebp - 0x28], esi
lea edx, [edx + ecx + 0xd18]
mov dword [edx], eax
jne loc_fffb9f66  ; jne 0xfffb9f66
mov eax, dword [ebx + 0x20b6]
cmp eax, 0x74b
je loc_fffba33a  ; je 0xfffba33a
ja short loc_fffba2e6  ; ja 0xfffba2e6
cmp eax, 0x535
je short loc_fffba32c  ; je 0xfffba32c
ja short loc_fffba2cb  ; ja 0xfffba2cb
cmp eax, 0x320
je short loc_fffba325  ; je 0xfffba325
cmp eax, 0x42b
jne loc_fffba3bc  ; jne 0xfffba3bc
jmp short loc_fffba348  ; jmp 0xfffba348

loc_fffba2cb:  ; not directly referenced
cmp eax, 0x640
je short loc_fffba333  ; je 0xfffba333
cmp eax, 0x708
je short loc_fffba333  ; je 0xfffba333
cmp eax, 0x578
jne loc_fffba3bc  ; jne 0xfffba3bc
jmp short loc_fffba32c  ; jmp 0xfffba32c

loc_fffba2e6:  ; not directly referenced
cmp eax, 0x960
je short loc_fffba341  ; je 0xfffba341
ja short loc_fffba30a  ; ja 0xfffba30a
cmp eax, 0x855
je short loc_fffba341  ; je 0xfffba341
cmp eax, 0x898
je short loc_fffba341  ; je 0xfffba341
cmp eax, 0x7d0
jne loc_fffba3bc  ; jne 0xfffba3bc
jmp short loc_fffba33a  ; jmp 0xfffba33a

loc_fffba30a:  ; not directly referenced
cmp eax, 0xa6b
je short loc_fffba341  ; je 0xfffba341
cmp eax, 0xaf0
je short loc_fffba341  ; je 0xfffba341
cmp eax, 0xa28
jne loc_fffba3bc  ; jne 0xfffba3bc
jmp short loc_fffba341  ; jmp 0xfffba341

loc_fffba325:  ; not directly referenced
mov esi, 0xd6ff5e4
jmp short loc_fffba34d  ; jmp 0xfffba34d

loc_fffba32c:  ; not directly referenced
mov esi, 0xca8c264
jmp short loc_fffba34d  ; jmp 0xfffba34d

loc_fffba333:  ; not directly referenced
mov esi, 0xc6671e4
jmp short loc_fffba34d  ; jmp 0xfffba34d

loc_fffba33a:  ; not directly referenced
mov esi, 0xc446964
jmp short loc_fffba34d  ; jmp 0xfffba34d

loc_fffba341:  ; not directly referenced
mov esi, 0xc235924
jmp short loc_fffba34d  ; jmp 0xfffba34d

loc_fffba348:  ; not directly referenced
mov esi, 0xcebdb64

loc_fffba34d:  ; not directly referenced
mov eax, ebx
call fcn_fffbc6ee  ; call 0xfffbc6ee
mov eax, 0x1814

loc_fffba359:  ; not directly referenced
mov edx, dword [ebx + 0x2223]
mov ecx, esi
add edx, eax
and ecx, 0xffffffc7
mov edi, dword [edx]
mov esi, edi
and esi, 0x38
or esi, ecx
mov dword [edx], esi
mov edx, dword [ebx + 0x2223]
lea ecx, [eax + edx - 4]
add eax, 0x100
mov edx, dword [ecx]
and edx, 0x38e00e00
or edx, 0x4114124
cmp eax, 0x1a14
mov dword [ecx], edx
jne short loc_fffba359  ; jne 0xfffba359
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x5f08]
or ah, 1
mov dword [edx + 0x5f08], eax
mov edx, 0x4e20
mov eax, ebx
call fcn_fffc7adb  ; call 0xfffc7adb
xor eax, eax
jmp short loc_fffba3c1  ; jmp 0xfffba3c1

loc_fffba3bc:  ; not directly referenced
mov eax, 1

loc_fffba3c1:  ; not directly referenced
lea esp, [esp + 0x2c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffba3ca:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x1c]
mov ecx, dword [eax + 0x20b6]
cmp ecx, 0x535
je short loc_fffba419  ; je 0xfffba419
ja short loc_fffba3f8  ; ja 0xfffba3f8
cmp ecx, 0x320
je short loc_fffba412  ; je 0xfffba412
cmp ecx, 0x42b
jne short loc_fffba435  ; jne 0xfffba435
jmp short loc_fffba445  ; jmp 0xfffba445

loc_fffba3f8:
cmp ecx, 0x74b
je short loc_fffba427  ; je 0xfffba427
cmp ecx, 0x855
je short loc_fffba42e  ; je 0xfffba42e
cmp ecx, 0x640
jne short loc_fffba435  ; jne 0xfffba435
jmp short loc_fffba420  ; jmp 0xfffba420

loc_fffba412:
mov eax, 0xc30
jmp short loc_fffba44a  ; jmp 0xfffba44a

loc_fffba419:
mov eax, 0x1450
jmp short loc_fffba44a  ; jmp 0xfffba44a

loc_fffba420:
mov eax, 0x1860
jmp short loc_fffba44a  ; jmp 0xfffba44a

loc_fffba427:
mov eax, 0x1c70
jmp short loc_fffba44a  ; jmp 0xfffba44a

loc_fffba42e:
mov eax, 0x2080
jmp short loc_fffba44a  ; jmp 0xfffba44a

loc_fffba435:
mov esi, 0x14
mov eax, ecx
xor edx, edx
div esi
imul eax, eax, 0x4e
jmp short loc_fffba44a  ; jmp 0xfffba44a

loc_fffba445:
mov eax, 0x1040

loc_fffba44a:
cmp ecx, 0x74b
mov dword [ebx + 0x2e4d], eax
je short loc_fffba4d0  ; je 0xfffba4d0
ja short loc_fffba48e  ; ja 0xfffba48e
cmp ecx, 0x535
je short loc_fffba4cc  ; je 0xfffba4cc
ja short loc_fffba474  ; ja 0xfffba474
cmp ecx, 0x320
je short loc_fffba4cc  ; je 0xfffba4cc
cmp ecx, 0x42b
jmp short loc_fffba48a  ; jmp 0xfffba48a

loc_fffba474:
cmp ecx, 0x640
je short loc_fffba4cc  ; je 0xfffba4cc
cmp ecx, 0x708
je short loc_fffba4ec  ; je 0xfffba4ec
cmp ecx, 0x578

loc_fffba48a:
jne short loc_fffba4e8  ; jne 0xfffba4e8
jmp short loc_fffba4cc  ; jmp 0xfffba4cc

loc_fffba48e:
cmp ecx, 0x960
je short loc_fffba4dc  ; je 0xfffba4dc
ja short loc_fffba4b2  ; ja 0xfffba4b2
cmp ecx, 0x855
je short loc_fffba4d4  ; je 0xfffba4d4
cmp ecx, 0x898
je short loc_fffba4d8  ; je 0xfffba4d8
cmp ecx, 0x7d0
jne short loc_fffba4e8  ; jne 0xfffba4e8
jmp short loc_fffba4d0  ; jmp 0xfffba4d0

loc_fffba4b2:
cmp ecx, 0xa6b
je short loc_fffba4e0  ; je 0xfffba4e0
cmp ecx, 0xaf0
je short loc_fffba4e4  ; je 0xfffba4e4
cmp ecx, 0xa28
jne short loc_fffba4e8  ; jne 0xfffba4e8
jmp short loc_fffba4e0  ; jmp 0xfffba4e0

loc_fffba4cc:
mov al, 0xc
jmp short loc_fffba4ee  ; jmp 0xfffba4ee

loc_fffba4d0:
mov al, 0xf
jmp short loc_fffba4ee  ; jmp 0xfffba4ee

loc_fffba4d4:
mov al, 0x10
jmp short loc_fffba4ee  ; jmp 0xfffba4ee

loc_fffba4d8:
mov al, 0x11
jmp short loc_fffba4ee  ; jmp 0xfffba4ee

loc_fffba4dc:
mov al, 0x12
jmp short loc_fffba4ee  ; jmp 0xfffba4ee

loc_fffba4e0:
mov al, 0x14
jmp short loc_fffba4ee  ; jmp 0xfffba4ee

loc_fffba4e4:
mov al, 0x15
jmp short loc_fffba4ee  ; jmp 0xfffba4ee

loc_fffba4e8:
mov al, 8
jmp short loc_fffba4ee  ; jmp 0xfffba4ee

loc_fffba4ec:
mov al, 0xe

loc_fffba4ee:
xor edx, edx
mov byte [ebx + 0x20aa], al
mov esi, 0xc8
mov eax, ecx
div esi
cmp edx, 1
sbb eax, 0xffffffff
cmp ecx, 0x74b
mov byte [ebx + 0x20ab], al
je loc_fffba5b1  ; je 0xfffba5b1
ja short loc_fffba55e  ; ja 0xfffba55e
cmp ecx, 0x535
je loc_fffba5bf  ; je 0xfffba5bf
ja short loc_fffba544  ; ja 0xfffba544
cmp ecx, 0x320
je loc_fffba5cd  ; je 0xfffba5cd
cmp ecx, 0x42b
jne loc_fffba5d4  ; jne 0xfffba5d4
jmp near loc_fffba5c6  ; jmp 0xfffba5c6

loc_fffba544:
cmp ecx, 0x640
je short loc_fffba5bf  ; je 0xfffba5bf
cmp ecx, 0x708
je short loc_fffba5b8  ; je 0xfffba5b8
cmp ecx, 0x578
jne short loc_fffba5d4  ; jne 0xfffba5d4
jmp short loc_fffba5bf  ; jmp 0xfffba5bf

loc_fffba55e:
cmp ecx, 0x960
je short loc_fffba5aa  ; je 0xfffba5aa
ja short loc_fffba582  ; ja 0xfffba582
cmp ecx, 0x855
je short loc_fffba5b1  ; je 0xfffba5b1
cmp ecx, 0x898
je short loc_fffba5aa  ; je 0xfffba5aa
cmp ecx, 0x7d0
jne short loc_fffba5d4  ; jne 0xfffba5d4
jmp short loc_fffba5b1  ; jmp 0xfffba5b1

loc_fffba582:
cmp ecx, 0xa6b
je short loc_fffba5a3  ; je 0xfffba5a3
cmp ecx, 0xaf0
je short loc_fffba59c  ; je 0xfffba59c
cmp ecx, 0xa28
jne short loc_fffba5d4  ; jne 0xfffba5d4
jmp short loc_fffba5a3  ; jmp 0xfffba5a3

loc_fffba59c:
mov eax, 0xb
jmp short loc_fffba5d6  ; jmp 0xfffba5d6

loc_fffba5a3:
mov eax, 0xa
jmp short loc_fffba5d6  ; jmp 0xfffba5d6

loc_fffba5aa:
mov eax, 9
jmp short loc_fffba5d6  ; jmp 0xfffba5d6

loc_fffba5b1:
mov eax, 8
jmp short loc_fffba5d6  ; jmp 0xfffba5d6

loc_fffba5b8:
mov eax, 7
jmp short loc_fffba5d6  ; jmp 0xfffba5d6

loc_fffba5bf:
mov eax, 6
jmp short loc_fffba5d6  ; jmp 0xfffba5d6

loc_fffba5c6:
mov eax, 5
jmp short loc_fffba5d6  ; jmp 0xfffba5d6

loc_fffba5cd:
mov eax, 4
jmp short loc_fffba5d6  ; jmp 0xfffba5d6

loc_fffba5d4:
xor eax, eax

loc_fffba5d6:
cmp ecx, 0x74b
mov byte [ebx + 0x20ac], al
je loc_fffba66c  ; je 0xfffba66c
ja short loc_fffba620  ; ja 0xfffba620
cmp ecx, 0x535
je short loc_fffba665  ; je 0xfffba665
ja short loc_fffba606  ; ja 0xfffba606
cmp ecx, 0x320
je short loc_fffba65e  ; je 0xfffba65e
cmp ecx, 0x42b
jne short loc_fffba681  ; jne 0xfffba681
jmp short loc_fffba65e  ; jmp 0xfffba65e

loc_fffba606:
cmp ecx, 0x640
je short loc_fffba665  ; je 0xfffba665
cmp ecx, 0x708
je short loc_fffba66c  ; je 0xfffba66c
cmp ecx, 0x578
jne short loc_fffba681  ; jne 0xfffba681
jmp short loc_fffba665  ; jmp 0xfffba665

loc_fffba620:
cmp ecx, 0x960
je short loc_fffba673  ; je 0xfffba673
ja short loc_fffba644  ; ja 0xfffba644
cmp ecx, 0x855
je short loc_fffba673  ; je 0xfffba673
cmp ecx, 0x898
je short loc_fffba673  ; je 0xfffba673
cmp ecx, 0x7d0
jne short loc_fffba681  ; jne 0xfffba681
jmp short loc_fffba66c  ; jmp 0xfffba66c

loc_fffba644:
cmp ecx, 0xa6b
je short loc_fffba67a  ; je 0xfffba67a
cmp ecx, 0xaf0
je short loc_fffba67a  ; je 0xfffba67a
cmp ecx, 0xa28
jne short loc_fffba681  ; jne 0xfffba681
jmp short loc_fffba67a  ; jmp 0xfffba67a

loc_fffba65e:
mov eax, 3
jmp short loc_fffba683  ; jmp 0xfffba683

loc_fffba665:
mov eax, 4
jmp short loc_fffba683  ; jmp 0xfffba683

loc_fffba66c:
mov eax, 5
jmp short loc_fffba683  ; jmp 0xfffba683

loc_fffba673:
mov eax, 6
jmp short loc_fffba683  ; jmp 0xfffba683

loc_fffba67a:
mov eax, 7
jmp short loc_fffba683  ; jmp 0xfffba683

loc_fffba681:
xor eax, eax

loc_fffba683:
cmp ecx, 0x74b
mov byte [ebx + 0x20ad], al
je loc_fffba741  ; je 0xfffba741
ja short loc_fffba6d9  ; ja 0xfffba6d9
cmp ecx, 0x535
je loc_fffba725  ; je 0xfffba725
ja short loc_fffba6bb  ; ja 0xfffba6bb
cmp ecx, 0x320
je short loc_fffba717  ; je 0xfffba717
cmp ecx, 0x42b
jne loc_fffba772  ; jne 0xfffba772
jmp short loc_fffba71e  ; jmp 0xfffba71e

loc_fffba6bb:
cmp ecx, 0x640
je short loc_fffba733  ; je 0xfffba733
cmp ecx, 0x708
je short loc_fffba73a  ; je 0xfffba73a
cmp ecx, 0x578
jne loc_fffba772  ; jne 0xfffba772
jmp short loc_fffba72c  ; jmp 0xfffba72c

loc_fffba6d9:
cmp ecx, 0x960
je short loc_fffba75d  ; je 0xfffba75d
ja short loc_fffba6fd  ; ja 0xfffba6fd
cmp ecx, 0x855
je short loc_fffba74f  ; je 0xfffba74f
cmp ecx, 0x898
je short loc_fffba756  ; je 0xfffba756
cmp ecx, 0x7d0
jne short loc_fffba772  ; jne 0xfffba772
jmp short loc_fffba748  ; jmp 0xfffba748

loc_fffba6fd:
cmp ecx, 0xa6b
je short loc_fffba764  ; je 0xfffba764
cmp ecx, 0xaf0
je short loc_fffba76b  ; je 0xfffba76b
cmp ecx, 0xa28
jne short loc_fffba772  ; jne 0xfffba772
jmp short loc_fffba764  ; jmp 0xfffba764

loc_fffba717:
mov eax, 0xa
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba71e:
mov eax, 0xd
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba725:
mov eax, 0x10
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba72c:
mov eax, 0x11
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba733:
mov eax, 0x14
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba73a:
mov eax, 0x16
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba741:
mov eax, 0x17
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba748:
mov eax, 0x18
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba74f:
mov eax, 0x1a
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba756:
mov eax, 0x1b
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba75d:
mov eax, 0x1d
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba764:
mov eax, 0x20
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba76b:
mov eax, 0x22
jmp short loc_fffba774  ; jmp 0xfffba774

loc_fffba772:
xor eax, eax

loc_fffba774:
cmp ecx, 0x74b
mov byte [ebx + 0x20ae], al
je loc_fffba815  ; je 0xfffba815
ja short loc_fffba7c2  ; ja 0xfffba7c2
cmp ecx, 0x535
je short loc_fffba807  ; je 0xfffba807
ja short loc_fffba7a8  ; ja 0xfffba7a8
cmp ecx, 0x320
je short loc_fffba800  ; je 0xfffba800
cmp ecx, 0x42b
jne loc_fffba831  ; jne 0xfffba831
jmp short loc_fffba807  ; jmp 0xfffba807

loc_fffba7a8:
cmp ecx, 0x640
je short loc_fffba80e  ; je 0xfffba80e
cmp ecx, 0x708
je short loc_fffba815  ; je 0xfffba815
cmp ecx, 0x578
jne short loc_fffba831  ; jne 0xfffba831
jmp short loc_fffba80e  ; jmp 0xfffba80e

loc_fffba7c2:
cmp ecx, 0x960
je short loc_fffba823  ; je 0xfffba823
ja short loc_fffba7e6  ; ja 0xfffba7e6
cmp ecx, 0x855
je short loc_fffba81c  ; je 0xfffba81c
cmp ecx, 0x898
je short loc_fffba81c  ; je 0xfffba81c
cmp ecx, 0x7d0
jne short loc_fffba831  ; jne 0xfffba831
jmp short loc_fffba815  ; jmp 0xfffba815

loc_fffba7e6:
cmp ecx, 0xa6b
je short loc_fffba823  ; je 0xfffba823
cmp ecx, 0xaf0
je short loc_fffba82a  ; je 0xfffba82a
cmp ecx, 0xa28
jne short loc_fffba831  ; jne 0xfffba831
jmp short loc_fffba823  ; jmp 0xfffba823

loc_fffba800:
mov eax, 3
jmp short loc_fffba833  ; jmp 0xfffba833

loc_fffba807:
mov eax, 4
jmp short loc_fffba833  ; jmp 0xfffba833

loc_fffba80e:
mov eax, 5
jmp short loc_fffba833  ; jmp 0xfffba833

loc_fffba815:
mov eax, 6
jmp short loc_fffba833  ; jmp 0xfffba833

loc_fffba81c:
mov eax, 7
jmp short loc_fffba833  ; jmp 0xfffba833

loc_fffba823:
mov eax, 8
jmp short loc_fffba833  ; jmp 0xfffba833

loc_fffba82a:
mov eax, 9
jmp short loc_fffba833  ; jmp 0xfffba833

loc_fffba831:
xor eax, eax

loc_fffba833:
cmp ecx, 0x74b
mov byte [ebx + 0x20af], al
je loc_fffba8cf  ; je 0xfffba8cf
ja short loc_fffba881  ; ja 0xfffba881
cmp ecx, 0x535
je short loc_fffba8c8  ; je 0xfffba8c8
ja short loc_fffba867  ; ja 0xfffba867
cmp ecx, 0x320
je loc_fffba8f2  ; je 0xfffba8f2
cmp ecx, 0x42b
jne short loc_fffba8bd  ; jne 0xfffba8bd
jmp short loc_fffba8c1  ; jmp 0xfffba8c1

loc_fffba867:
cmp ecx, 0x640
je short loc_fffba8cf  ; je 0xfffba8cf
cmp ecx, 0x708
je short loc_fffba8cf  ; je 0xfffba8cf
cmp ecx, 0x578
jne short loc_fffba8bd  ; jne 0xfffba8bd
jmp short loc_fffba8c8  ; jmp 0xfffba8c8

loc_fffba881:
cmp ecx, 0x960
je short loc_fffba8e4  ; je 0xfffba8e4
ja short loc_fffba8a5  ; ja 0xfffba8a5
cmp ecx, 0x855
je short loc_fffba8dd  ; je 0xfffba8dd
cmp ecx, 0x898
je short loc_fffba8dd  ; je 0xfffba8dd
cmp ecx, 0x7d0
jne short loc_fffba8bd  ; jne 0xfffba8bd
jmp short loc_fffba8d6  ; jmp 0xfffba8d6

loc_fffba8a5:
cmp ecx, 0xa6b
je short loc_fffba8eb  ; je 0xfffba8eb
cmp ecx, 0xaf0
je short loc_fffba8eb  ; je 0xfffba8eb
cmp ecx, 0xa28
je short loc_fffba8eb  ; je 0xfffba8eb

loc_fffba8bd:
xor eax, eax
jmp short loc_fffba8f7  ; jmp 0xfffba8f7

loc_fffba8c1:
mov eax, 5
jmp short loc_fffba8f7  ; jmp 0xfffba8f7

loc_fffba8c8:
mov eax, 6
jmp short loc_fffba8f7  ; jmp 0xfffba8f7

loc_fffba8cf:
mov eax, 8
jmp short loc_fffba8f7  ; jmp 0xfffba8f7

loc_fffba8d6:
mov eax, 9
jmp short loc_fffba8f7  ; jmp 0xfffba8f7

loc_fffba8dd:
mov eax, 0xa
jmp short loc_fffba8f7  ; jmp 0xfffba8f7

loc_fffba8e4:
mov eax, 0xb
jmp short loc_fffba8f7  ; jmp 0xfffba8f7

loc_fffba8eb:
mov eax, 0xc
jmp short loc_fffba8f7  ; jmp 0xfffba8f7

loc_fffba8f2:
mov eax, 4

loc_fffba8f7:
movzx ecx, word [ebx + 0x22e2]
mov byte [ebx + 0x20b0], al
test cx, cx
jne loc_fffba9a0  ; jne 0xfffba9a0
mov eax, ebx
mov esi, ebx
call fcn_fffbff43  ; call 0xfffbff43
mov dword [ebp - 0x24], eax
mov dword [ebp - 0x20], 0
xor ecx, ecx

loc_fffba922:
cmp byte [esi + 0x3a], 0
je short loc_fffba991  ; je 0xfffba991
imul eax, dword [ebp - 0x20], 0x8c
mov dword [ebp - 0x1c], 0
mov dword [ebp - 0x28], eax

loc_fffba939:
imul eax, dword [ebp - 0x1c], 0x1d
cmp dword [esi + eax + 0xa], 0
je short loc_fffba988  ; je 0xfffba988
imul eax, dword [ebp - 0x1c], 0x46
mov edx, dword [ebp - 0x28]
lea eax, [eax + edx + 0x2100]
lea edi, [ebx + eax + 0xb]
movzx edx, byte [edi + 0x1c]
movzx eax, byte [edi + 0x1d]
shl edx, 8
or edx, eax
imul eax, edx, 0x3e8
movzx edx, byte [edi + 0xa]
imul eax, edx
movzx edi, byte [edi + 0xb]
cdq
idiv edi
mov edx, dword [ebp - 0x24]
lea eax, [edx + eax - 1]
xor edx, edx
div dword [ebp - 0x24]
cmp ecx, eax
cmovb ecx, eax

loc_fffba988:
inc dword [ebp - 0x1c]
cmp dword [ebp - 0x1c], 2
jne short loc_fffba939  ; jne 0xfffba939

loc_fffba991:
inc dword [ebp - 0x20]
add esi, 0x1055
cmp dword [ebp - 0x20], 2
jne short loc_fffba922  ; jne 0xfffba922

loc_fffba9a0:
mov byte [ebx + 0x44], cl
mov byte [ebx + 0x1099], cl
movzx ecx, byte [ebx + 0x22e1]
test cl, cl
jne loc_fffbaa69  ; jne 0xfffbaa69
mov eax, ebx
mov esi, ebx
call fcn_fffbff43  ; call 0xfffbff43
imul eax, eax, 0x3e8
mov dword [ebp - 0x20], 0
mov dword [ebp - 0x1c], eax
mov ecx, 4

loc_fffba9d6:
cmp byte [esi + 0x3a], 0
je short loc_fffbaa56  ; je 0xfffbaa56
cmp dword [esi + 0xa], 0
je short loc_fffbaa19  ; je 0xfffbaa19
imul eax, dword [ebp - 0x20], 0x8c
lea edx, [ebx + eax + 0x210b]
movzx eax, byte [edx + 0x13]
imul eax, eax, 0xf4240
movzx edi, byte [edx + 0xa]
imul eax, edi
movzx edi, byte [edx + 0xb]
cdq
idiv edi
mov edx, dword [ebp - 0x1c]
lea eax, [edx + eax - 1]
xor edx, edx
div dword [ebp - 0x1c]
cmp ecx, eax
cmovb ecx, eax

loc_fffbaa19:
cmp dword [esi + 0x27], 0
je short loc_fffbaa56  ; je 0xfffbaa56
imul eax, dword [ebp - 0x20], 0x8c
lea edx, [ebx + eax + 0x2151]
movzx eax, byte [edx + 0x13]
imul eax, eax, 0xf4240
movzx edi, byte [edx + 0xa]
imul eax, edi
movzx edi, byte [edx + 0xb]
cdq
idiv edi
mov edx, dword [ebp - 0x1c]
lea eax, [edx + eax - 1]
xor edx, edx
div dword [ebp - 0x1c]
cmp ecx, eax
cmovb ecx, eax

loc_fffbaa56:
inc dword [ebp - 0x20]
add esi, 0x1055
cmp dword [ebp - 0x20], 2
jne loc_fffba9d6  ; jne 0xfffba9d6

loc_fffbaa69:
mov byte [ebx + 0x43], cl
mov byte [ebx + 0x1098], cl
movzx ecx, byte [ebx + 0x22e0]
test cl, cl
jne loc_fffbab32  ; jne 0xfffbab32
mov eax, ebx
mov esi, ebx
call fcn_fffbff43  ; call 0xfffbff43
imul eax, eax, 0x3e8
mov dword [ebp - 0x20], 0
mov dword [ebp - 0x1c], eax
mov ecx, 4

loc_fffbaa9f:
cmp byte [esi + 0x3a], 0
je short loc_fffbab1f  ; je 0xfffbab1f
cmp dword [esi + 0xa], 0
je short loc_fffbaae2  ; je 0xfffbaae2
imul eax, dword [ebp - 0x20], 0x8c
lea edx, [ebx + eax + 0x210b]
movzx eax, byte [edx + 0x1b]
imul eax, eax, 0xf4240
movzx edi, byte [edx + 0xa]
imul eax, edi
movzx edi, byte [edx + 0xb]
cdq
idiv edi
mov edx, dword [ebp - 0x1c]
lea eax, [edx + eax - 1]
xor edx, edx
div dword [ebp - 0x1c]
cmp ecx, eax
cmovb ecx, eax

loc_fffbaae2:
cmp dword [esi + 0x27], 0
je short loc_fffbab1f  ; je 0xfffbab1f
imul eax, dword [ebp - 0x20], 0x8c
lea edx, [ebx + eax + 0x2151]
movzx eax, byte [edx + 0x1b]
imul eax, eax, 0xf4240
movzx edi, byte [edx + 0xa]
imul eax, edi
movzx edi, byte [edx + 0xb]
cdq
idiv edi
mov edx, dword [ebp - 0x1c]
lea eax, [edx + eax - 1]
xor edx, edx
div dword [ebp - 0x1c]
cmp ecx, eax
cmovb ecx, eax

loc_fffbab1f:
inc dword [ebp - 0x20]
add esi, 0x1055
cmp dword [ebp - 0x20], 2
jne loc_fffbaa9f  ; jne 0xfffbaa9f

loc_fffbab32:
mov byte [ebx + 0x42], cl
mov byte [ebx + 0x1097], cl
movzx ecx, byte [ebx + 0x22df]
test cl, cl
jne loc_fffbabfb  ; jne 0xfffbabfb
mov eax, ebx
mov esi, ebx
call fcn_fffbff43  ; call 0xfffbff43
imul eax, eax, 0x3e8
mov dword [ebp - 0x20], 0
mov dword [ebp - 0x1c], eax
mov ecx, 4

loc_fffbab68:
cmp byte [esi + 0x3a], 0
je short loc_fffbabe8  ; je 0xfffbabe8
cmp dword [esi + 0xa], 0
je short loc_fffbabab  ; je 0xfffbabab
imul eax, dword [ebp - 0x20], 0x8c
lea edx, [ebx + eax + 0x210b]
movzx eax, byte [edx + 0x1a]
imul eax, eax, 0xf4240
movzx edi, byte [edx + 0xa]
imul eax, edi
movzx edi, byte [edx + 0xb]
cdq
idiv edi
mov edx, dword [ebp - 0x1c]
lea eax, [edx + eax - 1]
xor edx, edx
div dword [ebp - 0x1c]
cmp ecx, eax
cmovb ecx, eax

loc_fffbabab:
cmp dword [esi + 0x27], 0
je short loc_fffbabe8  ; je 0xfffbabe8
imul eax, dword [ebp - 0x20], 0x8c
lea edx, [ebx + eax + 0x2151]
movzx eax, byte [edx + 0x1a]
imul eax, eax, 0xf4240
movzx edi, byte [edx + 0xa]
imul eax, edi
movzx edi, byte [edx + 0xb]
cdq
idiv edi
mov edx, dword [ebp - 0x1c]
lea eax, [edx + eax - 1]
xor edx, edx
div dword [ebp - 0x1c]
cmp ecx, eax
cmovb ecx, eax

loc_fffbabe8:
inc dword [ebp - 0x20]
add esi, 0x1055
cmp dword [ebp - 0x20], 2
jne loc_fffbab68  ; jne 0xfffbab68

loc_fffbabfb:
mov byte [ebx + 0x41], cl
mov byte [ebx + 0x1096], cl
movzx ecx, word [ebx + 0x22e6]
test cx, cx
jne loc_fffbaca7  ; jne 0xfffbaca7
mov eax, ebx
mov esi, ebx
call fcn_fffbff43  ; call 0xfffbff43
mov dword [ebp - 0x24], eax
mov dword [ebp - 0x20], 0
xor ecx, ecx

loc_fffbac29:
cmp byte [esi + 0x3a], 0
je short loc_fffbac98  ; je 0xfffbac98
imul eax, dword [ebp - 0x20], 0x8c
mov dword [ebp - 0x1c], 0
mov dword [ebp - 0x28], eax

loc_fffbac40:
imul eax, dword [ebp - 0x1c], 0x1d
cmp dword [esi + eax + 0xa], 0
je short loc_fffbac8f  ; je 0xfffbac8f
imul eax, dword [ebp - 0x1c], 0x46
mov edx, dword [ebp - 0x28]
lea eax, [eax + edx + 0x2100]
lea edi, [ebx + eax + 0xb]
movzx edx, byte [edi + 0x19]
movzx eax, byte [edi + 0x18]
shl edx, 8
or edx, eax
imul eax, edx, 0x3e8
movzx edx, byte [edi + 0xa]
imul eax, edx
movzx edi, byte [edi + 0xb]
cdq
idiv edi
mov edx, dword [ebp - 0x24]
lea eax, [edx + eax - 1]
xor edx, edx
div dword [ebp - 0x24]
cmp ecx, eax
cmovb ecx, eax

loc_fffbac8f:
inc dword [ebp - 0x1c]
cmp dword [ebp - 0x1c], 2
jne short loc_fffbac40  ; jne 0xfffbac40

loc_fffbac98:
inc dword [ebp - 0x20]
add esi, 0x1055
cmp dword [ebp - 0x20], 2
jne short loc_fffbac29  ; jne 0xfffbac29

loc_fffbaca7:
mov word [ebx + 0x47], cx
mov word [ebx + 0x109c], cx
lea esp, [esp + 0x1c]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbacbd:
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
push ebx
lea esp, [esp - 0x3c]
mov eax, dword [eax + 0x20b6]
cmp eax, 0x535
je short loc_fffbad0d  ; je 0xfffbad0d
ja short loc_fffbace8  ; ja 0xfffbace8
cmp eax, 0x320
je short loc_fffbacff  ; je 0xfffbacff
cmp eax, 0x42b
jne short loc_fffbad29  ; jne 0xfffbad29
jmp short loc_fffbad06  ; jmp 0xfffbad06

loc_fffbace8:
cmp eax, 0x74b
je short loc_fffbad1b  ; je 0xfffbad1b
cmp eax, 0x855
je short loc_fffbad22  ; je 0xfffbad22
cmp eax, 0x640
jne short loc_fffbad29  ; jne 0xfffbad29
jmp short loc_fffbad14  ; jmp 0xfffbad14

loc_fffbacff:
mov edx, 0xc30
jmp short loc_fffbad2b  ; jmp 0xfffbad2b

loc_fffbad06:
mov edx, 0x1040
jmp short loc_fffbad2b  ; jmp 0xfffbad2b

loc_fffbad0d:
mov edx, 0x1450
jmp short loc_fffbad2b  ; jmp 0xfffbad2b

loc_fffbad14:
mov edx, 0x1860
jmp short loc_fffbad2b  ; jmp 0xfffbad2b

loc_fffbad1b:
mov edx, 0x1c70
jmp short loc_fffbad2b  ; jmp 0xfffbad2b

loc_fffbad22:
mov edx, 0x2080
jmp short loc_fffbad2b  ; jmp 0xfffbad2b

loc_fffbad29:
xor edx, edx

loc_fffbad2b:
cmp eax, 0x535
mov dword [esi + 0x2e4d], edx
je short loc_fffbad5d  ; je 0xfffbad5d
ja short loc_fffbad48  ; ja 0xfffbad48
cmp eax, 0x320
je short loc_fffbad5d  ; je 0xfffbad5d
cmp eax, 0x42b
jmp short loc_fffbad5b  ; jmp 0xfffbad5b

loc_fffbad48:
cmp eax, 0x74b
je short loc_fffbad61  ; je 0xfffbad61
cmp eax, 0x855
je short loc_fffbad65  ; je 0xfffbad65
cmp eax, 0x640

loc_fffbad5b:
jne short loc_fffbad69  ; jne 0xfffbad69

loc_fffbad5d:
mov dl, 0xc
jmp short loc_fffbad6b  ; jmp 0xfffbad6b

loc_fffbad61:
mov dl, 0xf
jmp short loc_fffbad6b  ; jmp 0xfffbad6b

loc_fffbad65:
mov dl, 0x10
jmp short loc_fffbad6b  ; jmp 0xfffbad6b

loc_fffbad69:
xor edx, edx

loc_fffbad6b:
cmp eax, 0x535
mov byte [esi + 0x20aa], dl
je short loc_fffbadaf  ; je 0xfffbadaf
ja short loc_fffbad8a  ; ja 0xfffbad8a
cmp eax, 0x320
je short loc_fffbada1  ; je 0xfffbada1
cmp eax, 0x42b
jne short loc_fffbadcb  ; jne 0xfffbadcb
jmp short loc_fffbada8  ; jmp 0xfffbada8

loc_fffbad8a:
cmp eax, 0x74b
je short loc_fffbadbd  ; je 0xfffbadbd
cmp eax, 0x855
je short loc_fffbadc4  ; je 0xfffbadc4
cmp eax, 0x640
jne short loc_fffbadcb  ; jne 0xfffbadcb
jmp short loc_fffbadb6  ; jmp 0xfffbadb6

loc_fffbada1:
mov edx, 4
jmp short loc_fffbadcd  ; jmp 0xfffbadcd

loc_fffbada8:
mov edx, 6
jmp short loc_fffbadcd  ; jmp 0xfffbadcd

loc_fffbadaf:
mov edx, 7
jmp short loc_fffbadcd  ; jmp 0xfffbadcd

loc_fffbadb6:
mov edx, 8
jmp short loc_fffbadcd  ; jmp 0xfffbadcd

loc_fffbadbd:
mov edx, 0xa
jmp short loc_fffbadcd  ; jmp 0xfffbadcd

loc_fffbadc4:
mov edx, 0xb
jmp short loc_fffbadcd  ; jmp 0xfffbadcd

loc_fffbadcb:
xor edx, edx

loc_fffbadcd:
cmp eax, 0x535
mov byte [esi + 0x20ab], dl
je short loc_fffbae0a  ; je 0xfffbae0a
ja short loc_fffbadec  ; ja 0xfffbadec
cmp eax, 0x320
je short loc_fffbae18  ; je 0xfffbae18
cmp eax, 0x42b
jne short loc_fffbae1f  ; jne 0xfffbae1f
jmp short loc_fffbae11  ; jmp 0xfffbae11

loc_fffbadec:
cmp eax, 0x74b
je short loc_fffbae03  ; je 0xfffbae03
cmp eax, 0x855
je short loc_fffbae03  ; je 0xfffbae03
cmp eax, 0x640
jne short loc_fffbae1f  ; jne 0xfffbae1f
jmp short loc_fffbae0a  ; jmp 0xfffbae0a

loc_fffbae03:
mov edx, 8
jmp short loc_fffbae21  ; jmp 0xfffbae21

loc_fffbae0a:
mov edx, 6
jmp short loc_fffbae21  ; jmp 0xfffbae21

loc_fffbae11:
mov edx, 5
jmp short loc_fffbae21  ; jmp 0xfffbae21

loc_fffbae18:
mov edx, 4
jmp short loc_fffbae21  ; jmp 0xfffbae21

loc_fffbae1f:
xor edx, edx

loc_fffbae21:
cmp eax, 0x535
mov byte [esi + 0x20ac], dl
je short loc_fffbae5e  ; je 0xfffbae5e
ja short loc_fffbae40  ; ja 0xfffbae40
cmp eax, 0x320
je short loc_fffbae57  ; je 0xfffbae57
cmp eax, 0x42b
jne short loc_fffbae73  ; jne 0xfffbae73
jmp short loc_fffbae57  ; jmp 0xfffbae57

loc_fffbae40:
cmp eax, 0x74b
je short loc_fffbae65  ; je 0xfffbae65
cmp eax, 0x855
je short loc_fffbae6c  ; je 0xfffbae6c
cmp eax, 0x640
jne short loc_fffbae73  ; jne 0xfffbae73
jmp short loc_fffbae5e  ; jmp 0xfffbae5e

loc_fffbae57:
mov edx, 3
jmp short loc_fffbae75  ; jmp 0xfffbae75

loc_fffbae5e:
mov edx, 4
jmp short loc_fffbae75  ; jmp 0xfffbae75

loc_fffbae65:
mov edx, 5
jmp short loc_fffbae75  ; jmp 0xfffbae75

loc_fffbae6c:
mov edx, 6
jmp short loc_fffbae75  ; jmp 0xfffbae75

loc_fffbae73:
xor edx, edx

loc_fffbae75:
cmp eax, 0x535
mov byte [esi + 0x20ad], dl
je short loc_fffbaeb9  ; je 0xfffbaeb9
ja short loc_fffbae94  ; ja 0xfffbae94
cmp eax, 0x320
je short loc_fffbaeab  ; je 0xfffbaeab
cmp eax, 0x42b
jne short loc_fffbaed5  ; jne 0xfffbaed5
jmp short loc_fffbaeb2  ; jmp 0xfffbaeb2

loc_fffbae94:
cmp eax, 0x74b
je short loc_fffbaec7  ; je 0xfffbaec7
cmp eax, 0x855
je short loc_fffbaece  ; je 0xfffbaece
cmp eax, 0x640
jne short loc_fffbaed5  ; jne 0xfffbaed5
jmp short loc_fffbaec0  ; jmp 0xfffbaec0

loc_fffbaeab:
mov edx, 0xa
jmp short loc_fffbaed7  ; jmp 0xfffbaed7

loc_fffbaeb2:
mov edx, 0xd
jmp short loc_fffbaed7  ; jmp 0xfffbaed7

loc_fffbaeb9:
mov edx, 0x10
jmp short loc_fffbaed7  ; jmp 0xfffbaed7

loc_fffbaec0:
mov edx, 0x14
jmp short loc_fffbaed7  ; jmp 0xfffbaed7

loc_fffbaec7:
mov edx, 0x17
jmp short loc_fffbaed7  ; jmp 0xfffbaed7

loc_fffbaece:
mov edx, 0x1a
jmp short loc_fffbaed7  ; jmp 0xfffbaed7

loc_fffbaed5:
xor edx, edx

loc_fffbaed7:
cmp eax, 0x535
mov byte [esi + 0x20ae], dl
je short loc_fffbaf14  ; je 0xfffbaf14
ja short loc_fffbaef6  ; ja 0xfffbaef6
cmp eax, 0x320
je short loc_fffbaf0d  ; je 0xfffbaf0d
cmp eax, 0x42b
jne short loc_fffbaf30  ; jne 0xfffbaf30
jmp short loc_fffbaf14  ; jmp 0xfffbaf14

loc_fffbaef6:
cmp eax, 0x74b
je short loc_fffbaf22  ; je 0xfffbaf22
cmp eax, 0x855
je short loc_fffbaf29  ; je 0xfffbaf29
cmp eax, 0x640
jne short loc_fffbaf30  ; jne 0xfffbaf30
jmp short loc_fffbaf1b  ; jmp 0xfffbaf1b

loc_fffbaf0d:
mov edx, 3
jmp short loc_fffbaf32  ; jmp 0xfffbaf32

loc_fffbaf14:
mov edx, 4
jmp short loc_fffbaf32  ; jmp 0xfffbaf32

loc_fffbaf1b:
mov edx, 5
jmp short loc_fffbaf32  ; jmp 0xfffbaf32

loc_fffbaf22:
mov edx, 6
jmp short loc_fffbaf32  ; jmp 0xfffbaf32

loc_fffbaf29:
mov edx, 7
jmp short loc_fffbaf32  ; jmp 0xfffbaf32

loc_fffbaf30:
xor edx, edx

loc_fffbaf32:
cmp eax, 0x535
mov byte [esi + 0x20af], dl
je short loc_fffbaf71  ; je 0xfffbaf71
ja short loc_fffbaf51  ; ja 0xfffbaf51
cmp eax, 0x320
je short loc_fffbaf86  ; je 0xfffbaf86
cmp eax, 0x42b
jne short loc_fffbaf66  ; jne 0xfffbaf66
jmp short loc_fffbaf6a  ; jmp 0xfffbaf6a

loc_fffbaf51:
cmp eax, 0x74b
je short loc_fffbaf78  ; je 0xfffbaf78
cmp eax, 0x855
je short loc_fffbaf7f  ; je 0xfffbaf7f
cmp eax, 0x640
je short loc_fffbaf78  ; je 0xfffbaf78

loc_fffbaf66:
xor eax, eax
jmp short loc_fffbaf8b  ; jmp 0xfffbaf8b

loc_fffbaf6a:
mov eax, 5
jmp short loc_fffbaf8b  ; jmp 0xfffbaf8b

loc_fffbaf71:
mov eax, 6
jmp short loc_fffbaf8b  ; jmp 0xfffbaf8b

loc_fffbaf78:
mov eax, 8
jmp short loc_fffbaf8b  ; jmp 0xfffbaf8b

loc_fffbaf7f:
mov eax, 0xa
jmp short loc_fffbaf8b  ; jmp 0xfffbaf8b

loc_fffbaf86:
mov eax, 4

loc_fffbaf8b:
mov byte [esi + 0x20b0], al
mov ax, word [esi + 0x22e2]
movzx edx, ax
mov word [ebp - 0x32], ax
mov dword [ebp - 0x38], edx
mov dword [ebp - 0x1c], esi
mov edi, esi
mov dword [ebp - 0x2c], 0

loc_fffbafae:
cmp word [ebp - 0x32], 0
mov ebx, dword [ebp - 0x38]
jne short loc_fffbb033  ; jne 0xfffbb033
mov eax, esi
xor ebx, ebx
call fcn_fffc019c  ; call 0xfffc019c
mov dword [ebp - 0x24], eax
mov dword [ebp - 0x20], 0
imul eax, dword [ebp - 0x2c], 0x8c
lea ecx, [esi + eax + 0x2127]
mov eax, dword [ebp - 0x24]
dec eax
mov dword [ebp - 0x30], eax

loc_fffbafe0:
mov eax, dword [ebp - 0x1c]
mov edx, dword [ebp - 0x20]
cmp dword [eax + edx + 0xa], 1
jne short loc_fffbb026  ; jne 0xfffbb026
movzx eax, byte [ecx - 0x12]
mov dl, byte [ecx]
and edx, 0xf
imul eax, eax, 0x3e8
shl edx, 8
mov dword [ebp - 0x3c], edx
movzx edx, byte [ecx + 1]
or dword [ebp - 0x3c], edx
imul eax, dword [ebp - 0x3c]
movzx edx, byte [ecx - 0x11]
mov dword [ebp - 0x3c], edx
xor edx, edx
div dword [ebp - 0x3c]
xor edx, edx
add eax, dword [ebp - 0x30]
div dword [ebp - 0x24]
cmp ebx, eax
cmovb ebx, eax

loc_fffbb026:
add dword [ebp - 0x20], 0x1d
add ecx, 0x46
cmp dword [ebp - 0x20], 0x3a
jne short loc_fffbafe0  ; jne 0xfffbafe0

loc_fffbb033:
mov eax, dword [ebp - 0x1c]
mov byte [eax + 0x44], bl
movzx ecx, byte [esi + 0x22e1]
test cl, cl
jne loc_fffbb0cf  ; jne 0xfffbb0cf
mov eax, esi
call fcn_fffc019c  ; call 0xfffc019c
mov edx, dword [ebp - 0x1c]
mov ebx, eax
mov ecx, 4
cmp dword [edx + 0xa], 1
jne short loc_fffbb093  ; jne 0xfffbb093
movzx eax, byte [edi + 0x211e]
imul eax, eax, 0x3e8
movzx edx, byte [edi + 0x2115]
imul eax, edx
movzx edx, byte [edi + 0x2116]
mov dword [ebp - 0x24], edx
xor edx, edx
div dword [ebp - 0x24]
xor edx, edx
lea eax, [ebx + eax - 1]
div ebx
cmp eax, 4
cmovae ecx, eax

loc_fffbb093:
mov eax, dword [ebp - 0x1c]
cmp dword [eax + 0x27], 1
jne short loc_fffbb0cf  ; jne 0xfffbb0cf
movzx eax, byte [edi + 0x2164]
imul eax, eax, 0x3e8
movzx edx, byte [edi + 0x215b]
imul eax, edx
movzx edx, byte [edi + 0x215c]
mov dword [ebp - 0x24], edx
xor edx, edx
div dword [ebp - 0x24]
xor edx, edx
lea eax, [ebx + eax - 1]
div ebx
cmp ecx, eax
cmovb ecx, eax

loc_fffbb0cf:
mov eax, dword [ebp - 0x1c]
mov byte [eax + 0x43], cl
movzx ecx, byte [esi + 0x22e0]
test cl, cl
jne loc_fffbb16b  ; jne 0xfffbb16b
mov eax, esi
call fcn_fffc019c  ; call 0xfffc019c
mov edx, dword [ebp - 0x1c]
mov ebx, eax
mov ecx, 4
cmp dword [edx + 0xa], 0
je short loc_fffbb12f  ; je 0xfffbb12f
movzx eax, byte [edi + 0x2126]
imul eax, eax, 0x3e8
movzx edx, byte [edi + 0x2115]
imul eax, edx
movzx edx, byte [edi + 0x2116]
mov dword [ebp - 0x24], edx
xor edx, edx
div dword [ebp - 0x24]
xor edx, edx
lea eax, [ebx + eax - 1]
div ebx
cmp eax, 4
cmovae ecx, eax

loc_fffbb12f:
mov eax, dword [ebp - 0x1c]
cmp dword [eax + 0x27], 0
je short loc_fffbb16b  ; je 0xfffbb16b
movzx eax, byte [edi + 0x216c]
imul eax, eax, 0x3e8
movzx edx, byte [edi + 0x215b]
imul eax, edx
movzx edx, byte [edi + 0x215c]
mov dword [ebp - 0x24], edx
xor edx, edx
div dword [ebp - 0x24]
xor edx, edx
lea eax, [ebx + eax - 1]
div ebx
cmp ecx, eax
cmovb ecx, eax

loc_fffbb16b:
mov eax, dword [ebp - 0x1c]
mov byte [eax + 0x42], cl
movzx ecx, byte [esi + 0x22df]
test cl, cl
jne loc_fffbb207  ; jne 0xfffbb207
mov eax, esi
call fcn_fffc019c  ; call 0xfffc019c
mov edx, dword [ebp - 0x1c]
mov ebx, eax
mov ecx, 4
cmp dword [edx + 0xa], 0
je short loc_fffbb1cb  ; je 0xfffbb1cb
movzx eax, byte [edi + 0x2125]
imul eax, eax, 0x3e8
movzx edx, byte [edi + 0x2115]
imul eax, edx
movzx edx, byte [edi + 0x2116]
mov dword [ebp - 0x24], edx
xor edx, edx
div dword [ebp - 0x24]
xor edx, edx
lea eax, [ebx + eax - 1]
div ebx
cmp eax, 4
cmovae ecx, eax

loc_fffbb1cb:
mov eax, dword [ebp - 0x1c]
cmp dword [eax + 0x27], 0
je short loc_fffbb207  ; je 0xfffbb207
movzx eax, byte [edi + 0x216b]
imul eax, eax, 0x3e8
movzx edx, byte [edi + 0x215b]
imul eax, edx
movzx edx, byte [edi + 0x215c]
mov dword [ebp - 0x24], edx
xor edx, edx
div dword [ebp - 0x24]
xor edx, edx
lea eax, [ebx + eax - 1]
div ebx
cmp ecx, eax
cmovb ecx, eax

loc_fffbb207:
mov eax, dword [ebp - 0x1c]
mov byte [eax + 0x41], cl
movzx ebx, word [esi + 0x22e6]
test bx, bx
jne short loc_fffbb291  ; jne 0xfffbb291
mov eax, esi
xor ebx, ebx
call fcn_fffc019c  ; call 0xfffc019c
mov dword [ebp - 0x24], eax
mov edx, dword [ebp - 0x24]
imul eax, dword [ebp - 0x2c], 0x8c
dec edx
mov dword [ebp - 0x20], 0
mov dword [ebp - 0x30], edx
lea ecx, [esi + eax + 0x2123]

loc_fffbb241:
mov edx, dword [ebp - 0x1c]
mov eax, dword [ebp - 0x20]
cmp dword [edx + eax + 0xa], 1
jne short loc_fffbb284  ; jne 0xfffbb284
movzx eax, byte [ecx]
movzx edx, byte [ecx + 1]
mov dword [ebp - 0x28], eax
movzx eax, byte [ecx - 0xe]
imul eax, eax, 0x3e8
shl edx, 8
or edx, dword [ebp - 0x28]
imul eax, edx
movzx edx, byte [ecx - 0xd]
mov dword [ebp - 0x3c], edx
xor edx, edx
div dword [ebp - 0x3c]
xor edx, edx
add eax, dword [ebp - 0x30]
div dword [ebp - 0x24]
cmp ebx, eax
cmovb ebx, eax

loc_fffbb284:
add dword [ebp - 0x20], 0x1d
add ecx, 0x46
cmp dword [ebp - 0x20], 0x3a
jne short loc_fffbb241  ; jne 0xfffbb241

loc_fffbb291:
mov eax, dword [ebp - 0x1c]
inc dword [ebp - 0x2c]
add edi, 0x8c
mov word [eax + 0x47], bx
add eax, 0x1055
cmp dword [ebp - 0x2c], 2
mov dword [ebp - 0x1c], eax
jne loc_fffbafae  ; jne 0xfffbafae
lea esp, [esp + 0x3c]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbb2be:
push ebp
mov edx, dword [eax + 0x2223]
mov ebp, esp
mov eax, dword [edx + 0x5030]
and eax, 0xffffffdf
mov dword [edx + 0x5030], eax
pop ebp
ret

fcn_fffbb2d8:
push ebp
mov ax, word [edx]
mov ebp, esp
push edi
mov edi, eax
push esi
mov esi, eax
or edi, 0x10
and esi, 0xffffffef
test al, 8
push ebx
cmove edi, esi
mov bl, byte [ecx]
mov esi, edi
and edi, 0xfffffff7
or esi, 8
test al, 0x10
cmove esi, edi
mov edi, esi
and esi, 0xffffffbf
or edi, 0x40
test al, 0x20
cmove edi, esi
mov esi, edi
and edi, 0xffffffdf
or esi, 0x20
test al, 0x40
cmove esi, edi
mov edi, esi
and si, 0xfeff
or di, 0x100
test al, 0x80
cmove edi, esi
mov esi, edi
and di, 0xff7f
or si, 0x80
test ah, 1
mov al, bl
cmove esi, edi
mov edi, 0xfffffffd
and edi, ebx
or eax, 2
test bl, 1
mov word [edx], si
cmove eax, edi
mov edi, 1
or edi, eax
and eax, 0xfffffffe
and bl, 2
pop ebx
cmove edi, eax
mov eax, edi
pop esi
mov byte [ecx], al
pop edi
pop ebp
ret

fcn_fffbb36a:
push ebp
mov ebp, esp
push ebx
cmp dword [ebp + 0xc], 0
mov ebx, dword [ebp + 8]
je short loc_fffbb3a6  ; je 0xfffbb3a6
cmp dl, 0x64
mov eax, dword [eax + 0x2223]
movzx ecx, cl
jne short loc_fffbb38e  ; jne 0xfffbb38e
lea eax, [eax + ecx*4 + 0x4e40]
jmp short loc_fffbb3a4  ; jmp 0xfffbb3a4

loc_fffbb38e:
test dl, dl
jne short loc_fffbb39b  ; jne 0xfffbb39b
lea edx, [ecx*4 + 0x4240]
jmp short loc_fffbb3a2  ; jmp 0xfffbb3a2

loc_fffbb39b:
lea edx, [ecx*4 + 0x4640]

loc_fffbb3a2:
add eax, edx

loc_fffbb3a4:
mov dword [eax], ebx

loc_fffbb3a6:
pop ebx
pop ebp
ret

fcn_fffbb3a9:
push ebp
mov ebp, esp
push edi
mov edi, 3
push esi
mov esi, edx
movzx edx, byte [ebp + 0x10]
cmp dl, 2
push ebx
mov ebx, dword [ebp + 0xc]
cmovbe edx, edi
cmp bx, 3
mov edi, 4
mov eax, dword [eax + 0x2223]
cmovbe ebx, edi
shl ebx, 0x10
movzx edi, word [ebp + 8]
shl edx, 0xa
or ebx, edi
and ebx, 0xf3ff83ff
or ebx, edx
movzx edx, byte [ebp + 0x18]
add edx, edx
or edx, dword [ebp + 0x14]
shl edx, 0x1a
or ebx, edx
mov edx, esi
cmp dl, 0x64
jne short loc_fffbb40a  ; jne 0xfffbb40a
movzx ecx, cl
lea eax, [eax + ecx*4 + 0x4e30]
jmp short loc_fffbb425  ; jmp 0xfffbb425

loc_fffbb40a:
movzx ecx, cl
mov edx, esi
test dl, dl
jne short loc_fffbb41c  ; jne 0xfffbb41c
lea edx, [ecx*4 + 0x4230]
jmp short loc_fffbb423  ; jmp 0xfffbb423

loc_fffbb41c:
lea edx, [ecx*4 + 0x4630]

loc_fffbb423:
add eax, edx

loc_fffbb425:
mov dword [eax], ebx
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbb42e:
push ebp
movzx ecx, cl
mov ebp, esp
push esi
push ebx
movzx ebx, byte [ebp + 0xc]
mov eax, dword [eax + 0x2223]
shl ebx, 0x10
movzx esi, word [ebp + 8]
or ebx, esi
movzx esi, byte [ebp + 0x10]
and ebx, 0xff8fffff
shl esi, 0x14
or ebx, esi
movzx esi, byte [ebp + 0x14]
and ebx, 0xfcffffff
shl esi, 0x18
or ebx, esi
cmp dl, 0x64
jne short loc_fffbb475  ; jne 0xfffbb475
lea eax, [eax + ecx*4 + 0x4e00]
jmp short loc_fffbb48b  ; jmp 0xfffbb48b

loc_fffbb475:
test dl, dl
jne short loc_fffbb482  ; jne 0xfffbb482
lea edx, [ecx*4 + 0x4200]
jmp short loc_fffbb489  ; jmp 0xfffbb489

loc_fffbb482:
lea edx, [ecx*4 + 0x4600]

loc_fffbb489:
add eax, edx

loc_fffbb48b:
mov dword [eax], ebx
xor eax, eax
pop ebx
pop esi
pop ebp
ret

fcn_fffbb493:
cmp ecx, 1
push ebp
sbb ecx, ecx
and ecx, 0xfffffc00
mov ebp, esp
add ecx, 0x44d0
push ebx
add ecx, dword [eax + 0x2223]
cmp edx, 3
mov ebx, dword [ecx]
ja short loc_fffbb4c3  ; ja 0xfffbb4c3
movzx edx, byte [edx + ref_fffcf228]  ; movzx edx, byte [edx - 0x30dd8]
mov ecx, 2
jmp short loc_fffbb4c7  ; jmp 0xfffbb4c7

loc_fffbb4c3:
xor ecx, ecx
xor edx, edx

loc_fffbb4c7:
mov eax, 1
shl eax, cl
mov cl, dl
dec eax
shl eax, cl
and eax, ebx
shr eax, cl
pop ebx
pop ebp
ret

fcn_fffbb4da:
cmp ecx, 1
push ebp
sbb ecx, ecx
and ecx, 0xfffffc00
mov ebp, esp
add ecx, 0x4424
push ebx
add ecx, dword [eax + 0x2223]
cmp edx, 3
mov ebx, dword [ecx]
ja short loc_fffbb50a  ; ja 0xfffbb50a
movzx edx, byte [edx + ref_fffcf22c]  ; movzx edx, byte [edx - 0x30dd4]
mov ecx, 6
jmp short loc_fffbb50e  ; jmp 0xfffbb50e

loc_fffbb50a:
xor ecx, ecx
xor edx, edx

loc_fffbb50e:
mov eax, 1
shl eax, cl
mov cl, dl
dec eax
shl eax, cl
and eax, ebx
shr eax, cl
pop ebx
pop ebp
ret

fcn_fffbb521:
push ebp
cmp ecx, 1
mov ebp, esp
push edi
push esi
mov esi, ecx
push ebx
mov ebx, dword [eax + 0x2223]
sbb eax, eax
and eax, 0xfffffc00
cmp edx, 3
lea eax, [eax + ebx + 0x4424]
mov edi, dword [eax]
ja short loc_fffbb555  ; ja 0xfffbb555
movzx edx, byte [edx + ref_fffcf230]  ; movzx edx, byte [edx - 0x30dd0]
mov ecx, 6
jmp short loc_fffbb559  ; jmp 0xfffbb559

loc_fffbb555:
xor ecx, ecx
xor edx, edx

loc_fffbb559:
mov eax, 1
shl eax, cl
mov cl, dl
dec eax
shl eax, cl
not eax
and eax, edi
mov edi, dword [ebp + 8]
shl edi, cl
or eax, edi
cmp esi, 1
sbb edx, edx
and edx, 0xfffffc00
lea edx, [edx + ebx + 0x4424]
mov dword [edx], eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbb589:
cmp ecx, 1

fcn_fffbb58c:  ; not directly referenced
push ebp
sbb ecx, ecx
and ecx, 0xfffffc00
mov ebp, esp
add ecx, 0x4428
push ebx
add ecx, dword [eax + 0x2223]
cmp edx, 3
mov ebx, dword [ecx]
ja short loc_fffbb5b9  ; ja 0xfffbb5b9
movzx edx, byte [edx + ref_fffcf234]  ; movzx edx, byte [edx - 0x30dcc]
mov ecx, 4
jmp short loc_fffbb5bd  ; jmp 0xfffbb5bd

loc_fffbb5b9:
xor ecx, ecx
xor edx, edx

loc_fffbb5bd:
mov eax, 1
shl eax, cl
mov cl, dl
dec eax
shl eax, cl
and eax, ebx
shr eax, cl
pop ebx
pop ebp
ret

fcn_fffbb5d0:
push ebp
cmp ecx, 1
mov ebp, esp
push edi
push esi
mov esi, ecx
push ebx
mov ebx, dword [eax + 0x2223]
sbb eax, eax
and eax, 0xfffffc00
cmp edx, 3
lea eax, [eax + ebx + 0x4428]
mov edi, dword [eax]
ja short loc_fffbb604  ; ja 0xfffbb604
movzx edx, byte [edx + ref_fffcf238]  ; movzx edx, byte [edx - 0x30dc8]
mov ecx, 4
jmp short loc_fffbb608  ; jmp 0xfffbb608

loc_fffbb604:
xor ecx, ecx
xor edx, edx

loc_fffbb608:
mov eax, 1
shl eax, cl
mov cl, dl
dec eax
shl eax, cl
not eax
and eax, edi
mov edi, dword [ebp + 8]
shl edi, cl
or eax, edi
cmp esi, 1
sbb edx, edx
and edx, 0xfffffc00
lea edx, [edx + ebx + 0x4428]
mov dword [edx], eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbb638:
push ebp
imul ecx, ecx, 0x1055
mov ebp, esp
push ebx
mov bl, dl
shr edx, 1
imul edx, edx, 0x1d
add edx, ecx
add eax, edx
cmp dword [eax + 0xa], 1
jne short loc_fffbb664  ; jne 0xfffbb664
mov dl, bl
and edx, 1
inc edx
cmp dl, byte [eax + 0x12]
setbe al
movzx eax, al
jmp short loc_fffbb666  ; jmp 0xfffbb666

loc_fffbb664:
xor eax, eax

loc_fffbb666:
pop ebx
pop ebp
ret

fcn_fffbb669:
push ebp
cmp ecx, 1
mov ebp, esp
push edi
push esi
push ebx
push ebx
mov byte [ebp - 0xd], dl
je short loc_fffbb680  ; je 0xfffbb680
sbb ecx, ecx
and ecx, 0x51
dec ecx
jmp short loc_fffbb685  ; jmp 0xfffbb685

loc_fffbb680:
mov ecx, 0x14

loc_fffbb685:
mov dl, byte [ebp - 0xd]
cmp dl, 0x64
jne short loc_fffbb693  ; jne 0xfffbb693
xor edx, edx
mov byte [ebp - 0xd], 1

loc_fffbb693:
xor ebx, ebx
jmp short loc_fffbb6d1  ; jmp 0xfffbb6d1

loc_fffbb697:
movzx esi, dl
imul esi, esi, 0x1055
cmp byte [eax + esi + 0x3a], 0
je short loc_fffbb6d0  ; je 0xfffbb6d0
cmp dl, 1
mov edi, dword [eax + 0x2223]
sbb esi, esi
and esi, 0xfffffc00
lea edi, [esi + edi + 0x468c]

loc_fffbb6bf:
mov esi, dword [edi]
test ecx, esi
je short loc_fffbb6bf  ; je 0xfffbb6bf
and esi, 0x10
mov esi, 0xc
cmovne ebx, esi

loc_fffbb6d0:
inc edx

loc_fffbb6d1:
cmp dl, byte [ebp - 0xd]
jbe short loc_fffbb697  ; jbe 0xfffbb697
pop edx
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbb6de:
push ebp
mov ebp, esp
push edi
xor edi, edi
push esi
mov esi, eax
push ebx
lea esp, [esp - 0x3c]
mov al, byte [ebp + 8]
mov byte [ebp - 0x37], al
mov eax, dword [ebp + 0xc]
mov word [ebp - 0x36], ax
mov al, byte [ebp + 0x20]
test al, al
mov dword [ebp - 0x3c], ecx
mov byte [ebp - 0x32], dl
mov byte [ebp - 0x33], al
je short loc_fffbb718  ; je 0xfffbb718
movzx edx, dl
mov ecx, dword [ebp + 0x18]
mov eax, esi
call fcn_fffbb669  ; call 0xfffbb669
mov edi, eax

loc_fffbb718:
movzx eax, byte [ebp - 0x32]
mov byte [ebp - 0x31], 0
mov dword [ebp - 0x30], eax
imul eax, eax, 0x1055
mov dword [ebp - 0x40], eax
jmp near loc_fffbbe31  ; jmp 0xfffbbe31

loc_fffbb731:
imul ebx, ebx, 0x15
add ebx, dword [ebp + 0x1c]
cmp dword [ebx], 0xc
ja loc_fffbbedb  ; ja 0xfffbbedb
mov eax, dword [ebx]
jmp dword [eax*4 + ref_fffcf1f4]  ; ujmp: jmp dword [eax*4 - 0x30e0c]

loc_fffbb749:
push edx
movzx eax, byte [ebp - 0x31]
push edx
mov dword [ebp - 0x2c], eax
push 0
push 0xf
jmp short loc_fffbb765  ; jmp 0xfffbb765

loc_fffbb758:
push ecx
movzx eax, byte [ebp - 0x31]
push ecx
mov dword [ebp - 0x2c], eax
push 0
push 0x1f

loc_fffbb765:
push 0
mov ecx, eax
mov edx, dword [ebp - 0x30]
push 0
mov eax, esi
push 0
push 0
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 0
cmovne edi, eax
mov ecx, dword [ebp - 0x2c]
push 0
movzx eax, byte [ebx + 0x14]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, word [ebx + 0x12]
push eax
movzx eax, word [ebx + 0x10]
push eax
mov eax, esi
call fcn_fffbb3a9  ; call 0xfffbb3a9
add esp, 0x20
test eax, eax
cmovne edi, eax
mov ax, word [ebx + 8]
mov word [ebp - 0x1a], ax
cmp byte [ebp - 0x32], 0x64
mov al, byte [ebx + 0xa]
mov byte [ebp - 0x1b], al
mov al, byte [ebx + 0xb]
jne loc_fffbb862  ; jne 0xfffbb862
xor edx, edx
cmp al, 1
seta dl
imul edx, edx, 0x1d
cmp dword [esi + edx + 0x15], 1
jne short loc_fffbb7e9  ; jne 0xfffbb7e9
and eax, 0xfffffffd
dec al
jne short loc_fffbb7e9  ; jne 0xfffbb7e9
lea ecx, [ebp - 0x1b]
lea edx, [ebp - 0x1a]
mov eax, esi
call fcn_fffbb2d8  ; call 0xfffbb2d8

loc_fffbb7e9:
movzx eax, byte [ebx + 0xb]
xor edx, edx
push eax
movzx eax, byte [ebp - 0x1b]
mov ecx, dword [ebp - 0x2c]
push eax
movzx eax, word [ebp - 0x1a]
push 6
push eax
mov eax, esi
call fcn_fffbb42e  ; call 0xfffbb42e
add esp, 0x10
test eax, eax
cmovne edi, eax
mov ax, word [ebx + 8]
mov word [ebp - 0x1a], ax
mov al, byte [ebx + 0xa]
mov byte [ebp - 0x1b], al
mov al, byte [ebx + 0xb]
xor edx, edx
cmp al, 1
seta dl
imul edx, edx, 0x1d
cmp dword [esi + edx + 0x106a], 1
jne short loc_fffbb847  ; jne 0xfffbb847
and eax, 0xfffffffd
dec al
jne short loc_fffbb847  ; jne 0xfffbb847
lea ecx, [ebp - 0x1b]
lea edx, [ebp - 0x1a]
mov eax, esi
call fcn_fffbb2d8  ; call 0xfffbb2d8

loc_fffbb847:
movzx eax, byte [ebx + 0xb]
mov ecx, dword [ebp - 0x2c]
push eax
movzx eax, byte [ebp - 0x1b]
mov edx, 1
push eax
movzx eax, word [ebp - 0x1a]
push 6
push eax
jmp short loc_fffbb8a1  ; jmp 0xfffbb8a1

loc_fffbb862:
xor edx, edx
cmp al, 1
seta dl
imul edx, edx, 0x1d
add edx, dword [ebp - 0x40]
cmp dword [esi + edx + 0x15], 1
jne short loc_fffbb88a  ; jne 0xfffbb88a
and eax, 0xfffffffd
dec al
jne short loc_fffbb88a  ; jne 0xfffbb88a
lea ecx, [ebp - 0x1b]
lea edx, [ebp - 0x1a]
mov eax, esi
call fcn_fffbb2d8  ; call 0xfffbb2d8

loc_fffbb88a:
movzx eax, byte [ebx + 0xb]
mov ecx, dword [ebp - 0x2c]
push eax
movzx eax, byte [ebp - 0x1b]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, word [ebp - 0x1a]
push 6
push eax

loc_fffbb8a1:
mov eax, esi
call fcn_fffbb42e  ; call 0xfffbb42e
test eax, eax
pop ecx
pop edx
push dword [ebx + 4]
cmovne edi, eax
push 0x11111111
jmp near loc_fffbbdad  ; jmp 0xfffbbdad

loc_fffbb8bc:
movzx eax, byte [ebp - 0x31]
or word [ebx + 8], 0x400
push edx
mov ecx, eax
mov dword [ebp - 0x2c], eax
push edx
mov eax, esi
mov edx, dword [ebp - 0x30]
push 0
push 0x1f
push 0
push 0
push 1
push 1
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 0
cmovne edi, eax
mov ecx, dword [ebp - 0x2c]
push 0
movzx eax, byte [ebx + 0x14]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, word [ebx + 0x12]
push eax
movzx eax, word [ebx + 0x10]
push eax
mov eax, esi
call fcn_fffbb3a9  ; call 0xfffbb3a9
add esp, 0x20
test eax, eax
mov ecx, dword [ebp - 0x2c]
mov edx, dword [ebp - 0x30]
cmovne edi, eax
movzx eax, byte [ebx + 0xb]
push eax
movzx eax, byte [ebx + 0xa]
push eax
push 6
movzx eax, word [ebx + 8]
push eax
mov eax, esi
call fcn_fffbb42e  ; call 0xfffbb42e
test eax, eax
pop ecx
pop edx
push dword [ebx + 4]
cmovne edi, eax
push 0x22222222
jmp near loc_fffbbdad  ; jmp 0xfffbbdad

loc_fffbb945:
and word [ebx + 8], 0xfbff
mov edx, dword [ebp - 0x30]
push ecx
movzx eax, byte [ebp - 0x31]
push ecx
mov dword [ebp - 0x2c], eax
mov ecx, eax
push 0
mov eax, esi
push 0xf
push 0
push 0
push 1
push 1
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 0
cmovne edi, eax
mov ecx, dword [ebp - 0x2c]
push 0
movzx eax, byte [ebx + 0x14]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, word [ebx + 0x12]
push eax
movzx eax, word [ebx + 0x10]
push eax
mov eax, esi
call fcn_fffbb3a9  ; call 0xfffbb3a9
add esp, 0x20
test eax, eax
mov ecx, dword [ebp - 0x2c]
mov edx, dword [ebp - 0x30]
cmovne edi, eax
movzx eax, byte [ebx + 0xb]
push eax
movzx eax, byte [ebx + 0xa]
push eax
push 6
movzx eax, word [ebx + 8]
push eax
mov eax, esi
call fcn_fffbb42e  ; call 0xfffbb42e
test eax, eax
pop edx
pop ecx
push dword [ebx + 4]
cmovne edi, eax
push 0x33333333
jmp near loc_fffbbdad  ; jmp 0xfffbbdad

loc_fffbb9ce:
cmp byte [ebp - 0x33], 0
je short loc_fffbba4b  ; je 0xfffbba4b
push edx
movzx eax, byte [ebp - 0x31]
push edx
mov ecx, eax
mov dword [ebp - 0x2c], eax
push 0
mov edx, dword [ebp - 0x30]
mov eax, esi
push 0x1f
push 0
push 0
push 1
push 0
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 0
cmovne edi, eax
mov ecx, dword [ebp - 0x2c]
push 0
movzx eax, byte [ebx + 0x14]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, word [ebx + 0x12]
push eax
movzx eax, word [ebx + 0x10]
push eax
mov eax, esi
call fcn_fffbb3a9  ; call 0xfffbb3a9
add esp, 0x20
test eax, eax
mov ecx, dword [ebp - 0x2c]
mov edx, dword [ebp - 0x30]
cmovne edi, eax
movzx eax, byte [ebx + 0xb]
push eax
movzx eax, byte [ebx + 0xa]
push eax
push 6
movzx eax, word [ebx + 8]
push eax
mov eax, esi
call fcn_fffbb42e  ; call 0xfffbb42e
add esp, 0x10
test eax, eax
cmovne edi, eax

loc_fffbba4b:
push ecx
push ecx
push dword [ebx + 4]
movzx ecx, byte [ebp - 0x31]
push 0x44444444
jmp near loc_fffbbdb0  ; jmp 0xfffbbdb0

loc_fffbba5e:
cmp byte [ebp - 0x33], 0
je loc_fffbbef4  ; je 0xfffbbef4
push edx
movzx eax, byte [ebp - 0x31]
push edx
mov dword [ebp - 0x2c], eax
mov ecx, eax
push 0
mov edx, dword [ebp - 0x30]
mov eax, esi
push 0x1f
push 1
push 1
push 0
push 1
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 0
cmovne edi, eax
push 1
jmp near loc_fffbbc97  ; jmp 0xfffbbc97

loc_fffbba9a:
mov word [ebx + 8], 8
mov edx, dword [ebp - 0x30]
push ecx
movzx eax, byte [ebp - 0x31]
push ecx
mov dword [ebp - 0x2c], eax
mov ecx, eax
push 0
mov eax, esi
push 0x1f
push 2
push 1
push 1
push 1
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 1
cmovne edi, eax
push 0
jmp short loc_fffbbb02  ; jmp 0xfffbbb02

loc_fffbbacf:
movzx eax, byte [ebp - 0x31]
mov word [ebx + 8], 4
push edx
mov dword [ebp - 0x2c], eax
mov ecx, eax
push edx
mov eax, esi
mov edx, dword [ebp - 0x30]
push 0
push 0x1f
push 1
push 1
push 1
push 1
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 0
cmovne edi, eax
push 1

loc_fffbbb02:
movzx eax, byte [ebx + 0x14]
mov ecx, dword [ebp - 0x2c]
push eax
movzx eax, word [ebx + 0x12]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, word [ebx + 0x10]
push eax
mov eax, esi
call fcn_fffbb3a9  ; call 0xfffbb3a9
add esp, 0x20
test eax, eax
cmovne edi, eax
movzx eax, byte [ebx + 0xb]
push eax
movzx eax, byte [ebx + 0xa]
push eax
push 0
jmp near loc_fffbbd8c  ; jmp 0xfffbbd8c

loc_fffbbb37:
mov word [ebx + 8], 2
mov edx, dword [ebp - 0x30]
push ecx
movzx eax, byte [ebp - 0x31]
push ecx
mov dword [ebp - 0x2c], eax
mov ecx, eax
push 0
mov eax, esi
push 0
push 0
push 1
push 1
push 1
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 0
cmovne edi, eax
mov ecx, dword [ebp - 0x2c]
push 0
movzx eax, byte [ebx + 0x14]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, word [ebx + 0x12]
push eax
movzx eax, word [ebx + 0x10]
push eax
mov eax, esi
call fcn_fffbb3a9  ; call 0xfffbb3a9
add esp, 0x20
test eax, eax
mov ecx, dword [ebp - 0x2c]
mov edx, dword [ebp - 0x30]
cmovne edi, eax
movzx eax, byte [ebx + 0xb]
push eax
movzx eax, byte [ebx + 0xa]
push eax
push 6
movzx eax, word [ebx + 8]
push eax
mov eax, esi
call fcn_fffbb42e  ; call 0xfffbb42e
test eax, eax
pop edx
pop ecx
push dword [ebx + 4]
cmovne edi, eax
push 0x88888888
jmp near loc_fffbbdad  ; jmp 0xfffbbdad

loc_fffbbbc0:
cmp byte [ebp - 0x33], 0
je loc_fffbbee2  ; je 0xfffbbee2
push edx
movzx eax, byte [ebp - 0x31]
push edx
mov ecx, eax
mov dword [ebp - 0x2c], eax
push 0
mov edx, dword [ebp - 0x30]
mov eax, esi
push 0x1f
push 0
push 1
push 1
push 0
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 0
cmovne edi, eax
mov ecx, dword [ebp - 0x2c]
push 0
movzx eax, byte [ebx + 0x14]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, word [ebx + 0x12]
push eax
movzx eax, word [ebx + 0x10]
push eax
mov eax, esi
call fcn_fffbb3a9  ; call 0xfffbb3a9
add esp, 0x20
test eax, eax
cmovne edi, eax
jmp short loc_fffbbc26  ; jmp 0xfffbbc26

loc_fffbbc1d:
cmp dword [esi + 0x2254], 1
ja short loc_fffbbc4d  ; ja 0xfffbbc4d

loc_fffbbc26:
movzx eax, byte [ebx + 0xb]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, byte [ebx + 0xa]
push eax
movzx ecx, byte [ebp - 0x31]
push 6
movzx eax, word [ebx + 8]
push eax
mov eax, esi
call fcn_fffbb42e  ; call 0xfffbb42e
add esp, 0x10
test eax, eax
cmovne edi, eax

loc_fffbbc4d:
push ecx
push ecx
push dword [ebx + 4]
movzx ecx, byte [ebp - 0x31]
push 0x99999999
jmp near loc_fffbbdb0  ; jmp 0xfffbbdb0

loc_fffbbc60:
cmp byte [ebp - 0x33], 0
je loc_fffbbef4  ; je 0xfffbbef4
push edx
movzx eax, byte [ebp - 0x31]
push edx
mov dword [ebp - 0x2c], eax
mov ecx, eax
push 0
mov edx, dword [ebp - 0x30]
mov eax, esi
push 0x1f
push 2
push 0
push 0
push 1
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 1
cmovne edi, eax
push 0

loc_fffbbc97:
movzx eax, byte [ebx + 0x14]
mov ecx, dword [ebp - 0x2c]
push eax
movzx eax, word [ebx + 0x12]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, word [ebx + 0x10]
push eax
mov eax, esi
call fcn_fffbb3a9  ; call 0xfffbb3a9
add esp, 0x20
test eax, eax
cmovne edi, eax
jmp short loc_fffbbcc6  ; jmp 0xfffbbcc6

loc_fffbbcbd:
cmp dword [esi + 0x2254], 1
ja short loc_fffbbced  ; ja 0xfffbbced

loc_fffbbcc6:
movzx eax, byte [ebx + 0xb]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, byte [ebx + 0xa]
push eax
movzx ecx, byte [ebp - 0x31]
push 0
movzx eax, word [ebx + 8]
push eax
mov eax, esi
call fcn_fffbb42e  ; call 0xfffbb42e
add esp, 0x10
test eax, eax
cmovne edi, eax

loc_fffbbced:
push eax
movzx ecx, byte [ebp - 0x31]
push eax
push dword [ebx + 4]
push 0x389abcd
jmp near loc_fffbbdb0  ; jmp 0xfffbbdb0

loc_fffbbd00:
push ecx
movzx eax, byte [ebp - 0x31]
mov edx, dword [ebp - 0x30]
push ecx
mov dword [ebp - 0x2c], eax
mov ecx, eax
push 1
mov eax, esi
push 0x1f
push 1
push 1
push 0
push 1
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 0
cmovne edi, eax
push 1
jmp short loc_fffbbd5c  ; jmp 0xfffbbd5c

loc_fffbbd2f:
push edx
movzx eax, byte [ebp - 0x31]
push edx
mov dword [ebp - 0x2c], eax
mov ecx, eax
push 0
mov edx, dword [ebp - 0x30]
mov eax, esi
push 0x1f
push 1
push 1
push 0
push 1
call fcn_fffc76de  ; call 0xfffc76de
add esp, 0x14
test eax, eax
push 0
cmovne edi, eax
push 0

loc_fffbbd5c:
movzx eax, byte [ebx + 0x14]
mov ecx, dword [ebp - 0x2c]
push eax
movzx eax, word [ebx + 0x12]
mov edx, dword [ebp - 0x30]
push eax
movzx eax, word [ebx + 0x10]
push eax
mov eax, esi
call fcn_fffbb3a9  ; call 0xfffbb3a9
add esp, 0x20
test eax, eax
cmovne edi, eax
movzx eax, byte [ebx + 0xb]
push eax
movzx eax, byte [ebx + 0xa]
push eax
push 6

loc_fffbbd8c:
movzx eax, word [ebx + 8]
mov ecx, dword [ebp - 0x2c]
push eax
mov edx, dword [ebp - 0x30]
mov eax, esi
call fcn_fffbb42e  ; call 0xfffbb42e
pop edx
pop ecx
push dword [ebx + 4]
test eax, eax
push 0x389abcd
cmovne edi, eax

loc_fffbbdad:
mov ecx, dword [ebp - 0x2c]

loc_fffbbdb0:
mov edx, dword [ebp - 0x30]
mov eax, esi
call fcn_fffbb36a  ; call 0xfffbb36a
add esp, 0x10
cmp byte [ebp - 0x33], 0
je short loc_fffbbe2e  ; je 0xfffbbe2e
movzx edx, byte [ebx + 0xd]
mov ecx, dword [ebx + 4]
movzx eax, byte [ebx + 0xc]
shl edx, 5
and eax, 0xfffffc1f
or edx, eax
mov eax, edx
and dh, 0xf3
or ah, 0xc
test ecx, ecx
cmove eax, edx
movzx edx, byte [ebx + 0xe]
and ah, 0xf
shl edx, 0xc
shl ecx, 0x10
or eax, edx
and eax, 0xfffcffff
mov edx, dword [esi + 0x2223]
or eax, ecx
cmp byte [ebp - 0x32], 0x64
movzx ecx, byte [ebp - 0x31]
jne short loc_fffbbe14  ; jne 0xfffbbe14
lea edx, [edx + ecx*4 + 0x4e10]
jmp short loc_fffbbe2c  ; jmp 0xfffbbe2c

loc_fffbbe14:
cmp byte [ebp - 0x32], 0
jne short loc_fffbbe23  ; jne 0xfffbbe23
lea ecx, [ecx*4 + 0x4210]
jmp short loc_fffbbe2a  ; jmp 0xfffbbe2a

loc_fffbbe23:
lea ecx, [ecx*4 + 0x4610]

loc_fffbbe2a:
add edx, ecx

loc_fffbbe2c:
mov dword [edx], eax

loc_fffbbe2e:
inc byte [ebp - 0x31]

loc_fffbbe31:
movzx ebx, byte [ebp - 0x31]
cmp ebx, dword [ebp - 0x3c]
jbe loc_fffbb731  ; jbe 0xfffbb731
cmp word [ebp - 0x36], 0x1ff
mov ecx, 1
movzx edx, byte [ebp - 0x37]
ja short loc_fffbbe68  ; ja 0xfffbbe68
mov ax, word [ebp - 0x36]
xor cl, cl
dec eax
cmp ax, 2
mov eax, 0
cmovae ax, word [ebp - 0x36]
mov word [ebp - 0x36], ax

loc_fffbbe68:
movzx eax, word [ebp - 0x36]
shl eax, 8
or eax, edx
mov edx, dword [ebp - 0x3c]
shl edx, 0x12
and eax, 0xfff1ffff
or eax, edx
mov edx, eax
and eax, 0xffefffff
or edx, 0x100000
cmp dword [ebp + 0x14], 0
cmove edx, eax
mov eax, edx
and edx, 0xffbfffff
or eax, 0x400000
cmp dword [ebp + 0x10], 0
cmove eax, edx
cmp byte [ebp - 0x32], 0x64
mov edx, dword [esi + 0x2223]
jne short loc_fffbbeba  ; jne 0xfffbbeba
cmp byte [esi + 0x3a], 0
jne short loc_fffbbf06  ; jne 0xfffbbf06
jmp short loc_fffbbf17  ; jmp 0xfffbbf17

loc_fffbbeba:
cmp byte [ebp - 0x32], 1
sbb ebx, ebx
and ebx, 0xfffffc00
lea edx, [ebx + edx + 0x4684]
mov dword [edx], eax

loc_fffbbecf:
test ecx, ecx
mov eax, 1
cmovne edi, eax
jmp short loc_fffbbf27  ; jmp 0xfffbbf27

loc_fffbbedb:
mov edi, 1
jmp short loc_fffbbf27  ; jmp 0xfffbbf27

loc_fffbbee2:
cmp dword [esi + 0x2258], 1
jne loc_fffbbc26  ; jne 0xfffbbc26
jmp near loc_fffbbc1d  ; jmp 0xfffbbc1d

loc_fffbbef4:
cmp dword [esi + 0x2258], 1
jne loc_fffbbcc6  ; jne 0xfffbbcc6
jmp near loc_fffbbcbd  ; jmp 0xfffbbcbd

loc_fffbbf06:
cmp byte [esi + 0x108f], 0
je short loc_fffbbf1f  ; je 0xfffbbf1f
mov dword [edx + 0x4e84], eax
jmp short loc_fffbbecf  ; jmp 0xfffbbecf

loc_fffbbf17:
mov dword [edx + 0x4684], eax
jmp short loc_fffbbecf  ; jmp 0xfffbbecf

loc_fffbbf1f:
mov dword [edx + 0x4284], eax
jmp short loc_fffbbecf  ; jmp 0xfffbbecf

loc_fffbbf27:
lea esp, [ebp - 0xc]
mov eax, edi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbbf31:
push ebp
xor edx, edx
cmp dword [eax + 0xa], 1
mov ebp, esp
jne short loc_fffbbf4d  ; jne 0xfffbbf4d
mov cl, byte [eax + 0x12]
test cl, cl
je short loc_fffbbf4d  ; je 0xfffbbf4d
cmp cl, 2
sete dl
lea edx, [edx + edx + 1]

loc_fffbbf4d:
cmp dword [eax + 0x27], 1
jne short loc_fffbbf67  ; jne 0xfffbbf67
mov al, byte [eax + 0x2f]
test al, al
je short loc_fffbbf67  ; je 0xfffbbf67
mov cl, dl
or edx, 4
or ecx, 0xc
cmp al, 2
cmove edx, ecx

loc_fffbbf67:
mov al, dl
pop ebp
ret

loc_fffbbf6b:
db 0x00

fcn_fffbbf6c:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x5c]
mov dword [ebp - 0x40], 0
mov esi, dword [ebp + 8]
jmp near loc_fffbc4cf  ; jmp 0xfffbc4cf

loc_fffbbf85:  ; not directly referenced
mov ecx, dword [ebp - 0x40]
mov edx, dword [ebp - 0x3c]
mov eax, esi
call fcn_fffbb638  ; call 0xfffbb638
dec eax
jne loc_fffbc4b5  ; jne 0xfffbc4b5
mov al, byte [ebp - 0x3c]
mov edx, dword [ebp - 0x54]
mov byte [ebp - 0x22], al
lea ecx, [ebp - 0x2d]
movzx eax, byte [esi + edx + 0x3f]
mov word [ebp - 0x1b], ax
mov edx, dword [ebp - 0x40]
push eax
mov eax, esi
mov dword [ebp - 0x2d], 3
push 1
mov word [ebp - 0x25], 0x400
mov byte [ebp - 0x23], 0
push ecx
xor ecx, ecx
mov byte [ebp - 0x21], 0
push 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
push 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
push 0
mov byte [ebp - 0x19], 3
mov dword [ebp - 0x29], 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
jne loc_fffbc4f1  ; jne 0xfffbc4f1
mov edx, 0xdd30
mov eax, esi
call fcn_fffad891  ; call 0xfffad891
sub esp, 0xc
mov ecx, dword [ebp - 0x40]
push 0x37
mov edx, dword [ebp - 0x3c]
mov eax, esi
call fcn_fffbb521  ; call 0xfffbb521
mov ecx, dword [ebp - 0x40]
mov edx, dword [ebp - 0x3c]
mov eax, esi
mov dword [esp], 4
call fcn_fffbb5d0  ; call 0xfffbb5d0
mov eax, dword [ebp - 0x50]
mov edx, dword [ebp - 0x3c]
mov byte [eax], 4
mov byte [eax - 1], 0x37
lea eax, [edx*4 + 1]
lea edx, [ebp - 0x34]
mov dword [ebp - 0x34], eax
mov eax, esi
call fcn_fffad729  ; call 0xfffad729
mov edx, dword [esi + 0x2223]
mov eax, dword [ebp - 0x34]
or ah, 0x80
mov ecx, dword [ebp - 0x3c]
mov dword [ebp - 0x34], eax
mov dword [edx + 0x3400], eax
mov edx, dword [ebp - 0x40]
mov eax, esi
mov dword [esp], 0
call fcn_fffb9b78  ; call 0xfffb9b78
imul eax, dword [ebp - 0x3c], 0x2f
mov ecx, dword [ebp - 0x58]
add esp, 0x10
mov byte [ebp - 0x4c], 0
mov dword [ebp - 0x48], 0
lea eax, [eax + ecx + 0x40]
lea edi, [esi + eax + 0xd]
mov dword [ebp - 0x44], edi
mov ebx, edi
jmp short loc_fffbc124  ; jmp 0xfffbc124

loc_fffbc0a7:  ; not directly referenced
cmp byte [ebx + 1], 0x3f
jbe short loc_fffbc0e8  ; jbe 0xfffbc0e8
mov byte [ebx + 4], 1
mov ecx, dword [ebp - 0x3c]
push dword [ebp - 0x48]
mov edx, dword [ebp - 0x40]
mov eax, esi
push 3
push 0x10
push 1
call fcn_fffbfd3a  ; call 0xfffbfd3a
push dword [ebp - 0x48]
mov ecx, dword [ebp - 0x3c]
mov edx, dword [ebp - 0x40]
push 6
push 0
movzx eax, byte [ebx + 1]
sub eax, 0x40
push eax
mov eax, esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
inc byte [ebp - 0x4c]
jmp short loc_fffbc11b  ; jmp 0xfffbc11b

loc_fffbc0e8:  ; not directly referenced
mov byte [ebx + 4], 0
mov ecx, dword [ebp - 0x3c]
push dword [ebp - 0x48]
mov edx, dword [ebp - 0x40]
mov eax, esi
push 3
push 0x10
push 0
call fcn_fffbfd3a  ; call 0xfffbfd3a
push dword [ebp - 0x48]
mov ecx, dword [ebp - 0x3c]
mov edx, dword [ebp - 0x40]
push 6
push 0
movzx eax, byte [ebx + 1]
push eax
mov eax, esi
call fcn_fffbfd3a  ; call 0xfffbfd3a

loc_fffbc11b:  ; not directly referenced
add esp, 0x20
inc dword [ebp - 0x48]
add ebx, 5

loc_fffbc124:  ; not directly referenced
mov al, byte [esi + 0x20b5]
movzx edx, al
cmp dword [ebp - 0x48], edx
jb loc_fffbc0a7  ; jb 0xfffbc0a7
cmp byte [ebp - 0x4c], al
jne short loc_fffbc16f  ; jne 0xfffbc16f
dec byte [edi + 0x2e]
xor ebx, ebx
jmp short loc_fffbc162  ; jmp 0xfffbc162

loc_fffbc142:  ; not directly referenced
lea eax, [ebx + ebx*4]
mov ecx, dword [ebp - 0x3c]
mov byte [edi + eax + 4], 0
mov edx, dword [ebp - 0x40]
push ebx
mov eax, esi
inc ebx
push 3
push 0x10
push 0
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10

loc_fffbc162:  ; not directly referenced
movzx eax, byte [esi + 0x20b5]
cmp ebx, eax
jb short loc_fffbc142  ; jb 0xfffbc142
jmp short loc_fffbc17b  ; jmp 0xfffbc17b

loc_fffbc16f:  ; not directly referenced
cmp byte [ebp - 0x4c], 0
je short loc_fffbc17b  ; je 0xfffbc17b
inc byte [edi + 0x2e]
inc byte [edi + 0x2d]

loc_fffbc17b:  ; not directly referenced
sub esp, 0xc
mov ecx, dword [ebp - 0x40]
movzx eax, byte [edi + 0x2d]
mov edx, dword [ebp - 0x3c]
push eax
mov eax, esi
call fcn_fffbb521  ; call 0xfffbb521
movzx eax, byte [edi + 0x2e]
mov ecx, dword [ebp - 0x40]
mov dword [esp], eax
mov edx, dword [ebp - 0x3c]
mov eax, esi
call fcn_fffbb5d0  ; call 0xfffbb5d0
mov ecx, dword [ebp - 0x3c]
mov edx, dword [ebp - 0x40]
mov eax, esi
mov dword [esp], 0
call fcn_fffb9754  ; call 0xfffb9754
movzx edx, byte [esi + 0x20b5]
lea eax, [ebp - 0x35]
lea ecx, [ebp - 0x36]
mov dword [esp], eax
mov eax, edi
call fcn_fffb9a02  ; call 0xfffb9a02
mov al, byte [ebp - 0x36]
mov bl, byte [ebp - 0x35]
mov byte [ebp - 0x48], al
add esp, 0x10
xor eax, eax
jmp short loc_fffbc221  ; jmp 0xfffbc221

loc_fffbc1df:  ; not directly referenced
mov ecx, dword [ebp - 0x44]
mov dl, byte [ecx + 2]
cmp dl, 0x3f
jbe short loc_fffbc1f0  ; jbe 0xfffbc1f0
cmp byte [ecx + 1], 0x3f
jbe short loc_fffbc208  ; jbe 0xfffbc208

loc_fffbc1f0:  ; not directly referenced
mov ecx, dword [ebp - 0x44]
cmp dl, byte [ecx + 1]
jb short loc_fffbc208  ; jb 0xfffbc208

loc_fffbc1f8:  ; not directly referenced
mov edx, dword [ebp - 0x44]
inc eax
and byte [edx + 2], 0x3f
add edx, 5
mov dword [ebp - 0x44], edx
jmp short loc_fffbc221  ; jmp 0xfffbc221

loc_fffbc208:  ; not directly referenced
mov ecx, dword [ebp - 0x44]
mov cl, byte [ecx + 4]
mov dl, cl
mov ecx, dword [ebp - 0x44]
inc edx
cmp dl, 7
mov byte [ecx + 4], dl
jbe short loc_fffbc1f8  ; jbe 0xfffbc1f8
jmp near loc_fffbc35f  ; jmp 0xfffbc35f

loc_fffbc221:  ; not directly referenced
movzx edx, byte [esi + 0x20b5]
cmp eax, edx
jb short loc_fffbc1df  ; jb 0xfffbc1df
sub esp, 0xc
lea eax, [ebp - 0x35]
push eax
lea ecx, [ebp - 0x36]
mov eax, edi
call fcn_fffb9a02  ; call 0xfffb9a02
mov al, byte [ebp - 0x36]
sub al, byte [ebp - 0x35]
add esp, 0xc
mov ecx, dword [ebp - 0x40]
movzx eax, al
mov edx, edi
push eax
mov dword [ebp - 0x44], eax
mov al, byte [ebp - 0x48]
sub eax, ebx
movzx eax, al
push eax
push dword [ebp - 0x3c]
mov eax, esi
call fcn_fffbddb1  ; call 0xfffbddb1
mov ecx, dword [ebp - 0x40]
mov edx, dword [ebp - 0x3c]
mov eax, esi
mov dword [esp], 0
call fcn_fffb93db  ; call 0xfffb93db
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffbc364  ; jne 0xfffbc364
sub esp, 0xc
mov ecx, dword [ebp - 0x40]
push dword [ebp - 0x3c]
mov edx, edi
mov eax, esi
call fcn_fffbdcf9  ; call 0xfffbdcf9
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffbc364  ; jne 0xfffbc364
sub esp, 0xc
lea ecx, [ebp - 0x35]
movzx edx, byte [esi + 0x20b5]
mov eax, edi
push ecx
lea ecx, [ebp - 0x36]
call fcn_fffb9a02  ; call 0xfffb9a02
mov al, byte [ebp - 0x36]
sub al, byte [ebp - 0x35]
add esp, 0xc
mov ecx, dword [ebp - 0x40]
movzx eax, al
mov edx, edi
push eax
push dword [ebp - 0x44]
push dword [ebp - 0x3c]
mov eax, esi
call fcn_fffbddb1  ; call 0xfffbddb1
jmp short loc_fffbc2fa  ; jmp 0xfffbc2fa

loc_fffbc2de:  ; not directly referenced
push ebx
lea eax, [ebx + ebx*4]
mov ecx, dword [ebp - 0x3c]
push 6
mov edx, dword [ebp - 0x40]
inc ebx
push 0
movzx eax, byte [edi + eax + 2]
push eax
mov eax, esi
call fcn_fffbfd3a  ; call 0xfffbfd3a

loc_fffbc2fa:  ; not directly referenced
movzx eax, byte [esi + 0x20b5]
add esp, 0x10
cmp ebx, eax
jb short loc_fffbc2de  ; jb 0xfffbc2de
lea edx, [ebp - 0x34]
mov eax, esi
mov dword [ebp - 0x34], 0
call fcn_fffad729  ; call 0xfffad729
mov eax, dword [esi + 0x2223]
mov edx, dword [ebp - 0x34]
mov dword [eax + 0x3400], edx
mov eax, esi
call fcn_fffbfce0  ; call 0xfffbfce0
mov edx, 0xdd31
mov eax, esi
call fcn_fffad891  ; call 0xfffad891
mov edx, 0xdd33
mov eax, esi
call fcn_fffad891  ; call 0xfffad891
mov ecx, dword [ebp - 0x3c]
mov edx, dword [ebp - 0x40]
mov eax, esi
call fcn_fffc5077  ; call 0xfffc5077
test eax, eax
mov ebx, eax
je short loc_fffbc36e  ; je 0xfffbc36e
jmp near loc_fffbc49b  ; jmp 0xfffbc49b

loc_fffbc35f:  ; not directly referenced
mov ebx, 1

loc_fffbc364:  ; not directly referenced
mov edx, 0xdd32
jmp near loc_fffbc4a0  ; jmp 0xfffbc4a0

loc_fffbc36e:  ; not directly referenced
cmp dword [esi + 0x223c], 0
mov eax, dword [esi + 0x2223]
je short loc_fffbc3ce  ; je 0xfffbc3ce
mov dword [eax + 0x4eb0], 0x300
xor edx, edx
push ecx
mov eax, esi
push ecx
mov ecx, dword [ebp - 0x40]
push 0
push dword [ebp - 0x3c]
call fcn_fffc4cf3  ; call 0xfffc4cf3
mov edi, eax
mov eax, dword [esi + 0x2223]
mov ecx, dword [ebp - 0x40]
mov edx, 1
mov dword [eax + 0x4eb0], 0x200
pop ebx
pop eax
mov eax, esi
push 0
push dword [ebp - 0x3c]
call fcn_fffc4cf3  ; call 0xfffc4cf3
add esp, 0x10
test eax, eax
mov ebx, eax
cmove ebx, edi
jmp short loc_fffbc3f3  ; jmp 0xfffbc3f3

loc_fffbc3ce:  ; not directly referenced
mov dword [eax + 0x4eb0], 0
mov ecx, dword [ebp - 0x40]
push edx
mov eax, esi
push edx
mov edx, 2
push 0
push dword [ebp - 0x3c]
call fcn_fffc4cf3  ; call 0xfffc4cf3
mov ebx, eax
add esp, 0x10

loc_fffbc3f3:  ; not directly referenced
imul eax, dword [ebp - 0x3c], 0x36
mov byte [ebp - 0x44], 0
mov dword [ebp - 0x4c], eax
jmp short loc_fffbc44c  ; jmp 0xfffbc44c

loc_fffbc400:  ; not directly referenced
movzx edx, byte [ebp - 0x44]
mov ecx, dword [ebp - 0x3c]
push eax
mov dword [ebp - 0x48], edx
lea edi, [edx + edx*2]
add edi, dword [ebp - 0x4c]
add edi, dword [ebp - 0x58]
lea eax, [esi + edi + 0x1bd]
push eax
mov eax, esi
push 0
push edx
mov edx, dword [ebp - 0x40]
call fcn_fffc53c6  ; call 0xfffc53c6
add esp, 0xc
lea eax, [esi + edi + 0x1d8]
push eax
mov ecx, dword [ebp - 0x3c]
mov edx, dword [ebp - 0x40]
push 1
push dword [ebp - 0x48]
mov eax, esi
call fcn_fffc53c6  ; call 0xfffc53c6
inc byte [ebp - 0x44]
add esp, 0x10

loc_fffbc44c:  ; not directly referenced
mov cl, byte [ebp - 0x44]
cmp cl, byte [esi + 0x20b5]
jb short loc_fffbc400  ; jb 0xfffbc400
mov cl, byte [ebp - 0x40]
mov eax, 0x4080
xor edx, edx
mov byte [ebp - 0x44], cl
jmp short loc_fffbc47f  ; jmp 0xfffbc47f

loc_fffbc466:  ; not directly referenced
cmp byte [ebp - 0x44], 0
lea edi, [eax + 0x400]
cmove edi, eax
inc edx
add ecx, edi
add eax, 4
mov dword [ecx], 0

loc_fffbc47f:  ; not directly referenced
cmp dl, byte [esi + 0x20b5]
mov ecx, dword [esi + 0x2223]
jb short loc_fffbc466  ; jb 0xfffbc466
test ebx, ebx
mov dword [ecx + 0x4eb0], 0
je short loc_fffbc4a9  ; je 0xfffbc4a9

loc_fffbc49b:  ; not directly referenced
mov edx, 0xdd35

loc_fffbc4a0:  ; not directly referenced
mov eax, esi
call fcn_fffad891  ; call 0xfffad891
jmp short loc_fffbc4f1  ; jmp 0xfffbc4f1

loc_fffbc4a9:  ; not directly referenced
mov edx, 0xdd34
mov eax, esi
call fcn_fffad891  ; call 0xfffad891

loc_fffbc4b5:  ; not directly referenced
inc dword [ebp - 0x3c]
add dword [ebp - 0x50], 0x2f
cmp dword [ebp - 0x3c], 4
jne loc_fffbbf85  ; jne 0xfffbbf85
inc dword [ebp - 0x40]
cmp dword [ebp - 0x40], 2
je short loc_fffbc4ef  ; je 0xfffbc4ef

loc_fffbc4cf:  ; not directly referenced
imul eax, dword [ebp - 0x40], 0x1055
mov dword [ebp - 0x3c], 0
mov dword [ebp - 0x54], eax
mov dword [ebp - 0x58], eax
lea edx, [esi + eax + 0x7b]
mov dword [ebp - 0x50], edx
jmp near loc_fffbbf85  ; jmp 0xfffbbf85

loc_fffbc4ef:  ; not directly referenced
xor ebx, ebx

loc_fffbc4f1:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbc4fb:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x1c]
mov eax, dword [ebp + 8]
lea edx, [eax + 0x20c2]
mov dword [eax + 0x20ea], 0
mov dword [ebp - 0x28], edx
lea ecx, [eax + 0x20aa]
mov edx, eax

loc_fffbc523:
cmp byte [edx + 0x3a], 0
jne loc_fffbc6b7  ; jne 0xfffbc6b7
jmp short loc_fffbc546  ; jmp 0xfffbc546

loc_fffbc52f:
mov ebx, dword [edx]
add dword [eax + 0x20ea], ebx

loc_fffbc537:
cmp dword [edx + 0x27], 1
jne short loc_fffbc546  ; jne 0xfffbc546
mov ebx, dword [edx + 0x1d]
add dword [eax + 0x20ea], ebx

loc_fffbc546:
add edx, 0x1055
cmp edx, ecx
jne short loc_fffbc523  ; jne 0xfffbc523
mov ecx, dword [eax + 0x2288]
mov edx, dword [eax + 0x20ea]
mov esi, dword [eax + 0x2294]
sub edx, ecx
mov dword [ebp - 0x24], ecx
mov ecx, 0x1000
sub ecx, dword [eax + 0x2290]
mov dword [eax + 0x20c2], edx
cmp ecx, edx
lea ebx, [esi - 1]
cmova ecx, edx
mov dword [ebp - 0x1c], ecx
mov dword [eax + 0x20c6], ecx
xor ecx, ecx
cmp ebx, 0x10
ja short loc_fffbc598  ; ja 0xfffbc598
movzx ecx, word [ebx + ebx + ref_fffcf248]  ; movzx ecx, word [ebx + ebx - 0x30db8]

loc_fffbc598:
mov ebx, dword [ebp - 0x1c]
sub ebx, ecx
mov ecx, dword [eax + 0x2298]
mov dword [ebp - 0x20], ebx
mov dword [eax + 0x20ca], ebx
xor ebx, ebx
lea edi, [ecx - 1]
cmp edi, 1
ja short loc_fffbc5bd  ; ja 0xfffbc5bd
movzx ebx, byte [ecx + ref_fffcf269]  ; movzx ebx, byte [ecx - 0x30d97]

loc_fffbc5bd:
mov edi, dword [ebp - 0x20]
mov dword [eax + 0x20d2], 0
sub edi, ebx
cmp dword [eax + 0x229c], 1
mov ebx, edi
mov dword [eax + 0x20ce], edi
jne short loc_fffbc5e7  ; jne 0xfffbc5e7
mov dword [eax + 0x20d2], 0x4000

loc_fffbc5e7:
mov edi, ecx
mov ecx, dword [eax + 0x20d2]
shl edi, 8
and ecx, 0xfffffc07
or ecx, edi
lea edi, [esi*8]
or ecx, edi
test esi, esi
mov dword [eax + 0x20d2], ecx
je short loc_fffbc616  ; je 0xfffbc616
cmp dword [eax + 0x22a0], 0
jne short loc_fffbc61b  ; jne 0xfffbc61b

loc_fffbc616:
or ecx, 2
jmp short loc_fffbc61e  ; jmp 0xfffbc61e

loc_fffbc61b:
and ecx, 0xfffffffd

loc_fffbc61e:
mov dword [eax + 0x20d2], ecx
mov esi, ebx
mov ecx, dword [eax + 0x22a4]
sub esi, ecx
neg ecx
and ecx, esi
sub esi, ecx
mov dword [eax + 0x20d6], ecx
je short loc_fffbc65a  ; je 0xfffbc65a
mov ecx, dword [ebp - 0x20]
sub ebx, esi
sub ecx, esi
mov dword [eax + 0x20ce], ebx
mov dword [eax + 0x20ca], ecx
mov ecx, dword [ebp - 0x1c]
sub ecx, esi
mov dword [eax + 0x20c6], ecx

loc_fffbc65a:
cmp dword [eax + 0x22cb], 1
jne short loc_fffbc6a5  ; jne 0xfffbc6a5
mov ecx, dword [eax + 0x20c6]
cmp edx, ecx
jbe short loc_fffbc6a5  ; jbe 0xfffbc6a5
cmp edx, 0x1000
mov esi, 0x1000
mov ebx, esi
mov dword [eax + 0x20da], 1
cmovae ebx, edx
cmovbe esi, edx
add esi, ebx
mov dword [eax + 0x20de], ebx
sub esi, ecx
mov dword [eax + 0x20e6], esi
lea ecx, [esi - 1]
mov dword [eax + 0x20e2], ecx
jmp short loc_fffbc6c6  ; jmp 0xfffbc6c6

loc_fffbc6a5:
mov dword [eax + 0x20da], 0
mov dword [eax + 0x20e6], edx
jmp short loc_fffbc6c6  ; jmp 0xfffbc6c6

loc_fffbc6b7:
cmp dword [edx + 0xa], 1
jne loc_fffbc537  ; jne 0xfffbc537
jmp near loc_fffbc52f  ; jmp 0xfffbc52f

loc_fffbc6c6:
mov dword [eax + 0x20ee], edx
mov edx, dword [ebp - 0x24]
mov dword [eax + 0x20f2], edx
mov eax, dword [eax + 0x221f]
mov edx, dword [ebp - 0x28]
call fcn_fffbeabd  ; call 0xfffbeabd
lea esp, [esp + 0x1c]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbc6ee:
push ebp
mov edx, dword [eax + 0x2223]
mov ebp, esp
add edx, 0x5084

loc_fffbc6fd:
mov eax, dword [edx]
test eax, 0x10000
je short loc_fffbc6fd  ; je 0xfffbc6fd
pop ebp
ret

fcn_fffbc708:
push ebp
mov edx, dword [eax + 0x2223]
mov ebp, esp
mov eax, dword [edx + 0x5030]
and eax, 0xfffffffd
mov dword [edx + 0x5030], eax
pop ebp
ret

fcn_fffbc722:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x8c]
mov edi, ebx
call fcn_fffbc6ee  ; call 0xfffbc6ee
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x5030], 0x112
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4ea0], 0
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x5030], 0x112
mov eax, ebx
call fcn_fffbc708  ; call 0xfffbc708
mov edx, 0x30d40
mov eax, ebx
call fcn_fffc7adb  ; call 0xfffc7adb
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x5030]
or eax, 2
mov dword [edx + 0x5030], eax
mov edx, 0x7a120
mov eax, ebx
call fcn_fffc7adb  ; call 0xfffc7adb
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x5030]
or eax, 4
mov dword [edx + 0x5030], eax
mov edx, 0x14
mov eax, ebx
call fcn_fffc7adb  ; call 0xfffc7adb
mov dword [ebp - 0x80], ebx
mov dword [ebp - 0x6c], 0

loc_fffbc7c7:
cmp byte [edi + 0x3a], 0
jne loc_fffbcde4  ; jne 0xfffbcde4

loc_fffbc7d1:
inc dword [ebp - 0x6c]
add edi, 0x1055
cmp dword [ebp - 0x6c], 2
jne short loc_fffbc7c7  ; jne 0xfffbc7c7
mov dword [ebp - 0x70], 0
mov dword [ebp - 0x6c], 0

loc_fffbc7ee:
mov ecx, dword [ebp - 0x70]
mov al, byte [ebp - 0x70]
mov byte [ebp - 0x72], al
mov byte [ebp - 0x71], 0
shr al, 1
movzx edx, al
mov byte [ebp - 0x7c], al
lea ecx, [ecx + ecx + 0x390]
mov dword [ebp - 0x78], edx
xor eax, eax
mov dword [ebp - 0x88], ecx
jmp near loc_fffbca1a  ; jmp 0xfffbca1a

loc_fffbc81a:
movzx edi, byte [ebp - 0x71]
mov edx, dword [ebp - 0x70]
mov ecx, edi
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffbca15  ; je 0xfffbca15
imul ecx, dword [ebp - 0x78], 0x46
imul edx, edi, 0x8c
imul eax, edi, 0x1055
add edx, ecx
movzx eax, byte [ebx + eax + 0x3c]
mov dl, byte [ebx + edx + 0x212a]
test dl, 4
lea eax, [eax*8 - 0x28]
mov esi, eax
je short loc_fffbc863  ; je 0xfffbc863
or esi, 0x40
jmp short loc_fffbc86f  ; jmp 0xfffbc86f

loc_fffbc863:
or si, 0x80
and dl, 1
jne short loc_fffbc86f  ; jne 0xfffbc86f
mov esi, eax

loc_fffbc86f:
mov ecx, dword [ebp - 0x70]
mov edx, edi
mov eax, ebx
call fcn_fffc0201  ; call 0xfffc0201
test eax, eax
je loc_fffbca30  ; je 0xfffbca30
mov al, byte [eax]
cmp al, 0x3c
jne short loc_fffbc895  ; jne 0xfffbc895
and si, 0xf9ff
or si, 0x200
jmp short loc_fffbc8af  ; jmp 0xfffbc8af

loc_fffbc895:
cmp al, 0x78
jne short loc_fffbc8a5  ; jne 0xfffbc8a5
and si, 0xf9ff
or si, 0x400
jmp short loc_fffbc8af  ; jmp 0xfffbc8af

loc_fffbc8a5:
mov edx, esi
and dh, 0xf9
test al, al
cmove esi, edx

loc_fffbc8af:
mov al, byte [ebp - 0x72]
mov ecx, 0x15
mov byte [ebp - 0x37], al
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x57]
mov word [ebp - 0x3a], si
mov dword [ebp - 0x42], 0
mov byte [ebp - 0x38], 2
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov word [ebp - 0x30], 4
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
call fcn_fffa2408  ; call 0xfffa2408
mov ecx, 0x15
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x2d]
mov dword [ebp - 0x57], 0xc
mov word [ebp - 0x45], 4
mov byte [ebp - 0x43], 4
movzx esi, si
mov word [ebp - 0x47], 1
call fcn_fffa2408  ; call 0xfffa2408
movzx eax, byte [ebx + 0x20aa]
mov word [ebp - 0x1b], ax
mov dx, word [ebp - 0x3a]
imul eax, edi, 0x1055
add eax, dword [ebp - 0x88]
cmp byte [ebp - 0x71], 1
mov dword [ebp - 0x84], esi
mov dword [ebp - 0x2d], 0xc
mov byte [ebp - 0x19], 4
mov word [ebp - 0x1d], 1
mov word [ebx + eax + 0x15], dx
sbb eax, eax
imul esi, dword [ebp - 0x78], 0x46
imul edx, edi, 0x8c
and eax, 0xfffffc00
mov ecx, dword [ebx + 0x2223]
add edx, esi
lea eax, [ecx + eax + 0x469c]
mov dl, byte [ebx + edx + 0x212a]
mov eax, dword [eax]
and edx, 5
and eax, 0xc0c0
cmp byte [ebp - 0x7c], 0
mov esi, eax
jne short loc_fffbc99e  ; jne 0xfffbc99e
or esi, 0x40
jmp short loc_fffbc9a4  ; jmp 0xfffbc9a4

loc_fffbc99e:
or esi, 0x80

loc_fffbc9a4:
dec dl
cmove eax, esi
mov esi, dword [ebp - 0x84]
and esi, 0xffffff3f
or esi, eax
imul edx, dword [ebp - 0x78], 0x1d
imul eax, edi, 0x1055
add eax, edx
cmp dword [ebx + eax + 0x15], 1
jne short loc_fffbc9dd  ; jne 0xfffbc9dd
mov eax, esi
mov edx, esi
or ah, 0x40
or dh, 0x80
mov esi, eax
cmp byte [ebp - 0x7c], 0
cmovne esi, edx

loc_fffbc9dd:
cmp byte [ebp - 0x71], 1
lea edx, [ebp - 0x57]
sbb eax, eax
and eax, 0xfffffc00
lea eax, [ecx + eax + 0x469c]
mov ecx, 2
mov dword [eax], esi
push eax
mov eax, ebx
push 1
push edx
mov edx, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
jmp short loc_fffbca17  ; jmp 0xfffbca17

loc_fffbca15:
xor eax, eax

loc_fffbca17:
inc byte [ebp - 0x71]

loc_fffbca1a:
test eax, eax
sete cl
cmp byte [ebp - 0x71], 1
setbe dl
test cl, dl
jne loc_fffbc81a  ; jne 0xfffbc81a
jmp short loc_fffbca37  ; jmp 0xfffbca37

loc_fffbca30:
mov eax, 1
jmp short loc_fffbca3b  ; jmp 0xfffbca3b

loc_fffbca37:
test eax, eax
je short loc_fffbca3e  ; je 0xfffbca3e

loc_fffbca3b:
mov dword [ebp - 0x6c], eax

loc_fffbca3e:
mov edx, ebx
mov eax, dword [ebp - 0x70]
call fcn_fffc79cf  ; call 0xfffc79cf
test eax, eax
cmove eax, dword [ebp - 0x6c]
sub esp, 0xc
xor ecx, ecx
push 0
mov dword [ebp - 0x6c], eax
mov edx, ebx
mov eax, dword [ebp - 0x70]
lea edi, [ebp - 0x63]
call fcn_fffc784f  ; call 0xfffc784f
mov esi, ref_fffcf23c  ; mov esi, 0xfffcf23c
mov ecx, 3
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov ecx, dword [ebp - 0x70]
add esp, 0x10
test eax, eax
cmove eax, dword [ebp - 0x6c]
mov dword [ebp - 0x6c], eax
mov byte [ebp - 0x71], 0
xor eax, eax
mov edi, 0x100
lea ecx, [ecx + ecx + 0x380]
mov dword [ebp - 0x88], ecx
jmp near loc_fffbcc57  ; jmp 0xfffbcc57

loc_fffbca9d:
movzx edx, byte [ebp - 0x71]
mov eax, ebx
mov dword [ebp - 0x78], edx
mov ecx, edx
mov edx, dword [ebp - 0x70]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffbcc52  ; je 0xfffbcc52
imul edx, dword [ebp - 0x78], 0x1055
add edx, ebx
movzx eax, byte [edx + 0x3b]
mov dl, byte [edx + 0x3d]
movzx ecx, dl
mov byte [ebp - 0x7c], dl
lea edx, [eax - 5]
cmp dx, 0xc
sbb esi, esi
not esi
and esi, 3
cmp cx, 4
jbe loc_fffbcc6d  ; jbe 0xfffbcc6d
cmp cx, 0xa
setne byte [ebp - 0x84]
cmp cx, 8
seta dl
test byte [ebp - 0x84], dl
je short loc_fffbcb15  ; je 0xfffbcb15
mov dl, byte [ebp - 0x7c]
and edx, 0xfffffffd
cmp dl, 0xc
je short loc_fffbcb15  ; je 0xfffbcb15
cmp cx, 0x10
jne loc_fffbcc6d  ; jne 0xfffbcc6d

loc_fffbcb15:
cmp ax, 0xb
ja short loc_fffbcb21  ; ja 0xfffbcb21
lea eax, [eax + eax - 8]
jmp short loc_fffbcb28  ; jmp 0xfffbcb28

loc_fffbcb21:
sub eax, 0xc
lea eax, [eax + eax + 1]

loc_fffbcb28:
movzx ecx, byte [ebp - 0x7c]
mov edx, edi
mov dword [ebp - 0x7c], ecx
mov ecx, eax
and ecx, 1
and dx, 0xf18b
shl ecx, 2
and eax, 0xe
shl eax, 3
or edx, ecx
mov ecx, dword [ebp - 0x7c]
or edx, eax
movzx eax, byte [ebp + ecx - 0x68]
shl eax, 9
or edx, eax
mov eax, dword [ebx + 0x2270]
cmp eax, 3
ja short loc_fffbcb69  ; ja 0xfffbcb69
mov edi, edx
or di, 0x1000
jmp short loc_fffbcb87  ; jmp 0xfffbcb87

loc_fffbcb69:
sub eax, 6
mov edi, edx
and di, 0xefff
cmp eax, 1
ja short loc_fffbcb7a  ; ja 0xfffbcb7a
jmp short loc_fffbcb87  ; jmp 0xfffbcb87

loc_fffbcb7a:
or dh, 0x10
cmp dword [ebx + 0x2234], 1
cmovne edi, edx

loc_fffbcb87:
mov al, byte [ebp - 0x72]
mov ecx, 0x15
mov byte [ebp - 0x37], al
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x57]
mov dword [ebp - 0x42], 0
mov word [ebp - 0x3a], di
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov word [ebp - 0x30], 4
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
call fcn_fffa2408  ; call 0xfffa2408
mov ecx, 0x15
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x2d]
mov dword [ebp - 0x57], 0xc
mov word [ebp - 0x45], 4
mov byte [ebp - 0x43], 4
mov word [ebp - 0x47], 1
call fcn_fffa2408  ; call 0xfffa2408
movzx eax, byte [ebx + 0x20aa]
mov word [ebp - 0x1b], ax
lea edx, [ebp - 0x57]
imul eax, dword [ebp - 0x78], 0x1055
add eax, dword [ebp - 0x88]
mov ecx, 2
mov dword [ebp - 0x2d], 0xc
mov byte [ebp - 0x19], 4
mov word [ebp - 0x1d], 1
mov word [ebx + eax + 0x15], di
push eax
mov eax, ebx
push 1
push edx
mov edx, dword [ebp - 0x78]
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
cmove eax, esi
jmp short loc_fffbcc54  ; jmp 0xfffbcc54

loc_fffbcc52:
xor eax, eax

loc_fffbcc54:
inc byte [ebp - 0x71]

loc_fffbcc57:
test eax, eax
sete cl
cmp byte [ebp - 0x71], 1
setbe dl
test cl, dl
jne loc_fffbca9d  ; jne 0xfffbca9d
jmp short loc_fffbcc77  ; jmp 0xfffbcc77

loc_fffbcc6d:
mov eax, 5
jmp near loc_fffbcef7  ; jmp 0xfffbcef7

loc_fffbcc77:
test eax, eax
jne loc_fffbcef7  ; jne 0xfffbcef7
inc dword [ebp - 0x70]
cmp dword [ebp - 0x70], 4
jne loc_fffbc7ee  ; jne 0xfffbc7ee
mov byte [ebp - 0x4c], 0
mov dword [ebp - 0x57], 7
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 0
mov byte [ebp - 0x4a], 0
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 1
mov word [ebp - 0x45], 0xf
mov byte [ebp - 0x43], 4
mov dword [ebp - 0x53], 0
mov byte [ebp - 0x37], 0
mov dword [ebp - 0x42], 1
mov word [ebp - 0x3a], 0x400
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 8
mov byte [ebp - 0x35], 0x14
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov word [ebp - 0x30], 0x190
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
mov dword [ebp - 0x2d], 2
mov word [ebp - 0x25], 0
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0x1f
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov word [ebp - 0x1b], 0x64
mov byte [ebp - 0x19], 0x64
push eax
lea eax, [ebp - 0x57]
mov ecx, 1
push 1
mov edx, 0x64
mov dword [ebp - 0x29], 0
push eax
mov eax, ebx
push 1
push 0
push 0
push 0
push 4
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
cmove eax, dword [ebp - 0x6c]
cmp byte [ebx + 0x3a], 0
mov dword [ebp - 0x6c], eax
je short loc_fffbcd86  ; je 0xfffbcd86
xor ecx, ecx
xor edx, edx
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov dword [ebp - 0x6c], eax
jne loc_fffbce87  ; jne 0xfffbce87

loc_fffbcd86:
cmp byte [ebx + 0x108f], 0
jne loc_fffbce6e  ; jne 0xfffbce6e

loc_fffbcd93:
mov edx, dword [ebx + 0x2223]
xor edi, edi
lea esi, [ebp - 0x2d]
mov eax, dword [edx + 0x5030]
or eax, 8
mov dword [edx + 0x5030], eax

loc_fffbcdad:
mov ecx, dword [ebp - 0x80]
cmp byte [ecx + 0x3a], 0
jne loc_fffbce8c  ; jne 0xfffbce8c
jmp short loc_fffbcdd2  ; jmp 0xfffbcdd2

loc_fffbcdbc:
xor ecx, ecx
mov edx, edi
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov dword [ebp - 0x6c], eax
jne loc_fffbce87  ; jne 0xfffbce87

loc_fffbcdd2:
inc edi
add dword [ebp - 0x80], 0x1055
cmp edi, 2
jne short loc_fffbcdad  ; jne 0xfffbcdad
jmp near loc_fffbce87  ; jmp 0xfffbce87

loc_fffbcde4:
imul eax, dword [ebp - 0x6c], 0x1055
add eax, ebx
call fcn_fffbbf31  ; call 0xfffbbf31
movzx ecx, al
mov dl, byte [ebp - 0x6c]
cmp dl, 1
mov eax, dword [ebx + 0x2223]
mov edx, 0xa
sbb esi, esi
and esi, 0xfffffc00
add esi, 0x46a0
add eax, esi
mov dword [eax], ecx
mov eax, ebx
mov dword [ebp - 0x8c], ecx
call fcn_fffc7adb  ; call 0xfffc7adb
mov edx, dword [ebx + 0x2223]
mov ecx, dword [ebp - 0x8c]
add edx, esi
mov eax, ecx
shl eax, 4
and cl, 0xf
or eax, ecx
mov ecx, 0x3e8
mov dword [edx], eax
mov eax, dword [ebx + 0x20b6]
shr eax, 1
xor edx, edx
imul eax, eax, 0xa
movzx esi, word [edi + 0x47]
add eax, 0x1f4
div ecx
xor cx, cx
lea edx, [esi + eax]
mov eax, ebx
call fcn_fffc16ce  ; call 0xfffc16ce
jmp near loc_fffbc7d1  ; jmp 0xfffbc7d1

loc_fffbce6e:
xor ecx, ecx
mov edx, 1
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov dword [ebp - 0x6c], eax
je loc_fffbcd93  ; je 0xfffbcd93

loc_fffbce87:
mov eax, dword [ebp - 0x6c]
jmp short loc_fffbcef7  ; jmp 0xfffbcef7

loc_fffbce8c:
mov ecx, edi
cmp cl, 1
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4420
add eax, dword [ebx + 0x2223]
mov edx, dword [eax]
and edx, 0xffdfffff
cmp cl, 1
mov dword [eax], edx
mov edx, edi
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x468c
add eax, dword [ebx + 0x2223]
mov eax, dword [eax]
mov eax, dword [ebp - 0x80]
cmp dword [eax + 0xa], 1
sbb eax, eax
xor ecx, ecx
and eax, 2
mov byte [ebp - 0x22], al
push eax
mov eax, ebx
push 1
push esi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
je loc_fffbcdbc  ; je 0xfffbcdbc

loc_fffbcef7:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffbceff:
db 0x00

fcn_fffbcf00:  ; not directly referenced
push ebp
mov edx, 0xdd46
mov ebp, esp
push edi
push esi
push ebx
xor ebx, ebx
lea esp, [esp - 0x16c]
mov edi, dword [ebp + 8]
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x138]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0xf0]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0xa8]
call fcn_fffa24c1  ; call 0xfffa24c1
xor ecx, ecx
mov edx, 0x48
lea eax, [ebp - 0x60]
call fcn_fffa24c1  ; call 0xfffa24c1

loc_fffbcf63:  ; not directly referenced
imul eax, ebx, 0x1055
mov byte [ebp - 0x15c], 0
cmp byte [edi + eax + 0x3a], 0
jne loc_fffbd025  ; jne 0xfffbd025

loc_fffbcf7b:  ; not directly referenced
inc ebx
cmp ebx, 2
je loc_fffbd045  ; je 0xfffbd045
jmp short loc_fffbcf63  ; jmp 0xfffbcf63

loc_fffbcf87:  ; not directly referenced
push eax
movzx esi, byte [ebp - 0x15c]
xor ecx, ecx
push 0x20
mov edx, ebx
mov eax, edi
push 0
push esi
call fcn_fffbfee2  ; call 0xfffbfee2
add esp, 0xc
mov edx, dword [ebp - 0x164]
push 0x20
add edx, esi
mov ecx, 1
push 0
mov dword [ebp - 0x160], edx
push esi
mov dword [ebp + edx*4 - 0x138], eax
mov edx, ebx
mov eax, edi
call fcn_fffbfee2  ; call 0xfffbfee2
add esp, 0xc
mov ecx, dword [ebp - 0x160]
push 0x20
mov edx, ebx
push 0
mov dword [ebp + ecx*4 - 0xf0], eax
mov ecx, 2
push esi
mov eax, edi
call fcn_fffbfee2  ; call 0xfffbfee2
add esp, 0xc
mov edx, dword [ebp - 0x160]
push 0x20
mov ecx, 3
push 0
mov dword [ebp + edx*4 - 0xa8], eax
mov edx, ebx
push esi
mov eax, edi
call fcn_fffbfee2  ; call 0xfffbfee2
mov ecx, dword [ebp - 0x160]
inc byte [ebp - 0x15c]
add esp, 0x10
mov dword [ebp + ecx*4 - 0x60], eax
jmp short loc_fffbd02e  ; jmp 0xfffbd02e

loc_fffbd025:  ; not directly referenced
lea eax, [ebx + ebx*8]
mov dword [ebp - 0x164], eax

loc_fffbd02e:  ; not directly referenced
mov dl, byte [ebp - 0x15c]
cmp dl, byte [edi + 0x20b5]
jb loc_fffbcf87  ; jb 0xfffbcf87
jmp near loc_fffbcf7b  ; jmp 0xfffbcf7b

loc_fffbd045:  ; not directly referenced
push ecx
lea eax, [ebp - 0x60]
lea edx, [ebp - 0x138]
push ecx
lea ecx, [ebp - 0xf0]
push eax
lea eax, [ebp - 0xa8]
push eax
mov eax, edi
call fcn_fffafb37  ; call 0xfffafb37
add esp, 0x10
cmp al, 3
je short loc_fffbd0cc  ; je 0xfffbd0cc
cmp al, 1
ja short loc_fffbd082  ; ja 0xfffbd082
movzx eax, al
mov byte [ebp - 0x15c], 1
mov bl, byte [eax + ref_fffcf26c]  ; mov bl, byte [eax - 0x30d94]
jmp short loc_fffbd0c4  ; jmp 0xfffbd0c4

loc_fffbd082:  ; not directly referenced
mov byte [ebp - 0x15c], 0
xor ebx, ebx
jmp short loc_fffbd0c4  ; jmp 0xfffbd0c4

loc_fffbd08d:  ; not directly referenced
push edx
lea ecx, [ebp - 0x60]
lea eax, [ebp - 0xa8]
push ecx
movzx edx, bl
lea ecx, [ebp - 0x138]
push eax
lea eax, [ebp - 0xf0]
push eax
mov eax, edi
call fcn_fffb00f3  ; call 0xfffb00f3
add esp, 0x10
test eax, eax
mov esi, eax
je short loc_fffbd0c3  ; je 0xfffbd0c3
mov edx, 0xdd48
jmp near loc_fffbd29f  ; jmp 0xfffbd29f

loc_fffbd0c3:  ; not directly referenced
inc ebx

loc_fffbd0c4:  ; not directly referenced
cmp bl, byte [ebp - 0x15c]
jbe short loc_fffbd08d  ; jbe 0xfffbd08d

loc_fffbd0cc:  ; not directly referenced
mov edx, 0xdd47
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov eax, edi
mov edx, 0xdd49
call fcn_fffad891  ; call 0xfffad891
mov eax, dword [edi + 0x221f]
mov eax, dword [eax + 0xe4]
test al, 2
je short loc_fffbd10a  ; je 0xfffbd10a
mov eax, edi
call fcn_fffb114e  ; call 0xfffb114e
test eax, eax
mov esi, eax
je loc_fffbd29a  ; je 0xfffbd29a
jmp near loc_fffbd293  ; jmp 0xfffbd293

loc_fffbd10a:  ; not directly referenced
mov eax, edi
lea ebx, [ebp - 0x144]
mov edx, ebx
call fcn_fffacf73  ; call 0xfffacf73
lea eax, [edi + 0x3c31]
mov dword [ebp - 0x15c], 0
mov dword [ebp - 0x16c], eax

loc_fffbd12f:  ; not directly referenced
imul eax, dword [ebp - 0x15c], 0x1055
cmp byte [edi + eax + 0x3a], 0
jne loc_fffbd2a8  ; jne 0xfffbd2a8

loc_fffbd144:  ; not directly referenced
inc dword [ebp - 0x15c]
cmp dword [ebp - 0x15c], 2
jne short loc_fffbd12f  ; jne 0xfffbd12f
xor esi, esi
jmp near loc_fffbd29a  ; jmp 0xfffbd29a

loc_fffbd15a:  ; not directly referenced
mov ecx, dword [ebp - 0x15c]
lea edx, [ebp - 0x144]
mov eax, edi
xor ebx, ebx
call fcn_ffface48  ; call 0xffface48

loc_fffbd16f:  ; not directly referenced
mov ecx, dword [ebp - 0x15c]
mov edx, ebx
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffbd18d  ; jne 0xfffbd18d

loc_fffbd182:  ; not directly referenced
inc ebx
cmp ebx, 4
jne short loc_fffbd16f  ; jne 0xfffbd16f
jmp near loc_fffbd26a  ; jmp 0xfffbd26a

loc_fffbd18d:  ; not directly referenced
imul eax, ebx, 0x900
mov dl, byte [ebp + ebx - 0x14c]
add eax, 0x3c30
mov byte [ebp - 0x160], dl
mov dword [ebp - 0x170], eax
jmp near loc_fffbd252  ; jmp 0xfffbd252

loc_fffbd1b0:  ; not directly referenced
push eax
movzx ecx, byte [ebp - 0x160]
mov edx, dword [ebp - 0x15c]
push eax
mov dword [ebp - 0x168], ecx
mov eax, edi
push 9
push ecx
mov ecx, ebx
call fcn_fffaf80e  ; call 0xfffaf80e
add esp, 0x10
mov eax, 0x4340
xor edx, edx
mov esi, dword [ebp - 0x15c]
jmp short loc_fffbd20c  ; jmp 0xfffbd20c

loc_fffbd1e3:  ; not directly referenced
lea ecx, [eax + 0x400]
mov dword [ebp - 0x174], ecx
mov ecx, esi
test cl, cl
mov ecx, dword [ebp - 0x174]
cmove ecx, eax
add ecx, dword [edi + 0x2223]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffbd20c:  ; not directly referenced
cmp dl, byte [edi + 0x20b5]
jb short loc_fffbd1e3  ; jb 0xfffbd1e3
mov ecx, ebx
mov edx, dword [ebp - 0x15c]
mov eax, edi
call fcn_fffaf9ac  ; call 0xfffaf9ac
test eax, eax
mov esi, eax
jne short loc_fffbd293  ; jne 0xfffbd293
mov eax, dword [ebp - 0x170]
sub esp, 0xc
push dword [ebp - 0x168]
mov ecx, dword [ebp - 0x15c]
lea edx, [edi + eax + 1]
mov eax, edi
call fcn_fffacdcd  ; call 0xfffacdcd
inc byte [ebp - 0x160]
add esp, 0x10

loc_fffbd252:  ; not directly referenced
mov dl, byte [ebp - 0x160]
cmp dl, byte [ebp + ebx - 0x148]
jbe loc_fffbd1b0  ; jbe 0xfffbd1b0
jmp near loc_fffbd182  ; jmp 0xfffbd182

loc_fffbd26a:  ; not directly referenced
dec dword [ebp - 0x164]
jne loc_fffbd15a  ; jne 0xfffbd15a
mov ecx, dword [ebp - 0x16c]
mov edx, dword [ebp - 0x15c]
mov eax, edi
call fcn_fffaf8cd  ; call 0xfffaf8cd
test eax, eax
mov esi, eax
je loc_fffbd144  ; je 0xfffbd144

loc_fffbd293:  ; not directly referenced
mov edx, 0xdd4b
jmp short loc_fffbd29f  ; jmp 0xfffbd29f

loc_fffbd29a:  ; not directly referenced
mov edx, 0xdd4a

loc_fffbd29f:  ; not directly referenced
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
jmp short loc_fffbd310  ; jmp 0xfffbd310

loc_fffbd2a8:  ; not directly referenced
xor ecx, ecx
mov edx, dword [ebp - 0x15c]
mov eax, edi
call fcn_fffaebfc  ; call 0xfffaebfc
xor ecx, ecx
mov edx, 0x2400
mov eax, dword [ebp - 0x16c]
call fcn_fffa24c1  ; call 0xfffa24c1
mov byte [ebp - 0x14c], 0
mov byte [ebp - 0x148], 0x7f
mov byte [ebp - 0x14b], 0
mov byte [ebp - 0x147], 0x7f
mov byte [ebp - 0x14a], 0
mov byte [ebp - 0x146], 0x7f
mov byte [ebp - 0x149], 0
mov byte [ebp - 0x145], 0x7f
mov dword [ebp - 0x164], 0x20
jmp near loc_fffbd15a  ; jmp 0xfffbd15a

loc_fffbd310:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, esi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbd31a:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
xor ebx, ebx
lea esp, [esp - 0x1c]
mov word [ebp - 0x1c], 0
mov edi, dword [ebp + 8]

loc_fffbd32f:  ; not directly referenced
imul eax, ebx, 0x1055
cmp byte [edi + eax + 0x3a], 0
je loc_fffbd449  ; je 0xfffbd449
lea eax, [edi + eax + 0x7b]
xor esi, esi
mov dword [ebp - 0x20], eax

loc_fffbd349:  ; not directly referenced
mov ecx, ebx
mov edx, esi
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffbd3cc  ; jne 0xfffbd3cc
jmp near loc_fffbd43b  ; jmp 0xfffbd43b

loc_fffbd35d:  ; not directly referenced
push edx
movzx eax, byte [ebp - 0x19]
mov ecx, esi
push 6
mov dword [ebp - 0x24], eax
mov edx, ebx
push 0
push eax
mov eax, edi
call fcn_fffbfee2  ; call 0xfffbfee2
add esp, 0xc
mov dword [ebp - 0x28], eax
push 3
mov ecx, esi
mov edx, ebx
push 0x10
push dword [ebp - 0x24]
mov eax, edi
call fcn_fffbfee2  ; call 0xfffbfee2
add esp, 0xc
mov byte [ebp - 0x1a], al
push 7
mov ecx, esi
mov edx, ebx
push 8
push dword [ebp - 0x24]
mov eax, edi
call fcn_fffbfee2  ; call 0xfffbfee2
movzx eax, al
movzx ecx, byte [ebp - 0x28]
movzx edx, byte [ebp - 0x1a]
add eax, ecx
add esp, 0x10
shl edx, 6
add edx, eax
cmp dx, word [ebp - 0x1c]
cmovbe dx, word [ebp - 0x1c]
inc byte [ebp - 0x19]
mov word [ebp - 0x1c], dx
jmp short loc_fffbd3d0  ; jmp 0xfffbd3d0

loc_fffbd3cc:  ; not directly referenced
mov byte [ebp - 0x19], 0

loc_fffbd3d0:  ; not directly referenced
mov dl, byte [ebp - 0x19]
cmp dl, byte [edi + 0x20b5]
jb short loc_fffbd35d  ; jb 0xfffbd35d
mov ecx, ebx
mov edx, esi
shr word [ebp - 0x1c], 6
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
mov byte [ebp - 0x19], al
mov ecx, ebx
mov edx, esi
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
mov dl, byte [ebp - 0x19]
sub esp, 0xc
sub edx, eax
mov ecx, ebx
mov al, dl
add eax, dword [ebp - 0x1c]
mov byte [ebp - 0x19], al
mov edx, esi
movzx eax, al
push eax
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
movzx eax, word [ebp - 0x1c]
mov edx, esi
mov dword [esp], eax
mov ecx, ebx
mov eax, edi
call fcn_fffbb5d0  ; call 0xfffbb5d0
mov edx, dword [ebp - 0x20]
mov al, byte [ebp - 0x1c]
add esp, 0x10
mov byte [edx], al
mov al, byte [ebp - 0x19]
mov byte [edx - 1], al

loc_fffbd43b:  ; not directly referenced
inc esi
add dword [ebp - 0x20], 0x2f
cmp esi, 4
jne loc_fffbd349  ; jne 0xfffbd349

loc_fffbd449:  ; not directly referenced
inc ebx
cmp ebx, 2
jne loc_fffbd32f  ; jne 0xfffbd32f
lea esp, [ebp - 0xc]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbd45d:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x14]
mov al, byte [edx]
cmp al, 2
mov byte [edx + 0xff], 3
mov byte [edx + 0xfe], 3
ja short loc_fffbd489  ; ja 0xfffbd489
cmp al, 1
sbb eax, eax
xor esi, esi
not eax
and ax, 0xff
jmp short loc_fffbd493  ; jmp 0xfffbd493

loc_fffbd489:
mov eax, 0xff
mov esi, 0xff

loc_fffbd493:
mov dword [ebp - 0x1c], edx
xor edi, edi
mov word [ebp - 0x14], 0xff
mov word [ebp - 0x10], 0xff
mov word [ebp - 0x12], 0xff
mov word [ebp - 0xe], 0xff

loc_fffbd4b0:
mov ebx, dword [ebp - 0x1c]
mov dl, byte [ebx + 1]
mov bl, byte [ebx]
cmp dl, bl
mov byte [ebp - 0x1d], bl
jae short loc_fffbd4dc  ; jae 0xfffbd4dc
cmp dl, 2
ja short loc_fffbd53e  ; ja 0xfffbd53e
cmp si, 0xff
lea ebx, [edi + 1]
cmove esi, ebx
test dl, dl
jne short loc_fffbd53e  ; jne 0xfffbd53e
cmp ax, 0xff
cmove eax, ebx
jmp short loc_fffbd53e  ; jmp 0xfffbd53e

loc_fffbd4dc:
cmp byte [ebp - 0x1d], dl
jae short loc_fffbd53e  ; jae 0xfffbd53e
cmp byte [ebp - 0x1d], 2
ja short loc_fffbd53e  ; ja 0xfffbd53e
cmp dl, 2
jbe short loc_fffbd512  ; jbe 0xfffbd512
movsx ebx, word [ebp - 0xe]
movsx edx, word [ebp - 0x12]
sub edx, ebx
movsx ebx, si
mov dword [ebp - 0x18], ebx
mov ebx, edi
sub ebx, dword [ebp - 0x18]
cmp edx, ebx
jg short loc_fffbd50d  ; jg 0xfffbd50d
mov word [ebp - 0x12], di
mov word [ebp - 0xe], si

loc_fffbd50d:
mov esi, 0xff

loc_fffbd512:
cmp byte [ebp - 0x1d], 0
jne short loc_fffbd53e  ; jne 0xfffbd53e
movsx ebx, word [ebp - 0x10]
movsx edx, word [ebp - 0x14]
sub edx, ebx
movsx ebx, ax
mov dword [ebp - 0x18], ebx
mov ebx, edi
sub ebx, dword [ebp - 0x18]
cmp edx, ebx
jg short loc_fffbd539  ; jg 0xfffbd539
mov word [ebp - 0x14], di
mov word [ebp - 0x10], ax

loc_fffbd539:
mov eax, 0xff

loc_fffbd53e:
inc edi
inc dword [ebp - 0x1c]
cmp edi, 0xfe
jne loc_fffbd4b0  ; jne 0xfffbd4b0
cmp word [ebp - 0x14], 0xff
sete dl
cmp word [ebp - 0x10], 0xff
sete al
test al, dl
je short loc_fffbd56b  ; je 0xfffbd56b
mov byte [ecx + 1], 0xf6
mov byte [ecx], 0xa

loc_fffbd56b:
cmp word [ebp - 0x10], 0xff
setne al
test al, dl
je short loc_fffbd584  ; je 0xfffbd584
mov dl, byte [ebp - 0x10]
mov byte [ecx + 1], 0x7f
sub edx, 0x7f
mov byte [ecx], dl

loc_fffbd584:
cmp word [ebp - 0x14], 0xff
setne dl
test dl, al
je short loc_fffbd5a2  ; je 0xfffbd5a2
mov al, byte [ebp - 0x14]
sub eax, 0x7f
mov byte [ecx + 1], al
mov al, byte [ebp - 0x10]
sub eax, 0x7f
mov byte [ecx], al

loc_fffbd5a2:
cmp word [ebp - 0x12], 0xff
sete dl
cmp word [ebp - 0xe], 0xff
sete al
test al, dl
je short loc_fffbd5c3  ; je 0xfffbd5c3
mov al, byte [ecx + 1]
mov byte [ecx + 4], al
mov al, byte [ecx]
mov byte [ecx + 3], al

loc_fffbd5c3:
cmp word [ebp - 0xe], 0xff
setne al
test al, dl
je short loc_fffbd5dd  ; je 0xfffbd5dd
mov dl, byte [ebp - 0xe]
mov byte [ecx + 4], 0x7f
sub edx, 0x7f
mov byte [ecx + 3], dl

loc_fffbd5dd:
cmp word [ebp - 0x12], 0xff
setne dl
test dl, al
je short loc_fffbd5fc  ; je 0xfffbd5fc
mov al, byte [ebp - 0x12]
sub eax, 0x7f
mov byte [ecx + 4], al
mov al, byte [ebp - 0xe]
sub eax, 0x7f
mov byte [ecx + 3], al

loc_fffbd5fc:
movsx eax, byte [ecx + 3]
mov esi, 2
movsx ebx, byte [ecx + 4]
movsx edi, byte [ecx + 1]
sub ebx, eax
mov eax, ebx
cdq
idiv esi
add al, byte [ecx + 3]
mov byte [ecx + 5], al
movsx eax, byte [ecx]
sub edi, eax
mov eax, edi
cdq
idiv esi
add al, byte [ecx]
cmp edi, 0xd
mov byte [ecx + 2], al
jle short loc_fffbd637  ; jle 0xfffbd637
mov dword [ecx + 6], 0
jmp short loc_fffbd645  ; jmp 0xfffbd645

loc_fffbd637:
xor eax, eax
cmp ebx, 0xe
setl al
add eax, 2
mov dword [ecx + 6], eax

loc_fffbd645:
lea esp, [esp + 0x14]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbd650:
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
xor eax, eax
push ebx
mov ebx, edx
lea esp, [esp - 0x80c]

loc_fffbd663:
mov ecx, eax
lea edx, [ebp - 0x818]
shl ecx, 6
lea edi, [eax + 1]
add ecx, edx
xor edx, edx

loc_fffbd675:
mov word [ecx + edx], di
add edx, 2
cmp edx, 0x40
jne short loc_fffbd675  ; jne 0xfffbd675
inc eax
cmp eax, 0x20
jne short loc_fffbd663  ; jne 0xfffbd663
sub esp, 0xc
lea ecx, [ebp - 0x818]
push 0x20
xor dl, dl
mov eax, esi
call fcn_fffc7760  ; call 0xfffc7760
lea ecx, [ebp - 0x818]
mov eax, esi
mov edx, 1
mov dword [esp], 0x20
call fcn_fffc7760  ; call 0xfffc7760
mov dword [ebx], 8
mov word [ebx + 8], 0
mov byte [ebx + 0xa], 0
mov byte [ebx + 0xc], 4
mov byte [ebx + 0xd], 0x12
mov byte [ebx + 0xe], 0
mov byte [ebx + 0xf], 0
mov word [ebx + 0x10], 8
movzx edx, byte [esi + 0x3e]
movzx eax, byte [esi + 0x1093]
add esp, 0x10
cmp dl, al
cmovae eax, edx
mov word [ebx + 0x12], ax
mov al, byte [esi + 0x1099]
shr al, 2
movzx edx, al
movzx eax, byte [esi + 0x1098]
lea ecx, [edx + 1]
cmp edx, eax
mov dl, byte [esi + 0x44]
cmovge eax, ecx
shr dl, 2
movzx ecx, dl
movzx edx, byte [esi + 0x43]
lea edi, [ecx + 1]
cmp ecx, edx
mov dword [ebx + 4], 0
mov dword [ebx + 0x15], 9
mov word [ebx + 0x1d], 0
cmovge edx, edi
mov byte [ebx + 0x1f], 0
cmp edx, eax
mov byte [ebx + 0x21], 2
mov byte [ebx + 0x22], 0x12
mov byte [ebx + 0x23], 0
cmovge eax, edx
mov byte [ebx + 0x24], 0
mov byte [ebx + 0x14], al
mov word [ebx + 0x25], 0x20
movzx eax, byte [esi + 0x3c]
movzx edx, byte [esi + 0x41]
movzx ecx, byte [esi + 0x1096]
add edx, eax
movzx eax, byte [esi + 0x1091]
mov byte [ebx + 0x29], 4
add eax, ecx
mov dword [ebx + 0x19], 2
cmp edx, eax
mov dword [ebx + 0x2a], 4
cmovge eax, edx
add eax, 8
mov word [ebx + 0x27], ax
mov word [ebx + 0x32], 0
mov byte [ebx + 0x34], 0
mov byte [ebx + 0x36], 2
mov byte [ebx + 0x37], 0x12
mov byte [ebx + 0x38], 0
mov byte [ebx + 0x39], 0
mov word [ebx + 0x3a], 0x20
movzx eax, byte [esi + 0x42]
movzx edx, byte [esi + 0x1097]
cmp dl, al
mov byte [ebx + 0x3e], 4
mov dword [ebx + 0x2e], 2
mov dword [ebx + 0x3f], 3
cmovb edx, eax
mov eax, 8
cmp dx, 7
mov word [ebx + 0x47], 0x400
mov byte [ebx + 0x49], 0
mov byte [ebx + 0x4b], 0
cmova eax, edx
mov byte [ebx + 0x4c], 0x12
mov word [ebx + 0x3c], ax
mov byte [ebx + 0x4d], 0
mov byte [ebx + 0x4e], 0
mov word [ebx + 0x4f], 1
mov word [ebx + 0x51], 0xf
mov byte [ebx + 0x53], 4
mov dword [ebx + 0x43], 0
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbd81a:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
xor ebx, ebx
lea esp, [esp - 0x5c]
mov al, byte [eax + 0x20b5]
mov byte [ebp - 0x62], dl
mov byte [ebp - 0x63], al
movzx edx, cl
mov byte [ebp - 0x61], cl
movzx eax, byte [ebp - 0x62]
mov esi, dword [ebp + 0x10]
mov dword [ebp - 0x5c], edx
mov dword [ebp - 0x60], eax
jmp short loc_fffbd885  ; jmp 0xfffbd885

loc_fffbd849:
push eax
mov ecx, dword [ebp - 0x5c]
mov edx, dword [ebp - 0x60]
push 6
mov eax, edi
push 0
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
add esp, 0xc
mov byte [ebp + ebx - 0x4e], al
push 1
mov ecx, dword [ebp - 0x5c]
mov edx, dword [ebp - 0x60]
push 0x13
mov eax, edi
push ebx
call fcn_fffbfe93  ; call 0xfffbfe93
mov byte [ebp + ebx - 0x45], al
mov dword [ebp + ebx*4 - 0x3c], 0
add esp, 0x10
inc ebx

loc_fffbd885:
cmp byte [ebp - 0x63], bl
ja short loc_fffbd849  ; ja 0xfffbd849
test si, si
setle al
setg dl
movzx esi, byte [ebp - 0x62]
lea eax, [eax + eax*4 - 5]
mov byte [ebp - 0x60], al
movzx eax, byte [ebp - 0x61]
lea edx, [edx*4 + 1]
mov dword [ebp - 0x5c], eax
mov byte [ebp - 0x64], dl
jmp near loc_fffbda6a  ; jmp 0xfffbda6a

loc_fffbd8b4:
mov dl, byte [ebp + ebx - 0x4e]
mov al, byte [ebp - 0x60]
add eax, edx
cmp dl, 0x3f
ja short loc_fffbd8d8  ; ja 0xfffbd8d8
cmp al, 0x3f
jle short loc_fffbd8d8  ; jle 0xfffbd8d8
cmp byte [ebp + ebx - 0x45], 0
jne short loc_fffbd91c  ; jne 0xfffbd91c
push ebx
and eax, 0x3f
push 6
push 0
push eax
jmp short loc_fffbd92a  ; jmp 0xfffbd92a

loc_fffbd8d8:
test al, al
jns short loc_fffbd913  ; jns 0xfffbd913
mov cl, byte [ebp + ebx - 0x45]
cmp cl, 1
jne short loc_fffbd8f3  ; jne 0xfffbd8f3
push ebx
movsx eax, al
push 6
add eax, 0x40
push 0
push eax
jmp short loc_fffbd8fe  ; jmp 0xfffbd8fe

loc_fffbd8f3:
test cl, cl
jne short loc_fffbd913  ; jne 0xfffbd913
push ebx
push 6
push 0
push 0

loc_fffbd8fe:
mov ecx, dword [ebp - 0x5c]
mov edx, esi
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
push ebx
push 1
push 0x13
push 0
jmp short loc_fffbd95f  ; jmp 0xfffbd95f

loc_fffbd913:
cmp dl, 0x3f
ja short loc_fffbd93f  ; ja 0xfffbd93f
cmp al, 0x3f
jle short loc_fffbd93f  ; jle 0xfffbd93f

loc_fffbd91c:
cmp byte [ebp + ebx - 0x45], 1
jne short loc_fffbd93f  ; jne 0xfffbd93f
push ebx
push 6
push 0
push 0x3f

loc_fffbd92a:
mov ecx, dword [ebp - 0x5c]
mov edx, esi
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
push ebx
push 1
push 0x13
push 1
jmp short loc_fffbd95f  ; jmp 0xfffbd95f

loc_fffbd93f:
push ebx
movsx eax, al
mov ecx, dword [ebp - 0x5c]
push 6
mov edx, esi
push 0
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
push ebx
movzx eax, byte [ebp + ebx - 0x45]
push 1
push 0x13
push eax

loc_fffbd95f:
mov eax, edi
mov ecx, dword [ebp - 0x5c]
mov edx, esi
call fcn_fffbfdae  ; call 0xfffbfdae
mov eax, dword [edi + 0x2223]
add esp, 0x20
lea eax, [eax + ebx*4 + 0x4f40]
inc ebx
mov dword [eax], 0

loc_fffbd982:
cmp byte [ebp - 0x63], bl
ja loc_fffbd8b4  ; ja 0xfffbd8b4
cmp byte [ebp - 0x62], 1
mov dl, byte [ebp - 0x61]
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4688
add eax, dword [edi + 0x2223]
mov dword [eax], 0x1f
mov eax, dword [ebp + 0xc]
mov byte [eax + 0xb], dl
mov byte [eax + 0x20], dl
mov byte [eax + 0x35], dl
mov byte [eax + 0x4a], dl
push ecx
mov edx, esi
mov ecx, 3
push 1
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
jne loc_fffbda81  ; jne 0xfffbda81
xor ecx, ecx
mov edx, esi
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne loc_fffbda7c  ; jne 0xfffbda7c
mov edx, dword [ebp + 8]
mov ax, 0x4340
mov byte [ebp - 0x65], 0
mov dword [edx], 1
jmp short loc_fffbda48  ; jmp 0xfffbda48

loc_fffbda08:
cmp byte [ebp - 0x62], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [edi + 0x2223]
mov ecx, dword [ecx]
test ecx, ecx
jne short loc_fffbda2c  ; jne 0xfffbda2c
mov dword [ebp + eax - 0x437c], 1

loc_fffbda2c:
xor ecx, ecx
cmp dword [ebp + eax - 0x437c], 0
je short loc_fffbda3d  ; je 0xfffbda3d
mov edx, dword [ebp + 8]
mov ecx, dword [edx]

loc_fffbda3d:
mov edx, dword [ebp + 8]
inc byte [ebp - 0x65]
add eax, 4
mov dword [edx], ecx

loc_fffbda48:
mov dl, byte [ebp - 0x63]
cmp byte [ebp - 0x65], dl
jne short loc_fffbda08  ; jne 0xfffbda08
mov eax, dword [ebp + 0xc]
mov edx, dword [ebp + 8]
inc word [eax + 8]
cmp dword [edx], 1
je short loc_fffbda81  ; je 0xfffbda81
inc byte [ebp - 0x60]
mov al, byte [ebp - 0x64]
cmp byte [ebp - 0x60], al
jge short loc_fffbda71  ; jge 0xfffbda71

loc_fffbda6a:
xor ebx, ebx
jmp near loc_fffbd982  ; jmp 0xfffbd982

loc_fffbda71:
mov edx, dword [ebp + 8]
mov dword [edx], 0
jmp short loc_fffbda81  ; jmp 0xfffbda81

loc_fffbda7c:
mov ebx, 0xc

loc_fffbda81:
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbda8b:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x18]
mov dword [ebp - 0x1c], eax
mov word [ebp - 0xe], dx
mov dword [ebp - 0x14], eax
mov al, byte [ebp - 0xe]
mov byte [ebp - 0x10], 0
mov byte [ebp - 0x15], al
sub eax, 0x40
mov byte [ebp - 0x16], al

loc_fffbdaaf:
mov edx, dword [ebp - 0x14]
cmp dword [edx + 0xa], 1
jne loc_fffbdcdc  ; jne 0xfffbdcdc
cmp byte [edx + 0x12], 0
je loc_fffbdcdc  ; je 0xfffbdcdc
jmp near loc_fffbdcc8  ; jmp 0xfffbdcc8

loc_fffbdacb:
mov dx, word [ebp - 0xe]
add edx, 0x7f
cmp dx, 0x3f
ja short loc_fffbdaf0  ; ja 0xfffbdaf0
mov dl, 0xc0
mov byte [ebp - 0xf], al
sub dl, byte [ebp - 0xe]
xor ecx, ecx
mov byte [ebp - 0x17], 0
mov edi, 1
jmp near loc_fffbdbc3  ; jmp 0xfffbdbc3

loc_fffbdaf0:
mov dx, word [ebp - 0xe]
add edx, 0x3f
cmp dx, 0x3f
ja short loc_fffbdb1b  ; ja 0xfffbdb1b
cmp word [ebp - 0xe], 0
je loc_fffbdbb6  ; je 0xfffbdbb6
mov dl, byte [ebp - 0xe]
mov byte [ebp - 0xf], al
neg edx
xor ecx, ecx
mov byte [ebp - 0x17], 0
jmp near loc_fffbdbc1  ; jmp 0xfffbdbc1

loc_fffbdb1b:
cmp word [ebp - 0xe], 0
jle short loc_fffbdb3e  ; jle 0xfffbdb3e
movzx esi, bl
mov edx, 0x40
movsx ecx, word [ebp - 0xe]
sub edx, esi
cmp ecx, edx
jge short loc_fffbdb3e  ; jge 0xfffbdb3e
mov cl, byte [ebp - 0x15]
mov byte [ebp - 0xf], al
add ebx, ecx
jmp short loc_fffbdbbb  ; jmp 0xfffbdbbb

loc_fffbdb3e:
movzx esi, bl
mov ecx, 0x40
movsx edx, word [ebp - 0xe]
sub ecx, esi
cmp ecx, edx
jg short loc_fffbdb66  ; jg 0xfffbdb66
cmp word [ebp - 0xe], 0x3f
jg short loc_fffbdb6d  ; jg 0xfffbdb6d
inc eax
mov cl, byte [ebp - 0x15]
and eax, 1
add bl, byte [ebp - 0x16]
mov byte [ebp - 0xf], al
jmp short loc_fffbdbbb  ; jmp 0xfffbdbbb

loc_fffbdb66:
cmp word [ebp - 0xe], 0x3f
jle short loc_fffbdb89  ; jle 0xfffbdb89

loc_fffbdb6d:
mov ecx, 0x80
sub ecx, esi
cmp edx, ecx
jge short loc_fffbdb89  ; jge 0xfffbdb89
mov cl, byte [ebp - 0xe]
inc eax
sub ecx, 0x40
and eax, 1
mov byte [ebp - 0xf], al
add ebx, ecx
jmp short loc_fffbdbb0  ; jmp 0xfffbdbb0

loc_fffbdb89:
mov ecx, 0x80
sub ecx, esi
cmp ecx, edx
jg loc_fffbdcc1  ; jg 0xfffbdcc1
cmp word [ebp - 0xe], 0x7f
jg loc_fffbdcc1  ; jg 0xfffbdcc1
mov dl, byte [ebp - 0x15]
mov cl, byte [ebp - 0x16]
mov byte [ebp - 0xf], al
lea ebx, [ebx + edx - 0x80]

loc_fffbdbb0:
mov byte [ebp - 0x17], 1
jmp short loc_fffbdbbf  ; jmp 0xfffbdbbf

loc_fffbdbb6:
mov byte [ebp - 0xf], al
xor ecx, ecx

loc_fffbdbbb:
mov byte [ebp - 0x17], 0

loc_fffbdbbf:
xor edx, edx

loc_fffbdbc1:
xor edi, edi

loc_fffbdbc3:
mov eax, dword [ebp - 0x1c]
cmp byte [ebp - 0x10], 1
movzx edx, dl
sbb esi, esi
and esi, 0xffffff00
and edi, 0xff
shl edi, 0xc
movzx ecx, cl
mov eax, dword [eax + 0x2223]
movzx ebx, bl
mov dword [ebp - 0x20], eax
lea esi, [eax + esi + 0xf0c]
mov eax, dword [esi]
movzx esi, byte [ebp - 0x17]
and eax, 0xffffefc0
or eax, edx
mov edx, ecx
shl edx, 6
or eax, edi
shl ecx, 0x12
and eax, 0xffff703f
or eax, edx
mov edx, esi
shl edx, 0xf
shl esi, 0x18
or eax, edx
and eax, 0xff03ffff
or eax, ecx
mov ecx, dword [ebp - 0x20]
and eax, 0xfeffffff
or eax, esi
cmp byte [ebp - 0x10], 1
sbb edx, edx
mov esi, dword [ebp - 0x1c]
xor dl, dl
cmp byte [ebp - 0x10], 1
lea edx, [ecx + edx + 0x330c]
mov ecx, ebx
mov dword [edx], eax
sbb eax, eax
xor al, al
mov edx, dword [esi + 0x2223]
shl ecx, 6
lea edx, [edx + eax + 0xd14]
mov eax, dword [edx]
and eax, 0xffffffc0
or eax, ebx
and eax, 0xfffff03f
or eax, ecx
mov ecx, ebx
shl ecx, 0xc
and eax, 0xfffc0fff
shl ebx, 0x12
or eax, ecx
and eax, 0xff03ffff
or eax, ebx
cmp byte [ebp - 0x10], 1
mov dword [edx], eax
sbb eax, eax
xor al, al
mov edx, dword [esi + 0x2223]
lea edx, [edx + eax + 0xd18]
mov ecx, dword [edx]
mov eax, ecx
and ecx, 0xfffffff0
or eax, 0xf
cmp byte [ebp - 0xf], 1
cmovne eax, ecx
inc byte [ebp - 0x10]
add dword [ebp - 0x14], 0x1055
cmp byte [ebp - 0x10], 2
mov dword [edx], eax
jne loc_fffbdaaf  ; jne 0xfffbdaaf
xor eax, eax
jmp short loc_fffbdcf0  ; jmp 0xfffbdcf0

loc_fffbdcc1:
mov eax, 1
jmp short loc_fffbdcf0  ; jmp 0xfffbdcf0

loc_fffbdcc8:
mov eax, dword [ebp - 0x14]
mov bl, byte [eax + 0x36e]
mov al, byte [eax + 0x36d]
jmp near loc_fffbdacb  ; jmp 0xfffbdacb

loc_fffbdcdc:
mov ecx, dword [ebp - 0x14]
mov bl, byte [ecx + 0x382]
mov al, byte [ecx + 0x381]
jmp near loc_fffbdacb  ; jmp 0xfffbdacb

loc_fffbdcf0:
lea esp, [esp + 0x18]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbdcf9:
push ebp
mov ebp, esp
push edi
mov edi, edx
push esi
mov esi, eax
push ebx
mov bl, 7
lea esp, [esp - 0x1c]
mov al, byte [ebp + 8]
mov byte [ebp - 0x1c], cl
mov byte [ebp - 0x20], al
mov cl, byte [esi + 0x20b5]
xor eax, eax
jmp short loc_fffbdd29  ; jmp 0xfffbdd29

loc_fffbdd1c:
lea edx, [eax + eax*4]
mov dl, byte [edi + edx + 4]
cmp bl, dl
cmova ebx, edx
inc eax

loc_fffbdd29:
cmp cl, al
ja short loc_fffbdd1c  ; ja 0xfffbdd1c
test bl, bl
jne short loc_fffbdd43  ; jne 0xfffbdd43

loc_fffbdd31:
movzx eax, byte [ebp - 0x20]
xor ebx, ebx
mov dword [ebp - 0x20], eax
movzx eax, byte [ebp - 0x1c]
mov dword [ebp - 0x1c], eax
jmp short loc_fffbdd9f  ; jmp 0xfffbdd9f

loc_fffbdd43:
mov al, byte [edi + 0x2e]
sub esp, 0xc
movzx ecx, byte [ebp - 0x1c]
sub eax, ebx
movzx edx, byte [ebp - 0x20]
mov byte [edi + 0x2e], al
movzx eax, al
push eax
mov eax, esi
call fcn_fffbb5d0  ; call 0xfffbb5d0
add esp, 0x10
xor eax, eax
jmp short loc_fffbdd73  ; jmp 0xfffbdd73

loc_fffbdd68:
movzx edx, al
inc eax
lea edx, [edx + edx*4]
sub byte [edi + edx + 4], bl

loc_fffbdd73:
cmp al, byte [esi + 0x20b5]
jb short loc_fffbdd68  ; jb 0xfffbdd68
jmp short loc_fffbdd31  ; jmp 0xfffbdd31

loc_fffbdd7d:
movzx eax, bl
mov ecx, dword [ebp - 0x20]
push eax
lea eax, [eax + eax*4]
mov edx, dword [ebp - 0x1c]
push 3
inc ebx
push 0x10
movzx eax, byte [edi + eax + 4]
push eax
mov eax, esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10

loc_fffbdd9f:
cmp bl, byte [esi + 0x20b5]
jb short loc_fffbdd7d  ; jb 0xfffbdd7d
lea esp, [ebp - 0xc]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbddb1:
push ebp
mov ebp, esp
push edi
mov edi, ecx
push esi
push ebx
mov ebx, edx
lea esp, [esp - 0x1c]
mov dword [ebp - 0x1c], eax
mov dl, byte [ebp + 0xc]
mov al, byte [ebp + 0x10]
cmp al, dl
mov cl, byte [ebp + 8]
jae short loc_fffbddd7  ; jae 0xfffbddd7
dec byte [ebx + 0x2e]
dec byte [ebx + 0x2d]
jmp short loc_fffbdde1  ; jmp 0xfffbdde1

loc_fffbddd7:
cmp dl, al
jae short loc_fffbdde1  ; jae 0xfffbdde1
inc byte [ebx + 0x2e]
inc byte [ebx + 0x2d]

loc_fffbdde1:
movzx eax, byte [ebx + 0x2d]
sub esp, 0xc
movzx esi, cl
and edi, 0xff
push eax
mov ecx, edi
mov edx, esi
mov eax, dword [ebp - 0x1c]
call fcn_fffbb521  ; call 0xfffbb521
movzx eax, byte [ebx + 0x2e]
add esp, 0x10
mov dword [ebp + 8], eax
mov eax, dword [ebp - 0x1c]
lea esp, [ebp - 0xc]
mov ecx, edi
pop ebx
mov edx, esi
pop esi
pop edi
pop ebp
jmp near fcn_fffbb5d0  ; jmp 0xfffbb5d0

fcn_fffbde1b:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
lea esp, [esp - 0x7c]
mov word [ebp - 0x68], dx
movzx esi, byte [ebp + 8]
mov dword [ebp - 0x60], ecx
mov edx, esi
mov dword [ebp - 0x5c], esi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffbde47  ; jne 0xfffbde47

loc_fffbde40:
xor ebx, ebx
jmp near loc_fffbe1bd  ; jmp 0xfffbe1bd

loc_fffbde47:
mov eax, dword [ebp - 0x68]
dec eax
cmp ax, 0x7e
ja loc_fffbe06a  ; ja 0xfffbe06a
imul esi, dword [ebp - 0x5c], 0x2f
imul ebx, dword [ebp - 0x60], 0x1055
mov al, byte [ebp - 0x68]
sub esp, 0xc
mov byte [ebp - 0x70], al
movzx edx, byte [edi + 0x20b5]
lea ecx, [esi + ebx]
mov dword [ebp - 0x64], ecx
lea eax, [edi + ecx + 0x4d]
lea ecx, [ebp - 0x48]
push ecx
lea ecx, [ebp - 0x49]
call fcn_fffb9a02  ; call 0xfffb9a02
mov al, byte [ebp - 0x49]
mov dl, byte [ebp - 0x48]
mov byte [ebp - 0x76], al
mov eax, dword [ebp - 0x64]
add eax, edi
mov byte [ebp - 0x77], dl
add esp, 0x10
mov byte [ebp - 0x65], 0
mov dword [ebp - 0x7c], esi
mov dword [ebp - 0x64], ebx
mov dl, byte [eax + 0x7b]
mov al, byte [eax + 0x7a]
mov byte [ebp - 0x19], dl
mov byte [ebp - 0x1a], al
jmp near loc_fffbdff3  ; jmp 0xfffbdff3

loc_fffbdeb5:
movzx ebx, byte [ebp - 0x65]
mov edx, dword [ebp - 0x7c]
movsx eax, word [ebp - 0x68]
mov dword [ebp - 0x6c], eax
lea esi, [ebx + ebx*4]
add edx, esi
add edx, dword [ebp - 0x64]
add edx, edi
mov cl, byte [edx + 0x4f]
movzx eax, cl
add eax, dword [ebp - 0x6c]
sar eax, 6
add al, byte [edx + 0x51]
push ebx
mov byte [ebp + esi - 0x43], al
mov byte [ebp - 0x74], cl
push 3
movzx eax, al
mov ecx, dword [ebp - 0x5c]
push 0x10
mov edx, dword [ebp - 0x60]
push eax
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
push ebx
mov al, byte [ebp - 0x70]
add eax, dword [ebp - 0x74]
push 6
and eax, 0x3f
mov ecx, dword [ebp - 0x5c]
push 0
mov edx, dword [ebp - 0x60]
push eax
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
imul eax, dword [ebp - 0x5c], 0x2d
add esp, 0x20
add esi, eax
add esi, dword [ebp - 0x64]
lea eax, [ebx + ebx*2]
mov dl, byte [edi + esi + 0x109]
imul esi, dword [ebp - 0x5c], 0x24
mov byte [ebp - 0x66], dl
add eax, esi
add eax, dword [ebp - 0x64]
add esi, dword [ebp - 0x64]
add esi, edi
mov dword [ebp - 0x80], esi
mov esi, 0x40
mov al, byte [edi + eax + 0x295]
mov byte [ebp - 0x75], al
movzx eax, dl
add eax, dword [ebp - 0x6c]
cdq
mov dword [ebp - 0x74], eax
idiv esi
push ebx
mov esi, dword [ebp - 0x80]
mov edx, dword [ebp - 0x60]
push 1
movzx ecx, byte [ebp - 0x75]
add ecx, dword [ebp - 0x6c]
sar ecx, 6
push 0x13
sub ecx, eax
add cl, byte [ebx + esi + 0x2b0]
movzx ecx, cl
mov eax, edi
push ecx
mov ecx, dword [ebp - 0x5c]
call fcn_fffbfdae  ; call 0xfffbfdae
imul edx, dword [ebp - 0x5c], 0x12
add edx, dword [ebp - 0x64]
push ebx
add edx, edi
mov eax, dword [ebp - 0x74]
push 3
sar eax, 6
mov ecx, dword [ebp - 0x5c]
push 0xf
add al, byte [ebx + edx + 0x32e]
mov edx, dword [ebp - 0x60]
movzx eax, al
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
mov al, byte [ebp - 0x70]
add al, byte [ebp - 0x66]
add esp, 0x20
and eax, 0x3f
push ebx
mov ecx, dword [ebp - 0x5c]
mov edx, dword [ebp - 0x60]
push 6
push 8
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
push ebx
mov al, byte [ebp - 0x70]
add al, byte [ebp - 0x75]
push 6
and eax, 0x3f
mov ecx, dword [ebp - 0x5c]
push 0
mov edx, dword [ebp - 0x60]
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
inc byte [ebp - 0x65]
add esp, 0x20

loc_fffbdff3:
mov al, byte [ebp - 0x65]
cmp al, byte [edi + 0x20b5]
jb loc_fffbdeb5  ; jb 0xfffbdeb5
sub esp, 0xc
mov ecx, dword [ebp - 0x60]
push dword [ebp - 0x5c]
lea edx, [ebp - 0x47]
mov eax, edi
call fcn_fffbdcf9  ; call 0xfffbdcf9
add esp, 0x10
test eax, eax
mov ebx, eax
jne loc_fffbe1bd  ; jne 0xfffbe1bd
sub esp, 0xc
lea eax, [ebp - 0x48]
push eax
movzx edx, byte [edi + 0x20b5]
lea ecx, [ebp - 0x49]
lea eax, [ebp - 0x47]
call fcn_fffb9a02  ; call 0xfffb9a02
mov al, byte [ebp - 0x49]
sub eax, dword [ebp - 0x48]
add esp, 0xc
mov ecx, dword [ebp - 0x60]
movzx eax, al
lea edx, [ebp - 0x47]
push eax
mov al, byte [ebp - 0x76]
sub al, byte [ebp - 0x77]
movzx eax, al
push eax
push dword [ebp - 0x5c]
mov eax, edi
call fcn_fffbddb1  ; call 0xfffbddb1
add esp, 0x10
jmp near loc_fffbe1bd  ; jmp 0xfffbe1bd

loc_fffbe06a:
imul ebx, dword [ebp - 0x60], 0x1055
imul esi, dword [ebp - 0x5c], 0x2f
sub esp, 0xc
add esi, ebx
mov ecx, dword [ebp - 0x60]
add esi, edi
mov edx, dword [ebp - 0x5c]
movzx eax, byte [esi + 0x7a]
push eax
mov eax, edi
call fcn_fffbb521  ; call 0xfffbb521
movzx eax, byte [esi + 0x7b]
mov ecx, dword [ebp - 0x60]
mov dword [esp], eax
mov edx, dword [ebp - 0x5c]
mov eax, edi
call fcn_fffbb5d0  ; call 0xfffbb5d0
imul esi, dword [ebp - 0x5c], 0x24
add esp, 0x10
mov byte [ebp - 0x65], 0
mov dword [ebp - 0x6c], esi
mov dword [ebp - 0x64], ebx
jmp near loc_fffbe1a9  ; jmp 0xfffbe1a9

loc_fffbe0b8:
mov eax, dword [ebp - 0x6c]
add eax, dword [ebp - 0x64]
movzx ebx, byte [ebp - 0x65]
add eax, edi
mov ecx, dword [ebp - 0x5c]
mov edx, dword [ebp - 0x60]
movzx esi, byte [ebx + eax + 0x2b0]
lea eax, [ebx + ebx*2]
push ebx
add eax, dword [ebp - 0x6c]
add eax, dword [ebp - 0x64]
push 6
and esi, 0xff
push 0
movzx eax, byte [edi + eax + 0x295]
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
push ebx
mov ecx, dword [ebp - 0x5c]
mov edx, dword [ebp - 0x60]
push 1
mov eax, edi
push 0x13
push esi
lea esi, [ebx + ebx*4]
call fcn_fffbfdae  ; call 0xfffbfdae
imul eax, dword [ebp - 0x5c], 0x2d
mov dword [ebp - 0x70], esi
add eax, esi
add eax, dword [ebp - 0x64]
add esp, 0x20
mov ecx, dword [ebp - 0x5c]
mov edx, dword [ebp - 0x60]
movzx esi, byte [edi + eax + 0x109]
imul eax, dword [ebp - 0x5c], 0x12
add eax, dword [ebp - 0x64]
push ebx
add eax, edi
and esi, 0xff
push 3
push 0xf
movzx eax, byte [ebx + eax + 0x32e]
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
push ebx
mov ecx, dword [ebp - 0x5c]
mov edx, dword [ebp - 0x60]
push 6
mov eax, edi
push 8
push esi
call fcn_fffbfdae  ; call 0xfffbfdae
imul eax, dword [ebp - 0x5c], 0x2f
add eax, dword [ebp - 0x70]
add eax, dword [ebp - 0x64]
add esp, 0x20
add eax, edi
mov ecx, dword [ebp - 0x5c]
mov edx, dword [ebp - 0x60]
movzx esi, byte [eax + 0x4f]
push ebx
and esi, 0xff
push 3
push 0x10
movzx eax, byte [eax + 0x51]
push eax
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
push ebx
mov ecx, dword [ebp - 0x5c]
mov edx, dword [ebp - 0x60]
push 6
mov eax, edi
push 0
push esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
inc byte [ebp - 0x65]
add esp, 0x20

loc_fffbe1a9:
mov al, byte [ebp - 0x65]
cmp al, byte [edi + 0x20b5]
jb loc_fffbe0b8  ; jb 0xfffbe0b8
jmp near loc_fffbde40  ; jmp 0xfffbde40

loc_fffbe1bd:
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffbe1c7:
db 0x00

fcn_fffbe1c8:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x3c]
mov ebx, dword [ebp + 8]
mov eax, dword [ebx + 0x2223]
mov edx, dword [eax + 0x5e04]
and dl, 0xf
je short loc_fffbe244  ; je 0xfffbe244
mov edx, dword [eax + 0x4020]
or edx, 0x10000000
mov dword [eax + 0x4020], edx
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x4420]
or eax, 0x10000000
mov dword [edx + 0x4420], eax
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4c34], 0
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4c38], 0
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4c3c], 0
jmp near loc_fffbe9f4  ; jmp 0xfffbe9f4

loc_fffbe244:  ; not directly referenced
cmp dword [ebx + 0x20ba], 0
mov eax, dword [ebx + 0x20b6]
jne loc_fffbe2f6  ; jne 0xfffbe2f6
cmp eax, 0x640
je short loc_fffbe2bd  ; je 0xfffbe2bd
ja short loc_fffbe27f  ; ja 0xfffbe27f
cmp eax, 0x42b
je loc_fffbe2ef  ; je 0xfffbe2ef
cmp eax, 0x535
je short loc_fffbe2b3  ; je 0xfffbe2b3
cmp eax, 0x320
jne loc_fffbe369  ; jne 0xfffbe369
jmp short loc_fffbe2a9  ; jmp 0xfffbe2a9

loc_fffbe27f:  ; not directly referenced
cmp eax, 0x855
je short loc_fffbe2d1  ; je 0xfffbe2d1
ja short loc_fffbe295  ; ja 0xfffbe295
cmp eax, 0x74b
jne loc_fffbe369  ; jne 0xfffbe369
jmp short loc_fffbe2c7  ; jmp 0xfffbe2c7

loc_fffbe295:  ; not directly referenced
cmp eax, 0x960
je short loc_fffbe2db  ; je 0xfffbe2db
cmp eax, 0xa6b
jne loc_fffbe369  ; jne 0xfffbe369
jmp short loc_fffbe2e5  ; jmp 0xfffbe2e5

loc_fffbe2a9:  ; not directly referenced
mov eax, 3
jmp near loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe2b3:  ; not directly referenced
mov eax, 5
jmp near loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe2bd:  ; not directly referenced
mov eax, 6
jmp near loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe2c7:  ; not directly referenced
mov eax, 7
jmp near loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe2d1:  ; not directly referenced
mov eax, 8
jmp near loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe2db:  ; not directly referenced
mov eax, 9
jmp near loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe2e5:  ; not directly referenced
mov eax, 0xa
jmp near loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe2ef:  ; not directly referenced
mov eax, 4
jmp short loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe2f6:  ; not directly referenced
cmp eax, 0x7d0
je short loc_fffbe346  ; je 0xfffbe346
ja short loc_fffbe316  ; ja 0xfffbe316
cmp eax, 0x640
je short loc_fffbe36d  ; je 0xfffbe36d
cmp eax, 0x708
je short loc_fffbe33f  ; je 0xfffbe33f
cmp eax, 0x578
jne short loc_fffbe369  ; jne 0xfffbe369
jmp short loc_fffbe338  ; jmp 0xfffbe338

loc_fffbe316:  ; not directly referenced
cmp eax, 0x960
je short loc_fffbe354  ; je 0xfffbe354
ja short loc_fffbe328  ; ja 0xfffbe328
cmp eax, 0x898
jne short loc_fffbe369  ; jne 0xfffbe369
jmp short loc_fffbe34d  ; jmp 0xfffbe34d

loc_fffbe328:  ; not directly referenced
cmp eax, 0xa28
je short loc_fffbe35b  ; je 0xfffbe35b
cmp eax, 0xaf0
jne short loc_fffbe369  ; jne 0xfffbe369
jmp short loc_fffbe362  ; jmp 0xfffbe362

loc_fffbe338:  ; not directly referenced
mov eax, 0x107
jmp short loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe33f:  ; not directly referenced
mov eax, 0x109
jmp short loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe346:  ; not directly referenced
mov eax, 0x10a
jmp short loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe34d:  ; not directly referenced
mov eax, 0x10b
jmp short loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe354:  ; not directly referenced
mov eax, 0x10c
jmp short loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe35b:  ; not directly referenced
mov eax, 0x10d
jmp short loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe362:  ; not directly referenced
mov eax, 0x10e
jmp short loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe369:  ; not directly referenced
xor eax, eax
jmp short loc_fffbe372  ; jmp 0xfffbe372

loc_fffbe36d:  ; not directly referenced
mov eax, 0x108

loc_fffbe372:  ; not directly referenced
movzx esi, ax
cmp word [ebx + 0x22e2], 0
je short loc_fffbe3cf  ; je 0xfffbe3cf
mov eax, dword [ebx + 0x2248]
sub esp, 0xc
lea ecx, [ebp - 0x1c]
mov edx, dword [eax]
push ecx
push 0
push 0
push ref_fffcfb1c  ; push 0xfffcfb1c
push eax
call dword [edx + 0x20]  ; ucall
add esp, 0x20
test eax, eax
js short loc_fffbe3cf  ; js 0xfffbe3cf
mov edi, dword [ebp - 0x1c]
mov eax, dword [edi + 9]
movzx edx, byte [eax + 3]
movzx eax, byte [eax + 4]
mov esi, edx
shl esi, 8
or esi, eax
call fcn_fffc038a  ; call 0xfffc038a
mov dword [ebx + 0x20b6], eax
mov eax, dword [edi + 9]
movzx eax, byte [eax + 3]
mov dword [ebx + 0x20ba], eax

loc_fffbe3cf:  ; not directly referenced
mov eax, dword [ebx + 0x2223]
or esi, 0x80000000
mov dword [eax + 0x5e00], esi
jmp short loc_fffbe3e9  ; jmp 0xfffbe3e9

loc_fffbe3e3:  ; not directly referenced
mov esi, dword [eax + 0x5e00]

loc_fffbe3e9:  ; not directly referenced
test esi, esi
mov eax, dword [ebx + 0x2223]
js short loc_fffbe3e3  ; js 0xfffbe3e3
mov eax, dword [eax + 0x5e04]
movzx edx, ah
and eax, 0xff
call fcn_fffc038a  ; call 0xfffc038a
mov edx, dword [ebx + 0x20b6]
cmp eax, edx
jae short loc_fffbe437  ; jae 0xfffbe437
test eax, eax
je loc_fffbe9ea  ; je 0xfffbe9ea
sub esp, 0xc
mov dword [ebx + 0x20b6], eax
push ebx
call fcn_fffc292c  ; call 0xfffc292c
add esp, 0x10
test eax, eax
jne loc_fffbe9ea  ; jne 0xfffbe9ea
jmp near loc_fffbe9f4  ; jmp 0xfffbe9f4

loc_fffbe437:  ; not directly referenced
cmp edx, eax
jb loc_fffbe9ea  ; jb 0xfffbe9ea
test eax, eax
je loc_fffbe9ea  ; je 0xfffbe9ea
jmp near loc_fffbe9f4  ; jmp 0xfffbe9f4

loc_fffbe44c:  ; not directly referenced
xor edx, edx
mov ecx, 1
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffbe48a  ; je 0xfffbe48a
cmp byte [ebx + 0x2198], 0x10
jbe short loc_fffbe48a  ; jbe 0xfffbe48a
mov byte [ebx + 0x21b9], 0
mov byte [ebx + 0x21ba], 0
mov byte [ebx + 0x21bb], 0
mov byte [ebx + 0x21bc], 0
mov byte [ebx + 0x21bd], 0

loc_fffbe48a:  ; not directly referenced
mov ecx, 1
mov edx, 2
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffbe4cb  ; je 0xfffbe4cb
cmp byte [ebx + 0x21de], 0x10
jbe short loc_fffbe4cb  ; jbe 0xfffbe4cb
mov byte [ebx + 0x21ff], 0
mov byte [ebx + 0x2200], 0
mov byte [ebx + 0x2201], 0
mov byte [ebx + 0x2202], 0
mov byte [ebx + 0x2203], 0

loc_fffbe4cb:  ; not directly referenced
mov eax, ebx
mov edi, ebx
call fcn_fffba3ca  ; call 0xfffba3ca
mov eax, dword [ebx + 0x2223]
mov esi, ebx
mov dword [eax + 0x5034], 0x1060000
mov eax, ebx
call fcn_fffbfbe4  ; call 0xfffbfbe4
mov dword [ebp - 0x2c], 0

loc_fffbe4f4:  ; not directly referenced
cmp byte [esi + 0x3a], 0
jne loc_fffbe962  ; jne 0xfffbe962
jmp near loc_fffbe61a  ; jmp 0xfffbe61a

loc_fffbe503:  ; not directly referenced
mov edx, dword [ebp - 0x2c]
mov eax, ebx
call fcn_fffbf447  ; call 0xfffbf447
test eax, eax
je short loc_fffbe53d  ; je 0xfffbe53d

loc_fffbe511:  ; not directly referenced
mov byte [esi + 0x3a], 0
mov dword [esi + 0xa], 0
mov dword [esi + 0x27], 0
mov dword [esi], 0
mov dword [esi + 0x1d], 0
mov byte [esi + 0x12], 0
mov byte [esi + 0x2f], 0
jmp near loc_fffbe61a  ; jmp 0xfffbe61a

loc_fffbe53d:  ; not directly referenced
mov al, byte [ebp - 0x2c]
mov edx, dword [ebx + 0x2223]
cmp al, 1
mov byte [ebp - 0x38], al
movzx ecx, byte [ebx + 0x20ae]
sbb eax, eax
mov dword [ebp - 0x34], ecx
and eax, 0xfffffc00
mov ecx, 0x1f
lea eax, [edx + eax + 0x440c]
mov eax, dword [eax]
and eax, 0xffffffe0
cmp dword [ebp - 0x34], 0x1f
cmovbe ecx, dword [ebp - 0x34]
or eax, ecx
movzx ecx, byte [ebx + 0x20af]
cmp ecx, 7
mov dword [ebp - 0x30], ecx
jbe short loc_fffbe58a  ; jbe 0xfffbe58a
or al, 0xe0
jmp short loc_fffbe594  ; jmp 0xfffbe594

loc_fffbe58a:  ; not directly referenced
mov ecx, dword [ebp - 0x30]
and al, 0x1f
shl ecx, 5
or eax, ecx

loc_fffbe594:  ; not directly referenced
movzx ecx, byte [ebx + 0x20b0]
and ah, 0xf0
shl ecx, 8
or eax, ecx
cmp byte [ebp - 0x38], 1
sbb ecx, ecx
and ecx, 0xfffffc00
lea edx, [edx + ecx + 0x440c]
mov dword [edx], eax
mov edx, ecx
add edx, 0x4414
add edx, dword [ebx + 0x2223]
mov eax, dword [edx]
mov ecx, eax
or ch, 0x20
cmp dword [ebp - 0x34], 0x20
cmovae eax, ecx
mov ecx, eax
or ch, 0x10
cmp dword [ebp - 0x30], 8
cmovae eax, ecx
sub esp, 0xc
mov dword [edx], eax
mov dword [esi + 0x19], 8
mov dword [esi + 0x36], 8
mov ecx, dword [ebp - 0x2c]
push 8
xor edx, edx
mov eax, ebx
call fcn_fffc0316  ; call 0xfffc0316
mov ecx, dword [ebp - 0x2c]
mov edx, 2
mov eax, ebx
mov dword [esp], 8
call fcn_fffc0316  ; call 0xfffc0316
add esp, 0x10

loc_fffbe61a:  ; not directly referenced
inc dword [ebp - 0x2c]
add esi, 0x1055
cmp dword [ebp - 0x2c], 2
jne loc_fffbe4f4  ; jne 0xfffbe4f4
cmp byte [ebx + 0x3a], 0
jne loc_fffbe979  ; jne 0xfffbe979

loc_fffbe637:  ; not directly referenced
cmp byte [ebx + 0x108f], 0
jne loc_fffbe9a4  ; jne 0xfffbe9a4

loc_fffbe644:  ; not directly referenced
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4e80], 0x5500
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4c20], 0x10100005
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4f8c], 0x551d1519
mov eax, ebx
call fcn_fffbb2be  ; call 0xfffbb2be
mov ecx, 0x35
mov dword [ebp - 0x38], 0x5004
rdmsr
mov dword [ebp - 0x34], 0
mov dword [ebp - 0x40], eax
shr dword [ebp - 0x40], 0x10

loc_fffbe697:  ; not directly referenced
mov eax, dword [ebx + 0x221f]
mov eax, dword [eax + 0xe4]
test ah, 0x40
jne short loc_fffbe700  ; jne 0xfffbe700

loc_fffbe6a8:  ; not directly referenced
mov esi, dword [ebx + 0x107c]
mov eax, dword [ebx + 0x105f]
mov dword [ebp - 0x2c], eax
mov al, byte [ebp - 0x2c]
mov edx, dword [ebx + 0x27]
mov ecx, dword [ebx + 0xa]
shl eax, 2
mov dword [ebp - 0x30], edx
mov dword [ebp - 0x3c], ecx
mov dl, byte [ebx + 0x227c]
shl edx, 2
lea ecx, [esi*8]
or eax, ecx
mov cl, byte [ebp - 0x30]
or dl, byte [ebx + 0x2278]
add ecx, ecx
movzx edx, dl
or ecx, dword [ebp - 0x3c]
or eax, ecx
not edx
movzx eax, al
test edx, eax
je loc_fffbe77f  ; je 0xfffbe77f
jmp near loc_fffbe793  ; jmp 0xfffbe793

loc_fffbe700:  ; not directly referenced
cmp dword [ebx + 0x27], 0
mov eax, dword [ebp - 0x40]
je short loc_fffbe72f  ; je 0xfffbe72f
cmp dword [ebx + 0xa], 0
je short loc_fffbe72f  ; je 0xfffbe72f
cmp ax, 2
je loc_fffbe958  ; je 0xfffbe958
mov esi, dword [ebx]
cmp dword [ebx + 0x1d], esi
jb short loc_fffbe728  ; jb 0xfffbe728
mov dword [ebx], 0
jmp short loc_fffbe72f  ; jmp 0xfffbe72f

loc_fffbe728:  ; not directly referenced
mov dword [ebx + 0x1d], 0

loc_fffbe72f:  ; not directly referenced
cmp dword [ebx + 0x107c], 0
je loc_fffbe6a8  ; je 0xfffbe6a8
cmp dword [ebx + 0x105f], 0
je loc_fffbe6a8  ; je 0xfffbe6a8
cmp ax, 2
je loc_fffbe958  ; je 0xfffbe958
mov eax, dword [ebx + 0x1055]
cmp dword [ebx + 0x1072], eax
jae short loc_fffbe770  ; jae 0xfffbe770
mov dword [ebx + 0x1072], 0
jmp near loc_fffbe6a8  ; jmp 0xfffbe6a8

loc_fffbe770:  ; not directly referenced
mov dword [ebx + 0x1055], 0
jmp near loc_fffbe6a8  ; jmp 0xfffbe6a8

loc_fffbe77f:  ; not directly referenced
mov dword [ebx + 0x2278], 0
mov dword [ebx + 0x227c], 0

loc_fffbe793:  ; not directly referenced
mov eax, dword [ebx + 0x2278]
test eax, eax
je short loc_fffbe7c6  ; je 0xfffbe7c6
mov edx, eax
and edx, 0xfffffffd
dec edx
jne short loc_fffbe7b1  ; jne 0xfffbe7b1
cmp dword [ebp - 0x3c], 0
je short loc_fffbe7b1  ; je 0xfffbe7b1
mov dword [ebx], 0

loc_fffbe7b1:  ; not directly referenced
lea edx, [eax - 2]
cmp edx, 1
ja short loc_fffbe7c6  ; ja 0xfffbe7c6
cmp dword [ebp - 0x30], 0
je short loc_fffbe7c6  ; je 0xfffbe7c6
mov dword [ebx + 0x1d], 0

loc_fffbe7c6:  ; not directly referenced
mov edx, dword [ebx + 0x227c]
test edx, edx
je short loc_fffbe7fe  ; je 0xfffbe7fe
mov ecx, edx
and ecx, 0xfffffffd
dec ecx
jne short loc_fffbe7e8  ; jne 0xfffbe7e8
cmp dword [ebp - 0x2c], 0
je short loc_fffbe7e8  ; je 0xfffbe7e8
mov dword [ebx + 0x1055], 0

loc_fffbe7e8:  ; not directly referenced
lea ecx, [edx - 2]
cmp ecx, 1
ja short loc_fffbe7fe  ; ja 0xfffbe7fe
test esi, esi
je short loc_fffbe7fe  ; je 0xfffbe7fe
mov dword [ebx + 0x1072], 0

loc_fffbe7fe:  ; not directly referenced
mov dword [ebx + 0x20ff], eax
mov dword [ebx + 0x2103], edx
mov eax, dword [edi]
mov edx, dword [edi + 0x1d]
test eax, eax
mov dword [ebp - 0x2c], edx
jne short loc_fffbe824  ; jne 0xfffbe824
movzx edx, word [ebx + 0x20f6]
cmp edx, dword [ebp - 0x2c]
jae short loc_fffbe824  ; jae 0xfffbe824
jmp short loc_fffbe882  ; jmp 0xfffbe882

loc_fffbe824:  ; not directly referenced
cmp dword [ebp - 0x2c], 0
jne short loc_fffbe837  ; jne 0xfffbe837
movzx edx, word [ebx + 0x20f6]
cmp edx, eax
jae short loc_fffbe837  ; jae 0xfffbe837
jmp short loc_fffbe897  ; jmp 0xfffbe897

loc_fffbe837:  ; not directly referenced
mov cx, word [ebx + 0x20f6]
mov esi, dword [ebp - 0x2c]
movzx edx, cx
add esi, eax
cmp edx, esi
jae short loc_fffbe899  ; jae 0xfffbe899
shr cx, 1
movzx esi, ax
mov dword [ebp - 0x44], esi
movzx esi, word [ebp - 0x2c]
mov dword [ebp - 0x3c], esi
cmp eax, dword [ebp - 0x2c]
mov word [ebp - 0x30], cx
mov esi, dword [ebp - 0x44]
movzx ecx, cx
cmovae esi, dword [ebp - 0x3c]
cmp ecx, esi
jg short loc_fffbe876  ; jg 0xfffbe876
mov dword [edi + 0x1d], ecx
mov dword [edi], ecx
jmp short loc_fffbe899  ; jmp 0xfffbe899

loc_fffbe876:  ; not directly referenced
cmp word [ebp - 0x30], ax
jbe short loc_fffbe887  ; jbe 0xfffbe887
mov dword [edi], 0

loc_fffbe882:  ; not directly referenced
mov dword [edi + 0x1d], edx
jmp short loc_fffbe899  ; jmp 0xfffbe899

loc_fffbe887:  ; not directly referenced
mov eax, dword [ebp - 0x2c]
cmp word [ebp - 0x30], ax
jbe short loc_fffbe899  ; jbe 0xfffbe899
mov dword [edi + 0x1d], 0

loc_fffbe897:  ; not directly referenced
mov dword [edi], edx

loc_fffbe899:  ; not directly referenced
mov edx, dword [edi]
cmp dword [edi + 0x1d], edx
ja short loc_fffbe8b5  ; ja 0xfffbe8b5
imul eax, dword [ebp - 0x34], 0x1055
lea ecx, [ebx + eax]
lea eax, [ebx + eax + 0x1d]
mov dword [ebp - 0x30], eax
xor eax, eax
jmp short loc_fffbe8ca  ; jmp 0xfffbe8ca

loc_fffbe8b5:  ; not directly referenced
imul edx, dword [ebp - 0x34], 0x1055
mov eax, 0x10000
lea ecx, [ebx + edx + 0x1d]
add edx, ebx
mov dword [ebp - 0x30], edx

loc_fffbe8ca:  ; not directly referenced
mov dl, byte [ecx + 0x12]
test dl, dl
mov byte [ebp - 0x2c], dl
je short loc_fffbe8ff  ; je 0xfffbe8ff
mov esi, dword [ecx]
xor al, al
shr esi, 8
mov cl, byte [ecx + 0x14]
shr cl, 3
or eax, esi
movzx esi, dl
and eax, 0xfffdffff
movzx ecx, cl
dec esi
shl esi, 0x11
dec ecx
shl ecx, 0x13
or eax, esi
and eax, 0xfff7ffff
or eax, ecx

loc_fffbe8ff:  ; not directly referenced
mov ecx, dword [ebp - 0x30]
movzx esi, byte [ecx + 0x12]
mov edx, esi
test dl, dl
je short loc_fffbe93b  ; je 0xfffbe93b
mov edx, ecx
mov ecx, dword [ecx]
xor ah, ah
xor cl, cl
and esi, 0xff
or eax, ecx
dec esi
and eax, 0xfffbffff
shl esi, 0x12
mov dl, byte [edx + 0x14]
shr dl, 3
or eax, esi
movzx edx, dl
and eax, 0xffefffff
dec edx
shl edx, 0x14
or eax, edx

loc_fffbe93b:  ; not directly referenced
cmp byte [edi + 0x3a], 0
jne loc_fffbe9d5  ; jne 0xfffbe9d5
jmp near loc_fffbea99  ; jmp 0xfffbea99

loc_fffbe94a:  ; not directly referenced
mov eax, ebx
call fcn_fffbf908  ; call 0xfffbf908
xor eax, eax
jmp near loc_fffbeab5  ; jmp 0xfffbeab5

loc_fffbe958:  ; not directly referenced
mov eax, 0x11
jmp near loc_fffbeab5  ; jmp 0xfffbeab5

loc_fffbe962:  ; not directly referenced
mov edx, dword [ebp - 0x2c]
mov eax, ebx
call fcn_fffbf510  ; call 0xfffbf510
test eax, eax
jne loc_fffbe511  ; jne 0xfffbe511
jmp near loc_fffbe503  ; jmp 0xfffbe503

loc_fffbe979:  ; not directly referenced
xor edx, edx
mov eax, ebx
call fcn_fffbf618  ; call 0xfffbf618
xor edx, edx
mov eax, ebx
call fcn_fffbf5b2  ; call 0xfffbf5b2
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x4294]
or al, 0xff
mov dword [edx + 0x4294], eax
jmp near loc_fffbe637  ; jmp 0xfffbe637

loc_fffbe9a4:  ; not directly referenced
mov edx, 1
mov eax, ebx
call fcn_fffbf618  ; call 0xfffbf618
mov edx, 1
mov eax, ebx
call fcn_fffbf5b2  ; call 0xfffbf5b2
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x4694]
or al, 0xff
mov dword [edx + 0x4694], eax
jmp near loc_fffbe644  ; jmp 0xfffbe644

loc_fffbe9d5:  ; not directly referenced
mov edx, dword [ebp - 0x38]
add edx, dword [ebx + 0x2223]
or eax, 0x600000
mov dword [edx], eax
jmp near loc_fffbea99  ; jmp 0xfffbea99

loc_fffbe9ea:  ; not directly referenced
mov eax, 0xe
jmp near loc_fffbeab5  ; jmp 0xfffbeab5

loc_fffbe9f4:  ; not directly referenced
cmp dword [ebx + 0x20b6], 0x640
ja loc_fffbe4cb  ; ja 0xfffbe4cb
cmp byte [ebx + 0x3a], 0
je short loc_fffbea87  ; je 0xfffbea87
xor ecx, ecx
xor edx, edx
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffbea59  ; jne 0xfffbea59

loc_fffbea19:  ; not directly referenced
xor ecx, ecx
mov edx, 2
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffbea87  ; je 0xfffbea87
cmp byte [ebx + 0x2152], 0x10
jbe short loc_fffbea87  ; jbe 0xfffbea87
mov byte [ebx + 0x2173], 0
mov byte [ebx + 0x2174], 0
mov byte [ebx + 0x2175], 0
mov byte [ebx + 0x2176], 0
mov byte [ebx + 0x2177], 0
jmp short loc_fffbea87  ; jmp 0xfffbea87

loc_fffbea59:  ; not directly referenced
cmp byte [ebx + 0x210c], 0x10
jbe short loc_fffbea19  ; jbe 0xfffbea19
mov byte [ebx + 0x212d], 0
mov byte [ebx + 0x212e], 0
mov byte [ebx + 0x212f], 0
mov byte [ebx + 0x2130], 0
mov byte [ebx + 0x2131], 0
jmp short loc_fffbea19  ; jmp 0xfffbea19

loc_fffbea87:  ; not directly referenced
cmp byte [ebx + 0x108f], 0
jne loc_fffbe44c  ; jne 0xfffbe44c
jmp near loc_fffbe4cb  ; jmp 0xfffbe4cb

loc_fffbea99:  ; not directly referenced
inc dword [ebp - 0x34]
add dword [ebp - 0x38], 4
add edi, 0x1055
cmp dword [ebp - 0x34], 2
je loc_fffbe94a  ; je 0xfffbe94a
jmp near loc_fffbe697  ; jmp 0xfffbe697

loc_fffbeab5:  ; not directly referenced
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbeabd:
push ebp
mov ecx, dword [edx + 0x28]
shl ecx, 0x14
mov ebp, esp
mov dword [eax + 0xa0], ecx
mov ecx, dword [edx + 0x28]
shr ecx, 0xc
mov dword [eax + 0xa4], ecx
mov ecx, dword [edx + 4]
shl ecx, 0x14
mov dword [eax + 0xbc], ecx
mov ecx, dword [edx + 0x24]
shl ecx, 0x14
mov dword [eax + 0xa8], ecx
mov ecx, dword [edx + 0x24]
shr ecx, 0xc
mov dword [eax + 0xac], ecx
cmp dword [edx + 0x18], 0
je short loc_fffbeb32  ; je 0xfffbeb32
mov ecx, dword [edx + 0x1c]
shl ecx, 0x14
mov dword [eax + 0x90], ecx
mov ecx, dword [edx + 0x1c]
shr ecx, 0xc
mov dword [eax + 0x94], ecx
mov ecx, dword [edx + 0x20]
shl ecx, 0x14
mov dword [eax + 0x98], ecx
mov ecx, dword [edx + 0x20]
shr ecx, 0xc
mov dword [eax + 0x9c], ecx

loc_fffbeb32:
mov ecx, dword [edx + 0x14]
shl ecx, 0x14
mov dword [eax + 0xb8], ecx
mov ecx, dword [edx + 8]
shl ecx, 0x14
mov dword [eax + 0xb0], ecx
mov ecx, dword [edx + 0xc]
shl ecx, 0x14
mov dword [eax + 0xb4], ecx
mov dword [edx + 0x30], 0x10
mov ecx, 0x80000
mov dword [eax + 0x78], 0xff000800
sub ecx, dword [edx + 0x30]
shr ecx, 0xc
mov dword [eax + 0x7c], ecx
mov ecx, dword [edx + 0x2c]
shl ecx, 0x14
mov dword [eax + 0x70], ecx
mov ecx, dword [edx + 0x2c]
shr ecx, 0xc
mov dword [eax + 0x74], ecx
mov edx, dword [edx + 0x10]
mov dword [eax + 0x50], edx
pop ebp
ret

fcn_fffbeb8c:
push ebp
mov ebp, esp
push edi
push esi
push ebx
push edx
mov eax, dword [ebp + 0x1c]
cmp dword [ebp + 0x20], 1
sbb ecx, ecx
mov edi, dword [ebp + 8]
and ecx, 0xfffffc00
mov esi, dword [ebp + 0xc]
add ecx, 0x4420
mov ebx, dword [ebp + 0x10]
add ecx, dword [eax + 0x2223]
mov edx, dword [ecx]
and edx, 0xefffffff
cmp dword [ebp + 0x18], 1
mov dword [ebp - 0x10], edx
sbb edx, edx
and edx, 0x10000000
or edx, dword [ebp - 0x10]
cmp dword [ebp + 0x20], 0
mov dword [ecx], edx
mov edx, dword [eax + 0x2223]
jne short loc_fffbebff  ; jne 0xfffbebff
mov dword [edx + 0x4034], edi
mov edx, dword [eax + 0x2223]
mov dword [edx + 0x403c], esi
mov eax, dword [eax + 0x2223]
mov dword [eax + 0x4038], ebx
jmp short loc_fffbec1d  ; jmp 0xfffbec1d

loc_fffbebff:
mov dword [edx + 0x4434], edi
mov edx, dword [eax + 0x2223]
mov dword [edx + 0x443c], esi
mov eax, dword [eax + 0x2223]
mov dword [eax + 0x4438], ebx

loc_fffbec1d:
pop eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbec23:
push ebp
mov ebp, esp
push edi
push esi
xor esi, esi
push ebx
lea esp, [esp - 0x1c]
mov word [ebp - 0x1c], ax
mov word [ebp - 0x1e], dx
jmp short loc_fffbecb4  ; jmp 0xfffbecb4

loc_fffbec39:
lea eax, [ebp - 0x1c]
call fcn_fffc04e5  ; call 0xfffc04e5
mov edi, dword [ebp - 0x1c]
mov eax, edi
and eax, 0xf
mov byte [ebp - 0x1f], al
jmp short loc_fffbec61  ; jmp 0xfffbec61

loc_fffbec4e:
lea eax, [ebp - 0x1c]
call fcn_fffc04e5  ; call 0xfffc04e5
mov edi, dword [ebp - 0x1c]
mov ecx, edi
and ecx, 0xf
mov byte [ebp - 0x1f], cl

loc_fffbec61:
mov edx, edi
mov eax, edi
and edx, 0xf0
and eax, 0xf00
shr eax, 8
mov ebx, edi
shr edx, 4
shr bx, 0xc
cmp al, dl
sete byte [ebp - 0x19]
cmp bl, al
mov cl, byte [ebp - 0x19]
sete byte [ebp - 0x1a]
or cl, byte [ebp - 0x1a]
jne short loc_fffbec4e  ; jne 0xfffbec4e
test bl, bl
sete bl
cmp dl, byte [ebp - 0x1f]
sete cl
or bl, cl
jne short loc_fffbec4e  ; jne 0xfffbec4e
test dl, dl
sete dl
test al, al
sete al
or dl, al
jne short loc_fffbec4e  ; jne 0xfffbec4e
cmp byte [ebp - 0x1f], 0
je short loc_fffbec4e  ; je 0xfffbec4e
inc esi

loc_fffbecb4:
cmp si, word [ebp - 0x1e]
jne loc_fffbec39  ; jne 0xfffbec39
mov eax, dword [ebp - 0x1c]
lea esp, [esp + 0x1c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbecca:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
mov esi, edx
push ebx
and esi, 0xf000
xor ebx, ebx
shr esi, 0xc
lea esp, [esp - 0x4c]
mov dword [eax], 0
mov dword [eax + 4], 0
mov dword [eax + 8], 0
mov dword [eax + 0xc], 0

loc_fffbecfe:
movzx eax, dx
mov edx, 5
call fcn_fffbec23  ; call 0xfffbec23
movzx edx, ax
mov word [ebp - 0x48], ax
and eax, 0xf000
shr eax, 0xc
sete byte [ebp - 0x49]
cmp eax, esi
sete cl
or cl, byte [ebp - 0x49]
jne short loc_fffbed2f  ; jne 0xfffbed2f
mov byte [ebp + ebx - 0x2d], al
mov esi, eax
inc ebx

loc_fffbed2f:
cmp ebx, 0x14
jbe short loc_fffbecfe  ; jbe 0xfffbecfe
mov eax, dword [edi]
lea edx, [ebp - 0x2d]
mov ecx, 0x10
mov esi, 0xf

loc_fffbed43:
mov ebx, esi
shl ebx, cl
not ebx
and ebx, eax
movzx eax, byte [edx]
inc edx
shl eax, cl
sub ecx, 4
or eax, ebx
cmp ecx, 0xfffffffc
jne short loc_fffbed43  ; jne 0xfffbed43
and eax, 0x3ffff
lea edx, [ebp - 0x28]
mov dword [edi], eax
mov ecx, 0x1c
mov eax, dword [edi + 4]
mov esi, 0xf

loc_fffbed72:
mov ebx, esi
shl ebx, cl
not ebx
and ebx, eax
movzx eax, byte [edx]
inc edx
shl eax, cl
sub ecx, 4
or eax, ebx
cmp ecx, 0xfffffffc
jne short loc_fffbed72  ; jne 0xfffbed72
mov dword [edi + 4], eax
lea edx, [ebp - 0x20]
mov eax, dword [edi + 8]
mov ecx, 0x1c
mov esi, 0xf

loc_fffbed9d:
mov ebx, esi
shl ebx, cl
not ebx
and ebx, eax
movzx eax, byte [edx]
inc edx
shl eax, cl
sub ecx, 4
or eax, ebx
cmp ecx, 0xfffffffc
jne short loc_fffbed9d  ; jne 0xfffbed9d
mov dword [edi + 8], eax
mov eax, dword [ebp - 0x48]
lea esp, [esp + 0x4c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbedc4:  ; not directly referenced
push ebp
mov ebp, esp
lea esp, [esp - 8]
mov eax, dword [ebp + 8]
cmp dword [eax + 0x22c2], 1
jne short loc_fffbede6  ; jne 0xfffbede6
mov ecx, 2
mov edx, 1
call fcn_fffb2c38  ; call 0xfffb2c38

loc_fffbede6:  ; not directly referenced
xor eax, eax
leave
ret

fcn_fffbedea:  ; not directly referenced
push ebp
mov ebp, esp
lea esp, [esp - 8]
mov eax, dword [ebp + 8]
cmp dword [eax + 0x22c2], 1
jne short loc_fffbee31  ; jne 0xfffbee31
mov edx, dword [eax + 0x221f]
mov edx, dword [edx + 0xe4]
and dl, 2
je short loc_fffbee31  ; je 0xfffbee31
mov edx, dword [eax + 0x2223]
mov edx, dword [edx + 0xe3c]
and edx, 0x40000000
jne short loc_fffbee31  ; jne 0xfffbee31
mov ecx, 3
mov edx, 1
call fcn_fffb2c38  ; call 0xfffb2c38

loc_fffbee31:  ; not directly referenced
xor eax, eax
leave
ret

fcn_fffbee35:  ; not directly referenced
push ebp
mov ebp, esp
lea esp, [esp - 8]
mov eax, dword [ebp + 8]
cmp dword [eax + 0x22c2], 1
jne short loc_fffbee54  ; jne 0xfffbee54
mov ecx, 2
xor edx, edx
call fcn_fffb2c38  ; call 0xfffb2c38

loc_fffbee54:  ; not directly referenced
xor eax, eax
leave
ret

fcn_fffbee58:  ; not directly referenced
push ebp
mov ebp, esp
lea esp, [esp - 8]
mov eax, dword [ebp + 8]
cmp dword [eax + 0x22c2], 1
jne short loc_fffbee77  ; jne 0xfffbee77
mov ecx, 3
xor edx, edx
call fcn_fffb2c38  ; call 0xfffb2c38

loc_fffbee77:  ; not directly referenced
xor eax, eax
leave
ret

fcn_fffbee7b:  ; not directly referenced
push ebp
mov ebp, esp
lea esp, [esp - 8]
mov eax, dword [ebp + 8]
call fcn_fffc4539  ; call 0xfffc4539
xor eax, eax
leave
ret

fcn_fffbee8e:  ; not directly referenced
push ebp
mov ebp, esp
lea esp, [esp - 8]
mov eax, dword [ebp + 8]
cmp dword [eax + 0x22fd], 0
jne short loc_fffbeebc  ; jne 0xfffbeebc
cmp dword [eax + 0x20b1], 1
jne short loc_fffbeec1  ; jne 0xfffbeec1
cmp dword [eax + 0x225c], 1
jne short loc_fffbeebc  ; jne 0xfffbeebc
cmp dword [eax + 0x22d4], 0
je short loc_fffbeec1  ; je 0xfffbeec1

loc_fffbeebc:  ; not directly referenced
call fcn_fffb0e9a  ; call 0xfffb0e9a

loc_fffbeec1:  ; not directly referenced
xor eax, eax
leave
ret

fcn_fffbeec5:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x18]
mov dword [ebp - 0x14], edx
imul edx, edx, 0x1055
mov dword [ebp - 0x18], eax
add edx, eax
movzx eax, byte [edx + 0x36d]
movzx ebx, byte [edx + 0x36e]
shl eax, 6
add ebx, eax
mov word [ebp - 0x1e], bx
movzx ebx, byte [edx + 0x377]
shl ebx, 6
movzx esi, byte [edx + 0x378]
lea edi, [ebx + esi]
movzx ebx, byte [edx + 0x381]
movzx esi, byte [edx + 0x382]
shl ebx, 6
add esi, ebx
movzx ebx, byte [edx + 0x38b]
shl ebx, 6
mov word [ebp - 0xe], si
movzx esi, byte [edx + 0x38c]
add esi, ebx
cmp dword [edx + 0xa], 1
jne short loc_fffbef4d  ; jne 0xfffbef4d
cmp byte [edx + 0x12], 0
je short loc_fffbef4d  ; je 0xfffbef4d
jmp near loc_fffbefde  ; jmp 0xfffbefde

loc_fffbef43:
cmp byte [edx + 0x2f], 0
jne loc_fffbefed  ; jne 0xfffbefed

loc_fffbef4d:
mov word [ecx], 0

loc_fffbef52:
imul edx, dword [ebp - 0x14], 0x1055
add edx, dword [ebp - 0x18]
cmp dword [edx + 0xa], 1
jne short loc_fffbef77  ; jne 0xfffbef77
cmp byte [edx + 0x12], 0
je short loc_fffbef77  ; je 0xfffbef77
jmp near loc_fffbf016  ; jmp 0xfffbf016

loc_fffbef6d:
cmp byte [edx + 0x2f], 1
ja loc_fffbf025  ; ja 0xfffbf025

loc_fffbef77:
mov eax, dword [ebp + 8]
mov word [eax], 0

loc_fffbef7f:
imul eax, dword [ebp - 0x14], 0x1055
add eax, dword [ebp - 0x18]
cmp dword [eax + 0xa], 1
jne short loc_fffbefa4  ; jne 0xfffbefa4
cmp byte [eax + 0x12], 1
jbe short loc_fffbefa4  ; jbe 0xfffbefa4
jmp near loc_fffbf048  ; jmp 0xfffbf048

loc_fffbef9a:
cmp byte [eax + 0x2f], 0
jne loc_fffbf057  ; jne 0xfffbf057

loc_fffbefa4:
mov edx, dword [ebp + 0xc]
mov word [edx], 0

loc_fffbefac:
imul eax, dword [ebp - 0x14], 0x1055
add eax, dword [ebp - 0x18]
cmp dword [eax + 0xa], 1
jne short loc_fffbefd1  ; jne 0xfffbefd1
cmp byte [eax + 0x12], 1
jbe short loc_fffbefd1  ; jbe 0xfffbefd1
jmp near loc_fffbf07a  ; jmp 0xfffbf07a

loc_fffbefc7:
cmp byte [eax + 0x2f], 1
ja loc_fffbf089  ; ja 0xfffbf089

loc_fffbefd1:
mov ebx, dword [ebp + 0x10]
mov word [ebx], 0
jmp near loc_fffbf0a2  ; jmp 0xfffbf0a2

loc_fffbefde:
cmp dword [edx + 0x27], 1
jne loc_fffbef4d  ; jne 0xfffbef4d
jmp near loc_fffbef43  ; jmp 0xfffbef43

loc_fffbefed:
movzx edx, word [ebp - 0xe]
mov bx, word [ebp - 0xe]
mov dword [ebp - 0x24], edx
sub bx, word [ebp - 0x1e]
movzx eax, word [ebp - 0x1e]
mov dx, word [ebp - 0x1e]
sub dx, word [ebp - 0xe]
cmp eax, dword [ebp - 0x24]
cmovs edx, ebx
mov word [ecx], dx
jmp near loc_fffbef52  ; jmp 0xfffbef52

loc_fffbf016:
cmp dword [edx + 0x27], 1
jne loc_fffbef77  ; jne 0xfffbef77
jmp near loc_fffbef6d  ; jmp 0xfffbef6d

loc_fffbf025:
movzx ebx, word [ebp - 0x1e]
mov dx, word [ebp - 0x1e]
movzx ecx, si
sub edx, esi
mov eax, esi
sub ax, word [ebp - 0x1e]
cmp ebx, ecx
mov ebx, dword [ebp + 8]
cmovs edx, eax
mov word [ebx], dx
jmp near loc_fffbef7f  ; jmp 0xfffbef7f

loc_fffbf048:
cmp dword [eax + 0x27], 1
jne loc_fffbefa4  ; jne 0xfffbefa4
jmp near loc_fffbef9a  ; jmp 0xfffbef9a

loc_fffbf057:
movzx edx, word [ebp - 0xe]
mov bx, word [ebp - 0xe]
movzx ecx, di
sub ebx, edi
mov eax, edi
sub ax, word [ebp - 0xe]
cmp ecx, edx
mov edx, dword [ebp + 0xc]
cmovs eax, ebx
mov word [edx], ax
jmp near loc_fffbefac  ; jmp 0xfffbefac

loc_fffbf07a:
cmp dword [eax + 0x27], 1
jne loc_fffbefd1  ; jne 0xfffbefd1
jmp near loc_fffbefc7  ; jmp 0xfffbefc7

loc_fffbf089:
movzx ecx, di
mov eax, edi
movzx edx, si
mov ebx, esi
sub ebx, edi
sub eax, esi
cmp ecx, edx
cmovs eax, ebx
mov ebx, dword [ebp + 0x10]
mov word [ebx], ax

loc_fffbf0a2:
lea esp, [esp + 0x18]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbf0ab:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x2c]
mov al, byte [eax + 0x20b5]
mov byte [ebp - 0x25], al
mov dword [ebp - 0x24], edx
imul eax, edx, 0x1055
mov dword [ebp - 0x1c], 0
lea eax, [ebx + eax + 0x36e]
mov dword [ebp - 0x2c], eax
mov esi, eax
jmp short loc_fffbf152  ; jmp 0xfffbf152

loc_fffbf0de:
mov ecx, dword [ebp - 0x24]
mov edx, dword [ebp - 0x1c]
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffbf14c  ; je 0xfffbf14c
movzx eax, byte [esi - 1]
movzx edx, byte [esi]
shl eax, 6
mov edi, dword [ebp - 0x2c]
add eax, edx
mov dword [ebp - 0x20], 0
movzx eax, ax
mov dword [ebp - 0x30], eax
jmp short loc_fffbf144  ; jmp 0xfffbf144

loc_fffbf10d:
mov ecx, dword [ebp - 0x24]
mov edx, dword [ebp - 0x20]
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffbf13e  ; je 0xfffbf13e
movzx eax, byte [edi - 1]
movzx edx, byte [edi]
shl eax, 6
add eax, edx
mov edx, dword [ebp - 0x30]
movzx eax, ax
sub edx, eax
mov eax, edx
cdq
xor eax, edx
sub eax, edx
cmp eax, 0x33
jg short loc_fffbf176  ; jg 0xfffbf176

loc_fffbf13e:
inc dword [ebp - 0x20]
add edi, 0xa

loc_fffbf144:
mov al, byte [ebp - 0x20]
cmp byte [ebp - 0x25], al
ja short loc_fffbf10d  ; ja 0xfffbf10d

loc_fffbf14c:
inc dword [ebp - 0x1c]
add esi, 0xa

loc_fffbf152:
mov dl, byte [ebp - 0x1c]
cmp byte [ebp - 0x25], dl
ja short loc_fffbf0de  ; ja 0xfffbf0de
imul eax, dword [ebp - 0x24], 0x1055
add ebx, eax
mov ecx, dword [ebx + 0x19]
mov edx, dword [ebx + 0x36]
cmp ecx, edx
lea eax, [ecx - 6]
lea ebx, [edx - 6]
cmovbe eax, ebx
jmp short loc_fffbf178  ; jmp 0xfffbf178

loc_fffbf176:
xor eax, eax

loc_fffbf178:
lea esp, [esp + 0x2c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbf181:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
movzx eax, dl
push ebx
lea esp, [esp - 0x2c]
mov dword [ebp - 0x1c], eax
imul eax, eax, 0x1055
mov byte [ebp - 0x22], dl
mov dword [ebp - 0x2c], 0
mov dword [ebp - 0x28], 0
mov byte [ebp - 0x21], 0
mov dword [ebp - 0x34], eax
jmp near loc_fffbf3ed  ; jmp 0xfffbf3ed

loc_fffbf1b6:
mov eax, dword [ebp - 0x34]
add eax, edi
cmp byte [eax + 0x12], 2
jne loc_fffbf2ca  ; jne 0xfffbf2ca
cmp dword [eax + 0xa], 0
je loc_fffbf2ca  ; je 0xfffbf2ca
xor edx, edx
mov ecx, dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
push edx
movzx ebx, byte [ebp - 0x21]
xor ecx, ecx
push 3
mov esi, eax
mov edx, dword [ebp - 0x1c]
push 0x10
mov eax, edi
and esi, 0xff
push ebx
shl esi, 6
call fcn_fffbfee2  ; call 0xfffbfee2
mov dword [ebp - 0x20], eax
xor edx, edx
mov ecx, dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
movzx eax, al
add esp, 0xc
push 6
imul eax, eax, 0xffffffc0
xor ecx, ecx
push 0
add esi, eax
mov edx, dword [ebp - 0x1c]
push ebx
mov eax, edi
call fcn_fffbfee2  ; call 0xfffbfee2
mov edx, dword [ebp - 0x20]
mov ecx, dword [ebp - 0x1c]
shl edx, 6
add eax, edx
mov edx, 1
add eax, esi
mov dword [ebp - 0x20], eax
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
add esp, 0xc
mov esi, eax
push 3
mov ecx, 1
mov edx, dword [ebp - 0x1c]
push 0x10
mov eax, edi
and esi, 0xff
push ebx
shl esi, 6
call fcn_fffbfee2  ; call 0xfffbfee2
mov dword [ebp - 0x30], eax
mov ecx, dword [ebp - 0x1c]
mov edx, 1
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
movzx eax, al
add esp, 0xc
push 6
imul eax, eax, 0xffffffc0
mov ecx, 1
push 0
add esi, eax
mov edx, dword [ebp - 0x1c]
push ebx
mov eax, edi
mov ebx, 2
call fcn_fffbfee2  ; call 0xfffbfee2
mov edx, dword [ebp - 0x30]
shl edx, 6
add eax, edx
add esi, eax
mov eax, dword [ebp - 0x20]
cdq
idiv ebx
mov ecx, eax
mov eax, esi
cdq
idiv ebx
sub ecx, eax
add esp, 0x10
mov eax, ecx
sar eax, 0x1f
xor ecx, eax
sub ecx, eax
cmp dword [ebp - 0x28], ecx
cmovge ecx, dword [ebp - 0x28]
mov dword [ebp - 0x28], ecx

loc_fffbf2ca:
mov eax, dword [ebp - 0x34]
add eax, edi
cmp byte [eax + 0x2f], 2
jne loc_fffbf3ea  ; jne 0xfffbf3ea
cmp dword [eax + 0x27], 0
je loc_fffbf3ea  ; je 0xfffbf3ea
mov ecx, dword [ebp - 0x1c]
mov edx, 2
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
mov esi, eax
mov ecx, 2
push eax
movzx ebx, byte [ebp - 0x21]
mov edx, dword [ebp - 0x1c]
push 3
mov eax, edi
and esi, 0xff
push 0x10
shl esi, 6
push ebx
call fcn_fffbfee2  ; call 0xfffbfee2
mov dword [ebp - 0x20], eax
mov ecx, dword [ebp - 0x1c]
mov edx, 2
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
movzx eax, al
add esp, 0xc
push 6
imul eax, eax, 0xffffffc0
mov ecx, 2
push 0
add esi, eax
mov edx, dword [ebp - 0x1c]
push ebx
mov eax, edi
call fcn_fffbfee2  ; call 0xfffbfee2
mov edx, dword [ebp - 0x20]
mov ecx, dword [ebp - 0x1c]
shl edx, 6
add eax, edx
mov edx, 3
add eax, esi
mov dword [ebp - 0x20], eax
mov eax, edi
call fcn_fffbb4da  ; call 0xfffbb4da
add esp, 0xc
mov esi, eax
push 3
mov ecx, 3
mov edx, dword [ebp - 0x1c]
push 0x10
mov eax, edi
and esi, 0xff
push ebx
shl esi, 6
call fcn_fffbfee2  ; call 0xfffbfee2
mov dword [ebp - 0x30], eax
mov ecx, dword [ebp - 0x1c]
mov edx, 3
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
movzx eax, al
add esp, 0xc
push 6
imul eax, eax, 0xffffffc0
mov ecx, 3
push 0
add esi, eax
mov edx, dword [ebp - 0x1c]
push ebx
mov eax, edi
mov ebx, 2
call fcn_fffbfee2  ; call 0xfffbfee2
mov edx, dword [ebp - 0x30]
shl edx, 6
add eax, edx
add esi, eax
mov eax, dword [ebp - 0x20]
cdq
idiv ebx
mov ecx, eax
mov eax, esi
cdq
idiv ebx
sub ecx, eax
mov eax, ecx
sar eax, 0x1f
xor ecx, eax
sub ecx, eax
add esp, 0x10
cmp dword [ebp - 0x2c], ecx
cmovge ecx, dword [ebp - 0x2c]
mov dword [ebp - 0x2c], ecx

loc_fffbf3ea:
inc byte [ebp - 0x21]

loc_fffbf3ed:
mov al, byte [ebp - 0x21]
cmp al, byte [edi + 0x20b5]
jb loc_fffbf1b6  ; jb 0xfffbf1b6
mov eax, dword [ebp - 0x28]
xor edx, edx
sub eax, 0x18
mov ecx, dword [ebp - 0x2c]
cmovs eax, edx
add eax, 0x3f
sub ecx, 0x18
cmovns edx, ecx
movzx ecx, byte [ebp - 0x22]
add edx, 0x3f
imul ecx, ecx, 0x1055
sar eax, 6
add ecx, edi
sar edx, 6
mov ebx, dword [ecx + 0x19]
mov ecx, dword [ecx + 0x36]
lea eax, [ebx + eax - 6]
lea edx, [ecx + edx - 6]
cmp eax, edx
cmovle eax, edx
cmp al, 1
adc al, 0xff
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbf447:
push ebp
mov ecx, eax
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x18]
mov byte [ebp - 0x1f], dl
imul edx, edx, 0x1055
mov bl, byte [ecx + 0x20ad]
add edx, eax
mov byte [ebp - 0x1d], bl
mov al, byte [edx + 0x43]
mov byte [edx + 0x45], 3
movzx ebx, byte [edx + 0x44]
mov byte [ebp - 0x1c], al
mov al, byte [edx + 0x41]
mov dword [ebp - 0x24], ebx
movzx esi, byte [edx + 0x42]
mov byte [ebp - 0x1e], al
mov eax, ebx
sub eax, 0xa
cmp eax, 0x35
ja short loc_fffbf502  ; ja 0xfffbf502
mov dl, byte [edx + 0x3d]
mov eax, 4
lea edi, [edx - 5]
mov ebx, edi
cmp bl, 0xb
ja short loc_fffbf507  ; ja 0xfffbf507
and esi, 0xff
mov al, byte [ebp - 0x1c]
and eax, 0xf
mov ebx, dword [ebp - 0x24]
shl esi, 4
shl ebx, 0x10
or esi, eax
movzx eax, byte [ebp - 0x1d]
and esi, 0xfffff0ff
shl eax, 8
or ebx, 0xc0000000
shl edx, 0x18
or esi, eax
movzx eax, byte [ebp - 0x1e]
and esi, 0xffff0fff
shl eax, 0xc
or esi, eax
and esi, 0xff00ffff
or ebx, esi
or ebx, edx
cmp byte [ebp - 0x1f], 1
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4404
add eax, dword [ecx + 0x2223]
mov dword [eax], ebx
xor eax, eax
jmp short loc_fffbf507  ; jmp 0xfffbf507

loc_fffbf502:
mov eax, 4

loc_fffbf507:
lea esp, [esp + 0x18]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbf510:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x14]
mov byte [ebp - 0x1e], dl
imul edx, edx, 0x1055
add edx, eax
movzx esi, byte [edx + 0x3b]
lea ecx, [esi - 4]
cmp ecx, 0xb
ja short loc_fffbf5a2  ; ja 0xfffbf5a2
mov cl, byte [edx + 0x3e]
mov bl, byte [edx + 0x3f]
mov byte [ebp - 0x1c], cl
mov cl, byte [edx + 0x3c]
mov byte [ebp - 0x1d], bl
mov byte [ebp - 0x1f], cl
lea edi, [ecx - 5]
mov ebx, edi
cmp bl, 0xa
mov ecx, 3
ja short loc_fffbf5a7  ; ja 0xfffbf5a7
movzx ecx, byte [ebp - 0x1d]
mov bl, byte [ebp - 0x1c]
shl ecx, 4
and ebx, 0xf
shl esi, 8
or ecx, ebx
movzx ebx, byte [ebp - 0x1f]
and ch, 0xf0
shl ebx, 0xc
or ecx, esi
movzx edx, byte [edx + 0x40]
and ch, 0xf
shl edx, 0x10
or ecx, ebx
and ecx, 0xff00ffff
or ecx, edx
cmp byte [ebp - 0x1e], 1
sbb edx, edx
and edx, 0xfffffc00
add edx, 0x4400
add edx, dword [eax + 0x2223]
mov dword [edx], ecx
xor ecx, ecx
jmp short loc_fffbf5a7  ; jmp 0xfffbf5a7

loc_fffbf5a2:
mov ecx, 3

loc_fffbf5a7:
lea esp, [esp + 0x14]
mov eax, ecx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbf5b2:
push ebp
movzx ecx, byte [eax + 0x20ab]
mov ebp, esp
push esi
mov esi, 0x200
push ebx
mov ebx, ecx
sub esi, ecx
shl ebx, 0xc
mov ecx, 0x190
or bh, 2
and ebx, 0xfc00ffff
cmp esi, 0x190
cmovge ecx, esi
shl ecx, 0x10
or ecx, ebx
movzx ebx, byte [eax + 0x20aa]
and ecx, 0xfffffff
sub ebx, 8
shl ebx, 0x1c
or ecx, ebx
cmp dl, 1
sbb edx, edx
and edx, 0xfffffc00
add edx, 0x46a4
add edx, dword [eax + 0x2223]
mov dword [edx], ecx
pop ebx
pop esi
pop ebp
ret

fcn_fffbf618:
push ebp
mov ecx, dword [eax + 0x2e4d]
mov ebp, esp
push esi
mov esi, ecx
push ebx
mov bl, dl
lea ecx, [ecx + ecx*8]
imul edx, edx, 0x1055
and esi, 0xfe00ffff
movzx edx, word [eax + edx + 0x47]
shl edx, 0x10
shr ecx, 0xa
or edx, esi
shl ecx, 0x19
and edx, 0x1ffffff
or edx, ecx
cmp bl, 1
sbb ecx, ecx
and ecx, 0xfffffc00
add ecx, 0x4698
add ecx, dword [eax + 0x2223]
mov dword [ecx], edx
pop ebx
pop esi
pop ebp
ret

fcn_fffbf66b:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x8c]
cmp dword [eax + 0x22b3], 0
jne short loc_fffbf6df  ; jne 0xfffbf6df
mov dword [eax + 0x20f8], 0
mov dword [ebp - 0x1c], 0
push 0
mov dword [ebp - 0x2c], 0
mov dword [ebp - 0x28], 0
push eax
mov dword [ebp - 0x24], 0
lea esi, [ebp - 0x2c]
sub esp, 0x14
mov ecx, 5
mov edi, esp
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
call fcn_fffbeb8c  ; call 0xfffbeb8c
push 1
lea esi, [ebp - 0x2c]
mov ecx, 5
push ebx
sub esp, 0x14
mov edi, esp
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
call fcn_fffbeb8c  ; call 0xfffbeb8c
add esp, 0x38
jmp near loc_fffbf900  ; jmp 0xfffbf900

loc_fffbf6df:
mov eax, dword [eax + 0x225c]
cmp eax, 2
jne loc_fffbf84b  ; jne 0xfffbf84b
movzx eax, byte [ebx + 0x22bc]
mov edi, 0x14
movzx edx, byte [ebx + 0x22bb]
shl edx, 0x18
shl eax, 0x10
or eax, edx
movzx edx, byte [ebx + 0x22bd]
shl edx, 8
or eax, edx
movzx edx, byte [ebx + 0x22be]
or eax, edx
mov dword [ebp - 0x30], eax

loc_fffbf721:
lea eax, [ebp - 0x30]
call fcn_fffc04a8  ; call 0xfffc04a8
mov edx, dword [ebp - 0x30]
mov al, dl
and eax, 0xf
mov esi, eax
mov eax, edx
and eax, 0xf0
shr eax, 4
mov byte [ebp - 0x88], al
mov eax, edx
and eax, 0xf00
shr eax, 8
mov byte [ebp - 0x78], al
mov eax, edx
and eax, 0xf000
shr eax, 0xc
mov byte [ebp - 0x68], al
mov eax, edx
and eax, 0xf0000
shr eax, 0x10
mov byte [ebp - 0x58], al
mov eax, edx
and eax, 0xf00000
shr eax, 0x14
mov byte [ebp - 0x48], al
mov eax, edx
shr edx, 0x1c
and eax, 0xf000000
shr eax, 0x18
cmp al, byte [ebp - 0x48]
mov byte [ebp - 0x98], dl
sete cl
cmp byte [ebp - 0x98], al
sete dl
or cl, dl
jne short loc_fffbf721  ; jne 0xfffbf721
mov dl, byte [ebp - 0x68]
cmp byte [ebp - 0x58], dl
sete cl
mov dl, byte [ebp - 0x58]
cmp byte [ebp - 0x48], dl
sete dl
or cl, dl
jne loc_fffbf721  ; jne 0xfffbf721
mov dl, byte [ebp - 0x88]
cmp byte [ebp - 0x78], dl
sete cl
mov dl, byte [ebp - 0x78]
cmp byte [ebp - 0x68], dl
sete dl
or cl, dl
jne loc_fffbf721  ; jne 0xfffbf721
cmp byte [ebp - 0x98], 0
mov edx, esi
sete cl
cmp byte [ebp - 0x88], dl
sete dl
or cl, dl
jne loc_fffbf721  ; jne 0xfffbf721
cmp byte [ebp - 0x48], 0
sete dl
test al, al
sete al
or dl, al
jne loc_fffbf721  ; jne 0xfffbf721
cmp byte [ebp - 0x68], 0
sete al
cmp byte [ebp - 0x58], 0
sete dl
or al, dl
jne loc_fffbf721  ; jne 0xfffbf721
cmp byte [ebp - 0x88], 0
sete al
cmp byte [ebp - 0x78], 0
sete dl
or al, dl
jne loc_fffbf721  ; jne 0xfffbf721
mov eax, esi
test al, al
je loc_fffbf721  ; je 0xfffbf721
dec edi
jne loc_fffbf721  ; jne 0xfffbf721
movzx esi, word [ebp - 0x2e]
jmp short loc_fffbf86d  ; jmp 0xfffbf86d

loc_fffbf84b:
test eax, eax
sete cl
cmp eax, 3
sete dl
or cl, dl
jne short loc_fffbf85f  ; jne 0xfffbf85f
xor esi, esi
dec eax
jne short loc_fffbf874  ; jne 0xfffbf874

loc_fffbf85f:
mov esi, dword [ebx + 0x2284]
test esi, esi
je loc_fffbf900  ; je 0xfffbf900

loc_fffbf86d:
mov word [ebx + 0x20fc], si

loc_fffbf874:
mov eax, dword [ebx + 0x22b3]
mov edx, esi
mov dword [ebp - 0x20], eax
not edx
mov eax, dword [ebx + 0x22b7]
mov word [ebp - 0x48], dx
mov dword [ebp - 0x1c], eax
mov edx, esi
lea eax, [ebp - 0x2c]
call fcn_fffbecca  ; call 0xfffbecca
cmp dword [ebx + 0x2280], 1
jne short loc_fffbf8a9  ; jne 0xfffbf8a9
mov dword [ebx + 0x20f8], esi
jmp short loc_fffbf8b2  ; jmp 0xfffbf8b2

loc_fffbf8a9:
movzx eax, ax
mov dword [ebx + 0x20f8], eax

loc_fffbf8b2:
push ecx
lea esi, [ebp - 0x2c]
mov ecx, 5
push 0
push ebx
sub esp, 0x14
mov edi, esp
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
call fcn_fffbeb8c  ; call 0xfffbeb8c
add esp, 0x20
mov edx, 1
movzx eax, word [ebp - 0x48]
lea esi, [ebp - 0x2c]
call fcn_fffbec23  ; call 0xfffbec23
movzx edx, ax
mov eax, esi
call fcn_fffbecca  ; call 0xfffbecca
push edi
mov ecx, 5
push 1
push ebx
sub esp, 0x14
mov edi, esp
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
call fcn_fffbeb8c  ; call 0xfffbeb8c
add esp, 0x20

loc_fffbf900:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbf908:
push ebp
mov ebp, esp
push esi
push ebx
mov edx, dword [eax + 0x221f]
mov ecx, dword [eax + 0x1d]
mov esi, dword [eax + 0x1072]
add ecx, dword [eax]
add esi, dword [eax + 0x1055]
mov edx, dword [edx + 0xe4]
and dh, 0x10
jne short loc_fffbf93d  ; jne 0xfffbf93d
test esi, esi
sete bl
test ecx, ecx
sete dl
or bl, dl
je short loc_fffbf997  ; je 0xfffbf997

loc_fffbf93d:
cmp ecx, esi
jae short loc_fffbf964  ; jae 0xfffbf964
mov dword [eax], 0
mov dword [eax + 0x1d], 0
mov dword [eax + 0xa], 0
mov dword [eax + 0x27], 0
mov byte [eax + 0x3a], 0
xor ecx, ecx
jmp short loc_fffbf9c3  ; jmp 0xfffbf9c3

loc_fffbf964:
mov dword [eax + 0x1055], 0
mov dword [eax + 0x1072], 0
mov dword [eax + 0x105f], 0
mov dword [eax + 0x107c], 0
mov byte [eax + 0x108f], 0
xor esi, esi
jmp short loc_fffbf99b  ; jmp 0xfffbf99b

loc_fffbf997:
cmp esi, ecx
ja short loc_fffbf9c3  ; ja 0xfffbf9c3

loc_fffbf99b:
mov edx, esi
mov dword [eax + 0x49], 0
shl edx, 9
mov dword [eax + 0x109e], 1
shr esi, 8
xor dx, dx
shl esi, 0x18
mov ecx, 4
or edx, esi
jmp short loc_fffbf9e9  ; jmp 0xfffbf9e9

loc_fffbf9c3:
mov edx, ecx
mov dword [eax + 0x109e], 0
shl edx, 9
mov dword [eax + 0x49], 1
shr ecx, 8
xor dx, dx
shl ecx, 0x18
or edx, ecx
mov ecx, 1

loc_fffbf9e9:
mov ebx, dword [eax + 0x2223]
or ecx, 0x20
mov dword [ebx + 0x5000], ecx
mov eax, dword [eax + 0x2223]
mov dword [eax + 0x5014], edx
pop ebx
pop esi
pop ebp
ret

fcn_fffbfa08:  ; not directly referenced
push ebp
mov ecx, dword [0xfed000f0]
mov ebp, esp
add edx, ecx

loc_fffbfa13:  ; not directly referenced
cmp edx, ecx
mov eax, dword [0xfed000f0]
jbe short loc_fffbfa1e  ; jbe 0xfffbfa1e
jmp short loc_fffbfa22  ; jmp 0xfffbfa22

loc_fffbfa1e:  ; not directly referenced
cmp eax, ecx
jae short loc_fffbfa13  ; jae 0xfffbfa13

loc_fffbfa22:  ; not directly referenced
cmp eax, edx
jb short loc_fffbfa13  ; jb 0xfffbfa13
pop ebp
ret

fcn_fffbfa28:
push ebp
mov ebp, esp
push edi
mov edi, ecx
push esi
mov ecx, dword [ebp + 8]
add eax, dword [ebp + 0x14]
push ebx
mov ebx, 1
shl ebx, cl
mov cl, byte [ebp + 0xc]
shl dword [ebp + 0x10], cl
dec ebx
shl ebx, cl
not ebx
jmp short loc_fffbfa5d  ; jmp 0xfffbfa5d

loc_fffbfa4a:
mov ecx, dword [edx*4 + ref_fffcf5b0]  ; mov ecx, dword [edx*4 - 0x30a50]
inc edx
add ecx, eax
mov esi, dword [ecx]
and esi, ebx
or esi, dword [ebp + 0x10]
mov dword [ecx], esi

loc_fffbfa5d:
cmp edx, edi
jb short loc_fffbfa4a  ; jb 0xfffbfa4a
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbfa66:  ; not directly referenced
push ebp
mov ebp, esp
push esi
push ebx
cmp dword [eax + 0x2238], 4
mov ebx, dword [ebp + 8]
ja loc_fffbfb27  ; ja 0xfffbfb27
mov esi, dword [eax + 0x2238]
jmp dword [esi*4 + ref_fffcf270]  ; ujmp: jmp dword [esi*4 - 0x30d90]

loc_fffbfa88:  ; not directly referenced
movzx esi, cl
cmp cl, 1
movzx edx, dl
seta cl
movzx ecx, cl
imul ecx, ecx, 0x46
imul edx, edx, 0x8c
imul esi, esi, 6
add edx, ecx
add ebx, esi
cmp byte [eax + edx + 0x210e], 2
jne short loc_fffbfab3  ; jne 0xfffbfab3
jmp short loc_fffbfafc  ; jmp 0xfffbfafc

loc_fffbfab3:  ; not directly referenced
cmp dword [eax + 0x20b6], 0x535
jbe short loc_fffbfac1  ; jbe 0xfffbfac1
jmp short loc_fffbfaf3  ; jmp 0xfffbfaf3

loc_fffbfac1:  ; not directly referenced
lea eax, [ebx + ebx + ref_fffcf36c]  ; lea eax, [ebx + ebx - 0x30c94]
jmp short loc_fffbfb29  ; jmp 0xfffbfb29

loc_fffbfaca:  ; not directly referenced
movzx esi, cl
cmp cl, 1
movzx edx, dl
seta cl
movzx ecx, cl
imul ecx, ecx, 0x46
imul edx, edx, 0x8c
imul esi, esi, 6
add edx, ecx
add ebx, esi
cmp byte [eax + edx + 0x210e], 3
jne short loc_fffbfafc  ; jne 0xfffbfafc

loc_fffbfaf3:  ; not directly referenced
lea eax, [ebx + ebx + ref_fffcf2ac]  ; lea eax, [ebx + ebx - 0x30d54]
jmp short loc_fffbfb29  ; jmp 0xfffbfb29

loc_fffbfafc:  ; not directly referenced
lea eax, [ebx + ebx + ref_fffcf2dc]  ; lea eax, [ebx + ebx - 0x30d24]
jmp short loc_fffbfb29  ; jmp 0xfffbfb29

loc_fffbfb05:  ; not directly referenced
movzx ecx, cl
imul ecx, ecx, 6
add ebx, ecx
lea eax, [ebx + ebx + ref_fffcf33c]  ; lea eax, [ebx + ebx - 0x30cc4]
jmp short loc_fffbfb29  ; jmp 0xfffbfb29

loc_fffbfb16:  ; not directly referenced
movzx ecx, cl
imul ecx, ecx, 6
add ebx, ecx
lea eax, [ebx + ebx + ref_fffcf30c]  ; lea eax, [ebx + ebx - 0x30cf4]
jmp short loc_fffbfb29  ; jmp 0xfffbfb29

loc_fffbfb27:  ; not directly referenced
xor eax, eax

loc_fffbfb29:  ; not directly referenced
pop ebx
pop esi
pop ebp
ret

fcn_fffbfb2d:
push ebp
mov ebp, esp
push esi
push ebx
cmp dword [eax + 0x2238], 4
mov ebx, dword [ebp + 8]
ja loc_fffbfbd7  ; ja 0xfffbfbd7
mov esi, dword [eax + 0x2238]
jmp dword [esi*4 + ref_fffcf284]  ; ujmp: jmp dword [esi*4 - 0x30d7c]

loc_fffbfb4f:
movzx esi, cl
cmp cl, 1
movzx edx, dl
seta cl
movzx ecx, cl
imul ecx, ecx, 0x46
imul edx, edx, 0x8c
imul esi, esi, 6
add edx, ecx
add ebx, esi
cmp byte [eax + edx + 0x210e], 2
jne short loc_fffbfba3  ; jne 0xfffbfba3
jmp short loc_fffbfbac  ; jmp 0xfffbfbac

loc_fffbfb7a:
movzx esi, cl
cmp cl, 1
movzx edx, dl
seta cl
movzx ecx, cl
imul ecx, ecx, 0x46
imul edx, edx, 0x8c
imul esi, esi, 6
add edx, ecx
add ebx, esi
cmp byte [eax + edx + 0x210e], 3
jne short loc_fffbfbac  ; jne 0xfffbfbac

loc_fffbfba3:
lea eax, [ebx + ebx + ref_fffcf39c]  ; lea eax, [ebx + ebx - 0x30c64]
jmp short loc_fffbfbd9  ; jmp 0xfffbfbd9

loc_fffbfbac:
lea eax, [ebx + ebx + ref_fffcf3cc]  ; lea eax, [ebx + ebx - 0x30c34]
jmp short loc_fffbfbd9  ; jmp 0xfffbfbd9

loc_fffbfbb5:
movzx ecx, cl
imul ecx, ecx, 6
add ebx, ecx
lea eax, [ebx + ebx + ref_fffcf42c]  ; lea eax, [ebx + ebx - 0x30bd4]
jmp short loc_fffbfbd9  ; jmp 0xfffbfbd9

loc_fffbfbc6:
movzx ecx, cl
imul ecx, ecx, 6
add ebx, ecx
lea eax, [ebx + ebx + ref_fffcf3fc]  ; lea eax, [ebx + ebx - 0x30c04]
jmp short loc_fffbfbd9  ; jmp 0xfffbfbd9

loc_fffbfbd7:
xor eax, eax

loc_fffbfbd9:
pop ebx
pop esi
pop ebp
ret

fcn_fffbfbdd:  ; not directly referenced
push ebp
xor eax, eax
mov ebp, esp
pop ebp
ret

fcn_fffbfbe4:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
xor esi, esi
push ebx
mov ebx, eax
lea esp, [esp - 0x1c]

loc_fffbfbf4:
cmp byte [ebx + 0x3a], 0
jne short loc_fffbfc46  ; jne 0xfffbfc46
jmp short loc_fffbfc38  ; jmp 0xfffbfc38

loc_fffbfbfc:
cmp byte [ebx + 0x12], 1
sbb eax, eax
not eax
and eax, 0x20000

loc_fffbfc09:
cmp dword [ebx + 0x27], 1
jne short loc_fffbfc1e  ; jne 0xfffbfc1e
mov edx, eax
or edx, 0x4000000
cmp byte [ebx + 0x2f], 0
cmovne eax, edx

loc_fffbfc1e:
or ah, 0x40
cmp byte [ebp - 0x19], 1
sbb edx, edx
mov ecx, dword [edi + 0x2223]
xor dl, dl
lea edx, [edx + ecx + 0x330c]
mov dword [edx], eax

loc_fffbfc38:
inc esi
add ebx, 0x1055
cmp esi, 2
jne short loc_fffbfbf4  ; jne 0xfffbfbf4
jmp short loc_fffbfc7b  ; jmp 0xfffbfc7b

loc_fffbfc46:
imul eax, esi, 0x1055
add eax, edi
call fcn_fffbbf31  ; call 0xfffbbf31
mov edx, esi
mov ecx, dword [edi + 0x2223]
cmp dl, 1
mov byte [ebp - 0x19], dl
sbb edx, edx
shl eax, 0x18
xor dl, dl
lea edx, [edx + ecx + 0xd14]
mov dword [edx], eax
xor eax, eax
cmp dword [ebx + 0xa], 1
jne short loc_fffbfc09  ; jne 0xfffbfc09
jmp short loc_fffbfbfc  ; jmp 0xfffbfbfc

loc_fffbfc7b:
lea esp, [esp + 0x1c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbfc84:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
xor esi, esi
cmp cl, 3
push ebx
mov edi, dword [ebp + 8]
ja short loc_fffbfc9e  ; ja 0xfffbfc9e
movzx ecx, cl
movzx esi, byte [ecx + ref_fffcf298]  ; movzx esi, byte [ecx - 0x30d68]

loc_fffbfc9e:  ; not directly referenced
cmp dl, 1
mov ecx, dword [ebp + 0xc]
mov ebx, dword [ebp + 0x14]
sbb edx, edx
and edi, 0xff
not edx
and ecx, 0xffffffc0
or ecx, dword [ebp + 0x10]
and edx, 0x100
and ecx, 0xfff7ffff
add edx, esi
shl ebx, 0x13
or ebx, ecx
mov ecx, dword [edi*4 + ref_fffcf5b0]  ; mov ecx, dword [edi*4 - 0x30a50]
add ecx, dword [eax + 0x2223]
add ecx, edx
mov dword [ecx], ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbfce0:
push ebp
mov ecx, 1
mov ebp, esp
push esi
push ebx
mov ebx, eax
mov eax, dword [eax + 0x2223]
mov esi, dword [eax + 0x5030]
and esi, 0xffffffdf
mov edx, esi
or edx, 0x20
mov dword [eax + 0x5030], edx
mov edx, 0x14
mov eax, ebx
call fcn_fffc16ce  ; call 0xfffc16ce
test eax, eax
jne short loc_fffbfd36  ; jne 0xfffbfd36
mov eax, dword [ebx + 0x2223]
mov ecx, 1
mov edx, 0x14
mov dword [eax + 0x5030], esi
mov eax, ebx
pop ebx
pop esi
pop ebp
jmp near fcn_fffc16ce  ; jmp 0xfffc16ce

loc_fffbfd36:
pop ebx
pop esi
pop ebp
ret

fcn_fffbfd3a:
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
push ebx
mov ebx, edx
lea esp, [esp - 8]
mov eax, dword [ebp + 0xc]
mov dword [ebp - 0x10], eax
mov eax, dword [ebp + 0x10]
mov dword [ebp - 0x14], eax
xor eax, eax
cmp cl, 3
mov edi, dword [ebp + 8]
mov edx, dword [ebp + 0x14]
ja short loc_fffbfd6b  ; ja 0xfffbfd6b
movzx ecx, cl
movzx eax, byte [ecx + ref_fffcf29c]  ; movzx eax, byte [ecx - 0x30d64]

loc_fffbfd6b:
cmp edx, 8
lea ecx, [edx + 1]
jbe short loc_fffbfd7c  ; jbe 0xfffbfd7c
movzx ecx, byte [esi + 0x20b5]
xor edx, edx

loc_fffbfd7c:
cmp bl, 1
sbb ebx, ebx
not ebx
and ebx, 0x100
add eax, ebx
mov ebx, dword [esi + 0x2223]
mov dword [ebp + 0x14], ebx
mov ebx, dword [ebp - 0x10]
mov dword [ebp + 0xc], ebx
mov ebx, dword [ebp - 0x14]
mov dword [ebp + 0x10], edi
mov dword [ebp + 8], ebx
pop ebx
pop esi
pop ebx
pop esi
pop edi
pop ebp
jmp near fcn_fffbfa28  ; jmp 0xfffbfa28

fcn_fffbfdae:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x2c]
mov eax, dword [ebp + 8]
mov dword [ebp - 0x24], eax
cmp cl, 3
mov eax, dword [ebp + 0xc]
mov edi, dword [ebp + 0x10]
mov dword [ebp - 0x28], eax
mov esi, dword [ebp + 0x14]
mov dword [ebp - 0x1c], 0
ja short loc_fffbfde5  ; ja 0xfffbfde5
movzx eax, cl
movzx eax, byte [eax + ref_fffcf2a0]  ; movzx eax, byte [eax - 0x30d60]
mov dword [ebp - 0x1c], eax

loc_fffbfde5:
cmp esi, 8
ja short loc_fffbfdf2  ; ja 0xfffbfdf2
lea eax, [esi + 1]
mov dword [ebp - 0x20], eax
jmp short loc_fffbfdfe  ; jmp 0xfffbfdfe

loc_fffbfdf2:
movzx eax, byte [ebx + 0x20b5]
xor esi, esi
mov dword [ebp - 0x20], eax

loc_fffbfdfe:
cmp dl, 0x64
jne short loc_fffbfe53  ; jne 0xfffbfe53
movzx ecx, cl
mov eax, ebx
mov dword [ebp - 0x2c], ecx
xor ecx, ecx
mov edx, dword [ebp - 0x2c]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffbfe36  ; je 0xfffbfe36
push dword [ebx + 0x2223]
push dword [ebp - 0x24]
push dword [ebp - 0x28]
mov ecx, dword [ebp - 0x20]
mov edx, esi
push edi
mov eax, dword [ebp - 0x1c]
call fcn_fffbfa28  ; call 0xfffbfa28
add esp, 0x10

loc_fffbfe36:
mov ecx, 1
mov edx, dword [ebp - 0x2c]
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffbfe8b  ; je 0xfffbfe8b
mov eax, dword [ebp - 0x1c]
add eax, 0x100
jmp short loc_fffbfe62  ; jmp 0xfffbfe62

loc_fffbfe53:
cmp dl, 1
sbb eax, eax
not eax
and eax, 0x100
add eax, dword [ebp - 0x1c]

loc_fffbfe62:
mov edx, dword [ebx + 0x2223]
mov dword [ebp + 8], edi
mov dword [ebp + 0x14], edx
mov edx, dword [ebp - 0x24]
mov dword [ebp + 0x10], edx
mov edx, dword [ebp - 0x28]
mov dword [ebp + 0xc], edx
mov ecx, dword [ebp - 0x20]
lea esp, [ebp - 0xc]
mov edx, esi
pop ebx
pop esi
pop edi
pop ebp
jmp near fcn_fffbfa28  ; jmp 0xfffbfa28

loc_fffbfe8b:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffbfe93:
push ebp
mov ebp, esp
push ebx
xor ebx, ebx
cmp cl, 3
ja short loc_fffbfea8  ; ja 0xfffbfea8
movzx ecx, cl
movzx ebx, byte [ecx + ref_fffcf2a4]  ; movzx ebx, byte [ecx - 0x30d5c]

loc_fffbfea8:
cmp dl, 1
mov ecx, dword [ebp + 8]
sbb edx, edx
not edx
and edx, 0x100
mov ecx, dword [ecx*4 + ref_fffcf5b0]  ; mov ecx, dword [ecx*4 - 0x30a50]
add edx, ebx
add ecx, dword [eax + 0x2223]
add ecx, edx
mov edx, 1
pop ebx
mov eax, dword [ecx]
mov ecx, dword [ebp + 0x10]
shl edx, cl
mov cl, byte [ebp + 0xc]
dec edx
shl edx, cl
and eax, edx
shr eax, cl
pop ebp
ret

fcn_fffbfee2:
push ebp
mov ebp, esp
push ebx
xor ebx, ebx
cmp cl, 3
ja short loc_fffbfef7  ; ja 0xfffbfef7
movzx ecx, cl
movzx ebx, byte [ecx + ref_fffcf2a8]  ; movzx ebx, byte [ecx - 0x30d58]

loc_fffbfef7:
cmp dl, 1
mov ecx, dword [ebp + 8]
sbb edx, edx
not edx
and edx, 0x100
mov ecx, dword [ecx*4 + ref_fffcf5b0]  ; mov ecx, dword [ecx*4 - 0x30a50]
add edx, ebx
add ecx, dword [eax + 0x2223]
add ecx, edx
cmp dword [ebp + 0x10], 0x20
sete bl
cmp dword [ebp + 0xc], 0
sete dl
test bl, dl
mov eax, dword [ecx]
jne short loc_fffbff40  ; jne 0xfffbff40
mov cl, byte [ebp + 0x10]
mov edx, 1
shl edx, cl
mov cl, byte [ebp + 0xc]
dec edx
shl edx, cl
and eax, edx
shr eax, cl

loc_fffbff40:
pop ebx
pop ebp
ret

fcn_fffbff43:
push ebp
cmp byte [eax + 0x212d], 0
mov dl, 1
mov ebp, esp
jne short loc_fffbff6d  ; jne 0xfffbff6d
cmp byte [eax + 0x2173], 0
jne short loc_fffbff6d  ; jne 0xfffbff6d
cmp byte [eax + 0x21b9], 0
jne short loc_fffbff6d  ; jne 0xfffbff6d
cmp byte [eax + 0x21ff], 0
setne dl

loc_fffbff6d:
mov eax, dword [eax + 0x20b6]
cmp eax, 0x74b
je loc_fffc0009  ; je 0xfffc0009
ja short loc_fffbffbb  ; ja 0xfffbffbb
cmp eax, 0x535
je short loc_fffbfff4  ; je 0xfffbfff4
ja short loc_fffbffa0  ; ja 0xfffbffa0
cmp eax, 0x320
je loc_fffc004d  ; je 0xfffc004d
cmp eax, 0x42b
jne short loc_fffbfff0  ; jne 0xfffbfff0
jmp near loc_fffc0054  ; jmp 0xfffc0054

loc_fffbffa0:
cmp eax, 0x640
je short loc_fffc0002  ; je 0xfffc0002
cmp eax, 0x708
je loc_fffc0041  ; je 0xfffc0041
cmp eax, 0x578
jne short loc_fffbfff0  ; jne 0xfffbfff0
jmp short loc_fffbfffb  ; jmp 0xfffbfffb

loc_fffbffbb:
cmp eax, 0x960
je short loc_fffc0025  ; je 0xfffc0025
ja short loc_fffbffdb  ; ja 0xfffbffdb
cmp eax, 0x855
je short loc_fffc0017  ; je 0xfffc0017
cmp eax, 0x898
je short loc_fffc001e  ; je 0xfffc001e
cmp eax, 0x7d0
jne short loc_fffbfff0  ; jne 0xfffbfff0
jmp short loc_fffc0010  ; jmp 0xfffc0010

loc_fffbffdb:
cmp eax, 0xa6b
je short loc_fffc0033  ; je 0xfffc0033
cmp eax, 0xaf0
je short loc_fffc003a  ; je 0xfffc003a
cmp eax, 0xa28
je short loc_fffc002c  ; je 0xfffc002c

loc_fffbfff0:
xor eax, eax
jmp short loc_fffc0046  ; jmp 0xfffc0046

loc_fffbfff4:
mov eax, 0x5dc
jmp short loc_fffc0059  ; jmp 0xfffc0059

loc_fffbfffb:
mov eax, 0x595
jmp short loc_fffc0059  ; jmp 0xfffc0059

loc_fffc0002:
mov eax, 0x4e2
jmp short loc_fffc0059  ; jmp 0xfffc0059

loc_fffc0009:
mov eax, 0x430
jmp short loc_fffc0046  ; jmp 0xfffc0046

loc_fffc0010:
mov eax, 0x3e8
jmp short loc_fffc0059  ; jmp 0xfffc0059

loc_fffc0017:
mov eax, 0x3aa
jmp short loc_fffc0059  ; jmp 0xfffc0059

loc_fffc001e:
mov eax, 0x38e
jmp short loc_fffc0046  ; jmp 0xfffc0046

loc_fffc0025:
mov eax, 0x342
jmp short loc_fffc0046  ; jmp 0xfffc0046

loc_fffc002c:
mov eax, 0x302
jmp short loc_fffc0046  ; jmp 0xfffc0046

loc_fffc0033:
mov eax, 0x2ee
jmp short loc_fffc0059  ; jmp 0xfffc0059

loc_fffc003a:
mov eax, 0x2cb
jmp short loc_fffc0046  ; jmp 0xfffc0046

loc_fffc0041:
mov eax, 0x458

loc_fffc0046:
and edx, 1
sub eax, edx
jmp short loc_fffc0059  ; jmp 0xfffc0059

loc_fffc004d:
mov eax, 0x9c4
jmp short loc_fffc0059  ; jmp 0xfffc0059

loc_fffc0054:
mov eax, 0x753

loc_fffc0059:
pop ebp
ret

fcn_fffc005b:  ; not directly referenced
push ebp
mov ebp, esp
push edi
imul edi, edx, 0x1055
add edi, eax
push esi
mov esi, ecx
push ebx
cmp dword [edi + 0xa], 0
je short loc_fffc00ce  ; je 0xfffc00ce
cmp dword [edi + 0x27], 0
je short loc_fffc00ce  ; je 0xfffc00ce
mov cl, byte [edi + 0x12]
cmp cl, 1
jne short loc_fffc00a8  ; jne 0xfffc00a8
mov cl, byte [edi + 0x2f]
cmp cl, 1
jne short loc_fffc0090  ; jne 0xfffc0090
mov ebx, esi
movzx ecx, bl
push 2
jmp short loc_fffc009e  ; jmp 0xfffc009e

loc_fffc0090:  ; not directly referenced
xor ebx, ebx
cmp cl, 2
jne short loc_fffc0104  ; jne 0xfffc0104
mov ebx, esi
push 3
movzx ecx, bl

loc_fffc009e:  ; not directly referenced
call fcn_fffbfa66  ; call 0xfffbfa66
mov ebx, eax
pop edx
jmp short loc_fffc0104  ; jmp 0xfffc0104

loc_fffc00a8:  ; not directly referenced
xor ebx, ebx
cmp cl, 2
jne short loc_fffc0104  ; jne 0xfffc0104
mov cl, byte [edi + 0x2f]
cmp cl, 1
jne short loc_fffc00c0  ; jne 0xfffc00c0
mov ebx, esi
movzx ecx, bl
push 4
jmp short loc_fffc009e  ; jmp 0xfffc009e

loc_fffc00c0:  ; not directly referenced
cmp cl, 2
jne short loc_fffc0104  ; jne 0xfffc0104
mov ebx, esi
movzx ecx, bl
push 5
jmp short loc_fffc009e  ; jmp 0xfffc009e

loc_fffc00ce:  ; not directly referenced
imul ebx, edx, 0x1055
add ebx, eax
mov cl, byte [ebx + 0x12]
cmp cl, 1
je short loc_fffc00e6  ; je 0xfffc00e6
mov bl, byte [ebx + 0x2f]
cmp bl, 1
jne short loc_fffc00ef  ; jne 0xfffc00ef

loc_fffc00e6:  ; not directly referenced
mov ebx, esi
movzx ecx, bl
push 0
jmp short loc_fffc009e  ; jmp 0xfffc009e

loc_fffc00ef:  ; not directly referenced
cmp cl, 2
je short loc_fffc00f9  ; je 0xfffc00f9
cmp bl, 2
jne short loc_fffc0102  ; jne 0xfffc0102

loc_fffc00f9:  ; not directly referenced
mov ebx, esi
movzx ecx, bl
push 1
jmp short loc_fffc009e  ; jmp 0xfffc009e

loc_fffc0102:  ; not directly referenced
xor ebx, ebx

loc_fffc0104:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc010e:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x1c]
mov dword [ebp - 0x1c], 0
mov edi, dword [ebp + 8]
jmp short loc_fffc0179  ; jmp 0xfffc0179

loc_fffc0124:  ; not directly referenced
mov ecx, dword [ebp - 0x1c]
mov edx, ebx
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffc0167  ; je 0xfffc0167
cmp byte [ebp - 0x1d], 1
mov edx, dword [edi + 0x2223]
movzx ecx, word [esi - 8]
sbb eax, eax
not eax
and eax, 0x100
add eax, dword [ebx*4 + ref_fffcf5b0]  ; add eax, dword [ebx*4 - 0x30a50]
lea edx, [edx + eax + 4]
mov dword [edx], ecx
mov ecx, dword [edi + 0x2223]
movzx edx, word [esi]
lea eax, [eax + ecx + 8]
mov dword [eax], edx

loc_fffc0167:  ; not directly referenced
inc ebx
add esi, 2
cmp ebx, 4
jne short loc_fffc0124  ; jne 0xfffc0124
inc dword [ebp - 0x1c]
cmp dword [ebp - 0x1c], 2
je short loc_fffc0191  ; je 0xfffc0191

loc_fffc0179:  ; not directly referenced
imul eax, dword [ebp - 0x1c], 0x1055
xor ebx, ebx
lea esi, [edi + eax + 0x39d]
mov al, byte [ebp - 0x1c]
mov byte [ebp - 0x1d], al
jmp short loc_fffc0124  ; jmp 0xfffc0124

loc_fffc0191:  ; not directly referenced
lea esp, [esp + 0x1c]
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc019c:
push ebp
mov eax, dword [eax + 0x20b6]
cmp eax, 0x535
mov ebp, esp
je short loc_fffc01de  ; je 0xfffc01de
ja short loc_fffc01be  ; ja 0xfffc01be
cmp eax, 0x320
je short loc_fffc01fa  ; je 0xfffc01fa
cmp eax, 0x42b
jne short loc_fffc01d3  ; jne 0xfffc01d3
jmp short loc_fffc01d7  ; jmp 0xfffc01d7

loc_fffc01be:
cmp eax, 0x74b
je short loc_fffc01ec  ; je 0xfffc01ec
cmp eax, 0x855
je short loc_fffc01f3  ; je 0xfffc01f3
cmp eax, 0x640
je short loc_fffc01e5  ; je 0xfffc01e5

loc_fffc01d3:
xor eax, eax
jmp short loc_fffc01ff  ; jmp 0xfffc01ff

loc_fffc01d7:
mov eax, 0x753
jmp short loc_fffc01ff  ; jmp 0xfffc01ff

loc_fffc01de:
mov eax, 0x5dc
jmp short loc_fffc01ff  ; jmp 0xfffc01ff

loc_fffc01e5:
mov eax, 0x4e2
jmp short loc_fffc01ff  ; jmp 0xfffc01ff

loc_fffc01ec:
mov eax, 0x430
jmp short loc_fffc01ff  ; jmp 0xfffc01ff

loc_fffc01f3:
mov eax, 0x3a9
jmp short loc_fffc01ff  ; jmp 0xfffc01ff

loc_fffc01fa:
mov eax, 0x9c4

loc_fffc01ff:
pop ebp
ret

fcn_fffc0201:
push ebp
mov ebp, esp
push edi
imul edi, edx, 0x1055
add edi, eax
push esi
mov esi, ecx
push ebx
cmp dword [edi + 0xa], 0
je short loc_fffc0274  ; je 0xfffc0274
cmp dword [edi + 0x27], 0
je short loc_fffc0274  ; je 0xfffc0274
mov cl, byte [edi + 0x12]
cmp cl, 1
jne short loc_fffc024e  ; jne 0xfffc024e
mov cl, byte [edi + 0x2f]
cmp cl, 1
jne short loc_fffc0236  ; jne 0xfffc0236
mov ebx, esi
movzx ecx, bl
push 2
jmp short loc_fffc0244  ; jmp 0xfffc0244

loc_fffc0236:
xor ebx, ebx
cmp cl, 2
jne short loc_fffc02aa  ; jne 0xfffc02aa
mov ebx, esi
push 3
movzx ecx, bl

loc_fffc0244:
call fcn_fffbfb2d  ; call 0xfffbfb2d
mov ebx, eax
pop ecx
jmp short loc_fffc02aa  ; jmp 0xfffc02aa

loc_fffc024e:
xor ebx, ebx
cmp cl, 2
jne short loc_fffc02aa  ; jne 0xfffc02aa
mov cl, byte [edi + 0x2f]
cmp cl, 1
jne short loc_fffc0266  ; jne 0xfffc0266
mov ebx, esi
movzx ecx, bl
push 4
jmp short loc_fffc0244  ; jmp 0xfffc0244

loc_fffc0266:
cmp cl, 2
jne short loc_fffc02aa  ; jne 0xfffc02aa
mov ebx, esi
movzx ecx, bl
push 5
jmp short loc_fffc0244  ; jmp 0xfffc0244

loc_fffc0274:
imul ebx, edx, 0x1055
add ebx, eax
mov cl, byte [ebx + 0x12]
cmp cl, 1
je short loc_fffc028c  ; je 0xfffc028c
mov bl, byte [ebx + 0x2f]
cmp bl, 1
jne short loc_fffc0295  ; jne 0xfffc0295

loc_fffc028c:
mov ebx, esi
movzx ecx, bl
push 0
jmp short loc_fffc0244  ; jmp 0xfffc0244

loc_fffc0295:
cmp cl, 2
je short loc_fffc029f  ; je 0xfffc029f
cmp bl, 2
jne short loc_fffc02a8  ; jne 0xfffc02a8

loc_fffc029f:
mov ebx, esi
movzx ecx, bl
push 1
jmp short loc_fffc0244  ; jmp 0xfffc0244

loc_fffc02a8:
xor ebx, ebx

loc_fffc02aa:
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc02b4:
push ebp
test dl, dl
mov ebp, esp
jne short loc_fffc02c3  ; jne 0xfffc02c3
mov eax, ecx
and ax, 0xfdbb
jmp short loc_fffc0314  ; jmp 0xfffc0314

loc_fffc02c3:
cmp dl, 0x3c
jne short loc_fffc02d3  ; jne 0xfffc02d3
mov eax, ecx
and ax, 0xfdbf
or eax, 4
jmp short loc_fffc0314  ; jmp 0xfffc0314

loc_fffc02d3:
cmp dl, 0x78
jne short loc_fffc02e3  ; jne 0xfffc02e3
mov eax, ecx
and ax, 0xfdfb
or eax, 0x40
jmp short loc_fffc0314  ; jmp 0xfffc0314

loc_fffc02e3:
cmp dl, 0x28
jne short loc_fffc02f2  ; jne 0xfffc02f2
mov eax, ecx
and ah, 0xfd
or eax, 0x44
jmp short loc_fffc0314  ; jmp 0xfffc0314

loc_fffc02f2:
cmp dl, 0x14
jne short loc_fffc0301  ; jne 0xfffc0301
mov eax, ecx
and eax, 0xffffffbb
or ah, 2
jmp short loc_fffc0314  ; jmp 0xfffc0314

loc_fffc0301:
cmp dl, 0x1e
mov eax, 7
jne short loc_fffc0314  ; jne 0xfffc0314
mov eax, ecx
and eax, 0xffffffbf
or ax, 0x204

loc_fffc0314:
pop ebp
ret

fcn_fffc0316:
push ebp
mov ebp, esp
push esi
mov esi, eax
push ebx
mov bl, cl
movzx ecx, cl
lea esp, [esp - 0x10]
mov byte [ebp - 9], dl
movzx edx, dl
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffc0382  ; je 0xfffc0382
mov edx, dword [ebp + 8]
mov ecx, dword [esi + 0x2223]
sub edx, 6
cmp bl, 1
sbb eax, eax
and eax, 0xfffffc00
cmp byte [ebp - 9], 1
lea eax, [ecx + eax + 0x440c]
mov eax, dword [eax]
ja short loc_fffc0364  ; ja 0xfffc0364
shl edx, 0x10
and eax, 0xfffcffff
jmp short loc_fffc036c  ; jmp 0xfffc036c

loc_fffc0364:
shl edx, 0x12
and eax, 0xfff3ffff

loc_fffc036c:
or eax, edx
cmp bl, 1
sbb edx, edx
and edx, 0xfffffc00
lea edx, [ecx + edx + 0x440c]
mov dword [edx], eax

loc_fffc0382:
lea esp, [esp + 0x10]
pop ebx
pop esi
pop ebp
ret

fcn_fffc038a:  ; not directly referenced
push ebp
test edx, edx
mov ebp, esp
jne short loc_fffc03a8  ; jne 0xfffc03a8
lea edx, [eax - 3]
xor eax, eax
cmp dl, 7
ja short loc_fffc03bd  ; ja 0xfffc03bd
movzx edx, dl
movzx eax, word [edx + edx + ref_fffcf46c]  ; movzx eax, word [edx + edx - 0x30b94]
jmp short loc_fffc03bd  ; jmp 0xfffc03bd

loc_fffc03a8:  ; not directly referenced
lea edx, [eax - 7]
xor eax, eax
cmp dl, 7
ja short loc_fffc03bd  ; ja 0xfffc03bd
movzx edx, dl
movzx eax, word [edx + edx + ref_fffcf45c]  ; movzx eax, word [edx + edx - 0x30ba4]

loc_fffc03bd:  ; not directly referenced
pop ebp
ret

fcn_fffc03bf:
push ebp
mov ebp, esp
push edi
movzx edi, dl
push esi
mov esi, eax
push ebx
mov bl, cl
movzx ecx, cl
lea esp, [esp - 0x1c]
mov byte [ebp - 0x19], dl
mov edx, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffc049f  ; je 0xfffc049f
cmp dword [esi + 0x2254], 2
jne short loc_fffc0450  ; jne 0xfffc0450
cmp bl, 1
mov edx, dword [esi + 0x2223]
mov esi, dword [ebp + 8]
sbb eax, eax
sub esi, 6
and eax, 0xfffffc00
cmp dword [ebp + 8], 8
lea eax, [eax + edx + 0x441c]
mov eax, dword [eax]
mov dword [ebp - 0x20], eax
mov eax, 3
cmovne eax, esi
add edi, 2
and edi, 3
mov ecx, edi
cmp cl, 1
mov ecx, dword [ebp - 0x20]
ja short loc_fffc0434  ; ja 0xfffc0434
shl eax, 0xa
and ch, 0xf3
jmp short loc_fffc043a  ; jmp 0xfffc043a

loc_fffc0434:
shl eax, 0xc
and ch, 0xcf

loc_fffc043a:
or eax, ecx
cmp bl, 1
sbb ecx, ecx
and ecx, 0xfffffc00
lea edx, [ecx + edx + 0x441c]
jmp short loc_fffc049d  ; jmp 0xfffc049d

loc_fffc0450:
jbe short loc_fffc049f  ; jbe 0xfffc049f
mov edx, dword [ebp + 8]
mov ecx, dword [esi + 0x2223]
sub edx, 6
cmp bl, 1
sbb eax, eax
and eax, 0xfffffc00
cmp byte [ebp - 0x19], 1
lea eax, [eax + ecx + 0x440c]
mov eax, dword [eax]
ja short loc_fffc0481  ; ja 0xfffc0481
shl edx, 0x10
and eax, 0xfffcffff
jmp short loc_fffc0489  ; jmp 0xfffc0489

loc_fffc0481:
shl edx, 0x12
and eax, 0xfff3ffff

loc_fffc0489:
or eax, edx
cmp bl, 1
sbb edx, edx
and edx, 0xfffffc00
lea edx, [edx + ecx + 0x440c]

loc_fffc049d:
mov dword [edx], eax

loc_fffc049f:
lea esp, [esp + 0x1c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc04a8:
push ebp
mov ebp, esp
push esi
push ebx
mov ecx, dword [eax]
mov edx, ecx
mov ebx, ecx
and ebx, 1
mov esi, ecx
shr edx, 0x1f
and esi, 2
shr esi, 1
xor edx, ebx
mov ebx, ecx
shr ecx, 1
and ebx, 0x200000
shr ebx, 0x15
xor ebx, esi
xor edx, ebx
xor edx, 1
mov ebx, edx
shl ebx, 0x1f
or ebx, ecx
mov dword [eax], ebx
mov eax, edx
pop ebx
pop esi
pop ebp
ret

fcn_fffc04e5:
push ebp
mov ebp, esp
push ebx
mov cx, word [eax]
mov ebx, ecx
mov edx, ecx
shr ebx, 4
shr edx, 0xd
and ebx, 1
and edx, 1
xor edx, ebx
mov ebx, ecx
and ebx, 1
xor edx, ebx
mov ebx, ecx
shr bx, 0xf
shr cx, 1
xor edx, ebx
movzx ebx, dx
shl ebx, 0xf
or bx, cx
mov ecx, 0x5a5a
cmove ebx, ecx
mov word [eax], bx
mov eax, edx
pop ebx
pop ebp
ret

fcn_fffc0529:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
xor esi, esi
push ebx
mov ebx, eax
lea esp, [esp - 0x3c]
mov dword [ebp - 0x3c], eax

loc_fffc053c:
cmp byte [edi + 0x3a], 0
jne loc_fffc05d7  ; jne 0xfffc05d7
jmp short loc_fffc057b  ; jmp 0xfffc057b

loc_fffc0548:
xor ecx, ecx
mov edx, esi
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne loc_fffc06af  ; jne 0xfffc06af
mov eax, esi
cmp al, 1
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4420
add eax, dword [ebx + 0x2223]
mov edx, dword [eax]
or edx, 0x200000
mov dword [eax], edx

loc_fffc057b:
inc esi
add edi, 0x1055
cmp esi, 2
jne short loc_fffc053c  ; jne 0xfffc053c
mov edx, dword [ebx + 0x2223]
xor si, si
lea edi, [ebp - 0x2d]
mov eax, dword [edx + 0x5030]
and eax, 0xfffffff7
mov dword [edx + 0x5030], eax

loc_fffc05a2:
mov eax, dword [ebp - 0x3c]
cmp byte [eax + 0x3a], 0
jne loc_fffc0644  ; jne 0xfffc0644

loc_fffc05af:
inc esi
add dword [ebp - 0x3c], 0x1055
cmp esi, 2
jne short loc_fffc05a2  ; jne 0xfffc05a2
xor eax, eax
jmp near loc_fffc06af  ; jmp 0xfffc06af

loc_fffc05c3:
xor ecx, ecx
mov edx, esi
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
je short loc_fffc05af  ; je 0xfffc05af
jmp near loc_fffc06af  ; jmp 0xfffc06af

loc_fffc05d7:
cmp dword [edi + 0xa], 1
mov edx, esi
sbb eax, eax
xor ecx, ecx
and eax, 2
mov dword [ebp - 0x2d], 2
mov byte [ebp - 0x22], al
mov word [ebp - 0x25], 0
push eax
lea eax, [ebp - 0x2d]
mov byte [ebp - 0x23], 0
push 1
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0x1f
push eax
mov eax, ebx
mov byte [ebp - 0x1f], 0
push 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
push 0
mov word [ebp - 0x1b], 4
mov byte [ebp - 0x19], 4
push 0
mov dword [ebp - 0x29], 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
je loc_fffc0548  ; je 0xfffc0548
jmp short loc_fffc06af  ; jmp 0xfffc06af

loc_fffc0644:
mov eax, dword [ebp - 0x3c]
mov edx, esi
mov dword [ebp - 0x2d], 2
mov word [ebp - 0x25], 0
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0x1f
mov byte [ebp - 0x1f], 0
cmp dword [eax + 0xa], 1
mov byte [ebp - 0x1e], 0
sbb eax, eax
xor ecx, ecx
and eax, 2
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x22], al
mov word [ebp - 0x1b], 4
push eax
mov eax, ebx
mov byte [ebp - 0x19], 4
push 1
mov dword [ebp - 0x29], 0
push edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
je loc_fffc05c3  ; je 0xfffc05c3

loc_fffc06af:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffc06b7:
db 0x00

fcn_fffc06b8:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
lea esp, [esp - 0x13c]
cmp byte [eax + 0x3a], 0
jne loc_fffc15cf  ; jne 0xfffc15cf

loc_fffc06d1:
cmp byte [edi + 0x108f], 0
jne loc_fffc15eb  ; jne 0xfffc15eb

loc_fffc06de:
mov edx, 0xdd39
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov eax, edi
xor ebx, ebx
call fcn_fffc0529  ; call 0xfffc0529

loc_fffc06f3:
sub esp, 0xc
mov eax, ebx
push 1
mov ecx, 1
mov edx, edi
inc ebx
call fcn_fffc784f  ; call 0xfffc784f
add esp, 0x10
cmp ebx, 4
jne short loc_fffc06f3  ; jne 0xfffc06f3
mov eax, dword [edi + 0x2223]
mov dword [eax + 0x3400], 0x108052
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
mov dword [ebp - 0x110], 0
jmp near loc_fffc0c4d  ; jmp 0xfffc0c4d

loc_fffc0735:
mov ecx, dword [ebp - 0x10c]
mov edx, dword [ebp - 0x110]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
dec eax
je short loc_fffc076a  ; je 0xfffc076a

loc_fffc074b:
inc dword [ebp - 0x10c]
add dword [ebp - 0x120], 0x1055
cmp dword [ebp - 0x10c], 2
je loc_fffc0c3e  ; je 0xfffc0c3e
jmp short loc_fffc0735  ; jmp 0xfffc0735

loc_fffc076a:
mov eax, dword [edi + 0x2223]
mov ebx, dword [ebp - 0x11c]
xor ecx, ecx
mov edx, 0x90
mov dword [eax + 0x3400], ebx
lea eax, [ebp - 0xa8]
call fcn_fffa24c1  ; call 0xfffa24c1
imul eax, dword [ebp - 0x10c], 0x1055
mov esi, dword [ebp - 0x13c]
mov ecx, dword [ebp - 0x110]
mov edx, dword [ebp - 0x10c]
lea eax, [eax + esi + 0xf0]
lea eax, [edi + eax + 0x19]
mov dword [ebp - 0x124], eax
mov eax, edi
call fcn_fffc0201  ; call 0xfffc0201
test eax, eax
jne short loc_fffc07d3  ; jne 0xfffc07d3

loc_fffc07c6:
mov ebx, dword [ebp - 0x124]
xor esi, esi
jmp near loc_fffc0c0f  ; jmp 0xfffc0c0f

loc_fffc07d3:
movzx edx, byte [eax]
mov ecx, 0x82
mov eax, edi
call fcn_fffc02b4  ; call 0xfffc02b4
mov esi, dword [ebp - 0x120]
mov word [ebp - 0xf4], ax
movzx edx, byte [esi + 0x3c]
movzx eax, byte [edi + 0x20ac]
mov bl, byte [ebp - 0x118]
add eax, edx
mov word [ebp - 0xd5], ax
mov dword [ebp - 0xfc], 0
mov byte [ebp - 0xf2], 1
mov byte [ebp - 0xf1], bl
mov byte [ebp - 0xf0], 0
mov byte [ebp - 0xef], 0
mov byte [ebp - 0xee], 0
mov byte [ebp - 0xed], 0
mov word [ebp - 0xec], 1
mov dword [ebp - 0xf8], 0
mov byte [ebp - 0xe8], 3
mov word [ebp - 0xea], 0x28
mov dword [ebp - 0xe7], 5
mov word [ebp - 0xdf], 0
mov byte [ebp - 0xdd], 0
mov byte [ebp - 0xdc], bl
mov byte [ebp - 0xdb], 0
mov byte [ebp - 0xda], 0
mov byte [ebp - 0xd9], 0
mov byte [ebp - 0xd8], 0
mov word [ebp - 0xd7], 1
mov byte [ebp - 0xd3], 3
mov dword [ebp - 0xe3], 0
mov dword [ebp - 0xd2], 6
mov word [ebp - 0xca], 0
mov byte [ebp - 0xc8], 0
mov byte [ebp - 0xc7], bl
mov ecx, dword [ebp - 0x110]
movzx eax, byte [esi + 0x3b]
add eax, 0x26
mov edx, dword [ebp - 0x10c]
mov word [ebp - 0xc0], ax
mov eax, edi
mov byte [ebp - 0xc6], 0
mov byte [ebp - 0xc5], 0
mov byte [ebp - 0xc4], 0
mov byte [ebp - 0xc3], 0
mov word [ebp - 0xc2], 1
mov byte [ebp - 0xbe], 3
mov dword [ebp - 0xce], 0
call fcn_fffc0201  ; call 0xfffc0201
test eax, eax
je loc_fffc07c6  ; je 0xfffc07c6
movzx edx, byte [eax + 1]
mov ecx, 0x1082
mov eax, edi
call fcn_fffc02b4  ; call 0xfffc02b4
mov word [ebp - 0xb5], ax
mov dword [ebp - 0xbd], 0
movzx eax, byte [edi + 0x20aa]
mov byte [ebp - 0xb3], 1
mov byte [ebp - 0xb2], bl
mov byte [ebp - 0xb1], 0
mov byte [ebp - 0xb0], 0
mov byte [ebp - 0xaf], 0
mov byte [ebp - 0xae], 0
mov word [ebp - 0xad], 1
mov dword [ebp - 0xb9], 0
mov byte [ebp - 0xa9], 3
mov word [ebp - 0xab], ax
mov dword [ebp - 0x114], 0

loc_fffc09b0:
push 9
mov ecx, dword [ebp - 0x110]
mov edx, dword [ebp - 0x10c]
push 3
mov eax, edi
xor ebx, ebx
push 0xf
push dword [ebp - 0x114]
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x10

loc_fffc09d4:
mov ecx, dword [ebp - 0x10c]
mov edx, dword [ebp - 0x110]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
dec eax
je short loc_fffc0a01  ; je 0xfffc0a01

loc_fffc09ea:
lea eax, [ebx + 1]
add ebx, 2
cmp dword [edi + 0x2240], 0
cmove ebx, eax
cmp bl, 0x3f
jbe short loc_fffc09d4  ; jbe 0xfffc09d4
jmp short loc_fffc0a69  ; jmp 0xfffc0a69

loc_fffc0a01:
push 9
movzx eax, bl
mov ecx, dword [ebp - 0x110]
push 6
mov edx, dword [ebp - 0x10c]
push 8
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0xc
lea eax, [ebp - 0xfc]
push 1
mov ecx, 3
mov edx, dword [ebp - 0x10c]
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
jne loc_fffc07c6  ; jne 0xfffc07c6
xor ecx, ecx
mov edx, dword [ebp - 0x10c]
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
je short loc_fffc09ea  ; je 0xfffc09ea
jmp near loc_fffc07c6  ; jmp 0xfffc07c6

loc_fffc0a69:
mov dl, byte [edi + 0x20b5]
mov cl, byte [ebp - 0x114]
mov bl, byte [ebp - 0x10c]
mov byte [ebp - 0x130], dl
lea eax, [ebp - 0xa8]
mov dword [ebp - 0x140], 0
mov edx, eax
mov byte [ebp - 0x138], cl
mov byte [ebp - 0x134], bl
jmp short loc_fffc0b03  ; jmp 0xfffc0b03

loc_fffc0aa1:
cmp byte [ebp - 0x134], 1
mov ebx, dword [ebp - 0x140]
sbb ecx, ecx
mov esi, dword [edi + 0x2223]
not ecx
and ecx, 0x100
cmp byte [ebp - 0x138], 0
jne short loc_fffc0ae1  ; jne 0xfffc0ae1
add ecx, dword [ebx*4 + ref_fffcf5b0]  ; add ecx, dword [ebx*4 - 0x30a50]
lea ebx, [ecx + esi + 4]
lea ecx, [ecx + esi + 8]
mov ebx, dword [ebx]
mov ecx, dword [ecx]
or dword [edx], ebx
or dword [edx + 4], ecx
jmp short loc_fffc0afa  ; jmp 0xfffc0afa

loc_fffc0ae1:
add ecx, dword [ebx*4 + ref_fffcf5b0]  ; add ecx, dword [ebx*4 - 0x30a50]
lea ebx, [ecx + esi + 4]
lea ecx, [ecx + esi + 8]
mov ebx, dword [ebx]
mov ecx, dword [ecx]
or dword [edx + 8], ebx
or dword [edx + 0xc], ecx

loc_fffc0afa:
inc dword [ebp - 0x140]
add edx, 0x10

loc_fffc0b03:
mov cl, byte [ebp - 0x140]
cmp byte [ebp - 0x130], cl
ja short loc_fffc0aa1  ; ja 0xfffc0aa1
inc dword [ebp - 0x114]
cmp dword [ebp - 0x114], 2
je loc_fffc1693  ; je 0xfffc1693
jmp near loc_fffc09b0  ; jmp 0xfffc09b0

loc_fffc0b29:
mov ebx, dword [eax]
inc edx
lea ecx, [ebx + ebx]
or ecx, ebx
mov ebx, dword [eax + 4]
mov dword [eax], ecx
lea ecx, [ebx + ebx]
or ecx, ebx
mov ebx, dword [eax + 8]
mov dword [eax + 4], ecx
lea ecx, [ebx + ebx]
or ecx, ebx
mov ebx, dword [eax + 0xc]
mov dword [eax + 8], ecx
lea ecx, [ebx + ebx]
or ecx, ebx
mov dword [eax + 0xc], ecx
add eax, 0x10
jmp short loc_fffc0b5b  ; jmp 0xfffc0b5b

loc_fffc0b59:
xor edx, edx

loc_fffc0b5b:
cmp dl, byte [ebp - 0x130]
jne short loc_fffc0b29  ; jne 0xfffc0b29
jmp near loc_fffc07c6  ; jmp 0xfffc07c6

loc_fffc0b68:
mov edx, esi
sub esp, 0xc
shl edx, 4
lea eax, [ebp - 0xa8]
add edx, eax
lea eax, [esi + esi*4]
add eax, dword [ebp - 0x124]
lea ecx, [ebp - 0x100]
push eax
mov eax, edi
mov dword [ebp - 0x100], 0
call fcn_fffb9a3c  ; call 0xfffb9a3c
add esp, 0x10
cmp dword [ebp - 0x100], 1
jne short loc_fffc0c23  ; jne 0xfffc0c23
cmp byte [ebx], 0x3f
jbe short loc_fffc0bc0  ; jbe 0xfffc0bc0
mov al, byte [ebx]
mov byte [ebx + 4], 1
and eax, 0x3f
movzx edx, al
mov byte [ebx], al
mov dword [ebp - 0x114], edx
jmp short loc_fffc0bcd  ; jmp 0xfffc0bcd

loc_fffc0bc0:
movzx ecx, byte [ebx]
mov byte [ebx + 4], 0
mov dword [ebp - 0x114], ecx

loc_fffc0bcd:
push esi
mov ecx, dword [ebp - 0x110]
mov edx, dword [ebp - 0x10c]
push 3
push 0xf
movzx eax, byte [ebx + 4]
add ebx, 5
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
push esi
mov ecx, dword [ebp - 0x110]
mov edx, dword [ebp - 0x10c]
push 6
mov eax, edi
inc esi
push 8
push dword [ebp - 0x114]
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x20

loc_fffc0c0f:
movzx eax, byte [edi + 0x20b5]
cmp esi, eax
jb loc_fffc0b68  ; jb 0xfffc0b68
jmp near loc_fffc074b  ; jmp 0xfffc074b

loc_fffc0c23:
mov edx, 0xdd3b
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x120], 1
jmp near loc_fffc0d91  ; jmp 0xfffc0d91

loc_fffc0c3e:
inc dword [ebp - 0x110]
cmp dword [ebp - 0x110], 4
je short loc_fffc0c96  ; je 0xfffc0c96

loc_fffc0c4d:
mov bl, byte [ebp - 0x110]
mov esi, dword [ebp - 0x110]
mov byte [ebp - 0x118], bl
mov dword [ebp - 0x12c], edi
imul ebx, dword [ebp - 0x110], 0x2d
mov dword [ebp - 0x120], edi
shl esi, 2
mov dword [ebp - 0x10c], 0
or esi, 0x108052
mov dword [ebp - 0x13c], ebx
mov dword [ebp - 0x11c], esi
jmp near loc_fffc0735  ; jmp 0xfffc0735

loc_fffc0c96:
xor ebx, ebx

loc_fffc0c98:
sub esp, 0xc
xor ecx, ecx
push 0
mov eax, ebx
mov edx, edi
inc ebx
call fcn_fffc784f  ; call 0xfffc784f
add esp, 0x10
cmp ebx, 4
jne short loc_fffc0c98  ; jne 0xfffc0c98
mov eax, dword [edi + 0x2223]
mov dword [eax + 0x3400], 0
cmp byte [edi + 0x3a], 0
mov dword [ebp - 0xa8], 2
mov word [ebp - 0xa0], 0
mov byte [ebp - 0x9e], 0
mov byte [ebp - 0x9c], 0
mov byte [ebp - 0x9b], 0x1f
mov byte [ebp - 0x9a], 0
mov byte [ebp - 0x99], 0
mov word [ebp - 0x98], 1
mov word [ebp - 0x96], 0x64
mov byte [ebp - 0x94], 0x64
mov dword [ebp - 0xa4], 0
je short loc_fffc0d33  ; je 0xfffc0d33
xor ecx, ecx
xor edx, edx
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne loc_fffc16a5  ; jne 0xfffc16a5

loc_fffc0d33:
cmp byte [edi + 0x108f], 0
jne loc_fffc1607  ; jne 0xfffc1607

loc_fffc0d40:
mov edx, dword [edi + 0x2223]
mov esi, edi
xor ebx, ebx
mov eax, dword [edx + 0x5030]
or eax, 8
mov dword [edx + 0x5030], eax

loc_fffc0d59:
cmp byte [esi + 0x3a], 0
jne loc_fffc1622  ; jne 0xfffc1622

loc_fffc0d63:
inc ebx
add esi, 0x1055
cmp ebx, 2
je short loc_fffc0d85  ; je 0xfffc0d85
jmp short loc_fffc0d59  ; jmp 0xfffc0d59

loc_fffc0d71:
xor ecx, ecx
mov edx, ebx
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
je short loc_fffc0d63  ; je 0xfffc0d63
jmp near loc_fffc16a5  ; jmp 0xfffc16a5

loc_fffc0d85:
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
jmp near loc_fffc16a5  ; jmp 0xfffc16a5

loc_fffc0d91:
mov edx, 0xdd3c
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
lea ebx, [ebp - 0xa8]
lea edx, [ebp - 0xfc]
mov ecx, ebx
mov eax, edi
call fcn_fffc49b1  ; call 0xfffc49b1
lea esi, [edi + 0x3c31]
mov dword [ebp - 0x110], 0
mov dword [ebp - 0x114], 0
mov dword [ebp - 0x138], esi

loc_fffc0dd2:
imul esi, dword [ebp - 0x110], 0x24
mov al, byte [ebp - 0x110]
mov byte [ebp - 0xf1], al
mov byte [ebp - 0xdc], al
mov byte [ebp - 0xc7], al
mov byte [ebp - 0xb2], al
mov byte [ebp - 0x9d], al
mov byte [ebp - 0x88], al
mov byte [ebp - 0x73], al
mov byte [ebp - 0x5e], al
mov dword [ebp - 0x10c], 0
mov dword [ebp - 0x130], esi

loc_fffc0e19:
mov ecx, dword [ebp - 0x10c]
mov edx, dword [ebp - 0x110]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffc118d  ; je 0xfffc118d
push eax
lea eax, [ebp - 0xa8]
xor ecx, ecx
push 1
mov edx, dword [ebp - 0x10c]
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov edx, dword [ebp - 0x114]
mov dword [ebp - 0x118], 0
cmovne edx, eax
mov dword [ebp - 0x114], 0
imul eax, dword [ebp - 0x10c], 0x900
add eax, dword [ebp - 0x138]
movzx ebx, byte [ebp - 0xf1]
mov dword [ebp - 0x11c], edx
mov dword [ebp - 0x124], eax
mov dword [ebp - 0x134], ebx

loc_fffc0ea2:
push 9
mov ecx, dword [ebp - 0x134]
mov edx, dword [ebp - 0x10c]
push 1
mov eax, edi
xor ebx, ebx
push 0x13
push dword [ebp - 0x118]
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x10

loc_fffc0ec6:
push 9
movzx eax, bl
mov ecx, dword [ebp - 0x134]
push 6
mov edx, dword [ebp - 0x10c]
push 0
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x10
mov eax, 0x4f40

loc_fffc0eeb:
mov edx, dword [edi + 0x2223]
add edx, eax
add eax, 4
cmp eax, 0x4f64
mov dword [edx], 0
jne short loc_fffc0eeb  ; jne 0xfffc0eeb
push esi
lea esi, [ebp - 0xfc]
mov ecx, 3
push 1
mov edx, dword [ebp - 0x10c]
mov eax, edi
push esi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x1c
mov esi, eax
push 1
test eax, eax
lea eax, [ebp - 0xa8]
push eax
mov ecx, 3
mov edx, dword [ebp - 0x10c]
push 0
mov eax, edi
cmove esi, dword [ebp - 0x114]
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov edx, dword [ebp - 0x10c]
cmovne esi, eax
xor ecx, ecx
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov eax, 0xc
movzx ecx, bl
mov dl, byte [ebp - 0x10c]
cmove eax, esi
mov byte [ebp - 0x128], dl
mov dword [ebp - 0x114], eax
mov dword [ebp - 0x13c], ecx
xor eax, eax
jmp short loc_fffc1008  ; jmp 0xfffc1008

loc_fffc0f9c:
cmp byte [ebp - 0x128], 0
mov ecx, dword [edi + 0x2223]
jne short loc_fffc0fb4  ; jne 0xfffc0fb4
lea edx, [eax*4 + 0x4340]
jmp short loc_fffc0fbb  ; jmp 0xfffc0fbb

loc_fffc0fb4:
lea edx, [eax*4 + 0x4740]

loc_fffc0fbb:
add edx, ecx
movzx ecx, al
shl ecx, 7
add ecx, dword [ebp - 0x13c]
cmp byte [ebp - 0x118], 1
mov esi, dword [ebp - 0x124]
mov edx, dword [edx]
jne short loc_fffc0ff5  ; jne 0xfffc0ff5
mov word [esi + ecx*2 + 0x80], dx
cmp dword [edi + 0x2240], 0
je short loc_fffc1007  ; je 0xfffc1007
mov word [esi + ecx*2 + 0x82], dx
jmp short loc_fffc1007  ; jmp 0xfffc1007

loc_fffc0ff5:
mov word [esi + ecx*2], dx
cmp dword [edi + 0x2240], 0
je short loc_fffc1007  ; je 0xfffc1007
mov word [esi + ecx*2 + 2], dx

loc_fffc1007:
inc eax

loc_fffc1008:
cmp byte [edi + 0x20b5], al
ja short loc_fffc0f9c  ; ja 0xfffc0f9c
lea eax, [ebx + 2]
inc ebx
cmp dword [edi + 0x2240], 0
cmovne ebx, eax
cmp bl, 0x3f
jbe loc_fffc0ec6  ; jbe 0xfffc0ec6
inc dword [ebp - 0x118]
cmp dword [ebp - 0x118], 2
jne loc_fffc0ea2  ; jne 0xfffc0ea2
cmp dword [ebp - 0x114], 0
mov eax, dword [ebp - 0x11c]
cmovne eax, dword [ebp - 0x114]
mov byte [ebp - 0x118], 0
imul ebx, dword [ebp - 0x10c], 9
mov dword [ebp - 0x114], eax
mov dword [ebp - 0x124], ebx
jmp near loc_fffc117b  ; jmp 0xfffc117b

loc_fffc106d:
movzx ebx, byte [ebp - 0x118]
mov eax, dword [ebp - 0x124]
add eax, ebx
sub esp, 0xc
shl eax, 8
mov ecx, 0x80
lea esi, [ebx + ebx*2]
add esi, dword [ebp - 0x130]
lea edx, [edi + eax + 0x3c31]
imul eax, dword [ebp - 0x10c], 0x1055
add esi, eax
mov dword [ebp - 0x11c], eax
lea eax, [edi + esi + 0x295]
push eax
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
dec eax
mov eax, 1
cmovne eax, dword [ebp - 0x114]
add esi, edi
mov dword [ebp - 0x114], eax
cmp byte [esi + 0x295], 0x3f
jbe short loc_fffc1122  ; jbe 0xfffc1122
push ebx
mov eax, edi
mov ecx, dword [ebp - 0x110]
push 1
mov edx, dword [ebp - 0x10c]
push 0x13
push 1
call fcn_fffbfdae  ; call 0xfffbfdae
mov eax, dword [ebp - 0x130]
add eax, dword [ebp - 0x11c]
add eax, edi
mov byte [ebx + eax + 0x2b0], 1
mov al, byte [esi + 0x295]
sub eax, 0x40
mov byte [esi + 0x295], al
push ebx
movzx eax, al
push 6
push 0
jmp short loc_fffc115e  ; jmp 0xfffc115e

loc_fffc1122:
push ebx
mov eax, edi
mov ecx, dword [ebp - 0x110]
push 1
mov edx, dword [ebp - 0x10c]
push 0x13
push 0
call fcn_fffbfdae  ; call 0xfffbfdae
mov eax, dword [ebp - 0x130]
add eax, dword [ebp - 0x11c]
add eax, edi
mov byte [ebx + eax + 0x2b0], 0
push ebx
push 6
push 0
movzx eax, byte [esi + 0x295]

loc_fffc115e:
push eax
mov ecx, dword [ebp - 0x110]
mov edx, dword [ebp - 0x10c]
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x20
inc byte [ebp - 0x118]

loc_fffc117b:
mov bl, byte [ebp - 0x118]
cmp bl, byte [edi + 0x20b5]
jb loc_fffc106d  ; jb 0xfffc106d

loc_fffc118d:
inc dword [ebp - 0x10c]
cmp dword [ebp - 0x10c], 2
jne loc_fffc0e19  ; jne 0xfffc0e19
inc dword [ebp - 0x110]
cmp dword [ebp - 0x110], 4
jne loc_fffc0dd2  ; jne 0xfffc0dd2
cmp dword [ebp - 0x114], 0
je short loc_fffc11d6  ; je 0xfffc11d6
mov eax, edi
mov edx, 0xdd3e
call fcn_fffad891  ; call 0xfffad891
mov eax, dword [ebp - 0x114]
mov dword [ebp - 0x120], eax
jmp short loc_fffc11e2  ; jmp 0xfffc11e2

loc_fffc11d6:
mov edx, 0xdd3d
mov eax, edi
call fcn_fffad891  ; call 0xfffad891

loc_fffc11e2:
mov edx, 0xdd40
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov eax, dword [edi + 0x2223]
xor esi, esi
mov dword [eax + 0x3400], 0x200
mov eax, edi
call fcn_fffc39a9  ; call 0xfffc39a9
mov dword [ebp - 0x10c], 0
jmp near loc_fffc158c  ; jmp 0xfffc158c

loc_fffc1216:
mov ecx, dword [ebp - 0x10c]
mov edx, ebx
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
dec eax
jne loc_fffc1569  ; jne 0xfffc1569
mov al, byte [ebp - 0x10c]
mov edx, dword [ebp - 0x12c]
cmp al, 1
mov ecx, edx
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4688
add eax, dword [edi + 0x2223]
mov dword [eax], 0x10001
mov dword [ebp - 0xa8], 8
movzx eax, byte [edx + 0x3e]
mov byte [ebp - 0x9d], bl
mov word [ebp - 0x96], ax
mov word [ebp - 0xa0], 0
mov byte [ebp - 0x9e], 0
mov byte [ebp - 0x9c], 0
mov byte [ebp - 0x9b], 0
mov byte [ebp - 0x9a], 0
mov byte [ebp - 0x99], 0
mov word [ebp - 0x98], 1
mov byte [ebp - 0x94], 3
mov dword [ebp - 0xa4], 0
mov dword [ebp - 0x93], 5
mov byte [ebp - 0x88], bl
mov word [ebp - 0x8b], 0
mov byte [ebp - 0x89], 0
mov byte [ebp - 0x87], 0
mov byte [ebp - 0x86], 0x1f
mov byte [ebp - 0x85], 0
mov byte [ebp - 0x84], 0
mov word [ebp - 0x83], 1
mov word [ebp - 0x81], 4
mov byte [ebp - 0x7f], 3
mov dword [ebp - 0x8f], 0
mov dword [ebp - 0x7e], 9
mov byte [ebp - 0x73], bl
mov word [ebp - 0x76], 0
mov byte [ebp - 0x74], 0
mov byte [ebp - 0x72], 2
movzx edx, byte [edx + 0x3c]
movzx eax, byte [ecx + 0x41]
lea eax, [edx + eax + 5]
mov word [ebp - 0x57], ax
push edx
lea eax, [ebp - 0xa8]
mov ecx, 3
push 1
mov edx, dword [ebp - 0x10c]
mov byte [ebp - 0x71], 0x1f
push eax
mov eax, edi
mov byte [ebp - 0x70], 0
push 0
mov byte [ebp - 0x6f], 0
mov word [ebp - 0x6e], 3
push 0
mov word [ebp - 0x6c], 4
mov byte [ebp - 0x6a], 4
push 0
mov dword [ebp - 0x7a], 0
mov dword [ebp - 0x69], 5
push 0
mov byte [ebp - 0x5e], bl
mov word [ebp - 0x61], 0
push 1
mov byte [ebp - 0x5f], 0
mov byte [ebp - 0x5d], 0
mov byte [ebp - 0x5c], 0x1f
mov byte [ebp - 0x5b], 0
mov byte [ebp - 0x5a], 0
mov word [ebp - 0x59], 1
mov byte [ebp - 0x55], 3
mov dword [ebp - 0x65], 0
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov edx, ebx
mov dword [ebp - 0xa8], 3
cmovne esi, eax
mov byte [ebp - 0x9d], bl
mov dword [ebp - 0x110], esi
mov esi, dword [ebp - 0x12c]
movzx esi, byte [esi + 0x3f]
mov word [ebp - 0x114], si
mov word [ebp - 0x96], si
mov esi, dword [ebp - 0x12c]
mov word [ebp - 0xa0], 0x400
movzx eax, byte [esi + 0x3e]
mov byte [ebp - 0x9e], 0
mov word [ebp - 0x81], ax
mov byte [ebp - 0x9c], 0
mov byte [ebp - 0x9b], 0x12
mov byte [ebp - 0x9a], 0
mov byte [ebp - 0x99], 0
mov word [ebp - 0x98], 1
mov byte [ebp - 0x94], 3
mov dword [ebp - 0xa4], 0
mov dword [ebp - 0x93], 8
mov byte [ebp - 0x88], bl
mov word [ebp - 0x8b], 0
mov byte [ebp - 0x89], 0
mov byte [ebp - 0x87], 0
mov byte [ebp - 0x86], 0
mov byte [ebp - 0x85], 0
mov byte [ebp - 0x84], 0
mov word [ebp - 0x83], 1
mov byte [ebp - 0x7f], 3
mov dword [ebp - 0x8f], 0
mov dword [ebp - 0x7e], 0xa
mov byte [ebp - 0x73], bl
mov word [ebp - 0x76], 8
mov eax, edi
mov byte [ebp - 0x74], 0
mov ecx, dword [ebp - 0x10c]
mov byte [ebp - 0x72], 0
mov byte [ebp - 0x71], 0
mov byte [ebp - 0x70], 0
mov byte [ebp - 0x6f], 0
mov word [ebp - 0x6e], 1
call fcn_fffbb4da  ; call 0xfffbb4da
mov esi, eax
mov ecx, dword [ebp - 0x10c]
mov edx, ebx
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
movzx eax, al
push ecx
and si, 0xff
mov ecx, 2
add esi, eax
mov eax, dword [ebp - 0x114]
push 1
add eax, esi
mov edx, dword [ebp - 0x10c]
mov word [ebp - 0x6c], ax
lea eax, [ebp - 0xa8]
push eax
mov eax, edi
mov byte [ebp - 0x6a], 3
push 0
mov dword [ebp - 0x7a], 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
mov esi, eax
add esp, 0x20
mov edx, dword [ebp - 0x10c]
test eax, eax
mov eax, edi
cmove esi, dword [ebp - 0x110]
xor ecx, ecx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov eax, 0xc
mov ecx, ebx
mov edx, dword [ebp - 0x10c]
cmovne esi, eax
mov eax, edi
call fcn_fffc3763  ; call 0xfffc3763
cmp eax, 3
mov eax, 3
cmove esi, eax

loc_fffc1569:
inc ebx
cmp ebx, 4
jne loc_fffc1216  ; jne 0xfffc1216
inc dword [ebp - 0x10c]
add dword [ebp - 0x12c], 0x1055
cmp dword [ebp - 0x10c], 2
je short loc_fffc1593  ; je 0xfffc1593

loc_fffc158c:
xor ebx, ebx
jmp near loc_fffc1216  ; jmp 0xfffc1216

loc_fffc1593:
mov eax, dword [edi + 0x2223]
test esi, esi
mov dword [eax + 0x3400], 0
je short loc_fffc15be  ; je 0xfffc15be
mov edx, 0xdd42
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x120], esi
jmp near loc_fffc16c0  ; jmp 0xfffc16c0

loc_fffc15be:
mov edx, 0xdd41
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
jmp near loc_fffc16c0  ; jmp 0xfffc16c0

loc_fffc15cf:
mov edx, dword [eax + 0x2223]
mov eax, dword [edx + 0x4008]
or eax, 0x8000000
mov dword [edx + 0x4008], eax
jmp near loc_fffc06d1  ; jmp 0xfffc06d1

loc_fffc15eb:
mov edx, dword [edi + 0x2223]
mov eax, dword [edx + 0x4408]
or eax, 0x8000000
mov dword [edx + 0x4408], eax
jmp near loc_fffc06de  ; jmp 0xfffc06de

loc_fffc1607:
xor ecx, ecx
mov edx, 1
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
je loc_fffc0d40  ; je 0xfffc0d40
jmp near loc_fffc16a5  ; jmp 0xfffc16a5

loc_fffc1622:
cmp bl, 1
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4420
add eax, dword [edi + 0x2223]
mov edx, dword [eax]
and edx, 0xffdfffff
cmp bl, 1
mov dword [eax], edx
lea edx, [ebp - 0xa8]
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x468c
add eax, dword [edi + 0x2223]
cmp dword [esi + 0xa], 1
mov eax, dword [eax]
sbb eax, eax
and eax, 2
xor ecx, ecx
mov byte [ebp - 0x9d], al
push eax
mov eax, edi
push 1
push edx
mov edx, ebx
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
je loc_fffc0d71  ; je 0xfffc0d71
jmp short loc_fffc16a5  ; jmp 0xfffc16a5

loc_fffc1693:
cmp dword [edi + 0x2240], 0
jne loc_fffc0b59  ; jne 0xfffc0b59
jmp near loc_fffc07c6  ; jmp 0xfffc07c6

loc_fffc16a5:
mov edx, 0xdd3a
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x120], 0
jmp near loc_fffc0d91  ; jmp 0xfffc0d91

loc_fffc16c0:
mov eax, dword [ebp - 0x120]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc16ce:
push ebp
mov ebp, esp
push edi
mov edi, ecx
push esi
mov esi, eax
mov eax, edx
push ebx
xor edx, edx
lea esp, [esp - 0x3c]
mov dword [ebp - 0x2d], 2
cmp byte [esi + 0x3a], 0
mov word [ebp - 0x25], 0
sete dl
mov byte [ebp - 0x23], 0
mov dword [ebp - 0x3c], edx
mov byte [ebp - 0x21], 0
imul edx, edx, 0x1055
mov byte [ebp - 0x20], 0
add edx, esi
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov byte [ebp - 0x19], 3
mov dword [ebp - 0x29], 0
cmp dword [edx + 0xa], 1
sbb edx, edx
and edx, 2
cmp eax, 0x1ff
mov byte [ebp - 0x22], dl
ja short loc_fffc173d  ; ja 0xfffc173d
mov word [ebp - 0x1d], 1
mov word [ebp - 0x1b], ax
jmp short loc_fffc1773  ; jmp 0xfffc1773

loc_fffc173d:
xor edx, edx
mov ecx, 0x1f
div ecx
mov byte [ebp - 0x19], 0x1f
mov word [ebp - 0x1b], 0xa
cmp eax, 0x1ff
jbe short loc_fffc176f  ; jbe 0xfffc176f
mov cx, 0x1ff
xor edx, edx
div ecx
mov word [ebp - 0x1d], 0x1ff
mov edx, 0x1ff
add eax, 2
jmp short loc_fffc177a  ; jmp 0xfffc177a

loc_fffc176f:
mov word [ebp - 0x1d], ax

loc_fffc1773:
xor edx, edx
mov eax, 1

loc_fffc177a:
push ecx
lea ecx, [ebp - 0x2d]
and eax, 0xff
push 1
movzx edx, dl
push ecx
xor ecx, ecx
push 1
push 0
push 1
push edx
mov edx, dword [ebp - 0x3c]
push eax
mov eax, esi
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ebx, eax
jne short loc_fffc17c3  ; jne 0xfffc17c3
test edi, edi
je short loc_fffc17c3  ; je 0xfffc17c3
mov ecx, 1
mov edx, dword [ebp - 0x3c]
mov eax, esi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov eax, 0xc
cmovne ebx, eax

loc_fffc17c3:
lea esp, [ebp - 0xc]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffc17cd:
db 0x00
db 0x00
db 0x00

fcn_fffc17d0:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x13c]
mov edi, dword [ebp + 8]
cmp byte [edi + 0x3a], 0
jne loc_fffc2821  ; jne 0xfffc2821

loc_fffc17ea:  ; not directly referenced
cmp byte [edi + 0x108f], 0
jne loc_fffc283d  ; jne 0xfffc283d

loc_fffc17f7:  ; not directly referenced
mov edx, 0xdd39
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov eax, edi
xor ebx, ebx
call fcn_fffc0529  ; call 0xfffc0529

loc_fffc180c:  ; not directly referenced
sub esp, 0xc
mov eax, ebx
push 1
mov ecx, 1
mov edx, edi
inc ebx
call fcn_fffc723e  ; call 0xfffc723e
add esp, 0x10
cmp ebx, 4
jne short loc_fffc180c  ; jne 0xfffc180c
lea edx, [ebp - 0x100]
mov eax, edi
mov dword [ebp - 0x100], 0x108052
call fcn_fffad729  ; call 0xfffad729
mov eax, dword [edi + 0x2223]
mov edx, dword [ebp - 0x100]
mov dword [eax + 0x3400], edx
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
mov ebx, dword [ebp - 0x100]
mov dword [ebp - 0x10c], 0
and ebx, 0xfffffff3
mov dword [ebp - 0x124], ebx
jmp near loc_fffc1df7  ; jmp 0xfffc1df7

loc_fffc1876:  ; not directly referenced
mov ecx, esi
mov edx, dword [ebp - 0x10c]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
dec eax
je short loc_fffc189e  ; je 0xfffc189e

loc_fffc1888:  ; not directly referenced
inc esi
add dword [ebp - 0x118], 0x1055
cmp esi, 2
je loc_fffc1de8  ; je 0xfffc1de8
jmp short loc_fffc1876  ; jmp 0xfffc1876

loc_fffc189e:  ; not directly referenced
mov ebx, dword [ebp - 0x128]
lea edx, [ebp - 0x104]
mov eax, edi
mov dword [ebp - 0x104], ebx
call fcn_fffad729  ; call 0xfffad729
mov eax, dword [edi + 0x2223]
mov edx, dword [ebp - 0x104]
xor ecx, ecx
lea ebx, [ebp - 0xa8]
mov dword [eax + 0x3400], edx
mov edx, 0x90
mov eax, ebx
call fcn_fffa24c1  ; call 0xfffa24c1
imul eax, esi, 0x1055
mov edx, dword [ebp - 0x140]
mov ecx, dword [ebp - 0x10c]
lea eax, [eax + edx + 0xf0]
mov edx, esi
lea eax, [edi + eax + 0x19]
mov dword [ebp - 0x134], eax
mov eax, edi
call fcn_fffc005b  ; call 0xfffc005b
test eax, eax
jne short loc_fffc1922  ; jne 0xfffc1922

loc_fffc190d:  ; not directly referenced
mov ebx, dword [ebp - 0x134]
mov dword [ebp - 0x110], 0
jmp near loc_fffc1db5  ; jmp 0xfffc1db5

loc_fffc1922:  ; not directly referenced
movzx edx, byte [eax]
mov ecx, 0x82
mov eax, edi
call fcn_fffc02b4  ; call 0xfffc02b4
mov word [ebp - 0xf4], ax
mov eax, dword [ebp - 0x118]
movzx edx, byte [eax + 0x3c]
movzx eax, byte [edi + 0x20ac]
mov cl, byte [ebp - 0x11c]
add eax, edx
mov byte [ebp - 0xf1], cl
mov byte [ebp - 0xdc], cl
mov word [ebp - 0xd5], ax
mov dword [ebp - 0xfc], 0
mov byte [ebp - 0xf2], 1
mov byte [ebp - 0xf0], 0
mov byte [ebp - 0xef], 0
mov byte [ebp - 0xee], 0
mov byte [ebp - 0xed], 0
mov word [ebp - 0xec], 1
mov dword [ebp - 0xf8], 0
mov byte [ebp - 0xe8], 3
mov word [ebp - 0xea], 0x28
mov dword [ebp - 0xe7], 5
mov word [ebp - 0xdf], 0
mov byte [ebp - 0xdd], 0
mov byte [ebp - 0xdb], 0
mov byte [ebp - 0xda], 0
mov byte [ebp - 0xd9], 0
mov byte [ebp - 0xd8], 0
mov word [ebp - 0xd7], 1
mov byte [ebp - 0xd3], 3
mov dword [ebp - 0xe3], 0
mov dword [ebp - 0xd2], 6
mov word [ebp - 0xca], 0
mov byte [ebp - 0xc8], 0
mov byte [ebp - 0xc7], cl
mov edx, dword [ebp - 0x118]
movzx eax, byte [edx + 0x3b]
add eax, 0x26
mov ecx, dword [ebp - 0x10c]
mov word [ebp - 0xc0], ax
mov edx, esi
mov eax, edi
mov byte [ebp - 0xc6], 0
mov byte [ebp - 0xc5], 0
mov byte [ebp - 0xc4], 0
mov byte [ebp - 0xc3], 0
mov word [ebp - 0xc2], 1
mov byte [ebp - 0xbe], 3
mov dword [ebp - 0xce], 0
call fcn_fffc005b  ; call 0xfffc005b
test eax, eax
je loc_fffc190d  ; je 0xfffc190d
movzx edx, byte [eax + 1]
mov ecx, 0x1082
mov eax, edi
call fcn_fffc02b4  ; call 0xfffc02b4
mov word [ebp - 0xb5], ax
mov cl, byte [ebp - 0x11c]
movzx eax, byte [edi + 0x20aa]
mov dword [ebp - 0xbd], 0
mov byte [ebp - 0xb3], 1
mov byte [ebp - 0xb2], cl
mov byte [ebp - 0xb1], 0
mov byte [ebp - 0xb0], 0
mov byte [ebp - 0xaf], 0
mov byte [ebp - 0xae], 0
mov word [ebp - 0xad], 1
mov dword [ebp - 0xb9], 0
mov byte [ebp - 0xa9], 3
mov word [ebp - 0xab], ax
mov dword [ebp - 0x110], 0

loc_fffc1b07:  ; not directly referenced
push 9
mov ecx, dword [ebp - 0x10c]
mov edx, esi
push 3
mov eax, edi
xor ebx, ebx
push 0xf
push dword [ebp - 0x110]
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x10

loc_fffc1b27:  ; not directly referenced
mov ecx, esi
mov edx, dword [ebp - 0x10c]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
dec eax
je short loc_fffc1b50  ; je 0xfffc1b50

loc_fffc1b39:  ; not directly referenced
lea eax, [ebx + 1]
add ebx, 2
cmp dword [edi + 0x2240], 0
cmove ebx, eax
cmp bl, 0x3f
jbe short loc_fffc1b27  ; jbe 0xfffc1b27
jmp short loc_fffc1bac  ; jmp 0xfffc1bac

loc_fffc1b50:  ; not directly referenced
push 9
movzx eax, bl
mov ecx, dword [ebp - 0x10c]
push 6
mov edx, esi
push 8
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0xc
lea eax, [ebp - 0xfc]
push 1
mov ecx, 3
mov edx, esi
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
jne loc_fffc190d  ; jne 0xfffc190d
xor ecx, ecx
mov edx, esi
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
je short loc_fffc1b39  ; je 0xfffc1b39
jmp near loc_fffc190d  ; jmp 0xfffc190d

loc_fffc1bac:  ; not directly referenced
mov dl, byte [edi + 0x20b5]
mov cl, byte [ebp - 0x110]
mov ebx, esi
mov byte [ebp - 0x130], dl
lea eax, [ebp - 0xa8]
mov dword [ebp - 0x114], 0
mov edx, eax
mov byte [ebp - 0x13c], cl
mov byte [ebp - 0x138], bl
jmp near loc_fffc1c92  ; jmp 0xfffc1c92

loc_fffc1be3:  ; not directly referenced
mov ecx, dword [edi + 0x2223]
cmp byte [ebp - 0x13c], 0
mov dword [ebp - 0x144], ecx
jne short loc_fffc1c41  ; jne 0xfffc1c41
mov ebx, dword [ebp - 0x114]
cmp byte [ebp - 0x138], 1
sbb ecx, ecx
not ecx
and ecx, 0x100
add ecx, dword [ebx*4 + ref_fffcf5b0]  ; add ecx, dword [ebx*4 - 0x30a50]
mov ebx, dword [ebp - 0x144]
lea ebx, [ecx + ebx + 4]
mov ebx, dword [ebx]
mov dword [ebp - 0x120], ebx
mov ebx, dword [ebp - 0x144]
lea ecx, [ecx + ebx + 8]
mov ebx, dword [ebp - 0x120]
mov ecx, dword [ecx]
or dword [edx], ebx
or dword [edx + 4], ecx
jmp short loc_fffc1c89  ; jmp 0xfffc1c89

loc_fffc1c41:  ; not directly referenced
mov ebx, dword [ebp - 0x114]
cmp byte [ebp - 0x138], 1
sbb ecx, ecx
not ecx
and ecx, 0x100
add ecx, dword [ebx*4 + ref_fffcf5b0]  ; add ecx, dword [ebx*4 - 0x30a50]
mov ebx, dword [ebp - 0x144]
lea ebx, [ecx + ebx + 4]
mov ebx, dword [ebx]
mov dword [ebp - 0x120], ebx
mov ebx, dword [ebp - 0x144]
lea ecx, [ecx + ebx + 8]
mov ebx, dword [ebp - 0x120]
mov ecx, dword [ecx]
or dword [edx + 8], ebx
or dword [edx + 0xc], ecx

loc_fffc1c89:  ; not directly referenced
inc dword [ebp - 0x114]
add edx, 0x10

loc_fffc1c92:  ; not directly referenced
mov cl, byte [ebp - 0x114]
cmp byte [ebp - 0x130], cl
ja loc_fffc1be3  ; ja 0xfffc1be3
inc dword [ebp - 0x110]
cmp dword [ebp - 0x110], 2
je loc_fffc28f1  ; je 0xfffc28f1
jmp near loc_fffc1b07  ; jmp 0xfffc1b07

loc_fffc1cbc:  ; not directly referenced
mov ebx, dword [eax]
inc edx
lea ecx, [ebx + ebx]
or ecx, ebx
mov ebx, dword [eax + 4]
mov dword [eax], ecx
lea ecx, [ebx + ebx]
or ecx, ebx
mov ebx, dword [eax + 8]
mov dword [eax + 4], ecx
lea ecx, [ebx + ebx]
or ecx, ebx
mov ebx, dword [eax + 0xc]
mov dword [eax + 8], ecx
lea ecx, [ebx + ebx]
or ecx, ebx
mov dword [eax + 0xc], ecx
add eax, 0x10
jmp short loc_fffc1cee  ; jmp 0xfffc1cee

loc_fffc1cec:  ; not directly referenced
xor edx, edx

loc_fffc1cee:  ; not directly referenced
cmp dl, byte [ebp - 0x130]
jne short loc_fffc1cbc  ; jne 0xfffc1cbc
jmp near loc_fffc190d  ; jmp 0xfffc190d

loc_fffc1cfb:  ; not directly referenced
mov edx, dword [ebp - 0x110]
lea eax, [ebp - 0xa8]
shl edx, 4
sub esp, 0xc
add edx, eax
lea ecx, [ebp - 0x100]
imul eax, dword [ebp - 0x110], 5
add eax, dword [ebp - 0x134]
push eax
mov eax, edi
mov dword [ebp - 0x100], 0
call fcn_fffb9a3c  ; call 0xfffb9a3c
add esp, 0x10
cmp dword [ebp - 0x100], 1
jne loc_fffc1dcd  ; jne 0xfffc1dcd
cmp byte [ebx], 0x3f
jbe short loc_fffc1d5f  ; jbe 0xfffc1d5f
mov al, byte [ebx]
mov byte [ebx + 4], 1
and eax, 0x3f
movzx edx, al
mov byte [ebx], al
mov dword [ebp - 0x114], edx
jmp short loc_fffc1d6c  ; jmp 0xfffc1d6c

loc_fffc1d5f:  ; not directly referenced
movzx ecx, byte [ebx]
mov byte [ebx + 4], 0
mov dword [ebp - 0x114], ecx

loc_fffc1d6c:  ; not directly referenced
push dword [ebp - 0x110]
mov ecx, dword [ebp - 0x10c]
mov edx, esi
push 3
push 0xf
movzx eax, byte [ebx + 4]
add ebx, 5
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
push dword [ebp - 0x110]
mov ecx, dword [ebp - 0x10c]
mov edx, esi
push 6
mov eax, edi
push 8
push dword [ebp - 0x114]
call fcn_fffbfdae  ; call 0xfffbfdae
inc dword [ebp - 0x110]
add esp, 0x20

loc_fffc1db5:  ; not directly referenced
movzx eax, byte [edi + 0x20b5]
cmp dword [ebp - 0x110], eax
jb loc_fffc1cfb  ; jb 0xfffc1cfb
jmp near loc_fffc1888  ; jmp 0xfffc1888

loc_fffc1dcd:  ; not directly referenced
mov edx, 0xdd3b
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x128], 1
jmp near loc_fffc1f54  ; jmp 0xfffc1f54

loc_fffc1de8:  ; not directly referenced
inc dword [ebp - 0x10c]
cmp dword [ebp - 0x10c], 4
je short loc_fffc1e3a  ; je 0xfffc1e3a

loc_fffc1df7:  ; not directly referenced
mov bl, byte [ebp - 0x10c]
mov eax, dword [ebp - 0x124]
mov byte [ebp - 0x11c], bl
mov ebx, dword [ebp - 0x10c]
shl ebx, 2
mov dword [ebp - 0x12c], edi
or ebx, eax
mov dword [ebp - 0x118], edi
mov dword [ebp - 0x128], ebx
xor esi, esi
imul ebx, dword [ebp - 0x10c], 0x2d
mov dword [ebp - 0x140], ebx
jmp near loc_fffc1876  ; jmp 0xfffc1876

loc_fffc1e3a:  ; not directly referenced
xor ebx, ebx

loc_fffc1e3c:  ; not directly referenced
sub esp, 0xc
xor ecx, ecx
push 0
mov eax, ebx
mov edx, edi
inc ebx
call fcn_fffc723e  ; call 0xfffc723e
add esp, 0x10
cmp ebx, 4
jne short loc_fffc1e3c  ; jne 0xfffc1e3c
lea edx, [ebp - 0x100]
mov eax, edi
mov dword [ebp - 0x100], 0
call fcn_fffad729  ; call 0xfffad729
mov eax, dword [edi + 0x2223]
mov edx, dword [ebp - 0x100]
mov dword [eax + 0x3400], edx
cmp byte [edi + 0x3a], 0
mov dword [ebp - 0xa8], 2
mov word [ebp - 0xa0], 0
mov byte [ebp - 0x9e], 0
mov byte [ebp - 0x9c], 0
mov byte [ebp - 0x9b], 0x1f
mov byte [ebp - 0x9a], 0
mov byte [ebp - 0x99], 0
mov word [ebp - 0x98], 1
mov word [ebp - 0x96], 0x64
mov byte [ebp - 0x94], 0x64
mov dword [ebp - 0xa4], 0
je short loc_fffc1ef0  ; je 0xfffc1ef0
xor ecx, ecx
xor edx, edx
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne loc_fffc2903  ; jne 0xfffc2903

loc_fffc1ef0:  ; not directly referenced
cmp byte [edi + 0x108f], 0
jne loc_fffc2859  ; jne 0xfffc2859

loc_fffc1efd:  ; not directly referenced
mov edx, dword [edi + 0x2223]
mov esi, edi
xor ebx, ebx
mov eax, dword [edx + 0x5030]
or eax, 8
mov dword [ebp - 0x100], eax
mov dword [edx + 0x5030], eax

loc_fffc1f1c:  ; not directly referenced
cmp byte [esi + 0x3a], 0
jne loc_fffc2874  ; jne 0xfffc2874

loc_fffc1f26:  ; not directly referenced
inc ebx
add esi, 0x1055
cmp ebx, 2
je short loc_fffc1f48  ; je 0xfffc1f48
jmp short loc_fffc1f1c  ; jmp 0xfffc1f1c

loc_fffc1f34:  ; not directly referenced
xor ecx, ecx
mov edx, ebx
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
je short loc_fffc1f26  ; je 0xfffc1f26
jmp near loc_fffc2903  ; jmp 0xfffc2903

loc_fffc1f48:  ; not directly referenced
mov eax, edi
call fcn_fffbfce0  ; call 0xfffbfce0
jmp near loc_fffc2903  ; jmp 0xfffc2903

loc_fffc1f54:  ; not directly referenced
mov edx, 0xdd3c
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
lea ebx, [ebp - 0xa8]
lea edx, [ebp - 0xfc]
mov ecx, ebx
mov eax, edi
call fcn_fffc49b1  ; call 0xfffc49b1
lea ebx, [edi + 0x3c31]
mov dword [ebp - 0x110], 0
mov dword [ebp - 0x114], 0
mov dword [ebp - 0x13c], ebx

loc_fffc1f95:  ; not directly referenced
imul ebx, dword [ebp - 0x110], 0x24
mov al, byte [ebp - 0x110]
mov byte [ebp - 0xf1], al
mov byte [ebp - 0xdc], al
mov byte [ebp - 0xc7], al
mov byte [ebp - 0xb2], al
mov byte [ebp - 0x9d], al
mov byte [ebp - 0x88], al
mov byte [ebp - 0x73], al
mov byte [ebp - 0x5e], al
mov dword [ebp - 0x10c], 0
mov dword [ebp - 0x130], ebx

loc_fffc1fdc:  ; not directly referenced
mov ecx, dword [ebp - 0x10c]
mov edx, dword [ebp - 0x110]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffc23ad  ; je 0xfffc23ad
push esi
lea eax, [ebp - 0xa8]
xor ecx, ecx
push 1
mov edx, dword [ebp - 0x10c]
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov edx, dword [ebp - 0x114]
mov dword [ebp - 0x11c], 0
cmovne edx, eax
mov dword [ebp - 0x114], 0
imul eax, dword [ebp - 0x10c], 0x900
add eax, dword [ebp - 0x13c]
movzx ebx, byte [ebp - 0xf1]
mov dword [ebp - 0x124], edx
mov dword [ebp - 0x134], eax
mov dword [ebp - 0x138], ebx

loc_fffc2065:  ; not directly referenced
push 9
mov ecx, dword [ebp - 0x138]
mov edx, dword [ebp - 0x10c]
push 1
mov eax, edi
push 0x13
push dword [ebp - 0x11c]
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x10
mov byte [ebp - 0x118], 0

loc_fffc208e:  ; not directly referenced
push 9
movzx esi, byte [ebp - 0x118]
mov eax, edi
push 6
mov ecx, dword [ebp - 0x138]
mov edx, dword [ebp - 0x10c]
push 0
push esi
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x10
mov eax, 0x4140
mov dword [ebp - 0x140], 0
mov bl, byte [ebp - 0x10c]
jmp short loc_fffc2102  ; jmp 0xfffc2102

loc_fffc20c9:  ; not directly referenced
test bl, bl
lea edx, [eax + 0x200]
lea ecx, [eax + 0x600]
cmovne edx, ecx
add edx, dword [edi + 0x2223]
test bl, bl
mov dword [edx], 0
lea edx, [eax + 0x400]
cmove edx, eax
add edx, dword [edi + 0x2223]
inc dword [ebp - 0x140]
add eax, 4
mov edx, dword [edx]

loc_fffc2102:  ; not directly referenced
movzx edx, byte [edi + 0x20b5]
cmp dword [ebp - 0x140], edx
jb short loc_fffc20c9  ; jb 0xfffc20c9
push ebx
lea ebx, [ebp - 0xfc]
mov ecx, 3
push 1
mov edx, dword [ebp - 0x10c]
mov eax, edi
push ebx
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x1c
mov ebx, eax
push 1
test eax, eax
lea eax, [ebp - 0xa8]
push eax
mov ecx, 3
mov edx, dword [ebp - 0x10c]
push 0
mov eax, edi
cmove ebx, dword [ebp - 0x114]
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov edx, dword [ebp - 0x10c]
cmovne ebx, eax
xor ecx, ecx
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov eax, 0xc
mov cl, byte [ebp - 0x10c]
cmove eax, ebx
mov ebx, dword [ebp - 0x134]
mov dword [ebp - 0x114], eax
mov byte [ebp - 0x120], cl
movzx eax, byte [ebp - 0x118]
lea edx, [ebx + eax*2 + 0x82]
lea ebx, [ebx + esi*2]
xor eax, eax
jmp short loc_fffc2214  ; jmp 0xfffc2214

loc_fffc21b8:  ; not directly referenced
cmp byte [ebp - 0x120], 0
mov esi, dword [edi + 0x2223]
jne short loc_fffc21d0  ; jne 0xfffc21d0
lea ecx, [eax*4 + 0x4340]
jmp short loc_fffc21d7  ; jmp 0xfffc21d7

loc_fffc21d0:  ; not directly referenced
lea ecx, [eax*4 + 0x4740]

loc_fffc21d7:  ; not directly referenced
add ecx, esi
cmp byte [ebp - 0x11c], 1
mov ecx, dword [ecx]
jne short loc_fffc21f6  ; jne 0xfffc21f6
mov word [edx - 2], cx
cmp dword [edi + 0x2240], 0
je short loc_fffc220d  ; je 0xfffc220d
mov word [edx], cx
jmp short loc_fffc220d  ; jmp 0xfffc220d

loc_fffc21f6:  ; not directly referenced
mov esi, eax
shl esi, 8
mov word [ebx + esi], cx
cmp dword [edi + 0x2240], 0
je short loc_fffc220d  ; je 0xfffc220d
mov word [ebx + esi + 2], cx

loc_fffc220d:  ; not directly referenced
inc eax
add edx, 0x100

loc_fffc2214:  ; not directly referenced
movzx ecx, byte [edi + 0x20b5]
cmp eax, ecx
jb short loc_fffc21b8  ; jb 0xfffc21b8
mov al, byte [ebp - 0x118]
mov dl, byte [ebp - 0x118]
add eax, 2
inc edx
cmp dword [edi + 0x2240], 0
cmove eax, edx
cmp al, 0x3f
mov byte [ebp - 0x118], al
jbe loc_fffc208e  ; jbe 0xfffc208e
inc dword [ebp - 0x11c]
cmp dword [ebp - 0x11c], 2
jne loc_fffc2065  ; jne 0xfffc2065
cmp dword [ebp - 0x114], 0
mov eax, dword [ebp - 0x124]
cmovne eax, dword [ebp - 0x114]
mov byte [ebp - 0x118], 0
imul ebx, dword [ebp - 0x10c], 9
mov dword [ebp - 0x114], eax
mov dword [ebp - 0x124], ebx
jmp near loc_fffc239b  ; jmp 0xfffc239b

loc_fffc228d:  ; not directly referenced
movzx ebx, byte [ebp - 0x118]
mov eax, dword [ebp - 0x124]
add eax, ebx
sub esp, 0xc
shl eax, 8
mov ecx, 0x80
lea esi, [ebx + ebx*2]
add esi, dword [ebp - 0x130]
lea edx, [edi + eax + 0x3c31]
imul eax, dword [ebp - 0x10c], 0x1055
add esi, eax
mov dword [ebp - 0x11c], eax
lea eax, [edi + esi + 0x295]
push eax
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
dec eax
mov eax, 1
cmovne eax, dword [ebp - 0x114]
add esi, edi
mov dword [ebp - 0x114], eax
cmp byte [esi + 0x295], 0x3f
jbe short loc_fffc2342  ; jbe 0xfffc2342
push ebx
mov eax, edi
mov ecx, dword [ebp - 0x110]
push 1
mov edx, dword [ebp - 0x10c]
push 0x13
push 1
call fcn_fffbfdae  ; call 0xfffbfdae
mov eax, dword [ebp - 0x130]
add eax, dword [ebp - 0x11c]
add eax, edi
mov byte [ebx + eax + 0x2b0], 1
mov al, byte [esi + 0x295]
sub eax, 0x40
mov byte [esi + 0x295], al
push ebx
movzx eax, al
push 6
push 0
jmp short loc_fffc237e  ; jmp 0xfffc237e

loc_fffc2342:  ; not directly referenced
push ebx
mov eax, edi
mov ecx, dword [ebp - 0x110]
push 1
mov edx, dword [ebp - 0x10c]
push 0x13
push 0
call fcn_fffbfdae  ; call 0xfffbfdae
mov eax, dword [ebp - 0x130]
add eax, dword [ebp - 0x11c]
add eax, edi
mov byte [ebx + eax + 0x2b0], 0
push ebx
push 6
push 0
movzx eax, byte [esi + 0x295]

loc_fffc237e:  ; not directly referenced
push eax
mov ecx, dword [ebp - 0x110]
mov edx, dword [ebp - 0x10c]
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x20
inc byte [ebp - 0x118]

loc_fffc239b:  ; not directly referenced
mov bl, byte [ebp - 0x118]
cmp bl, byte [edi + 0x20b5]
jb loc_fffc228d  ; jb 0xfffc228d

loc_fffc23ad:  ; not directly referenced
inc dword [ebp - 0x10c]
cmp dword [ebp - 0x10c], 2
jne loc_fffc1fdc  ; jne 0xfffc1fdc
inc dword [ebp - 0x110]
cmp dword [ebp - 0x110], 4
jne loc_fffc1f95  ; jne 0xfffc1f95
cmp dword [ebp - 0x114], 0
je short loc_fffc23f6  ; je 0xfffc23f6
mov eax, edi
mov edx, 0xdd3e
call fcn_fffad891  ; call 0xfffad891
mov eax, dword [ebp - 0x114]
mov dword [ebp - 0x128], eax
jmp short loc_fffc2402  ; jmp 0xfffc2402

loc_fffc23f6:  ; not directly referenced
mov edx, 0xdd3d
mov eax, edi
call fcn_fffad891  ; call 0xfffad891

loc_fffc2402:  ; not directly referenced
mov edx, 0xdd40
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
lea edx, [ebp - 0x100]
mov eax, edi
mov dword [ebp - 0x100], 0x200
xor esi, esi
call fcn_fffad729  ; call 0xfffad729
mov eax, dword [edi + 0x2223]
mov edx, dword [ebp - 0x100]
mov dword [eax + 0x3400], edx
mov eax, edi
call fcn_fffc39a9  ; call 0xfffc39a9
mov dword [ebp - 0x10c], 0
jmp near loc_fffc27c5  ; jmp 0xfffc27c5

loc_fffc244f:  ; not directly referenced
mov ecx, dword [ebp - 0x10c]
mov edx, ebx
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
dec eax
jne loc_fffc27a2  ; jne 0xfffc27a2
mov al, byte [ebp - 0x10c]
mov edx, dword [ebp - 0x12c]
cmp al, 1
mov ecx, edx
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4688
add eax, dword [edi + 0x2223]
mov dword [eax], 0x10001
mov dword [ebp - 0xa8], 8
movzx eax, byte [edx + 0x3e]
mov byte [ebp - 0x9d], bl
mov word [ebp - 0x96], ax
mov word [ebp - 0xa0], 0
mov byte [ebp - 0x9e], 0
mov byte [ebp - 0x9c], 0
mov byte [ebp - 0x9b], 0
mov byte [ebp - 0x9a], 0
mov byte [ebp - 0x99], 0
mov word [ebp - 0x98], 1
mov byte [ebp - 0x94], 3
mov dword [ebp - 0xa4], 0
mov dword [ebp - 0x93], 5
mov byte [ebp - 0x88], bl
mov word [ebp - 0x8b], 0
mov byte [ebp - 0x89], 0
mov byte [ebp - 0x87], 0
mov byte [ebp - 0x86], 0x1f
mov byte [ebp - 0x85], 0
mov byte [ebp - 0x84], 0
mov word [ebp - 0x83], 1
mov word [ebp - 0x81], 4
mov byte [ebp - 0x7f], 3
mov dword [ebp - 0x8f], 0
mov dword [ebp - 0x7e], 9
mov byte [ebp - 0x73], bl
mov word [ebp - 0x76], 0
mov byte [ebp - 0x74], 0
mov byte [ebp - 0x72], 2
movzx edx, byte [edx + 0x3c]
movzx eax, byte [ecx + 0x41]
lea eax, [edx + eax + 5]
mov word [ebp - 0x57], ax
push edx
lea eax, [ebp - 0xa8]
mov ecx, 3
push 1
mov edx, dword [ebp - 0x10c]
mov byte [ebp - 0x71], 0x1f
push eax
mov eax, edi
mov byte [ebp - 0x70], 0
push 0
mov byte [ebp - 0x6f], 0
mov word [ebp - 0x6e], 3
push 0
mov word [ebp - 0x6c], 4
mov byte [ebp - 0x6a], 4
push 0
mov dword [ebp - 0x7a], 0
mov dword [ebp - 0x69], 5
push 0
mov byte [ebp - 0x5e], bl
mov word [ebp - 0x61], 0
push 1
mov byte [ebp - 0x5f], 0
mov byte [ebp - 0x5d], 0
mov byte [ebp - 0x5c], 0x1f
mov byte [ebp - 0x5b], 0
mov byte [ebp - 0x5a], 0
mov word [ebp - 0x59], 1
mov byte [ebp - 0x55], 3
mov dword [ebp - 0x65], 0
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov ecx, dword [ebp - 0x12c]
mov edx, dword [ebp - 0x12c]
cmovne esi, eax
mov dword [ebp - 0xa8], 3
movzx edx, byte [edx + 0x3f]
movzx eax, byte [ecx + 0x3e]
mov dword [ebp - 0x110], esi
mov word [ebp - 0x114], dx
mov word [ebp - 0x96], dx
mov word [ebp - 0x81], ax
mov edx, ebx
mov byte [ebp - 0x9d], bl
mov word [ebp - 0xa0], 0x400
mov byte [ebp - 0x9e], 0
mov byte [ebp - 0x9c], 0
mov byte [ebp - 0x9b], 0x12
mov byte [ebp - 0x9a], 0
mov byte [ebp - 0x99], 0
mov word [ebp - 0x98], 1
mov byte [ebp - 0x94], 3
mov dword [ebp - 0xa4], 0
mov dword [ebp - 0x93], 8
mov byte [ebp - 0x88], bl
mov word [ebp - 0x8b], 0
mov byte [ebp - 0x89], 0
mov byte [ebp - 0x87], 0
mov byte [ebp - 0x86], 0
mov byte [ebp - 0x85], 0
mov byte [ebp - 0x84], 0
mov word [ebp - 0x83], 1
mov byte [ebp - 0x7f], 3
mov dword [ebp - 0x8f], 0
mov dword [ebp - 0x7e], 0xa
mov byte [ebp - 0x73], bl
mov word [ebp - 0x76], 8
mov eax, edi
mov byte [ebp - 0x74], 0
mov ecx, dword [ebp - 0x10c]
mov byte [ebp - 0x72], 0
mov byte [ebp - 0x71], 0
mov byte [ebp - 0x70], 0
mov byte [ebp - 0x6f], 0
mov word [ebp - 0x6e], 1
call fcn_fffbb4da  ; call 0xfffbb4da
mov esi, eax
mov ecx, dword [ebp - 0x10c]
mov edx, ebx
mov eax, edi
call fcn_fffbb589  ; call 0xfffbb589
movzx eax, al
push ecx
and si, 0xff
mov ecx, 2
add esi, eax
mov eax, dword [ebp - 0x114]
push 1
add eax, esi
mov edx, dword [ebp - 0x10c]
mov word [ebp - 0x6c], ax
lea eax, [ebp - 0xa8]
push eax
mov eax, edi
mov byte [ebp - 0x6a], 3
push 0
mov dword [ebp - 0x7a], 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
mov esi, eax
add esp, 0x20
mov edx, dword [ebp - 0x10c]
test eax, eax
mov eax, edi
cmove esi, dword [ebp - 0x110]
xor ecx, ecx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov eax, 0xc
mov ecx, ebx
mov edx, dword [ebp - 0x10c]
cmovne esi, eax
mov eax, edi
call fcn_fffc3763  ; call 0xfffc3763
cmp eax, 3
mov eax, 3
cmove esi, eax

loc_fffc27a2:  ; not directly referenced
inc ebx
cmp ebx, 4
jne loc_fffc244f  ; jne 0xfffc244f
inc dword [ebp - 0x10c]
add dword [ebp - 0x12c], 0x1055
cmp dword [ebp - 0x10c], 2
je short loc_fffc27cc  ; je 0xfffc27cc

loc_fffc27c5:  ; not directly referenced
xor ebx, ebx
jmp near loc_fffc244f  ; jmp 0xfffc244f

loc_fffc27cc:  ; not directly referenced
lea edx, [ebp - 0x100]
mov eax, edi
and dword [ebp - 0x100], 0xfffffdff
call fcn_fffad729  ; call 0xfffad729
mov eax, dword [edi + 0x2223]
mov edx, dword [ebp - 0x100]
test esi, esi
mov dword [eax + 0x3400], edx
je short loc_fffc2810  ; je 0xfffc2810
mov edx, 0xdd42
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x128], esi
jmp near loc_fffc291e  ; jmp 0xfffc291e

loc_fffc2810:  ; not directly referenced
mov edx, 0xdd41
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
jmp near loc_fffc291e  ; jmp 0xfffc291e

loc_fffc2821:  ; not directly referenced
mov edx, dword [edi + 0x2223]
mov eax, dword [edx + 0x4008]
or eax, 0x8000000
mov dword [edx + 0x4008], eax
jmp near loc_fffc17ea  ; jmp 0xfffc17ea

loc_fffc283d:  ; not directly referenced
mov edx, dword [edi + 0x2223]
mov eax, dword [edx + 0x4408]
or eax, 0x8000000
mov dword [edx + 0x4408], eax
jmp near loc_fffc17f7  ; jmp 0xfffc17f7

loc_fffc2859:  ; not directly referenced
xor ecx, ecx
mov edx, 1
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
je loc_fffc1efd  ; je 0xfffc1efd
jmp near loc_fffc2903  ; jmp 0xfffc2903

loc_fffc2874:  ; not directly referenced
cmp bl, 1
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4420
add eax, dword [edi + 0x2223]
mov edx, dword [eax]
and edx, 0xffdfffff
cmp bl, 1
mov dword [ebp - 0x100], edx
mov dword [eax], edx
sbb eax, eax
lea edx, [ebp - 0xa8]
and eax, 0xfffffc00
add eax, 0x468c
add eax, dword [edi + 0x2223]
cmp dword [esi + 0xa], 1
mov eax, dword [eax]
mov dword [ebp - 0x100], eax
sbb eax, eax
and eax, 2
xor ecx, ecx
mov byte [ebp - 0x9d], al
push eax
mov eax, edi
push 1
push edx
mov edx, ebx
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
je loc_fffc1f34  ; je 0xfffc1f34
jmp short loc_fffc2903  ; jmp 0xfffc2903

loc_fffc28f1:  ; not directly referenced
cmp dword [edi + 0x2240], 0
jne loc_fffc1cec  ; jne 0xfffc1cec
jmp near loc_fffc190d  ; jmp 0xfffc190d

loc_fffc2903:  ; not directly referenced
mov edx, 0xdd3a
mov eax, edi
call fcn_fffad891  ; call 0xfffad891
mov dword [ebp - 0x128], 0
jmp near loc_fffc1f54  ; jmp 0xfffc1f54

loc_fffc291e:  ; not directly referenced
mov eax, dword [ebp - 0x128]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc292c:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x8c]
mov ebx, dword [ebp + 8]
mov ecx, dword [ebx + 0x224c]
test ecx, ecx
mov dword [ebx + 0x2aa6], ecx
jne short loc_fffc2958  ; jne 0xfffc2958
mov dword [ebx + 0x20b6], 0xa6b
jmp short loc_fffc2987  ; jmp 0xfffc2987

loc_fffc2958:  ; not directly referenced
xor edx, edx
mov esi, 0xc8
mov eax, ecx
mov dword [ebx + 0x20b6], ecx
div esi
test edx, edx
jne short loc_fffc2987  ; jne 0xfffc2987
xor edx, edx
mov si, 0x320
mov eax, ecx
div esi
test edx, edx
je short loc_fffc2987  ; je 0xfffc2987
mov dword [ebx + 0x20ba], 1
jmp short loc_fffc2991  ; jmp 0xfffc2991

loc_fffc2987:  ; not directly referenced
mov dword [ebx + 0x20ba], 0

loc_fffc2991:  ; not directly referenced
mov eax, dword [ebx + 0x2223]
mov eax, dword [eax + 0x5e04]
test al, 0xf
je short loc_fffc29b4  ; je 0xfffc29b4
movzx edx, ah
and eax, 0xff
call fcn_fffc038a  ; call 0xfffc038a
mov dword [ebx + 0x20b6], eax

loc_fffc29b4:  ; not directly referenced
mov edx, dword [ebx + 0x221f]
mov eax, dword [edx + 0xe4]
test ah, 8
jne short loc_fffc29cd  ; jne 0xfffc29cd
mov edx, dword [edx + 0x54]
and dl, 0x10
jne short loc_fffc29eb  ; jne 0xfffc29eb

loc_fffc29cd:  ; not directly referenced
mov dword [ebx + 0x2294], 0
mov dword [ebx + 0x2298], 0
mov dword [ebx + 0x22a0], 0

loc_fffc29eb:  ; not directly referenced
test ah, 0x10
je short loc_fffc2a18  ; je 0xfffc2a18
mov dword [ebx + 0x105f], 0
mov dword [ebx + 0x107c], 0
mov dword [ebx + 0x2193], 0
mov dword [ebx + 0x21d9], 0

loc_fffc2a18:  ; not directly referenced
test eax, 0x20000
je short loc_fffc2a26  ; je 0xfffc2a26
mov byte [ebx + 0x22e4], 2

loc_fffc2a26:  ; not directly referenced
mov edx, eax
and edx, 0x180000
shr edx, 0x13
cmp edx, 2
je short loc_fffc2a52  ; je 0xfffc2a52
cmp edx, 3
je short loc_fffc2a5d  ; je 0xfffc2a5d
dec edx
mov ecx, 0x4000
mov edx, 0x2000
cmove ecx, edx
mov word [ebx + 0x20f6], cx
jmp short loc_fffc2a66  ; jmp 0xfffc2a66

loc_fffc2a52:  ; not directly referenced
mov word [ebx + 0x20f6], 0x800
jmp short loc_fffc2a66  ; jmp 0xfffc2a66

loc_fffc2a5d:  ; not directly referenced
mov word [ebx + 0x20f6], 0x200

loc_fffc2a66:  ; not directly referenced
test eax, 0x2000000
je short loc_fffc2a80  ; je 0xfffc2a80
mov dword [ebx + 0x20b1], 0
mov byte [ebx + 0x20b5], 8
jmp short loc_fffc2ae1  ; jmp 0xfffc2ae1

loc_fffc2a80:  ; not directly referenced
cmp dword [ebx + 0x2244], 1
jne short loc_fffc2a9c  ; jne 0xfffc2a9c
mov dword [ebx + 0x20b1], 1
mov byte [ebx + 0x20b5], 9
jmp short loc_fffc2aad  ; jmp 0xfffc2aad

loc_fffc2a9c:  ; not directly referenced
mov dword [ebx + 0x20b1], 0
mov byte [ebx + 0x20b5], 8

loc_fffc2aad:  ; not directly referenced
test eax, 0x1000000
je short loc_fffc2ae1  ; je 0xfffc2ae1
cmp dword [ebx + 0x2244], 0
mov edi, 1
je loc_fffc3279  ; je 0xfffc3279
mov dword [ebx + 0x22a8], 1
mov dword [ebx + 0x20b1], 1
mov byte [ebx + 0x20b5], 9

loc_fffc2ae1:  ; not directly referenced
test al, 1
jne short loc_fffc2af3  ; jne 0xfffc2af3
and byte [ebx + 0x222f], 0xf0
mov byte [ebx + 0x20fe], 0

loc_fffc2af3:  ; not directly referenced
mov edx, dword [ebx + 0x221f]
mov ecx, dword [edx + 0xe8]
mov edx, ecx
and edx, 0xe00000
shr edx, 0x15
test al, 8
je short loc_fffc2b1c  ; je 0xfffc2b1c
test edx, edx
mov eax, 7
cmovne edx, eax
xor ecx, ecx
jmp short loc_fffc2b2c  ; jmp 0xfffc2b2c

loc_fffc2b1c:  ; not directly referenced
and ecx, 0x70
mov eax, 0x42b
shr ecx, 4
cmp ecx, 7
je short loc_fffc2b34  ; je 0xfffc2b34

loc_fffc2b2c:  ; not directly referenced
movzx eax, word [ecx + ecx + ref_fffcf4ac]  ; movzx eax, word [ecx + ecx - 0x30b54]

loc_fffc2b34:  ; not directly referenced
test edx, edx
jne short loc_fffc2b63  ; jne 0xfffc2b63
cmp eax, dword [ebx + 0x20b6]
mov dword [ebx + 0x20be], 0
mov dword [ebx + 0x20ba], 0
jae loc_fffc3260  ; jae 0xfffc3260
mov dword [ebx + 0x20b6], eax
jmp near loc_fffc3260  ; jmp 0xfffc3260

loc_fffc2b63:  ; not directly referenced
movzx edx, word [edx + edx + ref_fffcf4ba]  ; movzx edx, word [edx + edx - 0x30b46]
mov dword [ebx + 0x20be], 1
cmp edx, eax
cmovb edx, eax
cmp edx, eax
setne al
cmp edx, dword [ebx + 0x20b6]
movzx eax, al
mov dword [ebx + 0x20ba], eax
jae loc_fffc3260  ; jae 0xfffc3260
mov dword [ebx + 0x20b6], edx
jmp near loc_fffc3260  ; jmp 0xfffc3260

loc_fffc2b9f:  ; not directly referenced
mov eax, dword [ebp - 0x54]
cmp dword [eax], 0
je loc_fffc2ff6  ; je 0xfffc2ff6
imul eax, dword [ebp - 0x4c], 0x46
mov edx, dword [ebp - 0x60]
mov edi, dword [ebx + 0x20be]
mov dword [ebp - 0x68], edi
lea eax, [eax + edx + 0x2100]
add eax, ebx
imul edx, dword [ebp - 0x4c], 0x1d
add edx, dword [ebp - 0x64]
lea ecx, [eax + 7]
add edx, ebx
mov dword [ebp - 0x44], ecx
cmp dword [eax + 7], 1
mov cl, byte [ebx + 0x22f3]
mov dword [ebp - 0x40], edx
mov byte [ebp - 0x47], cl
jne loc_fffc2f90  ; jne 0xfffc2f90
mov edi, dword [ebp - 0x44]
cmp byte [edi + 6], 0xb
jne loc_fffc2f90  ; jne 0xfffc2f90
mov al, byte [edi + 7]
mov byte [ebp - 0x48], al
sub eax, 2
cmp al, 1
ja loc_fffc2f90  ; ja 0xfffc2f90
jmp near loc_fffc3213  ; jmp 0xfffc3213

loc_fffc2c0c:  ; not directly referenced
mov edx, dword [ebp - 0x40]
mov byte [edx + 0x14], 8
jmp near loc_fffc3229  ; jmp 0xfffc3229

loc_fffc2c18:  ; not directly referenced
cmp al, 2
jne loc_fffc2f90  ; jne 0xfffc2f90
mov ecx, dword [ebp - 0x40]
mov byte [ecx + 0x14], 0x10
jmp near loc_fffc3229  ; jmp 0xfffc3229

loc_fffc2c2c:  ; not directly referenced
mov edi, dword [ebp - 0x40]
mov edx, dword [ebp - 0x44]
mov byte [edi + 0x13], 0x40
mov al, byte [edx + 0xb]
shr al, 3
inc eax
cmp al, 2
mov byte [ebp - 0x45], al
ja loc_fffc2f90  ; ja 0xfffc2f90
mov byte [edi + 0x12], al
movzx esi, byte [edx + 0xe]
imul eax, esi, 0xf4240
movzx ecx, byte [edx + 0xf]
cdq
idiv ecx
mov ecx, dword [ebp - 0x44]
mov dl, byte [ecx + 0xd]
mov esi, eax
movzx eax, byte [ecx + 0x10]
imul esi, eax
test dl, dl
je short loc_fffc2c96  ; je 0xfffc2c96
movsx ecx, byte [ecx + 0x26]
test cl, cl
je short loc_fffc2c96  ; je 0xfffc2c96
mov al, dl
mov edi, edx
shr al, 4
and edi, 0xf
movzx eax, al
xor edx, edx
imul eax, eax, 0x3e8
mov dword [ebp - 0x58], edi
div edi
imul eax, ecx
add esi, eax

loc_fffc2c96:  ; not directly referenced
cmp esi, 0xb71b0
jg short loc_fffc2caa  ; jg 0xfffc2caa
mov eax, dword [ebp - 0x40]
mov dword [eax + 0xe], 0xa6b
jmp short loc_fffc2cbc  ; jmp 0xfffc2cbc

loc_fffc2caa:  ; not directly referenced
cmp esi, 0xd59f8
jg short loc_fffc2cc3  ; jg 0xfffc2cc3
mov edx, dword [ebp - 0x40]
mov dword [edx + 0xe], 0x960

loc_fffc2cbc:  ; not directly referenced
mov ecx, 1
jmp short loc_fffc2d3d  ; jmp 0xfffc2d3d

loc_fffc2cc3:  ; not directly referenced
cmp esi, 0xf423f
jg short loc_fffc2cd7  ; jg 0xfffc2cd7
mov ecx, dword [ebp - 0x40]
mov dword [ecx + 0xe], 0x855
jmp short loc_fffc2cbc  ; jmp 0xfffc2cbc

loc_fffc2cd7:  ; not directly referenced
cmp esi, 0x112a88
jg short loc_fffc2ceb  ; jg 0xfffc2ceb
mov edi, dword [ebp - 0x40]
mov dword [edi + 0xe], 0x74b
jmp short loc_fffc2cbc  ; jmp 0xfffc2cbc

loc_fffc2ceb:  ; not directly referenced
cmp esi, 0x1312d0
jg short loc_fffc2cff  ; jg 0xfffc2cff
mov eax, dword [ebp - 0x40]
mov dword [eax + 0xe], 0x640
jmp short loc_fffc2cbc  ; jmp 0xfffc2cbc

loc_fffc2cff:  ; not directly referenced
cmp esi, 0x16e360
jg short loc_fffc2d13  ; jg 0xfffc2d13
mov edx, dword [ebp - 0x40]
mov dword [edx + 0xe], 0x535
jmp short loc_fffc2cbc  ; jmp 0xfffc2cbc

loc_fffc2d13:  ; not directly referenced
cmp esi, 0x1c9c38
jg short loc_fffc2d27  ; jg 0xfffc2d27
mov ecx, dword [ebp - 0x40]
mov dword [ecx + 0xe], 0x42b
jmp short loc_fffc2cbc  ; jmp 0xfffc2cbc

loc_fffc2d27:  ; not directly referenced
xor ecx, ecx
cmp esi, 0x2625a0
jg short loc_fffc2d3d  ; jg 0xfffc2d3d
mov edi, dword [ebp - 0x40]
mov cl, 1
mov dword [edi + 0xe], 0x320

loc_fffc2d3d:  ; not directly referenced
cmp dword [ebp - 0x68], 1
sete dl
cmp byte [ebp - 0x47], 0
setne al
test dl, al
je loc_fffc2e82  ; je 0xfffc2e82
cmp esi, 0xae62d
jg short loc_fffc2d6a  ; jg 0xfffc2d6a
mov eax, dword [ebp - 0x40]
mov dword [eax + 0xe], 0xaf0
jmp near loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2d6a:  ; not directly referenced
cmp esi, 0xb71b0
jg short loc_fffc2d81  ; jg 0xfffc2d81
mov edx, dword [ebp - 0x40]
mov dword [edx + 0xe], 0xa6b
jmp near loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2d81:  ; not directly referenced
cmp esi, 0xbbcce
jg short loc_fffc2d98  ; jg 0xfffc2d98
mov edi, dword [ebp - 0x40]
mov dword [edi + 0xe], 0xa28
jmp near loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2d98:  ; not directly referenced
cmp esi, 0xcb735
jg short loc_fffc2daf  ; jg 0xfffc2daf
mov eax, dword [ebp - 0x40]
mov dword [eax + 0xe], 0x960
jmp near loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2daf:  ; not directly referenced
cmp esi, 0xddf22
jg short loc_fffc2dc6  ; jg 0xfffc2dc6
mov edx, dword [ebp - 0x40]
mov dword [edx + 0xe], 0x898
jmp near loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2dc6:  ; not directly referenced
cmp esi, 0xe4e1c
jg short loc_fffc2ddd  ; jg 0xfffc2ddd
mov edi, dword [ebp - 0x40]
mov dword [edi + 0xe], 0x855
jmp near loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2ddd:  ; not directly referenced
cmp esi, 0xf4240
jg short loc_fffc2df4  ; jg 0xfffc2df4
mov eax, dword [ebp - 0x40]
mov dword [eax + 0xe], 0x7d0
jmp near loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2df4:  ; not directly referenced
cmp esi, 0x105944
jg short loc_fffc2e08  ; jg 0xfffc2e08
mov edx, dword [ebp - 0x40]
mov dword [edx + 0xe], 0x74b
jmp short loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2e08:  ; not directly referenced
cmp esi, 0x10f447
jg short loc_fffc2e1c  ; jg 0xfffc2e1c
mov edi, dword [ebp - 0x40]
mov dword [edi + 0xe], 0x708
jmp short loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2e1c:  ; not directly referenced
cmp esi, 0x1312d0
jg short loc_fffc2e30  ; jg 0xfffc2e30
mov eax, dword [ebp - 0x40]
mov dword [eax + 0xe], 0x640
jmp short loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2e30:  ; not directly referenced
cmp esi, 0x15cc5b
jg short loc_fffc2e44  ; jg 0xfffc2e44
mov edx, dword [ebp - 0x40]
mov dword [edx + 0xe], 0x578
jmp short loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2e44:  ; not directly referenced
cmp esi, 0x16e360
jg short loc_fffc2e58  ; jg 0xfffc2e58
mov edi, dword [ebp - 0x40]
mov dword [edi + 0xe], 0x535
jmp short loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2e58:  ; not directly referenced
cmp esi, 0x1c9c38
jg short loc_fffc2e6c  ; jg 0xfffc2e6c
mov eax, dword [ebp - 0x40]
mov dword [eax + 0xe], 0x42b
jmp short loc_fffc2e82  ; jmp 0xfffc2e82

loc_fffc2e6c:  ; not directly referenced
cmp esi, 0x2625a0
jg loc_fffc2f90  ; jg 0xfffc2f90
mov edx, dword [ebp - 0x40]
mov dword [edx + 0xe], 0x320

loc_fffc2e82:  ; not directly referenced
cmp ecx, 1
jne loc_fffc2f90  ; jne 0xfffc2f90
mov cl, 7
mov edi, dword [ebp - 0x3c]
mov esi, ref_fffcf47c  ; mov esi, 0xfffcf47c
xor edx, edx
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov ecx, dword [ebp - 0x44]
mov edi, dword [ebp - 0x40]
mov cl, byte [ecx + 8]
mov al, cl
movzx ecx, byte [edi + 0x14]
and eax, 0xf
mov eax, dword [ebp + eax*4 - 0x34]
shr eax, 3
shl eax, 6
div ecx
movzx edx, byte [ebp - 0x45]
imul eax, edx
cmp eax, 0x2000
mov dword [edi], eax
ja loc_fffc2f90  ; ja 0xfffc2f90
mov eax, dword [ebp - 0x44]
xor edx, edx
mov al, byte [eax + 9]
mov byte [ebp - 0x88], al
and eax, 7
mov word [edi + 8], ax
dec ax
jne short loc_fffc2eec  ; jne 0xfffc2eec
mov word [edi + 8], 0x400
mov dl, 1

loc_fffc2eec:  ; not directly referenced
mov ecx, dword [ebp - 0x44]
mov edi, dword [ebp - 0x40]
mov cl, byte [ecx + 9]
mov al, cl
and eax, 0x38
sar eax, 3
cmp eax, 4
mov dword [edi + 4], eax
ja loc_fffc2f90  ; ja 0xfffc2f90
jmp dword [eax*4 + ref_fffcf498]  ; ujmp: jmp dword [eax*4 - 0x30b68]

loc_fffc2f10:  ; not directly referenced
mov eax, dword [ebp - 0x40]
mov dword [eax + 4], 0x1000
jmp short loc_fffc2f4a  ; jmp 0xfffc2f4a

loc_fffc2f1c:  ; not directly referenced
mov ecx, dword [ebp - 0x40]
mov dword [ecx + 4], 0x2000
jmp short loc_fffc2f4a  ; jmp 0xfffc2f4a

loc_fffc2f28:  ; not directly referenced
mov edi, dword [ebp - 0x40]
mov dword [edi + 4], 0x4000
jmp short loc_fffc2f4a  ; jmp 0xfffc2f4a

loc_fffc2f34:  ; not directly referenced
mov eax, dword [ebp - 0x40]
mov dword [eax + 4], 0x8000
jmp short loc_fffc2f4a  ; jmp 0xfffc2f4a

loc_fffc2f40:  ; not directly referenced
mov ecx, dword [ebp - 0x40]
mov dword [ecx + 4], 0x10000

loc_fffc2f4a:  ; not directly referenced
dec edx
jne short loc_fffc2f90  ; jne 0xfffc2f90
imul eax, dword [ebp - 0x4c], 0x46
mov edi, dword [ebp - 0x60]
lea eax, [eax + edi + 0x2100]
lea eax, [ebx + eax + 0xb]
test byte [eax + 8], 8
je loc_fffc323f  ; je 0xfffc323f

loc_fffc2f69:  ; not directly referenced
mov edx, dword [ebp - 0x40]
mov ecx, dword [ebp - 0x44]
mov edi, dword [ebp - 0x40]
mov dword [edx + 0xa], 1
xor edx, edx
cmp byte [ecx + 0x2c], 1
sete dl
mov dword [edi + 0x15], edx
cmp byte [ebx + 0x22f3], 0
jne short loc_fffc2fbe  ; jne 0xfffc2fbe
jmp short loc_fffc2fb3  ; jmp 0xfffc2fb3

loc_fffc2f90:  ; not directly referenced
mov eax, dword [ebp - 0x40]
mov dword [eax + 0xa], 0
mov byte [eax + 0x12], 0
mov dword [eax], 0
mov word [eax + 8], 0
mov dword [eax + 4], 0
jmp short loc_fffc2ff6  ; jmp 0xfffc2ff6

loc_fffc2fb3:  ; not directly referenced
mov edx, dword [ebp - 0x54]
mov dl, byte [edx + 0xa]
and byte [ebp - 0x46], dl
jmp short loc_fffc2fc2  ; jmp 0xfffc2fc2

loc_fffc2fbe:  ; not directly referenced
mov byte [ebp - 0x46], 0

loc_fffc2fc2:  ; not directly referenced
test byte [eax + 8], 8
jne loc_fffc324e  ; jne 0xfffc324e

loc_fffc2fcc:  ; not directly referenced
mov dword [ebx + 0x20b1], 0
mov byte [ebx + 0x20b5], 8

loc_fffc2fdd:  ; not directly referenced
imul eax, dword [ebp - 0x4c], 0x1d
mov ecx, dword [ebp - 0x5c]
mov eax, dword [ecx + eax + 0xe]
cmp eax, dword [ebx + 0x20b6]
jae short loc_fffc2ff6  ; jae 0xfffc2ff6
mov dword [ebx + 0x20b6], eax

loc_fffc2ff6:  ; not directly referenced
inc dword [ebp - 0x4c]
add dword [ebp - 0x54], 0x46
cmp dword [ebp - 0x4c], 2
jne loc_fffc2b9f  ; jne 0xfffc2b9f
inc dword [ebp - 0x50]
add dword [ebp - 0x5c], 0x1055
cmp dword [ebp - 0x50], 2
je short loc_fffc3041  ; je 0xfffc3041

loc_fffc3017:  ; not directly referenced
imul eax, dword [ebp - 0x50], 0x8c
mov dword [ebp - 0x4c], 0
mov dword [ebp - 0x60], eax
lea edi, [ebx + eax + 0x2107]
mov dword [ebp - 0x54], edi
imul eax, dword [ebp - 0x50], 0x1055
mov dword [ebp - 0x64], eax
jmp near loc_fffc2b9f  ; jmp 0xfffc2b9f

loc_fffc3041:  ; not directly referenced
mov ecx, dword [ebx + 0x20b6]
xor edx, edx
mov esi, 0xc8
mov eax, ecx
div esi
test edx, edx
jne loc_fffc3117  ; jne 0xfffc3117
xor edx, edx
mov si, 0x320
mov eax, ecx
div esi
test edx, edx
je loc_fffc3117  ; je 0xfffc3117
cmp dword [ebx + 0x20be], 0
mov dword [ebx + 0x20ba], 1
jne loc_fffc3121  ; jne 0xfffc3121
cmp ecx, 0x7d0
mov dword [ebx + 0x20ba], 0
je short loc_fffc30e7  ; je 0xfffc30e7
ja short loc_fffc30a9  ; ja 0xfffc30a9
cmp ecx, 0x578
je short loc_fffc30ff  ; je 0xfffc30ff
cmp ecx, 0x708
jne short loc_fffc310b  ; jne 0xfffc310b
jmp short loc_fffc30f3  ; jmp 0xfffc30f3

loc_fffc30a9:  ; not directly referenced
cmp ecx, 0xa28
je short loc_fffc30cf  ; je 0xfffc30cf
cmp ecx, 0xaf0
je short loc_fffc30c3  ; je 0xfffc30c3
cmp ecx, 0x898
jne short loc_fffc310b  ; jne 0xfffc310b
jmp short loc_fffc30db  ; jmp 0xfffc30db

loc_fffc30c3:  ; not directly referenced
mov dword [ebx + 0x20b6], 0xa6b
jmp short loc_fffc3121  ; jmp 0xfffc3121

loc_fffc30cf:  ; not directly referenced
mov dword [ebx + 0x20b6], 0x960
jmp short loc_fffc3121  ; jmp 0xfffc3121

loc_fffc30db:  ; not directly referenced
mov dword [ebx + 0x20b6], 0x855
jmp short loc_fffc3121  ; jmp 0xfffc3121

loc_fffc30e7:  ; not directly referenced
mov dword [ebx + 0x20b6], 0x74b
jmp short loc_fffc3121  ; jmp 0xfffc3121

loc_fffc30f3:  ; not directly referenced
mov dword [ebx + 0x20b6], 0x640
jmp short loc_fffc3121  ; jmp 0xfffc3121

loc_fffc30ff:  ; not directly referenced
mov dword [ebx + 0x20b6], 0x535
jmp short loc_fffc3121  ; jmp 0xfffc3121

loc_fffc310b:  ; not directly referenced
mov dword [ebx + 0x20b6], 0x42b
jmp short loc_fffc3121  ; jmp 0xfffc3121

loc_fffc3117:  ; not directly referenced
mov dword [ebx + 0x20ba], 0

loc_fffc3121:  ; not directly referenced
mov al, byte [ebp - 0x46]
and al, byte [ebx + 0x222f]
mov byte [ebx + 0x20fe], al
xor esi, esi

loc_fffc3132:  ; not directly referenced
mov al, byte [ebx + 0x22d8]
test al, al
je short loc_fffc3162  ; je 0xfffc3162
mov dl, byte [ebx + 0x2f]
add dl, byte [ebx + 0x12]
mov byte [ebx + 0x3a], dl
mov dl, byte [ebx + 0x1084]
add dl, byte [ebx + 0x1067]
mov byte [ebx + 0x3b], al
mov byte [ebx + 0x108f], dl
mov byte [ebx + 0x1090], al
jmp short loc_fffc316f  ; jmp 0xfffc316f

loc_fffc3162:  ; not directly referenced
mov eax, ebx
call fcn_fffc59e4  ; call 0xfffc59e4
test eax, eax
mov edi, eax
jne short loc_fffc319a  ; jne 0xfffc319a

loc_fffc316f:  ; not directly referenced
mov eax, ebx
call fcn_fffc6278  ; call 0xfffc6278
test eax, eax
mov edi, eax
jne short loc_fffc319a  ; jne 0xfffc319a
mov eax, ebx
call fcn_fffc6069  ; call 0xfffc6069
mov eax, ebx
call fcn_fffc5e63  ; call 0xfffc5e63
mov eax, ebx
call fcn_fffc5f66  ; call 0xfffc5f66
mov eax, ebx
call fcn_fffc5d93  ; call 0xfffc5d93
jmp short loc_fffc31cf  ; jmp 0xfffc31cf

loc_fffc319a:  ; not directly referenced
cmp edi, 0xb
je short loc_fffc31cd  ; je 0xfffc31cd
cmp edi, 7
jne short loc_fffc31cf  ; jne 0xfffc31cf
mov edx, esi
movzx eax, dl
imul eax, eax, 0x1055
add eax, ebx
mov byte [eax + 0x3a], 0
mov dword [eax + 0xa], 0
mov dword [eax + 0x27], 0
mov byte [eax + 0x12], 0
mov byte [eax + 0x2f], 0
jmp short loc_fffc31cf  ; jmp 0xfffc31cf

loc_fffc31cd:  ; not directly referenced
xor esi, esi

loc_fffc31cf:  ; not directly referenced
cmp edi, 4
sete cl
cmp edi, 0xf
sete dl
or cl, dl
jne loc_fffc3279  ; jne 0xfffc3279
cmp edi, 0xb
setne al
add esi, eax
mov ecx, esi
cmp cl, 1
jbe loc_fffc3132  ; jbe 0xfffc3132
xor edi, edi
cmp byte [ebx + 0x3a], 0
jne short loc_fffc3279  ; jne 0xfffc3279
cmp byte [ebx + 0x108f], 1
sbb edi, edi
and edi, 0xf
jmp short loc_fffc3279  ; jmp 0xfffc3279

loc_fffc320c:  ; not directly referenced
mov edi, 0x11
jmp short loc_fffc3279  ; jmp 0xfffc3279

loc_fffc3213:  ; not directly referenced
mov edi, dword [ebp - 0x44]
mov al, byte [edi + 0xb]
and eax, 7
cmp al, 1
jne loc_fffc2c18  ; jne 0xfffc2c18
jmp near loc_fffc2c0c  ; jmp 0xfffc2c0c

loc_fffc3229:  ; not directly referenced
mov edx, dword [ebp - 0x44]
mov al, byte [edx + 0xc]
and eax, 7
cmp al, 3
jne loc_fffc2f90  ; jne 0xfffc2f90
jmp near loc_fffc2c2c  ; jmp 0xfffc2c2c

loc_fffc323f:  ; not directly referenced
cmp dword [ebx + 0x22a8], 1
jne loc_fffc2f69  ; jne 0xfffc2f69
jmp short loc_fffc320c  ; jmp 0xfffc320c

loc_fffc324e:  ; not directly referenced
cmp dword [ebx + 0x2244], 0
je loc_fffc2fcc  ; je 0xfffc2fcc
jmp near loc_fffc2fdd  ; jmp 0xfffc2fdd

loc_fffc3260:  ; not directly referenced
lea edi, [ebp - 0x34]
mov dword [ebp - 0x5c], ebx
mov dword [ebp - 0x50], 0
mov byte [ebp - 0x46], 2
mov dword [ebp - 0x3c], edi
jmp near loc_fffc3017  ; jmp 0xfffc3017

loc_fffc3279:  ; not directly referenced
lea esp, [esp + 0x8c]
mov eax, edi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc3287:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0xc]
mov ebx, dword [ebp + 8]
mov byte [ebp - 0x11], cl
mov byte [ebx + 2], cl
mov byte [ebx + 1], cl
cmp word [edx], 0
je short loc_fffc32a8  ; je 0xfffc32a8

loc_fffc32a3:
mov al, byte [ebp - 0x11]
jmp short loc_fffc32b6  ; jmp 0xfffc32b6

loc_fffc32a8:
movzx eax, byte [ebp - 0x11]
cmp word [edx + eax*2 - 2], 0
je short loc_fffc32a3  ; je 0xfffc32a3
xor eax, eax

loc_fffc32b6:
xor esi, esi
jmp short loc_fffc3308  ; jmp 0xfffc3308

loc_fffc32ba:
cmp al, byte [ebp - 0x11]
jne short loc_fffc32d4  ; jne 0xfffc32d4
cmp word [edx + esi*2 + 2], 0
je short loc_fffc32c9  ; je 0xfffc32c9
jmp short loc_fffc3304  ; jmp 0xfffc3304

loc_fffc32c9:
cmp word [edx + esi*2], 0
mov eax, edi
jne short loc_fffc3307  ; jne 0xfffc3307
jmp short loc_fffc3304  ; jmp 0xfffc3304

loc_fffc32d4:
cmp word [edx + esi*2 + 2], 0
je short loc_fffc3307  ; je 0xfffc3307
cmp word [edx + esi*2], 0
jne short loc_fffc3307  ; jne 0xfffc3307
movzx edi, byte [ebx + 2]
movzx ecx, byte [ebx + 1]
sub ecx, edi
movzx edi, al
mov dword [ebp - 0x18], edi
mov edi, esi
sub edi, dword [ebp - 0x18]
cmp ecx, edi
jg short loc_fffc3304  ; jg 0xfffc3304
mov byte [ebx + 2], al
mov eax, esi
mov byte [ebx + 1], al

loc_fffc3304:
mov al, byte [ebp - 0x11]

loc_fffc3307:
inc esi

loc_fffc3308:
lea edi, [esi + 1]
mov ecx, edi
cmp cl, byte [ebp - 0x11]
jb short loc_fffc32ba  ; jb 0xfffc32ba
cmp al, byte [ebp - 0x11]
jae short loc_fffc3368  ; jae 0xfffc3368
xor ecx, ecx
cmp word [edx], 0
mov esi, 1
je short loc_fffc333c  ; je 0xfffc333c
jmp short loc_fffc3346  ; jmp 0xfffc3346

loc_fffc3326:
cmp word [edx + 2], 0
je short loc_fffc3338  ; je 0xfffc3338
cmp word [edx], 0
jne short loc_fffc3338  ; jne 0xfffc3338
lea ecx, [esi - 1]
jmp short loc_fffc3346  ; jmp 0xfffc3346

loc_fffc3338:
inc esi
add edx, 2

loc_fffc333c:
mov ecx, esi
cmp cl, byte [ebp - 0x11]
jne short loc_fffc3326  ; jne 0xfffc3326
mov cl, byte [ebp - 0x11]

loc_fffc3346:
movzx edx, byte [ebx + 2]
movzx esi, byte [ebx + 1]
movzx edi, cl
sub esi, edx
movzx edx, byte [ebp - 0x11]
add edx, edi
movzx edi, al
sub edx, edi
cmp esi, edx
jge short loc_fffc3368  ; jge 0xfffc3368
mov byte [ebx + 2], al
mov byte [ebx + 1], cl

loc_fffc3368:
movzx edx, byte [ebx + 2]
cmp dl, byte [ebp - 0x11]
je short loc_fffc337e  ; je 0xfffc337e
movzx eax, byte [ebx + 1]
cmp al, byte [ebp - 0x11]
je short loc_fffc337e  ; je 0xfffc337e
cmp dl, al
jne short loc_fffc3390  ; jne 0xfffc3390

loc_fffc337e:
mov byte [ebx], 0x20
mov byte [ebx + 2], 0
mov byte [ebx + 1], 0x40
mov esi, 9
jmp short loc_fffc33c2  ; jmp 0xfffc33c2

loc_fffc3390:
cmp al, dl
jae short loc_fffc33b5  ; jae 0xfffc33b5
cmp byte [ebp - 0x11], 0
mov esi, 1
je short loc_fffc33c2  ; je 0xfffc33c2
movzx ecx, byte [ebp - 0x11]
mov esi, ecx
sub esi, edx
add eax, esi
shr eax, 1
add eax, edx
xor edx, edx
div ecx
mov byte [ebx], dl
jmp short loc_fffc33c0  ; jmp 0xfffc33c0

loc_fffc33b5:
movzx ecx, dl
sub eax, ecx
shr eax, 1
add eax, edx
mov byte [ebx], al

loc_fffc33c0:
xor esi, esi

loc_fffc33c2:
lea esp, [esp + 0xc]
mov eax, esi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc33cd:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x9c]
mov eax, dword [ebp + 8]
mov dword [ebp - 0x90], edx
mov dword [ebp - 0x7c], eax
mov byte [ebp - 0x88], cl
mov byte [ebp - 0x84], al
lea esi, [ebx + 0x3c31]
xor ecx, ecx
mov edx, 0x1200
mov eax, esi
mov edi, dword [ebp + 0xc]
call fcn_fffa24c1  ; call 0xfffa24c1
mov al, byte [ebp - 0x7c]
mov dword [ebp - 0x68], edi
mov byte [ebp - 0x61], al
mov dword [ebp - 0x53], edi
movzx eax, byte [ebx + 0x20aa]
movzx edx, byte [ebp - 0x88]
mov word [ebp - 0x5a], ax
movzx ecx, byte [ebp - 0x84]
mov dword [ebp - 0x80], edx
mov dl, byte [ebp - 0x7c]
mov dword [ebp - 0x84], ecx
mov byte [ebp - 0x4c], dl
mov cl, dl
mov dword [ebp - 0x6c], 0
mov word [ebp - 0x64], 4
mov byte [ebp - 0x62], 3
mov byte [ebp - 0x60], 0
mov byte [ebp - 0x5f], 0
mov byte [ebp - 0x5e], 0
mov byte [ebp - 0x5d], 0
mov word [ebp - 0x5c], 1
mov byte [ebp - 0x58], 3
mov dword [ebp - 0x57], 4
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 0
mov byte [ebp - 0x4a], 0
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 0x1f4
mov word [ebp - 0x45], 4
mov byte [ebp - 0x43], 4
mov dword [ebp - 0x42], 0xb
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x37], dl
mov word [ebp - 0x1b], ax
imul edx, dword [ebp - 0x80], 0x1055
imul eax, dword [ebp - 0x80], 0x900
mov dword [ebp - 0x3e], edi
movzx edx, byte [ebx + edx + 0x3b]
add eax, esi
add edx, 8
mov dword [ebp - 0x29], edi
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov word [ebp - 0x30], dx
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x2d], 0
mov word [ebp - 0x25], 0
mov byte [ebp - 0x23], 3
mov byte [ebp - 0x22], cl
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x19], 3
mov dword [ebp - 0x7c], eax
xor edi, edi

loc_fffc3524:
push 9
mov ecx, edi
mov edx, dword [ebp - 0x80]
push 7
movzx esi, cl
mov eax, ebx
push 8
mov ecx, dword [ebp - 0x84]
push esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
push 9
mov edx, dword [ebp - 0x80]
mov eax, ebx
push 7
mov ecx, dword [ebp - 0x84]
push 0x14
push esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x20
mov eax, 0x4340
xor edx, edx
jmp short loc_fffc3583  ; jmp 0xfffc3583

loc_fffc3563:
cmp byte [ebp - 0x88], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebx + 0x2223]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffc3583:
cmp dl, byte [ebx + 0x20b5]
jb short loc_fffc3563  ; jb 0xfffc3563
push eax
lea esi, [ebp - 0x6c]
mov ecx, 3
push 1
mov edx, dword [ebp - 0x80]
mov eax, ebx
push esi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov dword [ebp - 0x98], eax
jne loc_fffc3674  ; jne 0xfffc3674
xor ecx, ecx
mov edx, dword [ebp - 0x80]
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne loc_fffc366a  ; jne 0xfffc366a
mov eax, edi
mov dword [ebp - 0xa0], 0x4340
movzx eax, al
xor edx, edx
mov dword [ebp - 0x94], eax
jmp short loc_fffc3646  ; jmp 0xfffc3646

loc_fffc35e9:
mov ecx, dword [ebp - 0xa0]
mov esi, dword [ebp - 0x7c]
add ecx, 0x400
cmp byte [ebp - 0x88], 0
cmove ecx, dword [ebp - 0xa0]
add ecx, dword [ebx + 0x2223]
mov ecx, dword [ecx]
mov dword [ebp - 0x8c], ecx
mov eax, dword [ebp - 0x8c]
movzx ecx, dl
shl ecx, 7
add ecx, dword [ebp - 0x94]
mov dword [ebp - 0x9c], ecx
mov word [esi + ecx*2], ax
cmp dword [ebx + 0x2240], 0
je short loc_fffc363e  ; je 0xfffc363e
mov word [esi + ecx*2 + 2], ax

loc_fffc363e:
inc edx
add dword [ebp - 0xa0], 4

loc_fffc3646:
cmp dl, byte [ebx + 0x20b5]
jb short loc_fffc35e9  ; jb 0xfffc35e9
cmp dword [ebx + 0x2240], 0
lea eax, [edi + 2]
lea edx, [edi + 1]
cmove eax, edx
cmp al, 0x47
mov edi, eax
jbe loc_fffc3524  ; jbe 0xfffc3524
jmp short loc_fffc3674  ; jmp 0xfffc3674

loc_fffc366a:
mov dword [ebp - 0x98], 0xc

loc_fffc3674:
imul esi, dword [ebp - 0x80], 9
mov eax, dword [ebp - 0x98]
mov dword [ebp - 0x8c], esi
mov dword [ebp - 0x88], eax
imul esi, dword [ebp - 0x84], 0x36
mov byte [ebp - 0x7c], 0
mov dword [ebp - 0x84], esi
jmp near loc_fffc3746  ; jmp 0xfffc3746

loc_fffc36a0:
movzx edi, byte [ebp - 0x7c]
mov eax, dword [ebp - 0x8c]
add eax, edi
sub esp, 0xc
shl eax, 8
lea esi, [ebp - 0x6c]
push esi
mov ecx, 0x48
lea edi, [edi + edi*2]
lea edx, [ebx + eax + 0x3c31]
mov eax, ebx
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
dec eax
mov eax, 1
cmovne eax, dword [ebp - 0x88]
mov dword [ebp - 0x88], eax
add edi, dword [ebp - 0x84]
imul eax, dword [ebp - 0x80], 0x1055
cmp dword [ebp - 0x90], 0
jne short loc_fffc3705  ; jne 0xfffc3705
lea eax, [edi + eax + 0x1b0]
lea eax, [ebx + eax + 0xd]
jmp short loc_fffc3737  ; jmp 0xfffc3737

loc_fffc3705:
cmp dword [ebp - 0x90], 1
jne short loc_fffc371b  ; jne 0xfffc371b
lea eax, [edi + eax + 0x1c0]
lea eax, [ebx + eax + 0x18]
jmp short loc_fffc3737  ; jmp 0xfffc3737

loc_fffc371b:
add edi, eax
mov ecx, 3
mov edx, esi
lea eax, [ebx + edi + 0x1bd]
call fcn_fffa2408  ; call 0xfffa2408
lea eax, [ebx + edi + 0x1d8]

loc_fffc3737:
mov ecx, 3
mov edx, esi
call fcn_fffa2408  ; call 0xfffa2408
inc byte [ebp - 0x7c]

loc_fffc3746:
mov al, byte [ebp - 0x7c]
cmp al, byte [ebx + 0x20b5]
jb loc_fffc36a0  ; jb 0xfffc36a0
mov eax, dword [ebp - 0x88]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc3763:
push ebp
mov ebp, esp
push edi
push esi
push ebx
xor ebx, ebx
lea esp, [esp - 0x2c]
mov byte [ebp - 0x2a], cl
mov byte [ebp - 0x29], dl
mov dword [ebp - 0x1c], eax
imul ecx, ecx, 0x12
imul edx, edx, 0x1055
mov al, byte [eax + 0x20b5]
add ecx, edx
add ecx, dword [ebp - 0x1c]
mov byte [ebp - 0x20], al
mov dword [ebp - 0x28], ecx
mov dword [ebp - 0x24], 0
jmp near loc_fffc392b  ; jmp 0xfffc392b

loc_fffc379e:
mov eax, dword [ebp - 0x1c]
cmp byte [ebp - 0x29], 1
mov edx, dword [eax + 0x2223]
sbb eax, eax
not eax
and eax, 0x100
add eax, dword [ebx*4 + ref_fffcf5b0]  ; add eax, dword [ebx*4 - 0x30a50]
lea ecx, [edx + eax + 4]
lea eax, [edx + eax + 8]
mov ecx, dword [ecx]
mov eax, dword [eax]
cmp eax, 0xfffffff
mov esi, ecx
mov edi, eax
ja loc_fffc38a3  ; ja 0xfffc38a3
jb short loc_fffc37e1  ; jb 0xfffc37e1
cmp ecx, 0xfffffffe
ja loc_fffc38a3  ; ja 0xfffc38a3

loc_fffc37e1:
mov eax, esi
mov edx, edi
add eax, 1
mov ecx, 1
adc edx, 0xfff00000
cmp edx, 0xfefffff
jbe loc_fffc38b3  ; jbe 0xfffc38b3
mov eax, esi
mov edx, edi
add eax, 1
mov cl, 2
adc edx, 0xfffff000
cmp edx, 0xfefff
jbe loc_fffc38b3  ; jbe 0xfffc38b3
mov eax, esi
mov edx, edi
add eax, 1
mov cl, 3
adc edx, 0xfffffff0
cmp edx, 0xfef
jbe loc_fffc38b3  ; jbe 0xfffc38b3
mov eax, esi
mov edx, edi
add eax, 0xf0000001
adc edx, 0xffffffff
cmp edx, 0xf
jb short loc_fffc38a7  ; jb 0xfffc38a7
ja short loc_fffc384c  ; ja 0xfffc384c
cmp eax, 0xefffffff
jbe short loc_fffc38a7  ; jbe 0xfffc38a7

loc_fffc384c:
mov eax, esi
mov edx, edi
add eax, 0xfff00001
adc edx, 0xffffffff
cmp edx, 0
ja short loc_fffc3869  ; ja 0xfffc3869
cmp eax, 0xfefffff
mov ecx, 5
jbe short loc_fffc38b3  ; jbe 0xfffc38b3

loc_fffc3869:
mov eax, esi
mov edx, edi
add eax, 0xfffff001
adc edx, 0xffffffff
cmp edx, 0
ja short loc_fffc3886  ; ja 0xfffc3886
cmp eax, 0xfefff
mov ecx, 6
jbe short loc_fffc38b3  ; jbe 0xfffc38b3

loc_fffc3886:
mov eax, esi
mov edx, edi
add eax, 0xfffffff1
adc edx, 0xffffffff
cmp edx, 0
ja short loc_fffc38ae  ; ja 0xfffc38ae
cmp eax, 0xfef
mov ecx, 7
jbe short loc_fffc38b3  ; jbe 0xfffc38b3
jmp short loc_fffc38ae  ; jmp 0xfffc38ae

loc_fffc38a3:
xor ecx, ecx
jmp short loc_fffc38b3  ; jmp 0xfffc38b3

loc_fffc38a7:
mov ecx, 4
jmp short loc_fffc38b3  ; jmp 0xfffc38b3

loc_fffc38ae:
mov ecx, 8

loc_fffc38b3:
mov eax, esi
mov edx, edi
add eax, 0x100000
adc edx, 0
cmp edx, 0
ja short loc_fffc38cb  ; ja 0xfffc38cb
cmp eax, 0xff000
jbe short loc_fffc3901  ; jbe 0xfffc3901

loc_fffc38cb:
mov eax, esi
mov edx, edi
add eax, 0
adc edx, 0x10
cmp edx, 0xf
jb short loc_fffc3906  ; jb 0xfffc3906
ja short loc_fffc38e3  ; ja 0xfffc38e3
cmp eax, 0xf0000000
jbe short loc_fffc3906  ; jbe 0xfffc3906

loc_fffc38e3:
mov eax, esi
mov edx, edi
add eax, 0
adc edx, 0x100000
cmp edx, 0xff000
jb short loc_fffc390d  ; jb 0xfffc390d
ja short loc_fffc3912  ; ja 0xfffc3912
cmp eax, 0
jbe short loc_fffc390d  ; jbe 0xfffc390d
jmp short loc_fffc3912  ; jmp 0xfffc3912

loc_fffc3901:
or ecx, 0xffffffff
jmp short loc_fffc3912  ; jmp 0xfffc3912

loc_fffc3906:
mov ecx, 0xfffffffe
jmp short loc_fffc3912  ; jmp 0xfffc3912

loc_fffc390d:
mov ecx, 0xfffffffd

loc_fffc3912:
mov eax, dword [ebp - 0x28]
test cl, cl
mov byte [eax + ebx + 0x325], cl
mov eax, 1
cmovns eax, dword [ebp - 0x24]
inc ebx
mov dword [ebp - 0x24], eax

loc_fffc392b:
cmp byte [ebp - 0x20], bl
ja loc_fffc379e  ; ja 0xfffc379e
movzx eax, byte [ebp - 0x2a]
xor ebx, ebx
mov dword [ebp - 0x20], eax
imul eax, eax, 0x12
mov dword [ebp - 0x28], eax
jmp short loc_fffc3993  ; jmp 0xfffc3993

loc_fffc3945:
push edx
movzx edi, bl
mov ecx, dword [ebp - 0x20]
push 3
movzx esi, byte [ebp - 0x29]
mov eax, dword [ebp - 0x1c]
push 0xf
mov edx, esi
inc ebx
push edi
call fcn_fffbfe93  ; call 0xfffbfe93
imul edx, esi, 0x1055
add edx, dword [ebp - 0x28]
add edx, dword [ebp - 0x1c]
mov ecx, dword [ebp - 0x20]
add edx, edi
add al, byte [edx + 0x325]
mov byte [edx + 0x32e], al
mov edx, esi
push edi
movzx eax, al
push 3
push 0xf
push eax
mov eax, dword [ebp - 0x1c]
call fcn_fffbfdae  ; call 0xfffbfdae
add esp, 0x20

loc_fffc3993:
mov eax, dword [ebp - 0x1c]
cmp bl, byte [eax + 0x20b5]
jb short loc_fffc3945  ; jb 0xfffc3945
mov eax, dword [ebp - 0x24]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc39a9:
push ebp
mov ebp, esp
push edi
push esi
lea edi, [ebp - 0x58]
mov esi, eax
push ebx
xor ebx, ebx
lea esp, [esp - 0x8c]

loc_fffc39bd:
imul eax, ebx, 0x1055
cmp byte [esi + eax + 0x3a], 0
je short loc_fffc39fc  ; je 0xfffc39fc
lea eax, [ebp - 0x98]

loc_fffc39d0:
mov byte [eax], 0xff
inc eax
cmp eax, edi
jne short loc_fffc39d0  ; jne 0xfffc39d0
mov eax, edi
lea edx, [ebp - 0x18]

loc_fffc39dd:
mov byte [eax], 0
inc eax
cmp eax, edx
jne short loc_fffc39dd  ; jne 0xfffc39dd
sub esp, 0xc
lea ecx, [ebp - 0x98]
push 2
mov edx, ebx
mov eax, esi
call fcn_fffc7760  ; call 0xfffc7760
add esp, 0x10

loc_fffc39fc:
inc ebx
cmp ebx, 2
jne short loc_fffc39bd  ; jne 0xfffc39bd
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffc3a0a:
db 0x00
db 0x00

fcn_fffc3a0c:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x2c]
mov ebx, dword [ebp + 8]
mov eax, ebx
call fcn_fffb585a  ; call 0xfffb585a
test eax, eax
mov dword [ebp - 0x38], 0x10
je loc_fffc3e48  ; je 0xfffc3e48
sub esp, 0xc
lea edi, [ebp - 0x24]
push ebx
call fcn_fffb504d  ; call 0xfffb504d
add esp, 0x10
cmp eax, 1
mov edx, edi
sbb eax, eax
xor esi, esi
not eax
and eax, 0x10
mov dword [ebp - 0x38], eax
mov eax, ebx
call fcn_fffacf73  ; call 0xfffacf73
mov edx, dword [ebx + 0x2223]
mov dword [ebp - 0x34], 0
mov eax, dword [edx + 0x42b0]
and ah, 0xfc
mov dword [edx + 0x42b0], eax
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x46b0]
and ah, 0xfc
mov dword [edx + 0x46b0], eax

loc_fffc3a87:  ; not directly referenced
imul eax, esi, 0x1055
cmp byte [ebx + eax + 0x3a], 0
jne loc_fffc3e00  ; jne 0xfffc3e00
jmp near loc_fffc3dbc  ; jmp 0xfffc3dbc

loc_fffc3a9d:  ; not directly referenced
mov eax, dword [ebx + 0x2223]
lea edx, [eax + esi*4 + 0x5004]
mov eax, dword [edx]
and eax, 0xfcffffff
or eax, 0x1000000
mov dword [edx], eax

loc_fffc3ab8:  ; not directly referenced
mov eax, esi
mov byte [ebp - 0x2e], 0x20
cmp al, 1
mov byte [ebp - 0x2d], al
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4420
add eax, dword [ebx + 0x2223]
mov edx, dword [eax]
or edx, 0x10000000
cmp byte [ebp - 0x2d], 1
mov dword [eax], edx
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4434
add eax, dword [ebx + 0x2223]
cmp byte [ebp - 0x2d], 1
mov dword [eax], 0
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4438
add eax, dword [ebx + 0x2223]
cmp byte [ebp - 0x2d], 1
mov dword [eax], 0
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x443c
add eax, dword [ebx + 0x2223]
mov dword [eax], 0

loc_fffc3b33:  ; not directly referenced
mov ecx, esi
lea edx, [ebp - 0x24]
mov eax, ebx
call fcn_ffface48  ; call 0xffface48
mov dword [ebp - 0x2c], 0

loc_fffc3b46:  ; not directly referenced
mov ecx, esi
mov edx, dword [ebp - 0x2c]
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffc3da6  ; je 0xfffc3da6
push eax
mov edx, 2
mov ecx, 0xfffffff9
push eax
push dword [ebp - 0x2c]
mov eax, ebx
push esi
call fcn_fffb5664  ; call 0xfffb5664
add esp, 0x10
mov eax, 0x4340
xor edx, edx
jmp short loc_fffc3b9a  ; jmp 0xfffc3b9a

loc_fffc3b7d:  ; not directly referenced
cmp byte [ebp - 0x2d], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebx + 0x2223]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffc3b9a:  ; not directly referenced
cmp dl, byte [ebx + 0x20b5]
jb short loc_fffc3b7d  ; jb 0xfffc3b7d
mov ecx, dword [ebp - 0x2c]
mov edx, esi
mov eax, ebx
call fcn_fffaf9ac  ; call 0xfffaf9ac
test eax, eax
jne loc_fffc3df7  ; jne 0xfffc3df7
mov cl, byte [ebx + 0x20b5]
mov ax, 0x4340
xor edx, edx
jmp short loc_fffc3be4  ; jmp 0xfffc3be4

loc_fffc3bc4:  ; not directly referenced
cmp byte [ebp - 0x2d], 0
lea edi, [eax + 0x400]
cmove edi, eax
add edi, dword [ebx + 0x2223]
mov edi, dword [edi]
cmp edi, 1
adc dword [ebp - 0x34], 0
inc edx
add eax, 4

loc_fffc3be4:  ; not directly referenced
cmp dl, cl
jne short loc_fffc3bc4  ; jne 0xfffc3bc4
push edi
mov edx, 2
mov eax, ebx
push edi
push dword [ebp - 0x2c]
mov ecx, 7
push esi
call fcn_fffb5664  ; call 0xfffb5664
add esp, 0x10
mov eax, 0x4340
xor edx, edx
jmp short loc_fffc3c28  ; jmp 0xfffc3c28

loc_fffc3c0b:  ; not directly referenced
cmp byte [ebp - 0x2d], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebx + 0x2223]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffc3c28:  ; not directly referenced
cmp dl, byte [ebx + 0x20b5]
jb short loc_fffc3c0b  ; jb 0xfffc3c0b
mov ecx, dword [ebp - 0x2c]
mov edx, esi
mov eax, ebx
call fcn_fffaf9ac  ; call 0xfffaf9ac
test eax, eax
jne loc_fffc3df7  ; jne 0xfffc3df7
mov cl, byte [ebx + 0x20b5]
mov ax, 0x4340
xor edx, edx
jmp short loc_fffc3c72  ; jmp 0xfffc3c72

loc_fffc3c52:  ; not directly referenced
cmp byte [ebp - 0x2d], 0
lea edi, [eax + 0x400]
cmove edi, eax
add edi, dword [ebx + 0x2223]
mov edi, dword [edi]
cmp edi, 1
sbb dword [ebp - 0x34], 0xffffffff
inc edx
add eax, 4

loc_fffc3c72:  ; not directly referenced
cmp dl, cl
jne short loc_fffc3c52  ; jne 0xfffc3c52
push ecx
mov edx, 1
mov eax, ebx
push ecx
push dword [ebp - 0x2c]
mov ecx, 0xfffffff9
push esi
call fcn_fffb5664  ; call 0xfffb5664
add esp, 0x10
mov eax, 0x4340
xor edx, edx
jmp short loc_fffc3cb6  ; jmp 0xfffc3cb6

loc_fffc3c99:  ; not directly referenced
cmp byte [ebp - 0x2d], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebx + 0x2223]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffc3cb6:  ; not directly referenced
cmp dl, byte [ebx + 0x20b5]
jb short loc_fffc3c99  ; jb 0xfffc3c99
mov ecx, dword [ebp - 0x2c]
mov edx, esi
mov eax, ebx
call fcn_fffaf9ac  ; call 0xfffaf9ac
test eax, eax
jne loc_fffc3df7  ; jne 0xfffc3df7
mov cl, byte [ebx + 0x20b5]
mov ax, 0x4340
xor edx, edx
jmp short loc_fffc3d00  ; jmp 0xfffc3d00

loc_fffc3ce0:  ; not directly referenced
cmp byte [ebp - 0x2d], 0
lea edi, [eax + 0x400]
cmove edi, eax
add edi, dword [ebx + 0x2223]
mov edi, dword [edi]
cmp edi, 1
sbb dword [ebp - 0x34], 0xffffffff
inc edx
add eax, 4

loc_fffc3d00:  ; not directly referenced
cmp dl, cl
jne short loc_fffc3ce0  ; jne 0xfffc3ce0
push edx
mov eax, ebx
mov ecx, 7
push edx
push dword [ebp - 0x2c]
mov edx, 1
push esi
call fcn_fffb5664  ; call 0xfffb5664
add esp, 0x10
mov eax, 0x4340
xor edx, edx
jmp short loc_fffc3d44  ; jmp 0xfffc3d44

loc_fffc3d27:  ; not directly referenced
cmp byte [ebp - 0x2d], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebx + 0x2223]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffc3d44:  ; not directly referenced
cmp dl, byte [ebx + 0x20b5]
jb short loc_fffc3d27  ; jb 0xfffc3d27
mov ecx, dword [ebp - 0x2c]
mov edx, esi
mov eax, ebx
call fcn_fffaf9ac  ; call 0xfffaf9ac
test eax, eax
jne loc_fffc3df7  ; jne 0xfffc3df7
mov cl, byte [ebx + 0x20b5]
mov ax, 0x4340
xor edx, edx
jmp short loc_fffc3d8e  ; jmp 0xfffc3d8e

loc_fffc3d6e:  ; not directly referenced
cmp byte [ebp - 0x2d], 0
lea edi, [eax + 0x400]
cmove edi, eax
add edi, dword [ebx + 0x2223]
mov edi, dword [edi]
cmp edi, 1
adc dword [ebp - 0x34], 0
inc edx
add eax, 4

loc_fffc3d8e:  ; not directly referenced
cmp dl, cl
jne short loc_fffc3d6e  ; jne 0xfffc3d6e
push eax
xor ecx, ecx
xor edx, edx
push eax
push dword [ebp - 0x2c]
mov eax, ebx
push esi
call fcn_fffb5664  ; call 0xfffb5664
add esp, 0x10

loc_fffc3da6:  ; not directly referenced
inc dword [ebp - 0x2c]
cmp dword [ebp - 0x2c], 4
jne loc_fffc3b46  ; jne 0xfffc3b46
dec byte [ebp - 0x2e]
jne loc_fffc3b33  ; jne 0xfffc3b33

loc_fffc3dbc:  ; not directly referenced
inc esi
cmp esi, 2
jne loc_fffc3a87  ; jne 0xfffc3a87
cmp dword [ebp - 0x34], 0
je short loc_fffc3dde  ; je 0xfffc3dde
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x5024], 0
jmp short loc_fffc3df7  ; jmp 0xfffc3df7

loc_fffc3dde:  ; not directly referenced
cmp byte [ebx + 0x3a], 0
jne short loc_fffc3e12  ; jne 0xfffc3e12
xor eax, eax

loc_fffc3de6:  ; not directly referenced
cmp byte [ebx + 0x108f], 0
jne short loc_fffc3e2d  ; jne 0xfffc3e2d

loc_fffc3def:  ; not directly referenced
mov byte [ebx + 0x20fe], al
jmp short loc_fffc3e48  ; jmp 0xfffc3e48

loc_fffc3df7:  ; not directly referenced
mov dword [ebp - 0x38], 0x10
jmp short loc_fffc3e48  ; jmp 0xfffc3e48

loc_fffc3e00:  ; not directly referenced
cmp dword [ebx + 0x20b1], 1
jne loc_fffc3ab8  ; jne 0xfffc3ab8
jmp near loc_fffc3a9d  ; jmp 0xfffc3a9d

loc_fffc3e12:  ; not directly referenced
mov eax, dword [ebx + 0x2223]
mov eax, dword [eax + 0xc00]
and eax, 0x40
cmp eax, 1
sbb eax, eax
not eax
and eax, 2
jmp short loc_fffc3de6  ; jmp 0xfffc3de6

loc_fffc3e2d:  ; not directly referenced
mov eax, dword [ebx + 0x2223]
mov eax, dword [eax + 0xd00]
and eax, 0x40
cmp eax, 1
sbb eax, eax
not eax
and eax, 2
jmp short loc_fffc3def  ; jmp 0xfffc3def

loc_fffc3e48:  ; not directly referenced
mov eax, dword [ebp - 0x38]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc3e53:  ; not directly referenced
push ebp
mov edx, 0xdd52
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x2c]
mov ebx, dword [ebp + 8]
mov eax, ebx
call fcn_fffad891  ; call 0xfffad891
mov eax, dword [ebx + 0x225c]
cmp eax, 2
jne loc_fffc449e  ; jne 0xfffc449e
mov eax, dword [ebx + 0x49]
mov dword [ebx + 0x2e16], 0
mov dword [ebx + 0x2a9c], eax
mov eax, dword [ebx + 0x109e]
mov dword [ebx + 0x2aa0], eax
mov al, byte [ebx + 0x20fe]
mov byte [ebx + 0x2e09], al
mov eax, dword [ebx + 0x2223]
mov dword [ebx + 0x2e0e], eax
mov eax, dword [ebx + 0x221f]
mov dword [ebx + 0x2e0a], eax
mov eax, dword [ebx + 0x2248]
mov dword [ebx + 0x2e12], eax
mov eax, dword [ebx + 0x2244]
mov dword [ebx + 0x2e1a], eax
mov eax, dword [ebx + 0x22cb]
mov dword [ebx + 0x2e1e], eax
mov al, byte [ebx + 0x22f4]
mov byte [ebx + 0x2e22], al
mov eax, dword [ebx + 0x2290]
mov dword [ebx + 0x2e23], eax
mov eax, dword [ebx + 0x2298]
mov word [ebx + 0x2e27], ax
mov eax, dword [ebx + 0x22a4]
mov dword [ebx + 0x2e29], eax
mov eax, dword [ebx + 0x2294]
mov byte [ebx + 0x2e2d], al
mov eax, dword [ebx + 0x2278]
mov dword [ebx + 0x2e2e], eax
mov eax, dword [ebx + 0x227c]
mov dword [ebx + 0x2e32], eax
mov eax, dword [ebx + 0x22b3]
mov byte [ebx + 0x2e36], al
mov al, byte [ebx + 0x22ca]
mov byte [ebx + 0x2e37], al
mov eax, dword [ebx + 0x22c2]
mov dword [ebx + 0x2e38], eax
lea esi, [ebx + 0x2e0a]
push 0
lea eax, [ebx + 0x2305]
mov ecx, ref_fffcf4cc  ; mov ecx, 0xfffcf4cc
push 0x5000
mov dword [ebp - 0x1c], eax
mov edx, esi
push 0x5f
lea eax, [ebx + 0x2599]
push 8
call fcn_fffb4cc1  ; call 0xfffb4cc1
push 0
mov edi, eax
mov ecx, ref_fffcf4ec  ; mov ecx, 0xfffcf4ec
push 0x4000
mov edx, esi
mov eax, dword [ebp - 0x1c]
push 0x14a
push 0x1d
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x20
test eax, eax
push 0
cmovne edi, eax
mov ecx, ref_fffcf4ec  ; mov ecx, 0xfffcf4ec
push 0x4400
mov edx, esi
lea eax, [ebx + 0x244f]
push 0x14a
push 0x1d
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
cmovne edi, eax
xor edx, edx
mov eax, dword [ebp - 0x1c]
call fcn_fffb4fc8  ; call 0xfffb4fc8
test eax, eax
jne loc_fffc452d  ; jne 0xfffc452d
test edi, edi
jne loc_fffc452f  ; jne 0xfffc452f
push 0
lea eax, [ebx + 0x297c]
mov ecx, ref_fffcf56c  ; mov ecx, 0xfffcf56c
push 0xc00
mov edx, esi
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
mov edi, eax
jne loc_fffc452f  ; jne 0xfffc452f
push 0
lea eax, [ebx + 0x299a]
mov ecx, ref_fffcf56c  ; mov ecx, 0xfffcf56c
push 0xd00
mov edx, esi
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
mov edi, eax
jne loc_fffc452f  ; jne 0xfffc452f
push 0
lea eax, [ebx + 0x29b8]
mov ecx, ref_fffcf564  ; mov ecx, 0xfffcf564
push 0xa00
mov edx, esi
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
mov edi, eax
jne loc_fffc452f  ; jne 0xfffc452f
push 0
lea eax, [ebx + 0x29d6]
mov ecx, ref_fffcf564  ; mov ecx, 0xfffcf564
push 0xb00
mov edx, esi
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
mov edi, eax
jne loc_fffc452f  ; jne 0xfffc452f
push 0
lea eax, [ebx + 0x29f4]
mov ecx, ref_fffcf564  ; mov ecx, 0xfffcf564
push 0xe00
mov edx, esi
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
mov edi, eax
jne loc_fffc452f  ; jne 0xfffc452f
push 0
lea eax, [ebx + 0x2a12]
mov ecx, ref_fffcf564  ; mov ecx, 0xfffcf564
push 0xf00
mov edx, esi
push 0x1e
push 2
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
mov edi, eax
jne loc_fffc452f  ; jne 0xfffc452f
push 0
lea eax, [ebx + 0x2a30]
mov ecx, ref_fffcf560  ; mov ecx, 0xfffcf560
push 0x1800
mov edx, esi
push 0x1c
push 1
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
mov edi, eax
jne loc_fffc452f  ; jne 0xfffc452f
push 0
lea eax, [ebx + 0x2a4c]
mov ecx, ref_fffcf560  ; mov ecx, 0xfffcf560
push 0x1900
mov edx, esi
push 0x1c
push 1
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
mov edi, eax
jne loc_fffc452f  ; jne 0xfffc452f
mov edx, esi
lea eax, [ebx + 0x2a68]
call fcn_fffcf92f  ; call 0xfffcf92f
mov eax, dword [ebx + 0x2e0e]
mov dword [ebp - 0x24], ebx
mov dword [ebp - 0x1c], 0
xor esi, esi
mov eax, dword [eax + 0x5e04]
mov byte [ebx + 0x2aa4], al
shr eax, 8
mov byte [ebx + 0x2aa5], al
mov al, byte [ebx + 0x12]
mov byte [ebx + 0x2aab], al
mov al, byte [ebx + 0x2f]
mov byte [ebx + 0x2aac], al
mov al, byte [ebx + 0x1067]
mov byte [ebx + 0x2aad], al
mov al, byte [ebx + 0x1084]
mov byte [ebx + 0x2aae], al
mov eax, dword [ebx + 0x221f]
mov edx, dword [eax + 0xe8]
mov dword [ebx + 0x2ab7], edx
mov eax, dword [eax + 0xe4]
mov dword [ebx + 0x2ab3], eax
jmp near loc_fffc4356  ; jmp 0xfffc4356

loc_fffc41c1:  ; not directly referenced
imul eax, dword [ebp - 0x20], 0x46
mov edx, dword [ebp - 0x2c]
mov ecx, 0xb
lea eax, [eax + edx + 0x2120]
lea edx, [ebx + eax + 0x15]
mov eax, dword [ebp - 0x20]
add eax, dword [ebp - 0x28]
imul eax, eax, 0xb
lea eax, [ebx + eax + 0x2abb]
call fcn_fffa2408  ; call 0xfffa2408
imul eax, dword [ebp - 0x20], 0x1d
mov ecx, dword [ebp - 0x24]
cmp dword [ecx + eax + 0xa], 0
je loc_fffc4335  ; je 0xfffc4335
mov eax, esi
test al, al
jne loc_fffc4335  ; jne 0xfffc4335
mov dl, byte [ebp - 0x1c]
mov ecx, dword [ebx + 0x2223]
cmp dl, 1
sbb eax, eax
and eax, 0xfffffc00
lea eax, [eax + ecx + 0x4400]
mov eax, dword [eax]
mov esi, eax
and esi, 0xf
mov ecx, esi
mov esi, eax
and esi, 0xf0
mov byte [ebx + 0x2e40], cl
shr esi, 4
mov ecx, esi
mov esi, eax
and esi, 0xf00
mov byte [ebx + 0x2e41], cl
shr esi, 8
mov ecx, esi
mov esi, eax
and esi, 0xf000
and eax, 0xff0000
shr eax, 0x10
mov byte [ebx + 0x2e3d], cl
shr esi, 0xc
cmp dl, 1
mov word [ebx + 0x2e42], ax
mov ecx, esi
sbb eax, eax
mov byte [ebx + 0x2e3e], cl
and eax, 0xfffffc00
mov ecx, dword [ebx + 0x2223]
lea eax, [eax + ecx + 0x4698]
mov eax, dword [eax]
shr eax, 0x10
and eax, 0xff
cmp dl, 1
mov word [ebx + 0x2e4b], ax
mov dl, byte [ebx + 0x22da]
sbb eax, eax
and eax, 0xfffffc00
lea eax, [eax + ecx + 0x4404]
mov eax, dword [eax]
mov byte [ebx + 0x2e3f], dl
mov edx, eax
and edx, 0xf0
shr edx, 4
mov byte [ebx + 0x2e45], dl
mov edx, eax
and edx, 0xf000
shr edx, 0xc
mov byte [ebx + 0x2e44], dl
mov edx, eax
and edx, 0xf
mov byte [ebx + 0x2e46], dl
mov edx, eax
and edx, 0xff0000
shr edx, 0x10
mov word [ebx + 0x2e47], dx
mov edx, eax
and edx, 0x20000000
shr edx, 0x1d
cmp byte [ebx + 0x22e4], 0x10
mov byte [ebx + 0x2e4a], dl
je short loc_fffc431f  ; je 0xfffc431f
shr eax, 0x1e
jmp short loc_fffc4321  ; jmp 0xfffc4321

loc_fffc431f:  ; not directly referenced
mov al, 0x10

loc_fffc4321:  ; not directly referenced
mov byte [ebx + 0x2e49], al
mov word [ebx + 0x2e51], 0
mov esi, 1

loc_fffc4335:  ; not directly referenced
inc dword [ebp - 0x20]
cmp dword [ebp - 0x20], 2
jne loc_fffc41c1  ; jne 0xfffc41c1
inc dword [ebp - 0x1c]
add dword [ebp - 0x24], 0x1055
cmp dword [ebp - 0x1c], 2
je loc_fffc43ec  ; je 0xfffc43ec

loc_fffc4356:  ; not directly referenced
imul edx, dword [ebp - 0x1c], 0x8c
mov eax, dword [ebp - 0x1c]
add eax, eax
mov dword [ebp - 0x20], 0
mov dword [ebp - 0x28], eax
mov dword [ebp - 0x2c], edx
jmp near loc_fffc41c1  ; jmp 0xfffc41c1

loc_fffc4374:  ; not directly referenced
mov ecx, esi
mov edx, dword [ebp - 0x1c]
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffc43db  ; je 0xfffc43db
imul eax, dword [ebp - 0x1c], 0x36
mov ecx, dword [ebp - 0x20]
lea edx, [eax + ecx + 0x1b0]
mov ecx, dword [ebp - 0x24]
lea edx, [ebx + edx + 0xd]
lea eax, [eax + ecx + 0x2ad0]
mov ecx, 0x36
lea eax, [ebx + eax + 0x17]
call fcn_fffa2408  ; call 0xfffa2408
imul eax, dword [ebp - 0x1c], 0x24
mov ecx, dword [ebp - 0x20]
lea edx, [eax + ecx + 0x280]
imul ecx, esi, 0x90
lea edx, [ebx + edx + 0x15]
lea eax, [eax + ecx + 0x2c80]
mov ecx, 0x24
lea eax, [ebx + eax + 0x17]
call fcn_fffa2408  ; call 0xfffa2408

loc_fffc43db:  ; not directly referenced
inc dword [ebp - 0x1c]
cmp dword [ebp - 0x1c], 4
jne short loc_fffc4374  ; jne 0xfffc4374
inc esi
cmp esi, 2
jne short loc_fffc43ee  ; jne 0xfffc43ee
jmp short loc_fffc440c  ; jmp 0xfffc440c

loc_fffc43ec:  ; not directly referenced
xor esi, esi

loc_fffc43ee:  ; not directly referenced
imul eax, esi, 0x1055
imul edx, esi, 0xd8
mov dword [ebp - 0x1c], 0
mov dword [ebp - 0x20], eax
mov dword [ebp - 0x24], edx
jmp near loc_fffc4374  ; jmp 0xfffc4374

loc_fffc440c:  ; not directly referenced
mov al, byte [ebx + 0x212a]
mov byte [ebx + 0x2aaf], al
mov al, byte [ebx + 0x2170]
mov byte [ebx + 0x2ab0], al
mov al, byte [ebx + 0x21b6]
mov byte [ebx + 0x2ab1], al
mov al, byte [ebx + 0x21fc]
mov byte [ebx + 0x2ab2], al
mov eax, dword [ebx + 0x15]
mov dword [ebx + 0x2dc9], eax
mov eax, dword [ebx + 0x32]
mov dword [ebx + 0x2dcd], eax
mov eax, dword [ebx + 0x106a]
mov dword [ebx + 0x2dd9], eax
mov eax, dword [ebx + 0x1087]
mov dword [ebx + 0x2ddd], eax
mov eax, dword [ebx + 4]
mov dword [ebx + 0x2de9], eax
mov eax, dword [ebx + 0x21]
mov dword [ebx + 0x2ded], eax
mov eax, dword [ebx + 0x1059]
mov dword [ebx + 0x2df9], eax
mov eax, dword [ebx + 0x1076]
mov dword [ebx + 0x2dfd], eax
mov al, byte [ebx + 0x20b5]
mov byte [ebx + 0x2aaa], al
jmp short loc_fffc4509  ; jmp 0xfffc4509

loc_fffc449e:  ; not directly referenced
xor edi, edi
cmp eax, 3
jne short loc_fffc4509  ; jne 0xfffc4509
lea ecx, [ebx + 0x244f]
mov byte [ebp - 0x1c], 0
lea esi, [ebx + 0x2e0a]
mov dword [ebp - 0x20], ecx

loc_fffc44b8:  ; not directly referenced
cmp byte [ebp - 0x1c], 0
jne short loc_fffc44db  ; jne 0xfffc44db
push 0
lea eax, [ebx + 0x2305]
mov ecx, ref_fffcf4ec  ; mov ecx, 0xfffcf4ec
push 0x4000
mov edx, esi
push 0x14a
push 0x1d
jmp short loc_fffc44f3  ; jmp 0xfffc44f3

loc_fffc44db:  ; not directly referenced
push 0
mov ecx, ref_fffcf4ec  ; mov ecx, 0xfffcf4ec
mov edx, esi
push 0x4400
mov eax, dword [ebp - 0x20]
push 0x14a
push 0x1d

loc_fffc44f3:  ; not directly referenced
call fcn_fffb4cc1  ; call 0xfffb4cc1
add esp, 0x10
test eax, eax
cmovne edi, eax
inc byte [ebp - 0x1c]
cmp byte [ebp - 0x1c], 2
jne short loc_fffc44b8  ; jne 0xfffc44b8

loc_fffc4509:  ; not directly referenced
lea edx, [ebx + 0x2ea9]
lea eax, [ebx + 0x2305]
call fcn_fffc76c6  ; call 0xfffc76c6
test eax, eax
mov edx, 0xdd53
cmovne edi, eax
mov eax, ebx
call fcn_fffad891  ; call 0xfffad891
jmp short loc_fffc452f  ; jmp 0xfffc452f

loc_fffc452d:  ; not directly referenced
mov edi, eax

loc_fffc452f:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, edi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc4539:
push ebp
mov ebp, esp
push ebx
mov ebx, eax
push ecx
cmp byte [eax + 0x3a], 0
je short loc_fffc45a6  ; je 0xfffc45a6
mov edx, dword [eax + 0x2223]
cmp dword [ebx + 0x20b1], 1
mov eax, dword [edx + 0x5004]
jne short loc_fffc4593  ; jne 0xfffc4593
jmp short loc_fffc459a  ; jmp 0xfffc459a

loc_fffc455d:
mov dword [edx + 0x5004], eax
cmp dword [ebx + 0x20b1], 1
je short loc_fffc4585  ; je 0xfffc4585

loc_fffc456c:
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x4004]
or eax, 0x20000000
mov dword [edx + 0x4004], eax
jmp short loc_fffc45a6  ; jmp 0xfffc45a6

loc_fffc4585:
mov edx, 0xfa0
mov eax, ebx
call fcn_fffc7adb  ; call 0xfffc7adb
jmp short loc_fffc456c  ; jmp 0xfffc456c

loc_fffc4593:
and eax, 0xfcffffff
jmp short loc_fffc455d  ; jmp 0xfffc455d

loc_fffc459a:
and eax, 0xfcffffff
or eax, 0x1000000
jmp short loc_fffc455d  ; jmp 0xfffc455d

loc_fffc45a6:
cmp byte [ebx + 0x108f], 0
jne short loc_fffc45f6  ; jne 0xfffc45f6
jmp short loc_fffc460d  ; jmp 0xfffc460d

loc_fffc45b1:
and eax, 0xfcffffff
or eax, 0x1000000
jmp short loc_fffc45c2  ; jmp 0xfffc45c2

loc_fffc45bd:
and eax, 0xfcffffff

loc_fffc45c2:
mov dword [edx + 0x5008], eax
cmp dword [ebx + 0x20b1], 1
jne short loc_fffc45dd  ; jne 0xfffc45dd
mov edx, 0xfa0
mov eax, ebx
call fcn_fffc7adb  ; call 0xfffc7adb

loc_fffc45dd:
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x4404]
or eax, 0x20000000
mov dword [edx + 0x4404], eax
jmp short loc_fffc460d  ; jmp 0xfffc460d

loc_fffc45f6:
mov edx, dword [ebx + 0x2223]
cmp dword [ebx + 0x20b1], 1
mov eax, dword [edx + 0x5008]
jne short loc_fffc45bd  ; jne 0xfffc45bd
jmp short loc_fffc45b1  ; jmp 0xfffc45b1

loc_fffc460d:
pop edx
xor eax, eax
pop ebx
pop ebp
ret

loc_fffc4613:
db 0x00

fcn_fffc4614:  ; not directly referenced
push ebp
mov cl, dl
mov ebp, esp
push esi
push ebx
lea ebx, [ebp - 0xc]
lea esp, [esp - 0x2c]
mov edx, dword [eax]
push ebx
mov dword [ebp - 0xc], 0
mov byte [ebp - 0x1c], cl
push 0
push 0
push ref_fffcfaec  ; push 0xfffcfaec
push eax
call dword [edx + 0x20]  ; ucall
mov eax, dword [0xf00f80ac]
and eax, 0xffebffff
mov dword [0xf00f80ac], eax
mov edx, 0xcf9
in al, dx
mov bl, al
mov cl, byte [ebp - 0x1c]
and ebx, 0xfffffff1
add esp, 0x20
cmp cl, 6
jne short loc_fffc466c  ; jne 0xfffc466c
mov ecx, dword [0xf00f8048]
and ecx, 0xfffffffe
jmp short loc_fffc4696  ; jmp 0xfffc4696

loc_fffc466c:  ; not directly referenced
cmp cl, 2
je short loc_fffc4682  ; je 0xfffc4682
cmp cl, 6
je short loc_fffc4694  ; je 0xfffc4694
mov al, bl
or eax, 6
dec cl
cmove ebx, eax
jmp short loc_fffc46c2  ; jmp 0xfffc46c2

loc_fffc4682:  ; not directly referenced
sub esp, 0xc
mov eax, dword [ebp - 0xc]
push 2
or ebx, 0xe
call dword [eax]  ; ucall
add esp, 0x10
jmp short loc_fffc46c2  ; jmp 0xfffc46c2

loc_fffc4694:  ; not directly referenced
xor ecx, ecx

loc_fffc4696:  ; not directly referenced
mov esi, ecx
lea edx, [esi + 0x60]
in eax, dx
or eax, 0x40000000
out dx, eax
mov edx, ecx
in eax, dx
or eax, 0x40000000
out dx, eax
lea edx, [esi + 4]
in eax, dx
and eax, 0xbfffffff
out dx, eax
lea edx, [esi + 0xc]
in eax, dx
and eax, 0xbfffffff
out dx, eax
or ebx, 0xe

loc_fffc46c2:  ; not directly referenced
mov eax, dword [ebp - 0xc]
call dword [eax + 0xc]  ; ucall
mov edx, 0xcf9
mov al, bl
out dx, al
lea esp, [ebp - 8]
xor eax, eax
pop ebx
pop esi
pop ebp
ret

fcn_fffc46d9:  ; not directly referenced
push ebp
mov ebp, esp
push edi
xor edi, edi
push esi
lea edx, [ebp - 0x1c]
push ebx
lea esp, [esp - 0x38]
mov ebx, dword [ebp + 8]
mov esi, dword [0xf00b0048]
mov eax, dword [ebx]
push edx
push 0
push 0
push ref_fffcfb2c  ; push 0xfffcfb2c
push ebx
call dword [eax + 0x20]  ; ucall
mov edx, eax
add esp, 0x20
jmp short loc_fffc4726  ; jmp 0xfffc4726

loc_fffc4708:  ; not directly referenced
push ecx
mov eax, dword [ebp - 0x1c]
mov dword [ebp - 0x2c], edx
push 0x3e8
inc edi
push eax
push ebx
call dword [eax + 4]  ; ucall
mov esi, dword [0xf00b0048]
add esp, 0x10
mov edx, dword [ebp - 0x2c]

loc_fffc4726:  ; not directly referenced
test esi, 0x100
jne short loc_fffc476b  ; jne 0xfffc476b
; FIXME: nasm assembles "cmp edi,0x32" as 83ff32
; but the original file is 81ff32000000
db 0x81,0xff,0x32,0,0,0
jne short loc_fffc4708  ; jne 0xfffc4708
jmp short loc_fffc4773  ; jmp 0xfffc4773

loc_fffc4738:  ; not directly referenced
mov eax, esi
test al, al
jns short loc_fffc475a  ; jns 0xfffc475a
mov ax, word [0xf00f80a2]
and al, 0x7f
mov word [0xf00f80a2], ax
mov edx, 1
mov eax, ebx
call fcn_fffc4614  ; call 0xfffc4614
mov edx, eax

loc_fffc475a:  ; not directly referenced
mov eax, esi
and eax, 0xffffff90
cmp al, 0x10
jne short loc_fffc4773  ; jne 0xfffc4773
mov eax, dword [ebp + 0x10]
mov byte [eax], 1
jmp short loc_fffc4773  ; jmp 0xfffc4773

loc_fffc476b:  ; not directly referenced
cmp edi, 0x1388
jne short loc_fffc4738  ; jne 0xfffc4738

loc_fffc4773:  ; not directly referenced
lea esp, [ebp - 0xc]
mov eax, edx
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc477d:  ; not directly referenced
push ebp
mov ebp, esp
lea esp, [esp - 8]
mov ecx, dword [0xf00b0048]
mov dl, byte [ebp + 0x10]
mov eax, dword [ebp + 8]
cmp dl, 2
je short loc_fffc47a5  ; je 0xfffc47a5
cmp dl, 6
je short loc_fffc47ac  ; je 0xfffc47ac
dec dl
jne short loc_fffc47b6  ; jne 0xfffc47b6
mov edx, 1
jmp short loc_fffc47b1  ; jmp 0xfffc47b1

loc_fffc47a5:  ; not directly referenced
mov edx, 2
jmp short loc_fffc47b1  ; jmp 0xfffc47b1

loc_fffc47ac:  ; not directly referenced
mov edx, 6

loc_fffc47b1:  ; not directly referenced
call fcn_fffc4614  ; call 0xfffc4614

loc_fffc47b6:  ; not directly referenced
xor eax, eax
leave
ret

fcn_fffc47ba:  ; not directly referenced
push ebp
mov ebp, esp
push esi
push ebx
lea edx, [ebp - 0xc]
lea esp, [esp - 0x2c]
mov ebx, dword [ebp + 8]
mov cl, byte [ebp + 0x14]
mov eax, dword [ebx]
mov byte [ebp - 0x1c], cl
push edx
push 0
push 0
push ref_fffcfb2c  ; push 0xfffcfb2c
push ebx
call dword [eax + 0x20]  ; ucall
mov eax, dword [0xf00b0040]
add esp, 0x20
mov edx, eax
mov cl, byte [ebp - 0x1c]
shr edx, 0x10
and edx, 0xf
cmp dl, 2
je loc_fffc489c  ; je 0xfffc489c
movzx edx, ah
xor eax, eax
and dl, 0xf0
jne loc_fffc489e  ; jne 0xfffc489e
mov edx, dword [0xf0000070]
mov eax, dword [0xf0000074]
shl eax, 0x1c
shr edx, 4
add edx, eax
shr edx, 0x10
mov eax, edx
or edx, 0x10800000
or eax, 0x10000000
test cl, cl
cmovs eax, edx
mov edx, ecx
and edx, 0x7f
shl edx, 0x18
or eax, edx
mov edx, dword [0xf00b004c]
mov dword [0xf00b004c], eax
push esi
mov eax, dword [ebp - 0xc]
mov esi, 0x1389
push 0x44c
push eax
push ebx
call dword [eax + 4]  ; ucall
mov eax, dword [0xf00b0040]
add esp, 0x10
jmp short loc_fffc4879  ; jmp 0xfffc4879

loc_fffc4863:  ; not directly referenced
push ecx
mov eax, dword [ebp - 0xc]
push 0x3e8
push eax
push ebx
call dword [eax + 4]  ; ucall
mov eax, dword [0xf00b0040]
add esp, 0x10

loc_fffc4879:  ; not directly referenced
mov edx, eax
shr edx, 0x18
and dl, 0xf0
jne short loc_fffc4886  ; jne 0xfffc4886
dec esi
jne short loc_fffc4863  ; jne 0xfffc4863

loc_fffc4886:  ; not directly referenced
shr eax, 0x19
push edx
and eax, 7
push eax
push dword [ebp + 0x10]
push ebx
call fcn_fffc477d  ; call 0xfffc477d
add esp, 0x10
jmp short loc_fffc489e  ; jmp 0xfffc489e

loc_fffc489c:  ; not directly referenced
xor eax, eax

loc_fffc489e:  ; not directly referenced
lea esp, [ebp - 8]
pop ebx
pop esi
pop ebp
ret

fcn_fffc48a5:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x1c]
mov edi, dword [0xf00b0044]
mov eax, dword [0xf00b0040]
mov esi, dword [ebp + 8]
mov edx, eax
shr edx, 0x10
and edx, 0xf
cmp dl, 2
jne short loc_fffc48ce  ; jne 0xfffc48ce

loc_fffc48ca:  ; not directly referenced
xor eax, eax
jmp short loc_fffc4929  ; jmp 0xfffc4929

loc_fffc48ce:  ; not directly referenced
movzx eax, ah
test al, 0xf0
jne short loc_fffc48ca  ; jne 0xfffc48ca
sub esp, 0xc
lea edx, [ebp - 0x1c]
mov eax, dword [esi]
xor ebx, ebx
push edx
push 0
push 0
push ref_fffcfb2c  ; push 0xfffcfb2c
push esi
call dword [eax + 0x20]  ; ucall
add esp, 0x20
jmp short loc_fffc490a  ; jmp 0xfffc490a

loc_fffc48f2:  ; not directly referenced
push edi
mov eax, dword [ebp - 0x1c]
inc ebx
push 0x3e8
push eax
push esi
call dword [eax + 4]  ; ucall
mov edi, dword [0xf00b0044]
add esp, 0x10

loc_fffc490a:  ; not directly referenced
test edi, 0x10000
jne short loc_fffc491c  ; jne 0xfffc491c
cmp ebx, 0x1388
jne short loc_fffc48f2  ; jne 0xfffc48f2
jmp short loc_fffc48ca  ; jmp 0xfffc48ca

loc_fffc491c:  ; not directly referenced
cmp ebx, 0x1388
je short loc_fffc48ca  ; je 0xfffc48ca
mov eax, edi
and eax, 0x3f

loc_fffc4929:  ; not directly referenced
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc4931:
push ebp
mov ebp, esp
lea esp, [esp - 0x10]
mov edx, dword [0xfeffc010]
mov ecx, dword [edx]
push eax
push edx
call dword [ecx + 0x24]  ; ucall
leave
ret

fcn_fffc4947:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
mov ebx, edx
lea edx, [ebp - 0x1c]
lea esp, [esp - 0x38]
mov esi, dword [0xfeffc010]
mov dword [ebp - 0x2c], ecx
mov eax, dword [esi]
push edx
push 0
push 0
push ref_fffcfc84  ; push 0xfffcfc84
push esi
call dword [eax + 0x20]  ; ucall
add esp, 0x20
lea eax, [ebp - 0x2c]
push dword [ebp + 8]
mov ecx, ebx
mov edx, dword [ebp - 0x1c]
push eax
shr ecx, 1
mov eax, ebx
shr eax, 0x16
movzx ebx, bh
and eax, 1
and ecx, 0x7f
push eax
push edi
push ebx
push ecx
push edx
push esi
call dword [edx]  ; ucall
add esp, 0x20
cmp dword [ebp + 0xc], 0
je short loc_fffc49a6  ; je 0xfffc49a6
mov edx, dword [ebp + 0xc]
mov dword [edx], eax

loc_fffc49a6:
mov eax, dword [ebp - 0x2c]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc49b1:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x5c]
mov dword [ebp - 0x64], eax
mov ebx, dword [ebp - 0x64]
mov dword [edx], 8
mov word [edx + 8], 0
mov byte [edx + 0xa], 0
mov byte [edx + 0xc], 4
mov byte [edx + 0xd], 0x12
mov byte [edx + 0xe], 0
mov byte [edx + 0xf], 0
mov word [edx + 0x10], 4
mov bl, byte [ebx + 0x3e]
mov byte [ebp - 0x66], bl
mov ebx, dword [ebp - 0x64]
movzx eax, byte [eax + 0x1093]
cmp byte [ebx + 0x3e], al
movzx ebx, byte [ebp - 0x66]
cmovae eax, ebx
mov ebx, dword [ebp - 0x64]
mov word [edx + 0x12], ax
movzx esi, byte [ebx + 0x1098]
mov al, byte [ebx + 0x1099]
shr al, 2
movzx eax, al
cmp eax, esi
lea edi, [eax + 1]
mov al, byte [ebx + 0x44]
cmovge esi, edi
shr al, 2
movzx ebx, al
mov eax, dword [ebp - 0x64]
movzx edi, byte [eax + 0x43]
lea eax, [ebx + 1]
cmp ebx, edi
mov dword [edx + 4], 0
mov dword [edx + 0x15], 5
mov word [edx + 0x1d], 0
cmovge edi, eax
mov eax, esi
cmp edi, esi
mov byte [edx + 0x1f], 0
cmovge eax, edi
mov byte [edx + 0x14], al
mov byte [edx + 0x21], 0
mov eax, dword [ebp - 0x64]
mov byte [edx + 0x22], 0x1f
mov byte [edx + 0x23], 0
mov byte [edx + 0x24], 0
mov word [edx + 0x25], 1
mov word [edx + 0x27], 4
mov byte [edx + 0x29], 4
mov dword [edx + 0x19], 0
mov dword [edx + 0x2a], 9
mov word [edx + 0x32], 0
mov byte [edx + 0x34], 0
mov byte [edx + 0x36], 2
mov byte [edx + 0x37], 0x12
mov byte [edx + 0x38], 0
mov byte [edx + 0x39], 0
mov word [edx + 0x3a], 0x1f4
mov word [edx + 0x3c], 4
mov byte [edx + 0x3e], 4
mov dword [edx + 0x2e], 0
mov dword [edx + 0x3f], 5
mov word [edx + 0x47], 0
mov byte [edx + 0x49], 0
mov byte [edx + 0x4b], 0
mov byte [edx + 0x4c], 0x1f
mov byte [edx + 0x4d], 0
mov byte [edx + 0x4e], 0
mov word [edx + 0x4f], 1
movzx esi, byte [eax + 0x3c]
movzx eax, byte [eax + 0x41]
lea esi, [esi + eax + 5]
mov eax, dword [ebp - 0x64]
movzx edi, byte [eax + 0x1091]
movzx eax, byte [eax + 0x1096]
lea eax, [edi + eax + 5]
cmp esi, eax
cmovge eax, esi
mov word [edx + 0x51], ax
mov byte [edx + 0x53], 3
mov dword [edx + 0x43], 0
mov edx, dword [ebp - 0x64]
mov ebx, edx
mov dword [ecx], 3
mov word [ecx + 8], 0x400
mov byte [ecx + 0xa], 0
mov byte [ecx + 0xc], 0
mov byte [ecx + 0xd], 0x12
mov byte [ecx + 0xe], 0
mov byte [ecx + 0xf], 0
mov word [ecx + 0x10], 1
movzx eax, byte [edx + 0x1094]
movzx edx, byte [edx + 0x3f]
cmp dl, al
mov byte [ecx + 0x14], 3
mov dword [ecx + 4], 0
mov dword [ecx + 0x15], 8
cmovae eax, edx
mov word [ecx + 0x1d], 0
mov word [ecx + 0x12], ax
mov byte [ecx + 0x1f], 0
mov byte [ecx + 0x21], 4
mov byte [ecx + 0x22], 0x12
mov byte [ecx + 0x23], 0
mov byte [ecx + 0x24], 0
mov word [ecx + 0x25], 8
movzx edx, byte [ebx + 0x3b]
movzx eax, byte [ebx + 0x1090]
cmp dl, al
cmovae eax, edx
mov word [ecx + 0x27], ax
mov al, byte [ebx + 0x1099]
shr al, 2
movzx edx, al
movzx eax, byte [ebx + 0x1098]
lea esi, [edx + 1]
cmp edx, eax
mov dl, byte [ebx + 0x44]
cmovge eax, esi
shr dl, 2
movzx esi, dl
movzx edx, byte [ebx + 0x43]
lea edi, [esi + 1]
cmp esi, edx
mov dword [ecx + 0x19], 0
mov dword [ecx + 0x2a], 4
cmovge edx, edi
cmp edx, eax
cmovge eax, edx
mov byte [ecx + 0x29], al
mov word [ecx + 0x32], 0
mov byte [ecx + 0x34], 0
mov byte [ecx + 0x36], 2
mov byte [ecx + 0x37], 0x12
mov byte [ecx + 0x38], 0
mov byte [ecx + 0x39], 0
mov word [ecx + 0x3a], 0x1f4
movzx eax, byte [ebx + 0x1097]
movzx edx, byte [ebx + 0x42]
cmp dl, al
mov byte [ecx + 0x3e], 4
mov dword [ecx + 0x2e], 0
mov dword [ecx + 0x3f], 3
cmovb edx, eax
mov eax, 8
cmp dx, 7
mov word [ecx + 0x47], 0x400
mov byte [ecx + 0x49], 0
mov byte [ecx + 0x4b], 0
cmova eax, edx
mov byte [ecx + 0x4c], 0x12
mov word [ecx + 0x3c], ax
mov byte [ecx + 0x4d], 0
mov byte [ecx + 0x4e], 0
mov word [ecx + 0x4f], 1
movzx eax, byte [ebx + 0x1094]
movzx edx, byte [ebx + 0x3f]
cmp dl, al
mov byte [ecx + 0x53], 3
mov dword [ecx + 0x43], 0
cmovae eax, edx
mov word [ecx + 0x51], ax
xor eax, eax

loc_fffc4c79:
test al, 1
jne short loc_fffc4c8f  ; jne 0xfffc4c8f
mov dword [ebp + eax*8 - 0x58], 0xaaaaaaaa
mov dword [ebp + eax*8 - 0x54], 0xaaaaaaaa
jmp short loc_fffc4c9f  ; jmp 0xfffc4c9f

loc_fffc4c8f:
mov dword [ebp + eax*8 - 0x58], 0x55555555
mov dword [ebp + eax*8 - 0x54], 0x55555555

loc_fffc4c9f:
inc eax
cmp eax, 8
jne short loc_fffc4c79  ; jne 0xfffc4c79
mov eax, dword [ebp - 0x64]
cmp byte [eax + 0x3a], 0
jne short loc_fffc4cbc  ; jne 0xfffc4cbc

loc_fffc4cae:
mov eax, dword [ebp - 0x64]
cmp byte [eax + 0x108f], 0
jne short loc_fffc4cd3  ; jne 0xfffc4cd3
jmp short loc_fffc4ceb  ; jmp 0xfffc4ceb

loc_fffc4cbc:
sub esp, 0xc
lea ecx, [ebp - 0x58]
push 1
xor edx, edx
mov eax, dword [ebp - 0x64]
call fcn_fffc7760  ; call 0xfffc7760
add esp, 0x10
jmp short loc_fffc4cae  ; jmp 0xfffc4cae

loc_fffc4cd3:
sub esp, 0xc
lea ecx, [ebp - 0x58]
push 1
mov edx, 1
mov eax, dword [ebp - 0x64]
call fcn_fffc7760  ; call 0xfffc7760
add esp, 0x10

loc_fffc4ceb:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc4cf3:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x8c]
mov eax, dword [ebp + 8]
mov dword [ebp - 0x94], edx
mov dword [ebp - 0x7c], eax
mov byte [ebp - 0x88], cl
mov byte [ebp - 0x7d], al
lea esi, [ebx + 0x3c31]
mov edx, 0x1200
xor ecx, ecx
mov eax, esi
mov edi, dword [ebp + 0xc]
call fcn_fffa24c1  ; call 0xfffa24c1
movzx eax, byte [ebp - 0x7d]
mov dword [ebp - 0x6c], 0
mov dword [ebp - 0x8c], eax
mov word [ebp - 0x64], 4
movzx eax, byte [ebx + 0x20aa]
movzx edx, byte [ebp - 0x88]
mov word [ebp - 0x5a], ax
mov dword [ebp - 0x84], edx
mov dl, byte [ebp - 0x7c]
mov byte [ebp - 0x61], dl
mov byte [ebp - 0x4c], dl
mov byte [ebp - 0x62], 3
mov byte [ebp - 0x60], 0
mov byte [ebp - 0x5f], 0
mov byte [ebp - 0x5e], 0
mov byte [ebp - 0x5d], 0
mov word [ebp - 0x5c], 1
mov byte [ebp - 0x58], 3
mov dword [ebp - 0x68], edi
mov dword [ebp - 0x57], 4
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 0
mov byte [ebp - 0x4a], 0
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 0x1f4
mov word [ebp - 0x45], 4
mov byte [ebp - 0x43], 4
mov dword [ebp - 0x53], edi
mov dword [ebp - 0x42], 0xb
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x37], dl
mov word [ebp - 0x1b], ax
imul edx, dword [ebp - 0x84], 0x1055
imul eax, dword [ebp - 0x84], 0x900
mov byte [ebp - 0x36], 0
movzx edx, byte [ebx + edx + 0x3b]
add edx, 8
add eax, esi
mov word [ebp - 0x30], dx
mov dl, byte [ebp - 0x7c]
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], edi
mov dword [ebp - 0x2d], 0
mov word [ebp - 0x25], 0
mov byte [ebp - 0x23], 3
mov byte [ebp - 0x22], dl
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x19], 3
mov dword [ebp - 0x29], edi
mov dword [ebp - 0x90], eax
mov byte [ebp - 0x7d], 0

loc_fffc4e50:  ; not directly referenced
push 9
movzx edi, byte [ebp - 0x7d]
mov ecx, dword [ebp - 0x8c]
push 7
mov edx, dword [ebp - 0x84]
mov eax, ebx
push 8
push edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
push 9
mov ecx, dword [ebp - 0x8c]
mov eax, ebx
push 7
mov edx, dword [ebp - 0x84]
push 0x14
push edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x20
mov eax, 0x4140
xor ecx, ecx
jmp short loc_fffc4ed2  ; jmp 0xfffc4ed2

loc_fffc4e94:  ; not directly referenced
cmp byte [ebp - 0x88], 0
lea edx, [eax + 0x200]
lea esi, [eax + 0x600]
cmovne edx, esi
add edx, dword [ebx + 0x2223]
cmp byte [ebp - 0x88], 0
mov dword [edx], 0
lea edx, [eax + 0x400]
cmove edx, eax
add edx, dword [ebx + 0x2223]
inc ecx
add eax, 4
mov edx, dword [edx]

loc_fffc4ed2:  ; not directly referenced
movzx edx, byte [ebx + 0x20b5]
cmp ecx, edx
jb short loc_fffc4e94  ; jb 0xfffc4e94
push eax
lea eax, [ebp - 0x6c]
mov ecx, 3
push 1
mov edx, dword [ebp - 0x84]
push eax
mov eax, ebx
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov dword [ebp - 0x7c], eax
jne loc_fffc4f97  ; jne 0xfffc4f97
xor ecx, ecx
mov edx, dword [ebp - 0x84]
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne short loc_fffc4f90  ; jne 0xfffc4f90
mov edx, dword [ebp - 0x90]
lea ecx, [edx + edi*2]
mov edx, 0x4340
jmp short loc_fffc4f64  ; jmp 0xfffc4f64

loc_fffc4f31:  ; not directly referenced
cmp byte [ebp - 0x88], 0
lea esi, [edx + 0x400]
cmove esi, edx
add esi, dword [ebx + 0x2223]
mov edi, dword [esi]
mov esi, eax
shl esi, 8
mov word [ecx + esi], di
cmp dword [ebx + 0x2240], 0
je short loc_fffc4f60  ; je 0xfffc4f60
mov word [ecx + esi + 2], di

loc_fffc4f60:  ; not directly referenced
inc eax
add edx, 4

loc_fffc4f64:  ; not directly referenced
movzx esi, byte [ebx + 0x20b5]
cmp eax, esi
jb short loc_fffc4f31  ; jb 0xfffc4f31
mov al, byte [ebp - 0x7d]
mov dl, byte [ebp - 0x7d]
add eax, 2
inc edx
cmp dword [ebx + 0x2240], 0
cmove eax, edx
cmp al, 0x47
mov byte [ebp - 0x7d], al
jbe loc_fffc4e50  ; jbe 0xfffc4e50
jmp short loc_fffc4f97  ; jmp 0xfffc4f97

loc_fffc4f90:  ; not directly referenced
mov dword [ebp - 0x7c], 0xc

loc_fffc4f97:  ; not directly referenced
imul eax, dword [ebp - 0x84], 9
imul edx, dword [ebp - 0x8c], 0x36
mov byte [ebp - 0x7d], 0
mov dword [ebp - 0x90], eax
mov dword [ebp - 0x88], edx
jmp near loc_fffc505d  ; jmp 0xfffc505d

loc_fffc4fba:  ; not directly referenced
movzx edi, byte [ebp - 0x7d]
mov eax, dword [ebp - 0x90]
add eax, edi
sub esp, 0xc
shl eax, 8
lea esi, [ebp - 0x6c]
push esi
mov ecx, 0x48
lea edi, [edi + edi*2]
lea edx, [ebx + eax + 0x3c31]
mov eax, ebx
call fcn_fffc3287  ; call 0xfffc3287
add esp, 0x10
dec eax
mov eax, 1
cmovne eax, dword [ebp - 0x7c]
mov dword [ebp - 0x7c], eax
add edi, dword [ebp - 0x88]
imul eax, dword [ebp - 0x84], 0x1055
cmp dword [ebp - 0x94], 0
jne short loc_fffc501c  ; jne 0xfffc501c
lea eax, [edi + eax + 0x1b0]
lea eax, [ebx + eax + 0xd]
jmp short loc_fffc504e  ; jmp 0xfffc504e

loc_fffc501c:  ; not directly referenced
cmp dword [ebp - 0x94], 1
jne short loc_fffc5032  ; jne 0xfffc5032
lea eax, [edi + eax + 0x1c0]
lea eax, [ebx + eax + 0x18]
jmp short loc_fffc504e  ; jmp 0xfffc504e

loc_fffc5032:  ; not directly referenced
add edi, eax
mov ecx, 3
mov edx, esi
lea eax, [ebx + edi + 0x1bd]
call fcn_fffa2408  ; call 0xfffa2408
lea eax, [ebx + edi + 0x1d8]

loc_fffc504e:  ; not directly referenced
mov ecx, 3
mov edx, esi
call fcn_fffa2408  ; call 0xfffa2408
inc byte [ebp - 0x7d]

loc_fffc505d:  ; not directly referenced
mov al, byte [ebp - 0x7d]
cmp al, byte [ebx + 0x20b5]
jb loc_fffc4fba  ; jb 0xfffc4fba
mov eax, dword [ebp - 0x7c]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc5077:
push ebp
mov ebp, esp
push edi
push esi
mov esi, ecx
push ebx
mov ebx, eax
mov eax, 0x4080
lea esp, [esp - 0xbc]
mov byte [ebp - 0xbd], dl
xor edx, edx
jmp short loc_fffc50b7  ; jmp 0xfffc50b7

loc_fffc5097:
cmp byte [ebp - 0xbd], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebx + 0x2223]
inc edx
add eax, 4
mov dword [ecx], 0

loc_fffc50b7:
movzx ecx, byte [ebx + 0x20b5]
cmp edx, ecx
jb short loc_fffc5097  ; jb 0xfffc5097
movzx edi, byte [ebp - 0xbd]
mov eax, esi
movzx eax, al
mov ecx, edi
mov dword [ebp - 0xbc], eax
mov edx, eax
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffc50ec  ; jne 0xfffc50ec

loc_fffc50e3:
xor esi, esi
xor eax, eax
jmp near loc_fffc537c  ; jmp 0xfffc537c

loc_fffc50ec:
xor ecx, ecx
mov edx, 0x40
lea eax, [ebp - 0xac]
call fcn_fffa24c1  ; call 0xfffa24c1
sub esp, 0xc
lea ecx, [ebp - 0xac]
push 1
mov eax, ebx
mov edx, edi
call fcn_fffc7760  ; call 0xfffc7760
movzx eax, byte [ebx + 0x20b5]
add esp, 0x10
lea ecx, [eax*4 + 0x4140]
mov eax, 0x4140
jmp short loc_fffc5145  ; jmp 0xfffc5145

loc_fffc512a:
cmp byte [ebp - 0xbd], 0
lea edx, [eax + 0x400]
cmove edx, eax
add edx, dword [ebx + 0x2223]
add eax, 4
mov edx, dword [edx]

loc_fffc5145:
cmp eax, ecx
jne short loc_fffc512a  ; jne 0xfffc512a
mov edx, esi
mov dword [ebp - 0x6c], 0
mov byte [ebp - 0x61], dl
mov byte [ebp - 0x4c], dl
mov byte [ebp - 0x37], dl
mov word [ebp - 0x64], 4
imul edx, edi, 0x1055
mov byte [ebp - 0x62], 3
movzx eax, byte [ebx + 0x20aa]
mov byte [ebp - 0x60], 0
mov word [ebp - 0x5a], ax
mov byte [ebp - 0x5f], 0
mov byte [ebp - 0x5e], 0
mov byte [ebp - 0x5d], 0
mov word [ebp - 0x5c], 1
mov byte [ebp - 0x58], 3
mov dword [ebp - 0x68], 0
mov dword [ebp - 0x57], 4
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 0
mov byte [ebp - 0x4a], 0
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 3
mov word [ebp - 0x45], 4
mov byte [ebp - 0x43], 4
mov dword [ebp - 0x53], 0
mov dword [ebp - 0x42], 0xb
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov ecx, esi
movzx edx, byte [ebx + edx + 0x3b]
push 9
add edx, 8
mov byte [ebp - 0x22], cl
push 7
mov word [ebp - 0x30], dx
mov word [ebp - 0x1b], ax
push 8
mov ecx, dword [ebp - 0xbc]
mov edx, edi
push 0x10
mov eax, ebx
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
mov dword [ebp - 0x2d], 0
mov word [ebp - 0x25], 0
mov byte [ebp - 0x23], 3
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x19], 3
mov dword [ebp - 0x29], 0
call fcn_fffbfd3a  ; call 0xfffbfd3a
push 9
mov ecx, dword [ebp - 0xbc]
mov edx, edi
push 7
mov eax, ebx
push 0x14
push 0x10
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x1c
lea eax, [ebp - 0x6c]
push 1
mov ecx, 3
mov edx, edi
push eax
mov eax, ebx
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov esi, eax
jne loc_fffc53bc  ; jne 0xfffc53bc
xor ecx, ecx
mov edx, edi
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
je short loc_fffc52bd  ; je 0xfffc52bd

loc_fffc52b3:
mov esi, 0xc
jmp near loc_fffc53bc  ; jmp 0xfffc53bc

loc_fffc52bd:
push 9
mov ecx, dword [ebp - 0xbc]
mov edx, edi
push 7
mov eax, ebx
push 8
push 0x30
call fcn_fffbfd3a  ; call 0xfffbfd3a
push 9
mov ecx, dword [ebp - 0xbc]
mov edx, edi
push 7
mov eax, ebx
push 0x14
push 0x30
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x1c
lea edx, [ebp - 0x6c]
push 1
mov ecx, 3
mov eax, ebx
push edx
mov edx, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov esi, eax
jne loc_fffc53bc  ; jne 0xfffc53bc
xor ecx, ecx
mov edx, edi
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne short loc_fffc52b3  ; jne 0xfffc52b3
mov ax, 0x4080
xor edx, edx
jmp short loc_fffc536f  ; jmp 0xfffc536f

loc_fffc5330:
cmp byte [ebp - 0xbd], 0
lea esi, [eax + 0x3c0]
lea ecx, [eax - 0x40]
cmovne ecx, esi
add ecx, dword [ebx + 0x2223]
mov esi, dword [ecx]
lea ecx, [eax + 0x400]
not esi
and esi, 0xff
cmp byte [ebp - 0xbd], 0
cmove ecx, eax
add ecx, dword [ebx + 0x2223]
inc edx
add eax, 4
mov dword [ecx], esi

loc_fffc536f:
cmp dl, byte [ebx + 0x20b5]
jb short loc_fffc5330  ; jb 0xfffc5330
jmp near loc_fffc50e3  ; jmp 0xfffc50e3

loc_fffc537c:
test al, 1
jne short loc_fffc5392  ; jne 0xfffc5392
mov dword [ebp + eax*8 - 0x6c], 0
mov dword [ebp + eax*8 - 0x68], 0
jmp short loc_fffc53a2  ; jmp 0xfffc53a2

loc_fffc5392:
mov dword [ebp + eax*8 - 0x6c], 0xffffffff
mov dword [ebp + eax*8 - 0x68], 0xffffffff

loc_fffc53a2:
inc eax
cmp eax, 8
jne short loc_fffc537c  ; jne 0xfffc537c
sub esp, 0xc
lea ecx, [ebp - 0x6c]
push 1
mov edx, edi
mov eax, ebx
call fcn_fffc7760  ; call 0xfffc7760
add esp, 0x10

loc_fffc53bc:
lea esp, [ebp - 0xc]
mov eax, esi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc53c6:
push ebp
mov ebp, esp
push edi
mov edi, ecx
push esi
mov esi, eax
push ebx
lea esp, [esp - 0x1c]
mov eax, dword [ebp + 0xc]
dec eax
mov bl, byte [ebp + 8]
cmp eax, 1
mov byte [ebp - 0x19], dl
mov byte [ebp - 0x1a], bl
ja short loc_fffc5405  ; ja 0xfffc5405
movzx eax, bl
mov ebx, dword [ebp + 0x10]
push eax
movzx ecx, cl
push 7
movzx edx, dl
push 8
movzx eax, byte [ebx]
push eax
mov eax, esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10

loc_fffc5405:
test dword [ebp + 0xc], 0xfffffffd
jne short loc_fffc5431  ; jne 0xfffc5431
movzx ebx, byte [ebp - 0x1a]
mov eax, edi
push ebx
movzx ecx, al
mov ebx, dword [ebp + 0x10]
push 7
movzx edx, byte [ebp - 0x19]
push 0x14
movzx eax, byte [ebx]
push eax
mov eax, esi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10

loc_fffc5431:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffc5439:
db 0x00
db 0x00
db 0x00

fcn_fffc543c:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x9c]
mov edx, dword [eax + 0x224c]
test edx, edx
mov dword [eax + 0x2aa6], edx
mov eax, 0x855
cmovne eax, edx
mov dword [ebx + 0x20b6], eax
mov eax, dword [ebx + 0x2223]
mov edx, dword [eax + 0x5e04]
test edx, edx
je short loc_fffc5492  ; je 0xfffc5492
sub edx, 3
xor eax, eax
cmp dl, 5
ja short loc_fffc548c  ; ja 0xfffc548c
movzx edx, dl
movzx eax, word [edx + edx + ref_fffcf5a4]  ; movzx eax, word [edx + edx - 0x30a5c]

loc_fffc548c:
mov dword [ebx + 0x20b6], eax

loc_fffc5492:
mov ecx, dword [ebx + 0x221f]
mov eax, dword [ecx + 0xe4]
test al, 8
jne loc_fffc5535  ; jne 0xfffc5535
mov edx, eax
and edx, 7
cmp edx, 3
ja short loc_fffc54c8  ; ja 0xfffc54c8
cmp dword [ebx + 0x20b6], 0x855
jbe short loc_fffc5535  ; jbe 0xfffc5535
mov dword [ebx + 0x20b6], 0x855
jmp short loc_fffc5535  ; jmp 0xfffc5535

loc_fffc54c8:
cmp edx, 4
jne short loc_fffc54e5  ; jne 0xfffc54e5
cmp dword [ebx + 0x20b6], 0x74b
jbe short loc_fffc5535  ; jbe 0xfffc5535
mov dword [ebx + 0x20b6], 0x74b
jmp short loc_fffc5535  ; jmp 0xfffc5535

loc_fffc54e5:
cmp edx, 5
jne short loc_fffc5502  ; jne 0xfffc5502
cmp dword [ebx + 0x20b6], 0x640
jbe short loc_fffc5535  ; jbe 0xfffc5535
mov dword [ebx + 0x20b6], 0x640
jmp short loc_fffc5535  ; jmp 0xfffc5535

loc_fffc5502:
cmp edx, 6
jne short loc_fffc551f  ; jne 0xfffc551f
cmp dword [ebx + 0x20b6], 0x535
jbe short loc_fffc5535  ; jbe 0xfffc5535
mov dword [ebx + 0x20b6], 0x535
jmp short loc_fffc5535  ; jmp 0xfffc5535

loc_fffc551f:
cmp dword [ebx + 0x20b6], 0x42b
jbe short loc_fffc5535  ; jbe 0xfffc5535
mov dword [ebx + 0x20b6], 0x42b

loc_fffc5535:
test ah, 8
jne short loc_fffc5542  ; jne 0xfffc5542
mov edx, dword [ecx + 0x54]
and dl, 0x10
jne short loc_fffc5560  ; jne 0xfffc5560

loc_fffc5542:
mov dword [ebx + 0x2294], 0
mov dword [ebx + 0x2298], 0
mov dword [ebx + 0x22a0], 0

loc_fffc5560:
test eax, 0x20000
je short loc_fffc556e  ; je 0xfffc556e
mov byte [ebx + 0x22e4], 2

loc_fffc556e:
mov edx, eax
and edx, 0x180000
shr edx, 0x13
cmp edx, 2
je short loc_fffc559a  ; je 0xfffc559a
cmp edx, 3
je short loc_fffc55a5  ; je 0xfffc55a5
dec edx
mov ecx, 0x4000
mov edx, 0x2000
cmove ecx, edx
mov word [ebx + 0x20f6], cx
jmp short loc_fffc55ae  ; jmp 0xfffc55ae

loc_fffc559a:
mov word [ebx + 0x20f6], 0x800
jmp short loc_fffc55ae  ; jmp 0xfffc55ae

loc_fffc55a5:
mov word [ebx + 0x20f6], 0x200

loc_fffc55ae:
test eax, 0x2000000
je short loc_fffc55cb  ; je 0xfffc55cb
mov dword [ebx + 0x20b1], 0
mov byte [ebx + 0x20b5], 8
jmp near loc_fffc59c3  ; jmp 0xfffc59c3

loc_fffc55cb:
cmp dword [ebx + 0x2244], 1
jne short loc_fffc55e7  ; jne 0xfffc55e7
mov dword [ebx + 0x20b1], 1
mov byte [ebx + 0x20b5], 9
jmp short loc_fffc55f8  ; jmp 0xfffc55f8

loc_fffc55e7:
mov dword [ebx + 0x20b1], 0
mov byte [ebx + 0x20b5], 8

loc_fffc55f8:
test eax, 0x1000000
je loc_fffc59c3  ; je 0xfffc59c3
cmp dword [ebx + 0x2244], 0
mov eax, 1
je loc_fffc59d8  ; je 0xfffc59d8
mov dword [ebx + 0x22a8], 1
mov dword [ebx + 0x20b1], 1
mov byte [ebx + 0x20b5], 9
jmp near loc_fffc59c3  ; jmp 0xfffc59c3

loc_fffc5635:
imul eax, dword [ebp - 0x4c], 0x46
mov edx, dword [ebp - 0x58]
lea eax, [eax + edx + 0x2100]
add eax, ebx
imul edx, dword [ebp - 0x4c], 0x1d
add edx, dword [ebp - 0x5c]
add edx, ebx
cmp dword [eax + 7], 1
lea ecx, [eax + 7]
mov dword [ebp - 0x40], edx
mov dword [ebp - 0x44], ecx
jne loc_fffc581a  ; jne 0xfffc581a
cmp byte [eax + 0xd], 0xb
jne loc_fffc581a  ; jne 0xfffc581a
mov al, byte [eax + 0xe]
mov byte [ebp - 0x46], al
sub eax, 2
cmp al, 1
ja loc_fffc581a  ; ja 0xfffc581a
jmp near loc_fffc5928  ; jmp 0xfffc5928

loc_fffc5681:
mov edx, dword [ebp - 0x40]
mov byte [edx + 0x14], 8
jmp near loc_fffc593e  ; jmp 0xfffc593e

loc_fffc568d:
cmp al, 2
jne loc_fffc581a  ; jne 0xfffc581a
mov ecx, dword [ebp - 0x40]
mov byte [ecx + 0x14], 0x10
jmp near loc_fffc593e  ; jmp 0xfffc593e

loc_fffc56a1:
mov eax, dword [ebp - 0x40]
mov edx, dword [ebp - 0x44]
mov byte [eax + 0x13], 0x40
mov al, byte [edx + 0xb]
shr al, 3
inc eax
cmp al, 2
mov byte [ebp - 0x45], al
ja loc_fffc581a  ; ja 0xfffc581a
mov ecx, dword [ebp - 0x40]
mov byte [ecx + 0x12], al
movzx eax, byte [edx + 0xe]
imul eax, eax, 0xf4240
movzx ecx, byte [edx + 0xf]
cdq
idiv ecx
mov ecx, dword [ebp - 0x44]
movzx edx, byte [ecx + 0x10]
imul eax, edx
cmp eax, 0xf423f
jg short loc_fffc56f4  ; jg 0xfffc56f4
mov eax, dword [ebp - 0x40]
mov dword [eax + 0xe], 0x855
jmp near loc_fffc5954  ; jmp 0xfffc5954

loc_fffc56f4:
cmp eax, 0x112a88
jg short loc_fffc570a  ; jg 0xfffc570a
mov edx, dword [ebp - 0x40]
mov dword [edx + 0xe], 0x74b
jmp near loc_fffc5954  ; jmp 0xfffc5954

loc_fffc570a:
cmp eax, 0x1312d0
jg short loc_fffc5720  ; jg 0xfffc5720
mov ecx, dword [ebp - 0x40]
mov dword [ecx + 0xe], 0x640
jmp near loc_fffc5954  ; jmp 0xfffc5954

loc_fffc5720:
cmp eax, 0x16e360
jg short loc_fffc5736  ; jg 0xfffc5736
mov eax, dword [ebp - 0x40]
mov dword [eax + 0xe], 0x535
jmp near loc_fffc5954  ; jmp 0xfffc5954

loc_fffc5736:
cmp eax, 0x1c9c38
jg loc_fffc581a  ; jg 0xfffc581a
mov edx, dword [ebp - 0x40]
mov dword [edx + 0xe], 0x42b
jmp near loc_fffc5954  ; jmp 0xfffc5954

loc_fffc5750:
mov ecx, dword [ebp - 0x44]
mov edx, dword [ebp - 0x40]
mov cl, byte [ecx + 9]
mov al, cl
and eax, 7
mov word [edx + 8], ax
xor edx, edx
dec ax
jne short loc_fffc5773  ; jne 0xfffc5773
mov ecx, dword [ebp - 0x40]
mov dl, 1
mov word [ecx + 8], 0x400

loc_fffc5773:
mov eax, dword [ebp - 0x44]
mov ecx, dword [ebp - 0x40]
mov al, byte [eax + 9]
mov byte [ebp - 0x88], al
and eax, 0x38
sar eax, 3
cmp eax, 4
mov dword [ecx + 4], eax
ja loc_fffc581a  ; ja 0xfffc581a
jmp dword [eax*4 + ref_fffcf590]  ; ujmp: jmp dword [eax*4 - 0x30a70]

loc_fffc579b:
mov eax, dword [ebp - 0x40]
mov dword [eax + 4], 0x1000
jmp short loc_fffc57d5  ; jmp 0xfffc57d5

loc_fffc57a7:
mov ecx, dword [ebp - 0x40]
mov dword [ecx + 4], 0x2000
jmp short loc_fffc57d5  ; jmp 0xfffc57d5

loc_fffc57b3:
mov eax, dword [ebp - 0x40]
mov dword [eax + 4], 0x4000
jmp short loc_fffc57d5  ; jmp 0xfffc57d5

loc_fffc57bf:
mov ecx, dword [ebp - 0x40]
mov dword [ecx + 4], 0x8000
jmp short loc_fffc57d5  ; jmp 0xfffc57d5

loc_fffc57cb:
mov eax, dword [ebp - 0x40]
mov dword [eax + 4], 0x10000

loc_fffc57d5:
dec edx
jne short loc_fffc581a  ; jne 0xfffc581a
imul eax, dword [ebp - 0x4c], 0x46
mov edx, dword [ebp - 0x58]
lea eax, [eax + edx + 0x2100]
lea eax, [ebx + eax + 0xb]
test byte [eax + 8], 8
je loc_fffc599f  ; je 0xfffc599f

loc_fffc57f4:
mov ecx, dword [ebp - 0x40]
mov edx, dword [ebp - 0x44]
mov dword [ecx + 0xa], 1
cmp byte [edx + 0x2c], 1
sete dl
movzx edx, dl
mov dword [ecx + 0x15], edx
test byte [eax + 8], 8
jne loc_fffc59b1  ; jne 0xfffc59b1
jmp short loc_fffc5842  ; jmp 0xfffc5842

loc_fffc581a:
mov ecx, dword [ebp - 0x40]
mov eax, 6
mov dword [ecx + 0xa], 0
mov byte [ecx + 0x12], 0
mov dword [ecx], 0
mov word [ecx + 8], 0
mov dword [ecx + 4], 0
jmp short loc_fffc586e  ; jmp 0xfffc586e

loc_fffc5842:
mov dword [ebx + 0x20b1], 0
mov byte [ebx + 0x20b5], 8

loc_fffc5853:
imul eax, dword [ebp - 0x4c], 0x1d
mov ecx, dword [ebp - 0x54]
mov edx, dword [ecx + eax + 0xe]
xor eax, eax
cmp edx, dword [ebx + 0x20b6]
jae short loc_fffc586e  ; jae 0xfffc586e
mov dword [ebx + 0x20b6], edx

loc_fffc586e:
inc dword [ebp - 0x4c]
cmp dword [ebp - 0x4c], 2
jne loc_fffc5635  ; jne 0xfffc5635
inc dword [ebp - 0x50]
add dword [ebp - 0x54], 0x1055
cmp dword [ebp - 0x50], 2
je short loc_fffc58ab  ; je 0xfffc58ab

loc_fffc588b:
imul eax, dword [ebp - 0x50], 0x8c
imul edx, dword [ebp - 0x50], 0x1055
mov dword [ebp - 0x4c], 0
mov dword [ebp - 0x58], eax
mov dword [ebp - 0x5c], edx
jmp near loc_fffc5635  ; jmp 0xfffc5635

loc_fffc58ab:
xor ecx, ecx

loc_fffc58ad:
cmp eax, 0xb
mov al, 0
cmove ecx, eax
mov eax, ebx
movzx esi, cl
mov byte [ebp - 0x9c], cl
mov edx, esi
call fcn_fffc922c  ; call 0xfffc922c
cmp eax, 7
mov cl, byte [ebp - 0x9c]
jne short loc_fffc58f6  ; jne 0xfffc58f6
imul edx, esi, 0x1055
add edx, ebx
mov byte [edx + 0x3a], 0
mov dword [edx + 0xa], 0
mov dword [edx + 0x27], 0
mov byte [edx + 0x12], 0
mov byte [edx + 0x2f], 0
jmp short loc_fffc58fb  ; jmp 0xfffc58fb

loc_fffc58f6:
cmp eax, 0xb
je short loc_fffc58fc  ; je 0xfffc58fc

loc_fffc58fb:
inc ecx

loc_fffc58fc:
cmp cl, 1
jbe short loc_fffc58ad  ; jbe 0xfffc58ad
xor eax, eax
cmp byte [ebx + 0x3a], 0
jne loc_fffc59d8  ; jne 0xfffc59d8
cmp byte [ebx + 0x108f], 1
sbb eax, eax
and eax, 0xf
jmp near loc_fffc59d8  ; jmp 0xfffc59d8

loc_fffc591e:
mov eax, 0x11
jmp near loc_fffc59d8  ; jmp 0xfffc59d8

loc_fffc5928:
mov ecx, dword [ebp - 0x44]
mov al, byte [ecx + 0xb]
and eax, 7
cmp al, 1
jne loc_fffc568d  ; jne 0xfffc568d
jmp near loc_fffc5681  ; jmp 0xfffc5681

loc_fffc593e:
mov edx, dword [ebp - 0x44]
mov al, byte [edx + 0xc]
and eax, 7
cmp al, 3
jne loc_fffc581a  ; jne 0xfffc581a
jmp near loc_fffc56a1  ; jmp 0xfffc56a1

loc_fffc5954:
mov ecx, 7
mov edi, dword [ebp - 0x3c]
mov esi, ref_fffcf574  ; mov esi, 0xfffcf574
mov edx, dword [ebp - 0x40]
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov ecx, dword [ebp - 0x44]
mov cl, byte [ecx + 8]
mov al, cl
movzx ecx, byte [edx + 0x14]
and eax, 0xf
xor edx, edx
mov eax, dword [ebp + eax*4 - 0x34]
shr eax, 3
shl eax, 6
div ecx
movzx edx, byte [ebp - 0x45]
mov ecx, dword [ebp - 0x40]
imul eax, edx
cmp eax, 0x2000
mov dword [ecx], eax
ja loc_fffc581a  ; ja 0xfffc581a
jmp near loc_fffc5750  ; jmp 0xfffc5750

loc_fffc599f:
cmp dword [ebx + 0x22a8], 1
jne loc_fffc57f4  ; jne 0xfffc57f4
jmp near loc_fffc591e  ; jmp 0xfffc591e

loc_fffc59b1:
cmp dword [ebx + 0x2244], 0
je loc_fffc5842  ; je 0xfffc5842
jmp near loc_fffc5853  ; jmp 0xfffc5853

loc_fffc59c3:
lea eax, [ebp - 0x34]
mov dword [ebp - 0x54], ebx
mov dword [ebp - 0x50], 0
mov dword [ebp - 0x3c], eax
jmp near loc_fffc588b  ; jmp 0xfffc588b

loc_fffc59d8:
lea esp, [esp + 0x9c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc59e4:
push ebp
mov ecx, eax
mov ebp, esp
push edi
xor edi, edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x4c]
mov dword [ebp - 0x1c], 0
mov word [ebp - 0x26], 0x7fff

loc_fffc5a01:
mov al, byte [ecx + 0x2f]
add al, byte [ecx + 0x12]
test al, al
mov byte [ecx + 0x3a], al
je loc_fffc5aeb  ; je 0xfffc5aeb
imul eax, edi, 0x8c
mov dword [ebp + edi*4 - 0x24], 0
mov word [ebp + edi*2 - 0x2a], 0x7fff
mov dword [ebp - 0x3c], 0
mov dword [ebp - 0x48], eax

loc_fffc5a31:
imul eax, dword [ebp - 0x3c], 0x1d
cmp dword [ecx + eax + 0xa], 1
jne short loc_fffc5ab3  ; jne 0xfffc5ab3
imul eax, dword [ebp - 0x3c], 0x46
mov edx, dword [ebp - 0x48]
lea eax, [eax + edx + 0x2100]
lea esi, [ebx + eax + 0xb]
movzx edx, byte [esi + 0xf]
mov al, byte [esi + 9]
shl edx, 8
mov byte [ebp - 0x58], al
movzx eax, byte [esi + 0xe]
or eax, edx
and word [ebp + edi*2 - 0x2a], ax
movzx eax, byte [esi + 0x10]
imul eax, eax, 0xf4240
movzx edx, byte [esi + 0xa]
imul eax, edx
movzx edx, byte [esi + 0xb]
mov dword [ebp - 0x40], edx
cdq
idiv dword [ebp - 0x40]
mov dl, byte [ebp - 0x58]
shr dl, 4
movzx edx, dl
mov dword [ebp - 0x40], eax
movsx eax, byte [esi + 0x23]
imul eax, eax, 0x3e8
imul eax, edx
mov dl, byte [ebp - 0x58]
and edx, 0xf
mov esi, edx
cdq
idiv esi
add eax, dword [ebp - 0x40]
cmp dword [ebp + edi*4 - 0x24], eax
jae short loc_fffc5ab3  ; jae 0xfffc5ab3
mov dword [ebp + edi*4 - 0x24], eax

loc_fffc5ab3:
inc dword [ebp - 0x3c]
cmp dword [ebp - 0x3c], 2
jne loc_fffc5a31  ; jne 0xfffc5a31
mov si, word [ebp + edi*2 - 0x2a]
test si, si
sete dl
cmp si, 0x7fff
sete al
or dl, al
je short loc_fffc5ad9  ; je 0xfffc5ad9
jmp short loc_fffc5aeb  ; jmp 0xfffc5aeb

loc_fffc5ad9:
and word [ebp - 0x26], si
mov eax, dword [ebp + edi*4 - 0x24]
cmp dword [ebp - 0x1c], eax
jae short loc_fffc5b05  ; jae 0xfffc5b05
mov dword [ebp - 0x1c], eax
jmp short loc_fffc5b05  ; jmp 0xfffc5b05

loc_fffc5aeb:
mov byte [ecx + 0x3a], 0
mov dword [ecx + 0xa], 0
mov byte [ecx + 0x12], 0
mov dword [ecx + 0x27], 0
mov byte [ecx + 0x2f], 0

loc_fffc5b05:
inc edi
add ecx, 0x1055
cmp edi, 2
jne loc_fffc5a01  ; jne 0xfffc5a01
movzx edi, word [ebp - 0x26]
mov esi, 0xf
cmp di, 0x7fff
je loc_fffc5d88  ; je 0xfffc5d88
test di, di
jne short loc_fffc5b38  ; jne 0xfffc5b38

loc_fffc5b2e:
mov esi, 7
jmp near loc_fffc5d88  ; jmp 0xfffc5d88

loc_fffc5b38:
mov eax, dword [ebp - 0x1c]
xor esi, esi
dec eax
mov dword [ebp - 0x3c], eax

loc_fffc5b41:
mov eax, ebx
call fcn_fffbff43  ; call 0xfffbff43
imul ecx, eax, 0x3e8
test ecx, ecx
je short loc_fffc5b2e  ; je 0xfffc5b2e
mov eax, dword [ebp - 0x3c]
xor edx, edx
add eax, ecx
div ecx
sub eax, 4
jmp short loc_fffc5b9b  ; jmp 0xfffc5b9b

loc_fffc5b60:
bt edi, eax
jae short loc_fffc5b9a  ; jae 0xfffc5b9a
lea edx, [eax + 4]
imul edx, ecx
cmp edx, 0x1406f3f
ja short loc_fffc5ba0  ; ja 0xfffc5ba0
cmp byte [ebx + 0x3a], 0
je short loc_fffc5b7f  ; je 0xfffc5b7f
lea edx, [eax + 4]
mov byte [ebx + 0x3b], dl

loc_fffc5b7f:
cmp byte [ebx + 0x108f], 0
je loc_fffc5d88  ; je 0xfffc5d88
add eax, 4
mov byte [ebx + 0x1090], al
jmp near loc_fffc5d88  ; jmp 0xfffc5d88

loc_fffc5b9a:
inc eax

loc_fffc5b9b:
cmp eax, 0xe
jbe short loc_fffc5b60  ; jbe 0xfffc5b60

loc_fffc5ba0:
cmp dword [ebx + 0x20be], 0
mov eax, dword [ebx + 0x20b6]
je short loc_fffc5bb8  ; je 0xfffc5bb8
cmp dword [ebx + 0x2250], 0
jne short loc_fffc5c1b  ; jne 0xfffc5c1b

loc_fffc5bb8:
cmp eax, 0x74b
mov dword [ebx + 0x20ba], 0
je loc_fffc5d1e  ; je 0xfffc5d1e
ja short loc_fffc5bf5  ; ja 0xfffc5bf5
cmp eax, 0x535
je loc_fffc5d4c  ; je 0xfffc5d4c
cmp eax, 0x640
je loc_fffc5d40  ; je 0xfffc5d40
cmp eax, 0x42b
jne loc_fffc5d64  ; jne 0xfffc5d64
jmp near loc_fffc5d58  ; jmp 0xfffc5d58

loc_fffc5bf5:
cmp eax, 0x960
je loc_fffc5cee  ; je 0xfffc5cee
cmp eax, 0xa6b
je loc_fffc5cd3  ; je 0xfffc5cd3
cmp eax, 0x855
jne loc_fffc5d64  ; jne 0xfffc5d64
jmp near loc_fffc5d06  ; jmp 0xfffc5d06

loc_fffc5c1b:
cmp eax, 0x7d0
mov dword [ebx + 0x20ba], 0
je loc_fffc5d06  ; je 0xfffc5d06
ja short loc_fffc5c80  ; ja 0xfffc5c80
cmp eax, 0x578
je loc_fffc5d40  ; je 0xfffc5d40
ja short loc_fffc5c5a  ; ja 0xfffc5c5a
cmp eax, 0x42b
je loc_fffc5d58  ; je 0xfffc5d58
cmp eax, 0x535
jne loc_fffc5d64  ; jne 0xfffc5d64
jmp near loc_fffc5d4c  ; jmp 0xfffc5d4c

loc_fffc5c5a:
cmp eax, 0x708
je loc_fffc5d1e  ; je 0xfffc5d1e
cmp eax, 0x74b
je loc_fffc5d12  ; je 0xfffc5d12
cmp eax, 0x640
jne loc_fffc5d64  ; jne 0xfffc5d64
jmp near loc_fffc5d2a  ; jmp 0xfffc5d2a

loc_fffc5c80:
cmp eax, 0x960
je short loc_fffc5ce2  ; je 0xfffc5ce2
ja short loc_fffc5c9d  ; ja 0xfffc5c9d
cmp eax, 0x855
je short loc_fffc5cfa  ; je 0xfffc5cfa
cmp eax, 0x898
jne loc_fffc5d64  ; jne 0xfffc5d64
jmp short loc_fffc5cee  ; jmp 0xfffc5cee

loc_fffc5c9d:
cmp eax, 0xa6b
je short loc_fffc5cc7  ; je 0xfffc5cc7
cmp eax, 0xaf0
je short loc_fffc5cb8  ; je 0xfffc5cb8
cmp eax, 0xa28
jne loc_fffc5d64  ; jne 0xfffc5d64
jmp short loc_fffc5cd3  ; jmp 0xfffc5cd3

loc_fffc5cb8:
mov dword [ebx + 0x20b6], 0xa6b
jmp near loc_fffc5d6e  ; jmp 0xfffc5d6e

loc_fffc5cc7:
mov dword [ebx + 0x20b6], 0xa28
jmp short loc_fffc5d34  ; jmp 0xfffc5d34

loc_fffc5cd3:
mov dword [ebx + 0x20b6], 0x960
jmp near loc_fffc5d6e  ; jmp 0xfffc5d6e

loc_fffc5ce2:
mov dword [ebx + 0x20b6], 0x898
jmp short loc_fffc5d34  ; jmp 0xfffc5d34

loc_fffc5cee:
mov dword [ebx + 0x20b6], 0x855
jmp short loc_fffc5d6e  ; jmp 0xfffc5d6e

loc_fffc5cfa:
mov dword [ebx + 0x20b6], 0x7d0
jmp short loc_fffc5d34  ; jmp 0xfffc5d34

loc_fffc5d06:
mov dword [ebx + 0x20b6], 0x74b
jmp short loc_fffc5d6e  ; jmp 0xfffc5d6e

loc_fffc5d12:
mov dword [ebx + 0x20b6], 0x708
jmp short loc_fffc5d34  ; jmp 0xfffc5d34

loc_fffc5d1e:
mov dword [ebx + 0x20b6], 0x640
jmp short loc_fffc5d6e  ; jmp 0xfffc5d6e

loc_fffc5d2a:
mov dword [ebx + 0x20b6], 0x578

loc_fffc5d34:
mov dword [ebx + 0x20ba], 1
jmp short loc_fffc5d6e  ; jmp 0xfffc5d6e

loc_fffc5d40:
mov dword [ebx + 0x20b6], 0x535
jmp short loc_fffc5d6e  ; jmp 0xfffc5d6e

loc_fffc5d4c:
mov dword [ebx + 0x20b6], 0x42b
jmp short loc_fffc5d6e  ; jmp 0xfffc5d6e

loc_fffc5d58:
mov dword [ebx + 0x20b6], 0x320
jmp short loc_fffc5d6e  ; jmp 0xfffc5d6e

loc_fffc5d64:
mov dword [ebx + 0x20b6], 0xaf1

loc_fffc5d6e:
cmp dword [ebx + 0x20b6], 0xaf1
mov esi, 0xb
jne loc_fffc5b41  ; jne 0xfffc5b41
jmp near loc_fffc5b2e  ; jmp 0xfffc5b2e

loc_fffc5d88:
lea esp, [esp + 0x4c]
mov eax, esi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc5d93:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x1c]
movzx ecx, word [eax + 0x22dd]
test cx, cx
jne loc_fffc5e42  ; jne 0xfffc5e42
call fcn_fffbff43  ; call 0xfffbff43
mov dword [ebp - 0x24], eax
mov esi, ebx
mov dword [ebp - 0x20], 0
xor ecx, ecx

loc_fffc5dc2:
cmp byte [esi + 0x3a], 0
je short loc_fffc5e33  ; je 0xfffc5e33
imul eax, dword [ebp - 0x20], 0x8c
mov dword [ebp - 0x1c], 0
mov dword [ebp - 0x28], eax

loc_fffc5dd9:
imul eax, dword [ebp - 0x1c], 0x1d
cmp dword [esi + eax + 0xa], 0
je short loc_fffc5e2a  ; je 0xfffc5e2a
imul eax, dword [ebp - 0x1c], 0x46
mov edx, dword [ebp - 0x28]
lea eax, [eax + edx + 0x2100]
lea edi, [ebx + eax + 0xb]
movzx eax, byte [edi + 0x16]
mov dl, byte [edi + 0x15]
and edx, 0xf
shl edx, 8
or edx, eax
imul eax, edx, 0x3e8
movzx edx, byte [edi + 0xa]
imul eax, edx
movzx edi, byte [edi + 0xb]
cdq
idiv edi
mov edx, dword [ebp - 0x24]
lea eax, [edx + eax - 1]
xor edx, edx
div dword [ebp - 0x24]
cmp ecx, eax
cmovb ecx, eax

loc_fffc5e2a:
inc dword [ebp - 0x1c]
cmp dword [ebp - 0x1c], 2
jne short loc_fffc5dd9  ; jne 0xfffc5dd9

loc_fffc5e33:
inc dword [ebp - 0x20]
add esi, 0x1055
cmp dword [ebp - 0x20], 2
jne short loc_fffc5dc2  ; jne 0xfffc5dc2

loc_fffc5e42:
cmp byte [ebx + 0x3a], 0
je short loc_fffc5e4b  ; je 0xfffc5e4b
mov byte [ebx + 0x40], cl

loc_fffc5e4b:
cmp byte [ebx + 0x108f], 0
je short loc_fffc5e5a  ; je 0xfffc5e5a
mov byte [ebx + 0x1095], cl

loc_fffc5e5a:
lea esp, [esp + 0x1c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc5e63:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x3c]
movzx ecx, byte [eax + 0x22dc]
test cl, cl
jne loc_fffc5f45  ; jne 0xfffc5f45
call fcn_fffbff43  ; call 0xfffbff43
imul eax, eax, 0x3e8
mov edi, ebx
mov dword [ebp - 0x24], eax
mov dword [ebp - 0x20], 0
xor ecx, ecx

loc_fffc5e97:
cmp byte [edi + 0x3a], 0
je loc_fffc5f32  ; je 0xfffc5f32
imul eax, dword [ebp - 0x20], 0x8c
mov dword [ebp - 0x1c], 0
mov dword [ebp - 0x3c], eax

loc_fffc5eb2:
imul eax, dword [ebp - 0x1c], 0x1d
cmp dword [edi + eax + 0xa], 0
je short loc_fffc5f29  ; je 0xfffc5f29
imul eax, dword [ebp - 0x1c], 0x46
mov edx, dword [ebp - 0x3c]
lea eax, [eax + edx + 0x2100]
lea esi, [ebx + eax + 0xb]
movzx edx, byte [esi + 0xa]
mov al, byte [esi + 9]
mov byte [ebp - 0x38], al
movzx eax, byte [esi + 0x14]
imul eax, eax, 0xf4240
imul eax, edx
movzx edx, byte [esi + 0xb]
mov dword [ebp - 0x28], edx
cdq
idiv dword [ebp - 0x28]
mov dl, byte [ebp - 0x38]
shr dl, 4
movzx edx, dl
mov dword [ebp - 0x28], eax
movsx eax, byte [esi + 0x25]
imul eax, eax, 0x3e8
imul eax, edx
mov dl, byte [ebp - 0x38]
and edx, 0xf
mov esi, edx
cdq
idiv esi
mov edx, dword [ebp - 0x28]
lea eax, [edx + eax - 1]
xor edx, edx
add eax, dword [ebp - 0x24]
div dword [ebp - 0x24]
cmp ecx, eax
cmovb ecx, eax

loc_fffc5f29:
inc dword [ebp - 0x1c]
cmp dword [ebp - 0x1c], 2
jne short loc_fffc5eb2  ; jne 0xfffc5eb2

loc_fffc5f32:
inc dword [ebp - 0x20]
add edi, 0x1055
cmp dword [ebp - 0x20], 2
jne loc_fffc5e97  ; jne 0xfffc5e97

loc_fffc5f45:
cmp byte [ebx + 0x3a], 0
je short loc_fffc5f4e  ; je 0xfffc5f4e
mov byte [ebx + 0x3f], cl

loc_fffc5f4e:
cmp byte [ebx + 0x108f], 0
je short loc_fffc5f5d  ; je 0xfffc5f5d
mov byte [ebx + 0x1094], cl

loc_fffc5f5d:
lea esp, [esp + 0x3c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc5f66:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x3c]
movzx ecx, byte [eax + 0x22db]
test cl, cl
jne loc_fffc6048  ; jne 0xfffc6048
call fcn_fffbff43  ; call 0xfffbff43
imul eax, eax, 0x3e8
mov edi, ebx
mov dword [ebp - 0x24], eax
mov dword [ebp - 0x20], 0
xor ecx, ecx

loc_fffc5f9a:
cmp byte [edi + 0x3a], 0
je loc_fffc6035  ; je 0xfffc6035
imul eax, dword [ebp - 0x20], 0x8c
mov dword [ebp - 0x1c], 0
mov dword [ebp - 0x3c], eax

loc_fffc5fb5:
imul eax, dword [ebp - 0x1c], 0x1d
cmp dword [edi + eax + 0xa], 0
je short loc_fffc602c  ; je 0xfffc602c
imul eax, dword [ebp - 0x1c], 0x46
mov edx, dword [ebp - 0x3c]
lea eax, [eax + edx + 0x2100]
lea esi, [ebx + eax + 0xb]
movzx edx, byte [esi + 0xa]
mov al, byte [esi + 9]
mov byte [ebp - 0x38], al
movzx eax, byte [esi + 0x12]
imul eax, eax, 0xf4240
imul eax, edx
movzx edx, byte [esi + 0xb]
mov dword [ebp - 0x28], edx
cdq
idiv dword [ebp - 0x28]
mov dl, byte [ebp - 0x38]
shr dl, 4
movzx edx, dl
mov dword [ebp - 0x28], eax
movsx eax, byte [esi + 0x24]
imul eax, eax, 0x3e8
imul eax, edx
mov dl, byte [ebp - 0x38]
and edx, 0xf
mov esi, edx
cdq
idiv esi
mov edx, dword [ebp - 0x28]
lea eax, [edx + eax - 1]
xor edx, edx
add eax, dword [ebp - 0x24]
div dword [ebp - 0x24]
cmp ecx, eax
cmovb ecx, eax

loc_fffc602c:
inc dword [ebp - 0x1c]
cmp dword [ebp - 0x1c], 2
jne short loc_fffc5fb5  ; jne 0xfffc5fb5

loc_fffc6035:
inc dword [ebp - 0x20]
add edi, 0x1055
cmp dword [ebp - 0x20], 2
jne loc_fffc5f9a  ; jne 0xfffc5f9a

loc_fffc6048:
cmp byte [ebx + 0x3a], 0
je short loc_fffc6051  ; je 0xfffc6051
mov byte [ebx + 0x3e], cl

loc_fffc6051:
cmp byte [ebx + 0x108f], 0
je short loc_fffc6060  ; je 0xfffc6060
mov byte [ebx + 0x1093], cl

loc_fffc6060:
lea esp, [esp + 0x3c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc6069:
push ebp
mov ebp, esp
push edi
push esi
mov esi, eax
push ebx
lea esp, [esp - 0x2c]
mov bl, byte [eax + 0x22d9]
test bl, bl
jne loc_fffc6257  ; jne 0xfffc6257
cmp byte [eax + 0x2274], 0
jne loc_fffc6171  ; jne 0xfffc6171
cmp byte [eax + 0x2275], 0
jne loc_fffc6171  ; jne 0xfffc6171
cmp byte [eax + 0x2276], 0
jne loc_fffc6171  ; jne 0xfffc6171
cmp byte [eax + 0x2277], 0
jne loc_fffc6171  ; jne 0xfffc6171
mov eax, dword [eax + 0x20b6]
cmp eax, 0x74b
je loc_fffc6155  ; je 0xfffc6155
ja short loc_fffc610f  ; ja 0xfffc610f
cmp eax, 0x535
je short loc_fffc614e  ; je 0xfffc614e
ja short loc_fffc60ed  ; ja 0xfffc60ed
cmp eax, 0x320
je loc_fffc6251  ; je 0xfffc6251
cmp eax, 0x42b
mov al, 6
cmove ebx, eax
jmp near loc_fffc6257  ; jmp 0xfffc6257

loc_fffc60ed:
cmp eax, 0x640
je loc_fffc6255  ; je 0xfffc6255
cmp eax, 0x708
je short loc_fffc6155  ; je 0xfffc6155
cmp eax, 0x578
jne loc_fffc6257  ; jne 0xfffc6257
jmp near loc_fffc6255  ; jmp 0xfffc6255

loc_fffc610f:
cmp eax, 0x960
je short loc_fffc6163  ; je 0xfffc6163
ja short loc_fffc6133  ; ja 0xfffc6133
cmp eax, 0x855
je short loc_fffc615c  ; je 0xfffc615c
cmp eax, 0x898
je short loc_fffc6163  ; je 0xfffc6163
cmp eax, 0x7d0
jne loc_fffc6257  ; jne 0xfffc6257
jmp short loc_fffc615c  ; jmp 0xfffc615c

loc_fffc6133:
cmp eax, 0xa6b
je short loc_fffc616a  ; je 0xfffc616a
cmp eax, 0xaf0
je short loc_fffc616a  ; je 0xfffc616a
cmp eax, 0xa28
jne loc_fffc6257  ; jne 0xfffc6257
jmp short loc_fffc616a  ; jmp 0xfffc616a

loc_fffc614e:
mov bl, 7
jmp near loc_fffc6257  ; jmp 0xfffc6257

loc_fffc6155:
mov bl, 9
jmp near loc_fffc6257  ; jmp 0xfffc6257

loc_fffc615c:
mov bl, 0xa
jmp near loc_fffc6257  ; jmp 0xfffc6257

loc_fffc6163:
mov bl, 0xb
jmp near loc_fffc6257  ; jmp 0xfffc6257

loc_fffc616a:
mov bl, 0xc
jmp near loc_fffc6257  ; jmp 0xfffc6257

loc_fffc6171:
mov eax, esi
mov edi, esi
call fcn_fffbff43  ; call 0xfffbff43
mov dword [ebp - 0x1c], eax
dec eax
mov ecx, esi
mov dword [ebp - 0x24], esi
mov byte [ebp - 0x1e], 2
mov byte [ebp - 0x1d], 0
mov dword [ebp - 0x28], eax
jmp short loc_fffc61ea  ; jmp 0xfffc61ea

loc_fffc6190:
mov edx, dword [ebp - 0x24]
movzx eax, byte [edx + 0x2275]
imul eax, eax, 0x3e8
movzx edx, byte [ecx + 0x215b]
imul eax, edx
movzx edx, byte [ecx + 0x215c]
mov dword [ebp - 0x30], edx
xor edx, edx
div dword [ebp - 0x30]
xor edx, edx
add eax, dword [ebp - 0x28]
div dword [ebp - 0x1c]
movzx edx, bl
cmp edx, eax
cmovb ebx, eax

loc_fffc61c9:
cmp byte [edi + 0x3a], 0
je short loc_fffc61d5  ; je 0xfffc61d5
mov al, byte [edi + 0x3b]
mov byte [ebp - 0x1d], al

loc_fffc61d5:
add edi, 0x1055
add dword [ebp - 0x24], 2
add ecx, 0x8c
dec byte [ebp - 0x1e]
je short loc_fffc6235  ; je 0xfffc6235

loc_fffc61ea:
cmp dword [edi + 0xa], 0
je short loc_fffc6229  ; je 0xfffc6229
mov edx, dword [ebp - 0x24]
movzx eax, byte [edx + 0x2274]
imul eax, eax, 0x3e8
movzx edx, byte [ecx + 0x2115]
imul eax, edx
movzx edx, byte [ecx + 0x2116]
mov dword [ebp - 0x30], edx
xor edx, edx
div dword [ebp - 0x30]
xor edx, edx
add eax, dword [ebp - 0x28]
div dword [ebp - 0x1c]
movzx edx, bl
cmp edx, eax
cmovb ebx, eax

loc_fffc6229:
cmp dword [edi + 0x27], 0
jne loc_fffc6190  ; jne 0xfffc6190
jmp short loc_fffc61c9  ; jmp 0xfffc61c9

loc_fffc6235:
cmp bl, byte [ebp - 0x1d]
ja short loc_fffc6255  ; ja 0xfffc6255
movzx edx, byte [ebp - 0x1d]
mov al, byte [ebp - 0x1d]
movzx ecx, bl
sub edx, 4
sub eax, 4
cmp ecx, edx
cmovl ebx, eax
jmp short loc_fffc6257  ; jmp 0xfffc6257

loc_fffc6251:
mov bl, 5
jmp short loc_fffc6257  ; jmp 0xfffc6257

loc_fffc6255:
mov bl, 8

loc_fffc6257:
cmp byte [esi + 0x3a], 0
je short loc_fffc6260  ; je 0xfffc6260
mov byte [esi + 0x3c], bl

loc_fffc6260:
cmp byte [esi + 0x108f], 0
je short loc_fffc626f  ; je 0xfffc626f
mov byte [esi + 0x1091], bl

loc_fffc626f:
lea esp, [esp + 0x2c]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc6278:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x2c]
movzx ecx, byte [eax + 0x22da]
test cl, cl
jne loc_fffc6362  ; jne 0xfffc6362
call fcn_fffbff43  ; call 0xfffbff43
mov dword [ebp - 0x1c], eax
dec eax
mov edi, ebx
mov esi, ebx
xor ecx, ecx
mov byte [ebp - 0x1d], 0
mov dword [ebp - 0x24], eax

loc_fffc62a9:
cmp byte [edi + 0x3a], 0
je short loc_fffc631f  ; je 0xfffc631f
cmp dword [edi + 0xa], 1
jne short loc_fffc62e7  ; jne 0xfffc62e7
movzx eax, byte [esi + 0x211c]
imul eax, eax, 0x3e8
movzx edx, byte [esi + 0x2115]
imul eax, edx
movzx edx, byte [esi + 0x2116]
mov dword [ebp - 0x2c], edx
cdq
idiv dword [ebp - 0x2c]
xor edx, edx
add eax, dword [ebp - 0x24]
div dword [ebp - 0x1c]
cmp ecx, eax
cmovb ecx, eax

loc_fffc62e7:
cmp dword [edi + 0x27], 1
jne short loc_fffc631f  ; jne 0xfffc631f
movzx eax, byte [esi + 0x2162]
imul eax, eax, 0x3e8
movzx edx, byte [esi + 0x215b]
imul eax, edx
movzx edx, byte [esi + 0x215c]
mov dword [ebp - 0x2c], edx
cdq
idiv dword [ebp - 0x2c]
xor edx, edx
add eax, dword [ebp - 0x24]
div dword [ebp - 0x1c]
cmp ecx, eax
cmovb ecx, eax

loc_fffc631f:
inc byte [ebp - 0x1d]
add edi, 0x1055
add esi, 0x8c
cmp byte [ebp - 0x1d], 2
jne loc_fffc62a9  ; jne 0xfffc62a9
cmp ecx, 0xf
ja short loc_fffc634c  ; ja 0xfffc634c
mov eax, 1
shl eax, cl
test ah, 0xaa
je short loc_fffc634c  ; je 0xfffc634c
inc ecx
jmp short loc_fffc6362  ; jmp 0xfffc6362

loc_fffc634c:
cmp ecx, 0x10
ja short loc_fffc635d  ; ja 0xfffc635d
cmp ecx, 4
mov eax, 4
jbe short loc_fffc637c  ; jbe 0xfffc637c
jmp short loc_fffc6362  ; jmp 0xfffc6362

loc_fffc635d:
mov ecx, 0x10

loc_fffc6362:
cmp byte [ebx + 0x3a], 0
je short loc_fffc636b  ; je 0xfffc636b
mov byte [ebx + 0x3d], cl

loc_fffc636b:
xor eax, eax
cmp byte [ebx + 0x108f], 0
je short loc_fffc637c  ; je 0xfffc637c
mov byte [ebx + 0x1092], cl

loc_fffc637c:
lea esp, [esp + 0x2c]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffc6385:
db 0x00
db 0x00
db 0x00

fcn_fffc6388:
push ebp
mov ebp, esp
push edi
mov edi, edx
mov edx, ecx
push esi
shl edx, 0xc
mov esi, eax
push ebx
mov ebx, ecx
lea esp, [esp - 0x1c]
mov ax, word [edx - 0xfff7f4e]
and eax, 0xf
cmp eax, dword [ebp + 8]
je short loc_fffc63eb  ; je 0xfffc63eb
mov ax, word [edx - 0xfff7f30]
and eax, 0xfffffff0
or eax, dword [ebp + 8]
mov word [edx - 0xfff7f30], ax
mov edx, edi
push eax
push eax
mov eax, esi
push ecx
xor ecx, ecx
push 1
call fcn_fffac3c9  ; call 0xfffac3c9
pop edx
pop ecx
mov dword [ebp - 0x1c], eax
xor ecx, ecx
push ebx
mov edx, edi
mov eax, esi
push 1
call fcn_fffac3c9  ; call 0xfffac3c9
add esp, 0x10
add eax, dword [ebp - 0x1c]
jmp short loc_fffc63ed  ; jmp 0xfffc63ed

loc_fffc63eb:
xor eax, eax

loc_fffc63ed:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc63f5:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x10]
mov dword [ebp - 0x1c], ecx
mov cl, byte [ebp + 8]
mov byte [ebp - 0x11], cl
mov ecx, edx
shr ecx, 1
shl ecx, 5
cmp byte [ebp - 0x11], 1
lea ebx, [ecx + 0x91c]
mov dword [ebp - 0x10], ebx
sbb ebx, ebx
and ebx, 0xc0000000
add ebx, 0x68008000
test eax, eax
jne short loc_fffc6436  ; jne 0xfffc6436
mov esi, dword [ecx + 0x91c]
jmp short loc_fffc6447  ; jmp 0xfffc6447

loc_fffc6436:
mov esi, eax
mov edi, dword [ebp - 0x10]
shl esi, 0xf
lea edi, [edi + esi - 0x10000000]
mov esi, dword [edi]

loc_fffc6447:
and edx, 1
and esi, 0x7ffe
cmp edx, 1
mov dword [ebp - 0x18], esi
sbb esi, esi
cmp byte [ebp - 0x11], 0
jne short loc_fffc646c  ; jne 0xfffc646c
and esi, 0x80000
add esi, 0x80000
jmp short loc_fffc6478  ; jmp 0xfffc6478

loc_fffc646c:
and esi, 0xfff80000
add esi, 0x100000

loc_fffc6478:
mov edi, dword [ebp - 0x1c]
or esi, dword [ebp - 0x18]
and edi, 0x3f
shl edi, 0x15
or edi, ebx
or edi, esi
test eax, eax
jne short loc_fffc649a  ; jne 0xfffc649a
mov dword [ecx + 0x91c], edi
mov eax, dword [ecx + 0x91c]
jmp short loc_fffc64ab  ; jmp 0xfffc64ab

loc_fffc649a:
shl eax, 0xf
mov edx, dword [ebp - 0x10]
lea eax, [edx + eax - 0x10000000]
mov dword [eax], edi
mov eax, dword [eax]

loc_fffc64ab:
shr eax, 1
lea esp, [esp + 0x10]
pop ebx
and eax, 0x3fff
pop esi
pop edi
pop ebp
ret

fcn_fffc64bb:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x18]
mov edi, dword [ebp + 0x14]
movzx esi, byte [ebp + 0x24]
mov dword [ebp - 0x20], ecx
imul esi, esi, 0x24
mov ecx, dword [ebp + 8]
add edi, esi
mov bl, byte [ebp + 0x28]
mov dword [ebp - 0x10], edi
mov edi, dword [ebp + 0x18]
add edi, esi
add eax, dword [ebp + 0x10]
shl dword [ebp + 0xc], cl
mov dword [ebp - 0x14], edi
mov edi, dword [ebp + 0x1c]
add edi, esi
add esi, dword [ebp + 0x20]
mov dword [ebp - 0x1c], esi
mov esi, 0x7f
shl esi, cl
mov dword [ebp - 0x18], edi
not esi
xor ecx, ecx
jmp short loc_fffc656d  ; jmp 0xfffc656d

loc_fffc6506:  ; not directly referenced
mov edi, dword [edx*4 + ref_fffcf5b0]  ; mov edi, dword [edx*4 - 0x30a50]
cmp bl, 1
mov dword [ebp - 0x24], edi
je short loc_fffc6528  ; je 0xfffc6528
jb short loc_fffc6523  ; jb 0xfffc6523
cmp bl, 2
je short loc_fffc652d  ; je 0xfffc652d
cmp bl, 3
jne short loc_fffc6538  ; jne 0xfffc6538
jmp short loc_fffc6532  ; jmp 0xfffc6532

loc_fffc6523:  ; not directly referenced
mov edi, dword [ebp - 0x10]
jmp short loc_fffc6535  ; jmp 0xfffc6535

loc_fffc6528:  ; not directly referenced
mov edi, dword [ebp - 0x14]
jmp short loc_fffc6535  ; jmp 0xfffc6535

loc_fffc652d:  ; not directly referenced
mov edi, dword [ebp - 0x18]
jmp short loc_fffc6535  ; jmp 0xfffc6535

loc_fffc6532:  ; not directly referenced
mov edi, dword [ebp - 0x1c]

loc_fffc6535:  ; not directly referenced
mov ecx, dword [edi + edx*4]

loc_fffc6538:  ; not directly referenced
mov edi, dword [ebp - 0x24]
and ecx, esi
add edi, eax
or ecx, dword [ebp + 0xc]
cmp bl, 1
mov dword [edi], ecx
je short loc_fffc655c  ; je 0xfffc655c
jb short loc_fffc6557  ; jb 0xfffc6557
cmp bl, 2
je short loc_fffc6561  ; je 0xfffc6561
cmp bl, 3
jne short loc_fffc656c  ; jne 0xfffc656c
jmp short loc_fffc6566  ; jmp 0xfffc6566

loc_fffc6557:  ; not directly referenced
mov edi, dword [ebp - 0x10]
jmp short loc_fffc6569  ; jmp 0xfffc6569

loc_fffc655c:  ; not directly referenced
mov edi, dword [ebp - 0x14]
jmp short loc_fffc6569  ; jmp 0xfffc6569

loc_fffc6561:  ; not directly referenced
mov edi, dword [ebp - 0x18]
jmp short loc_fffc6569  ; jmp 0xfffc6569

loc_fffc6566:  ; not directly referenced
mov edi, dword [ebp - 0x1c]

loc_fffc6569:  ; not directly referenced
mov dword [edi + edx*4], ecx

loc_fffc656c:  ; not directly referenced
inc edx

loc_fffc656d:  ; not directly referenced
cmp edx, dword [ebp - 0x20]
jb short loc_fffc6506  ; jb 0xfffc6506
lea esp, [esp + 0x18]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc657b:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
mov esi, edx
push ebx
lea esp, [esp - 0x60]
mov dword [ebp - 0x5c], eax
imul eax, edx, 0x1055
add eax, dword [ebp - 0x5c]
movzx edx, byte [eax + 0x3e]
mov bl, byte [eax + 0x44]
mov word [ebp - 0x45], dx
shr bl, 2
mov dl, byte [eax + 0x43]
cmp dl, bl
mov byte [ebp - 0x4c], cl
mov byte [ebp - 0x37], cl
mov dword [ebp - 0x57], 8
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
lea edi, [ebx + 1]
cmovbe edx, edi
mov byte [ebp - 0x43], dl
mov byte [ebp - 0x4b], 4
movzx edx, byte [ebp + 8]
shl edx, 5
mov byte [ebp - 0x4a], 0x12
mov word [ebp - 0x32], dx
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 1
mov dword [ebp - 0x53], 0
mov dword [ebp - 0x42], 4
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 2
mov byte [ebp - 0x35], 7
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
cmp byte [eax + 0x42], 9
mov edx, 8
movzx ebx, byte [eax + 0x42]
movzx eax, byte [eax + 0x3f]
push 1
mov word [ebp - 0x1b], ax
lea eax, [ebp - 0x57]
push eax
cmovae edx, ebx
mov byte [ebp - 0x22], cl
push 0
mov word [ebp - 0x30], dx
mov ecx, 2
push 0
mov edx, esi
mov eax, dword [ebp - 0x5c]
push 0
mov dword [ebp - 0x2d], 3
mov word [ebp - 0x25], 0x400
push 0
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
push 1
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x19], 3
mov dword [ebp - 0x29], 0
call fcn_fffbb6de  ; call 0xfffbb6de
mov ebx, eax
add esp, 0x20
xor ecx, ecx
mov edx, esi
mov eax, dword [ebp - 0x5c]
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
cmove eax, ebx
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc66a8:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 8]
cmp cl, 1
movzx ebx, byte [ebp + 0xc]
sbb ecx, ecx
mov dword [ebp - 0x10], ebx
and ecx, 0xfffffc00
add ecx, 0x476c
add ecx, dword [eax + 0x2223]
mov esi, dword [ecx]
xor ecx, ecx
jmp short loc_fffc66f5  ; jmp 0xfffc66f5

loc_fffc66d6:  ; not directly referenced
movzx ebx, cl
bt esi, ecx
jae short loc_fffc66f4  ; jae 0xfffc66f4
mov edi, dword [ebp + 8]
movzx edi, byte [edi + ebx]
shl ebx, 7
mov dword [ebp - 0x14], edi
add edi, dword [ebp - 0x10]
add ebx, edi
inc word [edx + ebx*2]

loc_fffc66f4:  ; not directly referenced
inc ecx

loc_fffc66f5:  ; not directly referenced
cmp cl, byte [eax + 0x20b5]
jb short loc_fffc66d6  ; jb 0xfffc66d6
pop ebx
pop esi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc6704:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
movzx ebx, dl
mov edx, 0x1200
lea esp, [esp - 0x136c]
cmp dword [eax + 0x223c], 1
sbb esi, esi
mov word [ebp - 0x1332], 0x1ff
not esi
mov dword [ebp - 0x1300], eax
add esi, 2
cmp dword [eax + 0x223c], 1
mov dword [ebp - 0x132c], esi
sbb esi, esi
and esi, 2
cmp byte [eax + 0x20b5], 9
mov eax, 0xff
cmove ax, word [ebp - 0x1332]
mov dword [ebp - 0x1348], ecx
mov word [ebp - 0x1332], ax
xor ecx, ecx
lea eax, [ebp - 0x1218]
mov dword [ebp - 0x1338], esi
call fcn_fffa24c1  ; call 0xfffa24c1
mov edx, 0x90
xor ecx, ecx
lea eax, [ebp - 0x12a8]
call fcn_fffa24c1  ; call 0xfffa24c1
imul eax, ebx, 0x900
imul edx, dword [ebp - 0x1338], 9
mov dword [ebp - 0x1304], ebx
mov ebx, dword [ebp + 8]
mov esi, dword [ebp + 0xc]
add ebx, eax
add esi, eax
mov dword [ebp - 0x130c], ebx
mov ebx, dword [ebp - 0x1304]
shl ebx, 3
mov dword [ebp - 0x1314], esi
mov dword [ebp - 0x135c], ebx
lea esi, [ebp - 0x1218]
mov ebx, dword [ebp - 0x130c]
add esi, eax
sub esi, ebx
mov eax, dword [ebp - 0x1300]
mov dword [ebp - 0x1340], esi
add edx, dword [ebp - 0x130c]
imul esi, dword [ebp - 0x1304], 0x1055
mov dword [ebp - 0x1358], edx
add eax, esi
mov dword [ebp - 0x133c], 0
mov dword [ebp - 0x1318], 0
mov dword [ebp - 0x1354], esi
mov dword [ebp - 0x1378], eax

loc_fffc681a:  ; not directly referenced
mov ecx, dword [ebp - 0x1348]
mov ebx, dword [ebp - 0x1318]
test byte [ecx + ebx], 0xdf
jne loc_fffc6923  ; jne 0xfffc6923
xor ecx, ecx
mov edx, 0x20
lea eax, [ebp - 0x12c8]
call fcn_fffa24c1  ; call 0xfffa24c1
mov ecx, dword [ebp - 0x1348]
cmp byte [ecx + ebx], 0x20
jne loc_fffc6923  ; jne 0xfffc6923
imul esi, dword [ebp - 0x1318], 0x12
xor ebx, ebx
mov dword [ebp - 0x12fc], esi

loc_fffc6861:  ; not directly referenced
mov ecx, dword [ebp - 0x1304]
mov edx, ebx
mov eax, dword [ebp - 0x1300]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffc6883  ; jne 0xfffc6883

loc_fffc6878:  ; not directly referenced
inc ebx
cmp ebx, 4
jne short loc_fffc6861  ; jne 0xfffc6861
jmp near loc_fffc6904  ; jmp 0xfffc6904

loc_fffc6883:  ; not directly referenced
imul esi, ebx, 0x240
mov edi, dword [ebp - 0x12fc]
add edi, esi
mov edx, dword [ebp - 0x130c]
mov eax, dword [ebp - 0x130c]
add edx, esi
add eax, edi
mov ecx, 9
call fcn_fffa2408  ; call 0xfffa2408
mov edx, dword [ebp - 0x1314]
mov eax, dword [ebp - 0x1314]
add edx, esi
add eax, edi
mov ecx, 9
add esi, 9
call fcn_fffa2408  ; call 0xfffa2408
add edi, 9
mov edx, dword [ebp - 0x130c]
mov eax, dword [ebp - 0x130c]
add edx, esi
add eax, edi
mov ecx, 9
call fcn_fffa2408  ; call 0xfffa2408
mov edx, dword [ebp - 0x1314]
mov eax, dword [ebp - 0x1314]
add edx, esi
add eax, edi
mov ecx, 9
call fcn_fffa2408  ; call 0xfffa2408
jmp near loc_fffc6878  ; jmp 0xfffc6878

loc_fffc6904:  ; not directly referenced
inc dword [ebp - 0x1318]
add dword [ebp - 0x133c], 0x12
cmp dword [ebp - 0x1318], 0x20
jne loc_fffc681a  ; jne 0xfffc681a
jmp near loc_fffc71e0  ; jmp 0xfffc71e0

loc_fffc6923:  ; not directly referenced
mov esi, dword [ebp - 0x1338]
mov byte [ebp - 0x1310], 0
mov byte [ebp - 0x12fc], 0
jmp short loc_fffc6971  ; jmp 0xfffc6971

loc_fffc6939:  ; not directly referenced
mov ecx, dword [ebp - 0x1304]
mov edx, ebx
mov eax, dword [ebp - 0x1300]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je short loc_fffc696a  ; je 0xfffc696a
mov ax, word [ebp - 0x1332]
inc byte [ebp - 0x12fc]
cmp word [edi + ebx*4], ax
sete al
add byte [ebp - 0x1310], al

loc_fffc696a:  ; not directly referenced
inc ebx
cmp ebx, 4
jne short loc_fffc6939  ; jne 0xfffc6939
inc esi

loc_fffc6971:  ; not directly referenced
cmp esi, dword [ebp - 0x132c]
ja short loc_fffc698c  ; ja 0xfffc698c
mov eax, dword [ebp - 0x135c]
xor ebx, ebx
add eax, esi
lea edi, [ebp + eax*2 - 0x12c8]
jmp short loc_fffc6939  ; jmp 0xfffc6939

loc_fffc698c:  ; not directly referenced
mov bl, byte [ebp - 0x1310]
cmp byte [ebp - 0x12fc], bl
je loc_fffc6904  ; je 0xfffc6904
mov esi, dword [ebp - 0x1378]
cmp byte [esi + 0x3a], 0
jne loc_fffc7201  ; jne 0xfffc7201

loc_fffc69ae:  ; not directly referenced
lea edx, [ebp - 0x12d4]
mov eax, dword [ebp - 0x1300]
call fcn_fffacf73  ; call 0xfffacf73
mov esi, dword [ebp - 0x1358]
mov ebx, dword [ebp - 0x133c]
mov dword [ebp - 0x1324], esi
add ebx, dword [ebp - 0x1340]
mov esi, dword [ebp - 0x1314]
sub esi, dword [ebp - 0x130c]
mov dword [ebp - 0x1364], ebx
mov dword [ebp - 0x1350], esi
mov ebx, dword [ebp - 0x1338]
add esi, dword [ebp - 0x133c]
mov dword [ebp - 0x1310], ebx
mov dword [ebp - 0x1374], esi
jmp near loc_fffc71c9  ; jmp 0xfffc71c9

loc_fffc6a0c:  ; not directly referenced
cmp dword [ebp - 0x1310], 1
je short loc_fffc6a1e  ; je 0xfffc6a1e
sbb eax, eax
and eax, 0x300
jmp short loc_fffc6a23  ; jmp 0xfffc6a23

loc_fffc6a1e:  ; not directly referenced
mov eax, 0x200

loc_fffc6a23:  ; not directly referenced
mov ecx, dword [ebp - 0x1300]
mov ebx, dword [ebp - 0x1324]
mov esi, dword [ebp - 0x1324]
add ebx, dword [ebp - 0x1364]
add esi, dword [ebp - 0x1340]
mov dword [ebp - 0x134c], ebx
mov dword [ebp - 0x1360], esi
mov ebx, dword [ebp - 0x1304]
mov edx, dword [ecx + 0x2223]
mov esi, dword [ebp - 0x1310]
mov byte [ebp - 0x1330], 0
mov dword [edx + 0x4eb0], eax
lea eax, [esi + ebx*8]
lea eax, [ebp + eax*2 - 0x12c8]
mov dword [ebp - 0x1370], eax

loc_fffc6a7c:  ; not directly referenced
mov ecx, dword [ebp - 0x1304]
lea edx, [ebp - 0x12d4]
mov eax, dword [ebp - 0x1300]
call fcn_ffface48  ; call 0xffface48
mov ebx, dword [ebp - 0x1370]
mov esi, dword [ebp - 0x1350]
add esi, dword [ebp - 0x1324]
mov dword [ebp - 0x1320], ebx
mov dword [ebp - 0x131c], 0
mov dword [ebp - 0x12fc], 0
mov dword [ebp - 0x136c], esi

loc_fffc6ac5:  ; not directly referenced
mov ecx, dword [ebp - 0x1304]
mov edx, dword [ebp - 0x12fc]
mov eax, dword [ebp - 0x1300]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffc6b05  ; jne 0xfffc6b05

loc_fffc6ae0:  ; not directly referenced
inc dword [ebp - 0x12fc]
add dword [ebp - 0x1320], 4
add dword [ebp - 0x131c], 0x240
cmp dword [ebp - 0x12fc], 4
jne short loc_fffc6ac5  ; jne 0xfffc6ac5
jmp near loc_fffc708e  ; jmp 0xfffc708e

loc_fffc6b05:  ; not directly referenced
mov ebx, dword [ebp - 0x1320]
mov ax, word [ebx]
cmp ax, word [ebp - 0x1332]
je short loc_fffc6ae0  ; je 0xfffc6ae0
imul esi, dword [ebp - 0x12fc], 0x36
not eax
and ax, word [ebp - 0x1332]
xor ebx, ebx
mov word [ebp - 0x12ea], ax
mov dword [ebp - 0x1308], esi
jmp short loc_fffc6bb4  ; jmp 0xfffc6bb4

loc_fffc6b38:  ; not directly referenced
movzx esi, bl
mov ecx, dword [ebp - 0x12fc]
push edi
push dword [ebp + 0x1c]
push dword [ebp + 0x18]
push dword [ebp + 0x14]
push dword [ebp + 0x10]
lea edi, [esi + esi*2]
add edi, dword [ebp - 0x1308]
add edi, dword [ebp - 0x1354]
add edi, dword [ebp - 0x1300]
push esi
mov edx, dword [ebp - 0x1304]
inc ebx
push 0
movzx eax, byte [edi + 0x1bd]
push eax
mov eax, dword [ebp - 0x1300]
call fcn_fffac5bc  ; call 0xfffac5bc
add esp, 0x1c
mov ecx, dword [ebp - 0x12fc]
push dword [ebp + 0x1c]
push dword [ebp + 0x18]
push dword [ebp + 0x14]
push dword [ebp + 0x10]
mov edx, dword [ebp - 0x1304]
push esi
push 1
movzx eax, byte [edi + 0x1d8]
push eax
mov eax, dword [ebp - 0x1300]
call fcn_fffac5bc  ; call 0xfffac5bc
add esp, 0x20

loc_fffc6bb4:  ; not directly referenced
mov eax, dword [ebp - 0x1300]
cmp bl, byte [eax + 0x20b5]
jb loc_fffc6b38  ; jb 0xfffc6b38
mov ecx, dword [ebp - 0x12fc]
mov edx, dword [ebp - 0x1304]
call fcn_fffc900b  ; call 0xfffc900b
test eax, eax
jne loc_fffc7236  ; jne 0xfffc7236
cmp byte [ebp - 0x1330], 0
jne loc_fffc6dec  ; jne 0xfffc6dec
xor ecx, ecx
mov edx, 9
lea ebx, [ebp - 0x12e6]
mov eax, ebx
call fcn_fffa24c1  ; call 0xfffa24c1
lea esi, [ebp - 0x12dd]
mov ecx, 0x47
mov edx, 9
mov eax, esi
call fcn_fffa24c1  ; call 0xfffa24c1
cmp byte [ebp - 0x1318], 0
je short loc_fffc6c69  ; je 0xfffc6c69
mov edx, dword [ebp - 0x1300]
mov ecx, dword [ebp - 0x1324]
add ecx, dword [ebp - 0x133c]
add ecx, dword [ebp - 0x131c]
mov ebx, dword [ebp - 0x1324]
xor eax, eax
mov dword [ebp - 0x1328], ecx
add ebx, dword [ebp - 0x1374]
mov dl, byte [edx + 0x20b5]
mov byte [ebp - 0x1308], dl
mov edx, dword [ebp - 0x131c]
add edx, dword [ebp - 0x134c]
jmp near loc_fffc6d50  ; jmp 0xfffc6d50

loc_fffc6c69:  ; not directly referenced
push ecx
push dword [ebp + 0x1c]
push dword [ebp + 0x18]
push dword [ebp + 0x14]
push dword [ebp + 0x10]
lea eax, [ebp - 0x12e8]
mov ecx, dword [ebp - 0x12fc]
push 0xf
imul edx, dword [ebp - 0x1310], 9
push eax
lea eax, [ebp - 0x12ea]
push eax
imul eax, dword [ebp - 0x12fc], 0x240
add eax, edx
mov edx, dword [ebp - 0x1314]
add edx, eax
add eax, dword [ebp - 0x130c]
push edx
mov edx, dword [ebp - 0x1304]
push eax
mov eax, dword [ebp - 0x1300]
push esi
push ebx
call fcn_fffac9ab  ; call 0xfffac9ab
mov ecx, dword [ebp - 0x1300]
mov ebx, dword [ebp - 0x131c]
add esp, 0x30
add ebx, dword [ebp - 0x1360]
xor eax, eax
mov cl, byte [ecx + 0x20b5]
mov byte [ebp - 0x1308], cl
movzx ecx, word [ebp - 0x12e8]
jmp short loc_fffc6d21  ; jmp 0xfffc6d21

loc_fffc6cee:  ; not directly referenced
bt ecx, eax
jae loc_fffc71fa  ; jae 0xfffc71fa
mov esi, dword [ebp - 0x131c]
add esi, dword [ebp - 0x1324]
movzx edi, byte [esi + eax]
mov esi, dword [ebp - 0x131c]
add esi, dword [ebp - 0x136c]
movzx esi, byte [esi + eax]
add esi, edi
sar esi, 1
mov edx, esi
mov byte [ebx + eax], dl
inc eax

loc_fffc6d21:  ; not directly referenced
cmp byte [ebp - 0x1308], al
ja short loc_fffc6cee  ; ja 0xfffc6cee
jmp near loc_fffc6ae0  ; jmp 0xfffc6ae0

loc_fffc6d2e:  ; not directly referenced
mov esi, dword [ebp - 0x131c]
mov ecx, dword [ebp - 0x1328]
add esi, ebx
movzx edi, byte [ecx + eax - 0x12]
movzx esi, byte [esi + eax - 0x12]
add esi, edi
sar esi, 1
mov ecx, esi
mov byte [edx + eax], cl
inc eax

loc_fffc6d50:  ; not directly referenced
cmp byte [ebp - 0x1308], al
ja short loc_fffc6d2e  ; ja 0xfffc6d2e

loc_fffc6d58:  ; not directly referenced
imul edx, dword [ebp - 0x1310], 9
imul eax, dword [ebp - 0x1318], 0x12
imul ecx, dword [ebp - 0x1304], 0x900
add eax, edx
imul edx, dword [ebp - 0x12fc], 0x240
mov ebx, dword [ebp - 0x130c]
lea edi, [ebp - 0x12e6]
lea esi, [eax + edx]
add edx, ecx
add eax, edx
add ebx, esi
push edx
mov dword [ebp - 0x1308], ebx
lea ebx, [ebp - 0x12e8]
push edx
push dword [ebp + 0x1c]
push dword [ebp + 0x18]
push dword [ebp + 0x14]
push dword [ebp + 0x10]
lea eax, [ebp + eax - 0x1218]
mov ecx, dword [ebp - 0x12fc]
push 0xf
mov dword [ebp - 0x1328], eax
mov edx, dword [ebp - 0x1304]
push 0
push ebx
push dword [ebp - 0x1308]
push eax
mov eax, dword [ebp - 0x1300]
push edi
call fcn_fffac6bd  ; call 0xfffac6bd
add esp, 0x30
test eax, eax
je loc_fffc6e75  ; je 0xfffc6e75
jmp near loc_fffc7236  ; jmp 0xfffc7236

loc_fffc6dec:  ; not directly referenced
imul eax, dword [ebp - 0x1318], 0x12
imul ebx, dword [ebp - 0x1310], 9
mov edx, dword [ebp - 0x130c]
add ebx, eax
mov ecx, 9
imul eax, dword [ebp - 0x12fc], 0x240
add ebx, eax
lea eax, [ebp - 0x12e6]
add edx, ebx
call fcn_fffa2408  ; call 0xfffa2408
mov edx, dword [ebp - 0x1314]
mov ecx, 9
add edx, ebx
lea eax, [ebp - 0x12dd]
call fcn_fffa2408  ; call 0xfffa2408
mov eax, dword [ebp - 0x1300]
mov ecx, dword [ebp - 0x131c]
add ecx, dword [ebp - 0x134c]
mov dl, byte [eax + 0x20b5]
xor eax, eax
jmp short loc_fffc6e6c  ; jmp 0xfffc6e6c

loc_fffc6e54:  ; not directly referenced
movzx esi, byte [ebp + eax - 0x12e6]
movzx ebx, byte [ebp + eax - 0x12dd]
add ebx, esi
sar ebx, 1
mov byte [ecx + eax], bl
inc eax

loc_fffc6e6c:  ; not directly referenced
cmp dl, al
ja short loc_fffc6e54  ; ja 0xfffc6e54
jmp near loc_fffc6d58  ; jmp 0xfffc6d58

loc_fffc6e75:  ; not directly referenced
mov dx, word [ebp - 0x12ea]
cmp word [ebp - 0x12e8], dx
je short loc_fffc6eb5  ; je 0xfffc6eb5
push eax
push dword [ebp + 0x1c]
push dword [ebp + 0x18]
push dword [ebp + 0x14]
push dword [ebp + 0x10]
lea eax, [ebp - 0x12ea]
add esi, dword [ebp - 0x1314]
push 0xf
push ebx
push eax
lea eax, [ebp - 0x12dd]
push esi
push dword [ebp - 0x1308]
push eax
jmp near loc_fffc6f38  ; jmp 0xfffc6f38

loc_fffc6eb5:  ; not directly referenced
push eax
add esi, dword [ebp - 0x1314]
mov ecx, dword [ebp - 0x12fc]
push eax
push dword [ebp + 0x1c]
push dword [ebp + 0x18]
push dword [ebp + 0x14]
push dword [ebp + 0x10]
mov dword [ebp - 0x1344], esi
mov edx, dword [ebp - 0x1304]
push 0xf
mov eax, dword [ebp - 0x1300]
push 1
push ebx
push esi
lea esi, [ebp - 0x12dd]
push esi
push dword [ebp - 0x1328]
call fcn_fffac6bd  ; call 0xfffac6bd
add esp, 0x30
test eax, eax
jne loc_fffc7236  ; jne 0xfffc7236
mov cx, word [ebp - 0x12ea]
cmp word [ebp - 0x12e8], cx
je short loc_fffc6f53  ; je 0xfffc6f53
push eax
push dword [ebp + 0x1c]
push dword [ebp + 0x18]
push dword [ebp + 0x14]
push dword [ebp + 0x10]
lea eax, [ebp - 0x12ea]
push 0xf
push ebx
push eax
push dword [ebp - 0x1344]
push dword [ebp - 0x1308]
push esi

loc_fffc6f38:  ; not directly referenced
push edi
mov ecx, dword [ebp - 0x12fc]
mov edx, dword [ebp - 0x1304]
mov eax, dword [ebp - 0x1300]
call fcn_fffac9ab  ; call 0xfffac9ab
add esp, 0x30

loc_fffc6f53:  ; not directly referenced
imul esi, dword [ebp - 0x1310], 9
imul edx, dword [ebp - 0x1318], 0x12
imul eax, dword [ebp - 0x12fc], 0x240
add edx, esi
movzx ebx, word [ebp - 0x12e8]
mov byte [ebp - 0x1308], 0
mov dword [ebp - 0x1344], ebx
mov dword [ebp - 0x1328], esi
lea edi, [edx + eax]
jmp near loc_fffc7071  ; jmp 0xfffc7071

loc_fffc6f8f:  ; not directly referenced
mov ebx, dword [ebp - 0x1344]
mov cl, byte [ebp - 0x1308]
movzx eax, byte [ebp - 0x1308]
bt ebx, ecx
jb short loc_fffc6fcf  ; jb 0xfffc6fcf
mov esi, dword [ebp - 0x1320]
mov edx, 1
shl edx, cl
or word [esi], dx
mov edx, dword [ebp - 0x1314]
add edx, edi
mov byte [edx + eax], 0
mov edx, dword [ebp - 0x130c]
add edx, edi
mov byte [edx + eax], 0

loc_fffc6fcf:  ; not directly referenced
mov ebx, dword [ebp - 0x1314]
mov ecx, dword [ebp - 0x130c]
add ebx, edi
add ecx, edi
add ebx, eax
add ecx, eax
mov dl, byte [ebx]
sub dl, byte [ecx]
cmp dl, 4
ja short loc_fffc703d  ; ja 0xfffc703d
imul esi, dword [ebp - 0x12fc], 0x12
add esi, dword [ebp - 0x1328]
mov dword [ebp - 0x1368], esi
imul esi, dword [ebp - 0x1304], 0x48
add esi, dword [ebp - 0x1368]
mov dword [ebp - 0x1368], esi
lea esi, [ebp - 0x18]
add esi, dword [ebp - 0x1368]
cmp byte [eax + esi - 0x1290], 9
jbe short loc_fffc703d  ; jbe 0xfffc703d
mov esi, dword [ebp - 0x1320]
mov byte [ebx], 0
mov byte [ecx], 0
mov cl, al
mov ebx, 1
shl ebx, cl
or word [esi], bx

loc_fffc703d:  ; not directly referenced
imul ecx, dword [ebp - 0x1304], 0x48
imul ebx, dword [ebp - 0x12fc], 0x12
add ebx, dword [ebp - 0x1328]
add ecx, ebx
lea ebx, [ebp - 0x18]
add ecx, ebx
add eax, ecx
mov cl, byte [eax - 0x1290]
cmp dl, cl
cmovb edx, ecx
inc byte [ebp - 0x1308]
mov byte [eax - 0x1290], dl

loc_fffc7071:  ; not directly referenced
mov eax, dword [ebp - 0x1300]
mov cl, byte [ebp - 0x1308]
cmp cl, byte [eax + 0x20b5]
jb loc_fffc6f8f  ; jb 0xfffc6f8f
jmp near loc_fffc6ae0  ; jmp 0xfffc6ae0

loc_fffc708e:  ; not directly referenced
inc byte [ebp - 0x1330]
cmp byte [ebp - 0x1330], 0x20
jne loc_fffc6a7c  ; jne 0xfffc6a7c
imul ebx, dword [ebp - 0x1318], 0x12
imul eax, dword [ebp - 0x1310], 9
imul esi, dword [ebp - 0x1304], 0x900
add eax, ebx
xor edi, edi
mov dword [ebp - 0x12fc], ebx
mov dword [ebp - 0x1330], eax
mov dword [ebp - 0x1328], esi

loc_fffc70cf:  ; not directly referenced
mov ecx, dword [ebp - 0x1304]
mov edx, edi
mov eax, dword [ebp - 0x1300]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffc70f1  ; jne 0xfffc70f1

loc_fffc70e6:  ; not directly referenced
inc edi
cmp edi, 4
jne short loc_fffc70cf  ; jne 0xfffc70cf
jmp near loc_fffc71bc  ; jmp 0xfffc71bc

loc_fffc70f1:  ; not directly referenced
imul eax, edi, 0x240
cmp dword [ebp - 0x1310], 0
jne short loc_fffc7108  ; jne 0xfffc7108
add eax, dword [ebp - 0x12fc]
jmp short loc_fffc7112  ; jmp 0xfffc7112

loc_fffc7108:  ; not directly referenced
mov esi, dword [ebp - 0x12fc]
lea eax, [eax + esi + 9]

loc_fffc7112:  ; not directly referenced
mov ebx, dword [ebp - 0x130c]
xor edx, edx
imul ecx, edi, 0x240
add ebx, eax
add eax, dword [ebp - 0x1314]
mov dword [ebp - 0x131c], ebx
mov dword [ebp - 0x1320], eax
add ecx, dword [ebp - 0x1330]
jmp short loc_fffc71a9  ; jmp 0xfffc71a9

loc_fffc713c:  ; not directly referenced
mov ebx, dword [ebp - 0x130c]
mov esi, dword [ebp - 0x131c]
movzx eax, dl
add ebx, ecx
add esi, eax
inc edx
mov dword [ebp - 0x134c], esi
mov bl, byte [ebx + eax]
mov byte [esi], bl
mov ebx, dword [ebp - 0x1314]
add ebx, ecx
mov esi, dword [ebp - 0x1320]
mov bl, byte [ebx + eax]
mov byte [esi + eax], bl
mov esi, dword [ebp - 0x1328]
add esi, ecx
mov byte [ebp - 0x1344], bl
lea ebx, [ebp - 0x18]
add ebx, esi
mov dword [ebp - 0x1308], ebx
mov ebx, dword [ebp - 0x134c]
movzx esi, byte [ebx]
movzx ebx, byte [ebp - 0x1344]
add ebx, esi
mov esi, dword [ebp - 0x1308]
sar ebx, 1
mov byte [eax + esi - 0x1200], bl

loc_fffc71a9:  ; not directly referenced
mov eax, dword [ebp - 0x1300]
cmp dl, byte [eax + 0x20b5]
jb short loc_fffc713c  ; jb 0xfffc713c
jmp near loc_fffc70e6  ; jmp 0xfffc70e6

loc_fffc71bc:  ; not directly referenced
inc dword [ebp - 0x1310]
add dword [ebp - 0x1324], 9

loc_fffc71c9:  ; not directly referenced
mov ebx, dword [ebp - 0x132c]
cmp dword [ebp - 0x1310], ebx
jbe loc_fffc6a0c  ; jbe 0xfffc6a0c
jmp near loc_fffc6904  ; jmp 0xfffc6904

loc_fffc71e0:  ; not directly referenced
mov esi, dword [ebp - 0x1300]
mov eax, dword [esi + 0x2223]
mov dword [eax + 0x4eb0], 0
xor eax, eax
jmp short loc_fffc7236  ; jmp 0xfffc7236

loc_fffc71fa:  ; not directly referenced
mov eax, 1
jmp short loc_fffc7236  ; jmp 0xfffc7236

loc_fffc7201:  ; not directly referenced
mov ecx, dword [ebp - 0x1348]
mov esi, dword [ebp - 0x1318]
mov edx, 9
mov eax, dword [ebp - 0x1304]
mov bl, byte [ecx + esi]
call fcn_fffacd01  ; call 0xfffacd01
shl ebx, 0x18
mov esi, dword [ebp - 0x1300]
add eax, dword [esi + 0x2223]
mov dword [eax], ebx
jmp near loc_fffc69ae  ; jmp 0xfffc69ae

loc_fffc7236:  ; not directly referenced
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc723e:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, edx
lea esp, [esp - 0x6c]
mov byte [ebp - 0x5a], al
mov byte [ebp - 0x61], cl
mov al, byte [ebp + 8]
shl ecx, 7
mov byte [ebp - 0x78], al
movzx edi, byte [ebp - 0x5a]
or ecx, 2
shl eax, 0xc
mov byte [ebp - 0x59], 0
or ecx, eax
xor eax, eax
movzx ecx, cx
lea edx, [edi + 0x1c8]
mov dword [ebp - 0x60], ecx
mov dword [ebp - 0x68], edx
jmp near loc_fffc739b  ; jmp 0xfffc739b

loc_fffc727f:  ; not directly referenced
movzx esi, byte [ebp - 0x59]
mov edx, edi
mov ecx, esi
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
mov edx, eax
xor eax, eax
test edx, edx
je loc_fffc7398  ; je 0xfffc7398
mov ecx, edi
mov edx, esi
mov eax, ebx
call fcn_fffc005b  ; call 0xfffc005b
test eax, eax
je loc_fffc73b1  ; je 0xfffc73b1
cmp byte [ebp - 0x78], 0
sete cl
cmp byte [ebp - 0x61], 1
sete dl
test cl, dl
je short loc_fffc72c4  ; je 0xfffc72c4
movzx edx, byte [eax]
jmp short loc_fffc72c8  ; jmp 0xfffc72c8

loc_fffc72c4:  ; not directly referenced
movzx edx, byte [eax + 1]

loc_fffc72c8:  ; not directly referenced
mov ecx, dword [ebp - 0x60]
mov eax, ebx
call fcn_fffc02b4  ; call 0xfffc02b4
mov word [ebp - 0x3a], ax
mov al, byte [ebp - 0x5a]
mov byte [ebp - 0x37], al
mov ecx, 0x15
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x57]
mov dword [ebp - 0x42], 0
mov byte [ebp - 0x38], 1
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov dword [ebp - 0x3e], 0
mov word [ebp - 0x30], 4
mov byte [ebp - 0x2e], 4
call fcn_fffa2408  ; call 0xfffa2408
mov ecx, 0x15
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x2d]
mov dword [ebp - 0x57], 0xc
mov word [ebp - 0x45], 4
mov byte [ebp - 0x43], 4
mov word [ebp - 0x47], 1
call fcn_fffa2408  ; call 0xfffa2408
movzx eax, byte [ebx + 0x20aa]
mov word [ebp - 0x1b], ax
mov edx, dword [ebp - 0x68]
imul eax, esi, 0x1055
mov ecx, 2
mov dword [ebp - 0x2d], 0xc
mov byte [ebp - 0x19], 4
mov word [ebp - 0x1d], 1
lea eax, [eax + edx*2]
mov dx, word [ebp - 0x3a]
mov word [ebx + eax + 0xd], dx
mov edx, esi
push eax
lea eax, [ebp - 0x57]
push 1
push eax
mov eax, ebx
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20

loc_fffc7398:  ; not directly referenced
inc byte [ebp - 0x59]

loc_fffc739b:  ; not directly referenced
test eax, eax
sete cl
cmp byte [ebp - 0x59], 1
setbe dl
test cl, dl
jne loc_fffc727f  ; jne 0xfffc727f
jmp short loc_fffc73b6  ; jmp 0xfffc73b6

loc_fffc73b1:  ; not directly referenced
mov eax, 1

loc_fffc73b6:  ; not directly referenced
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffc73be:
db 0x00
db 0x00

fcn_fffc73c0:
push ebp
mov ebp, esp
push esi
push ebx
xor ebx, ebx
lea esp, [esp - 0x400]

loc_fffc73ce:
mov dword [ebp + ebx*4 - 0x408], ebx
mov ecx, ebx
mov esi, 8

loc_fffc73dc:
test cl, 1
je short loc_fffc73eb  ; je 0xfffc73eb
shr ecx, 1
xor ecx, 0xedb88320
jmp short loc_fffc73ed  ; jmp 0xfffc73ed

loc_fffc73eb:
shr ecx, 1

loc_fffc73ed:
dec esi
jne short loc_fffc73dc  ; jne 0xfffc73dc
mov dword [ebp + ebx*4 - 0x408], ecx
inc ebx
cmp ebx, 0x100
jne short loc_fffc73ce  ; jne 0xfffc73ce
xor bx, bx
or ecx, 0xffffffff

loc_fffc7406:
mov esi, ecx
xor cl, byte [eax + ebx]
movzx ecx, cl
inc ebx
shr esi, 8
mov ecx, dword [ebp + ecx*4 - 0x408]
xor ecx, esi
cmp ebx, 0xba4
jne short loc_fffc7406  ; jne 0xfffc7406
not ecx
xor eax, eax
mov dword [edx], ecx
lea esp, [esp + 0x400]
pop ebx
pop esi
pop ebp
ret

fcn_fffc7434:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x8c]
mov dword [ebp - 0x70], ecx
test byte [ebp + 0x10], 0x40
mov dword [ebp - 0x78], ref_fffcf90a  ; mov dword [ebp - 0x78], 0xfffcf90a
mov ecx, ref_fffcf8e5  ; mov ecx, 0xfffcf8e5
cmovne ecx, dword [ebp - 0x78]
mov dword [ebp - 0x78], ecx
mov ecx, dword [ebp + 0x10]
and ecx, 0xfffffffe
test byte [ebp + 0x10], 0x10
cmove ecx, dword [ebp + 0x10]
xor esi, esi
mov dword [ebp + 0x10], ecx
mov ecx, dword [ebp - 0x70]
sub ecx, 2
mov dword [ebp - 0x98], eax
cmp ecx, 0x22
mov dword [ebp - 0x94], edx
mov ebx, dword [ebp + 8]
ja loc_fffc76bc  ; ja 0xfffc76bc
mov ecx, dword [ebp + 0x10]
and ecx, 1
cmp ecx, 1
sbb ecx, ecx
xor edi, edi
and ecx, 0xfffffff0
add ecx, 0x30
test byte [ebp + 0x10], 2
mov byte [ebp - 0x88], cl
je short loc_fffc74e4  ; je 0xfffc74e4
test edx, edx
jns short loc_fffc74ca  ; jns 0xfffc74ca
neg dword [ebp - 0x98]
mov edi, 0x2d
adc dword [ebp - 0x94], 0
dec ebx
neg dword [ebp - 0x94]
jmp short loc_fffc74e4  ; jmp 0xfffc74e4

loc_fffc74ca:
test byte [ebp + 0x10], 4
je short loc_fffc74d8  ; je 0xfffc74d8
dec ebx
mov edi, 0x2b
jmp short loc_fffc74e4  ; jmp 0xfffc74e4

loc_fffc74d8:
test byte [ebp + 0x10], 8
je short loc_fffc74e4  ; je 0xfffc74e4
dec ebx
mov edi, 0x20

loc_fffc74e4:
mov ecx, dword [ebp + 0x10]
and ecx, 0x20
mov dword [ebp - 0x8c], ecx
je short loc_fffc7508  ; je 0xfffc7508
cmp dword [ebp - 0x70], 0x10
jne short loc_fffc74fd  ; jne 0xfffc74fd
sub ebx, 2
jmp short loc_fffc7508  ; jmp 0xfffc7508

loc_fffc74fd:
xor ecx, ecx
cmp dword [ebp - 0x70], 8
sete cl
sub ebx, ecx

loc_fffc7508:
mov eax, dword [ebp - 0x94]
or eax, dword [ebp - 0x98]
jne short loc_fffc7523  ; jne 0xfffc7523
mov byte [ebp - 0x5a], 0x30
mov dword [ebp - 0x6c], 1
jmp short loc_fffc7590  ; jmp 0xfffc7590

loc_fffc7523:
mov dword [ebp - 0x6c], 0

loc_fffc752a:
mov eax, dword [ebp - 0x98]
mov edx, dword [ebp - 0x94]
xor esi, esi
test edx, edx
mov dword [ebp - 0x74], edx
mov ecx, eax
je short loc_fffc754d  ; je 0xfffc754d
mov eax, edx
xor edx, edx
div dword [ebp - 0x70]
mov dword [ebp - 0x74], edx
mov esi, eax

loc_fffc754d:
mov dword [ebp - 0x98], ecx
mov ecx, dword [ebp - 0x74]
mov eax, dword [ebp - 0x98]
mov edx, ecx
div dword [ebp - 0x70]
mov ecx, edx
mov edx, esi
mov dword [ebp - 0x94], edx
mov edx, dword [ebp - 0x78]
mov dword [ebp - 0x98], eax
mov eax, dword [ebp - 0x6c]
mov cl, byte [edx + ecx]
mov edx, dword [ebp - 0x94]
mov byte [ebp + eax - 0x5a], cl
inc eax
or edx, dword [ebp - 0x98]
mov dword [ebp - 0x6c], eax
jne short loc_fffc752a  ; jne 0xfffc752a

loc_fffc7590:
mov ecx, dword [ebp + 0xc]
cmp dword [ebp - 0x6c], ecx
cmovge ecx, dword [ebp - 0x6c]
xor esi, esi
sub ebx, ecx
test byte [ebp + 0x10], 0x11
mov dword [ebp - 0x74], ecx
jne short loc_fffc75c7  ; jne 0xfffc75c7
mov esi, ebx
jmp short loc_fffc75b9  ; jmp 0xfffc75b9

loc_fffc75ab:
sub esp, 0xc
dec esi
push 0x20
call fcn_fffa0406  ; call 0xfffa0406
add esp, 0x10

loc_fffc75b9:
test esi, esi
jg short loc_fffc75ab  ; jg 0xfffc75ab
xor esi, esi
test ebx, ebx
cmovns esi, ebx
dec ebx
sub ebx, esi

loc_fffc75c7:
mov eax, edi
test al, al
je short loc_fffc75dd  ; je 0xfffc75dd
sub esp, 0xc
inc esi
movsx edi, al
push edi
call fcn_fffa0406  ; call 0xfffa0406
add esp, 0x10

loc_fffc75dd:
cmp dword [ebp - 0x8c], 0
je short loc_fffc761e  ; je 0xfffc761e
cmp dword [ebp - 0x70], 8
jne short loc_fffc75f9  ; jne 0xfffc75f9
sub esp, 0xc
inc esi
push 0x30
call fcn_fffa0406  ; call 0xfffa0406
jmp short loc_fffc761b  ; jmp 0xfffc761b

loc_fffc75f9:
cmp dword [ebp - 0x70], 0x10
jne short loc_fffc761e  ; jne 0xfffc761e
sub esp, 0xc
add esi, 2
push 0x30
call fcn_fffa0406  ; call 0xfffa0406
mov ecx, dword [ebp - 0x78]
movzx eax, byte [ecx + 0x21]
mov dword [esp], eax
call fcn_fffa0406  ; call 0xfffa0406

loc_fffc761b:
add esp, 0x10

loc_fffc761e:
test byte [ebp + 0x10], 0x10
jne short loc_fffc7658  ; jne 0xfffc7658
movsx eax, byte [ebp - 0x88]
mov edi, ebx
jmp short loc_fffc7648  ; jmp 0xfffc7648

loc_fffc762f:
sub esp, 0xc
mov dword [ebp - 0x90], eax
push eax
dec edi
call fcn_fffa0406  ; call 0xfffa0406
add esp, 0x10
mov eax, dword [ebp - 0x90]

loc_fffc7648:
test edi, edi
jg short loc_fffc762f  ; jg 0xfffc762f
xor eax, eax
test ebx, ebx
cmovns eax, ebx
dec ebx
add esi, eax
sub ebx, eax

loc_fffc7658:
mov edi, dword [ebp - 0x74]
add edi, esi
jmp short loc_fffc766d  ; jmp 0xfffc766d

loc_fffc765f:
sub esp, 0xc
inc esi
push 0x30
call fcn_fffa0406  ; call 0xfffa0406
add esp, 0x10

loc_fffc766d:
mov eax, edi
sub eax, esi
cmp dword [ebp - 0x6c], eax
jl short loc_fffc765f  ; jl 0xfffc765f
mov edi, dword [ebp - 0x6c]
jmp short loc_fffc768d  ; jmp 0xfffc768d

loc_fffc767b:
movzx eax, byte [ebp + edi - 0x5b]
sub esp, 0xc
push eax
dec edi
call fcn_fffa0406  ; call 0xfffa0406
add esp, 0x10

loc_fffc768d:
test edi, edi
jg short loc_fffc767b  ; jg 0xfffc767b
xor eax, eax
cmp dword [ebp - 0x6c], 0
cmovns eax, dword [ebp - 0x6c]
mov edi, ebx
add esi, eax
jmp short loc_fffc76af  ; jmp 0xfffc76af

loc_fffc76a1:
sub esp, 0xc
dec edi
push 0x20
call fcn_fffa0406  ; call 0xfffa0406
add esp, 0x10

loc_fffc76af:
test edi, edi
jg short loc_fffc76a1  ; jg 0xfffc76a1
xor eax, eax
test ebx, ebx
cmovns eax, ebx
add esi, eax

loc_fffc76bc:
lea esp, [ebp - 0xc]
mov eax, esi
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc76c6:
push ebp
test eax, eax
mov ebp, esp
je short loc_fffc76d7  ; je 0xfffc76d7
test edx, edx
je short loc_fffc76d7  ; je 0xfffc76d7
pop ebp
jmp near fcn_fffc73c0  ; jmp 0xfffc73c0

loc_fffc76d7:
mov eax, 0xd
pop ebp
ret

fcn_fffc76de:
push ebp
movzx ecx, cl
mov ebp, esp
push esi
push ebx
movzx esi, byte [ebp + 8]
mov eax, dword [eax + 0x2223]
movzx ebx, byte [ebp + 0xc]
and esi, 0xfffffffd
add ebx, ebx
or ebx, esi
movzx esi, byte [ebp + 0x10]
and ebx, 0xfffffffb
shl esi, 2
or ebx, esi
movzx esi, byte [ebp + 0x14]
and ebx, 0xfffff00f
shl esi, 8
or ebx, esi
movzx esi, byte [ebp + 0x18]
and ebx, 0xfffe0fff
shl esi, 0xc
or ebx, esi
movzx esi, byte [ebp + 0x1c]
and ebx, 0xfffdffff
shl esi, 0x11
or ebx, esi
cmp dl, 0x64
jne short loc_fffc7742  ; jne 0xfffc7742
lea eax, [eax + ecx*4 + 0x4e20]
jmp short loc_fffc7758  ; jmp 0xfffc7758

loc_fffc7742:
test dl, dl
jne short loc_fffc774f  ; jne 0xfffc774f
lea edx, [ecx*4 + 0x4220]
jmp short loc_fffc7756  ; jmp 0xfffc7756

loc_fffc774f:
lea edx, [ecx*4 + 0x4620]

loc_fffc7756:
add eax, edx

loc_fffc7758:
mov dword [eax], ebx
xor eax, eax
pop ebx
pop esi
pop ebp
ret

fcn_fffc7760:
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x14]
mov byte [ebp - 0xf], dl
movzx edi, byte [ebp - 0xf]
mov dl, byte [ebp + 8]
mov byte [ebp - 0xe], dl
imul edx, edi, 0x1055
cmp byte [eax + edx + 0x3a], 0
jne loc_fffc7824  ; jne 0xfffc7824
jmp near loc_fffc7846  ; jmp 0xfffc7846

loc_fffc778d:
movzx ebx, byte [ebp - 0xe]
cmp byte [eax + 0x3a], 0
mov dword [ebp - 0x18], ebx
jne loc_fffc782f  ; jne 0xfffc782f

loc_fffc779e:
mov ebx, 0x40

loc_fffc77a3:
imul edi, edi, 0x1055
mov edx, dword [eax + 0x2227]
mov dword [ebp - 0x14], ebx
mov byte [ebp - 0xd], 0
lea esi, [edx + 0x40]
cmp dword [eax + edi + 0x49], 0
cmovne edx, esi
mov esi, edx
neg esi
mov dword [ebp - 0x20], esi
jmp short loc_fffc77f3  ; jmp 0xfffc77f3

loc_fffc77ca:
mov edi, dword [ebp - 0x20]
lea ebx, [edx + 0x40]
add edi, ecx
mov dword [ebp - 0x1c], ebx
mov ebx, edx

loc_fffc77d7:
mov esi, dword [edi + ebx]
mov dword [ebx], esi
add ebx, 4
cmp ebx, dword [ebp - 0x1c]
jne short loc_fffc77d7  ; jne 0xfffc77d7
mov ebx, dword [ebp - 0x14]
inc byte [ebp - 0xd]
add edx, dword [ebp - 0x14]
sub dword [ebp - 0x20], ebx
add ecx, 0x40

loc_fffc77f3:
mov bl, byte [ebp - 0xe]
cmp byte [ebp - 0xd], bl
jne short loc_fffc77ca  ; jne 0xfffc77ca
sfence
mov ecx, dword [ebp - 0x18]
dec ecx
and ecx, 0xff0000ff
cmp byte [ebp - 0xf], 1
sbb edx, edx
and edx, 0xfffffc00
add edx, 0x4688
add edx, dword [eax + 0x2223]
mov dword [edx], ecx
jmp short loc_fffc7846  ; jmp 0xfffc7846

loc_fffc7824:
cmp byte [ebp - 0xe], 0x20
ja short loc_fffc7846  ; ja 0xfffc7846
jmp near loc_fffc778d  ; jmp 0xfffc778d

loc_fffc782f:
cmp byte [eax + 0x108f], 0
mov ebx, 0x80
jne loc_fffc77a3  ; jne 0xfffc77a3
jmp near loc_fffc779e  ; jmp 0xfffc779e

loc_fffc7846:
lea esp, [esp + 0x14]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc784f:
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, edx
lea esp, [esp - 0x6c]
mov byte [ebp - 0x5a], al
mov byte [ebp - 0x61], cl
mov al, byte [ebp + 8]
shl ecx, 7
mov byte [ebp - 0x78], al
movzx edi, byte [ebp - 0x5a]
or ecx, 2
shl eax, 0xc
mov byte [ebp - 0x59], 0
or ecx, eax
xor eax, eax
movzx ecx, cx
lea edx, [edi + 0x1c8]
mov dword [ebp - 0x60], ecx
mov dword [ebp - 0x68], edx
jmp near loc_fffc79ac  ; jmp 0xfffc79ac

loc_fffc7890:
movzx esi, byte [ebp - 0x59]
mov edx, edi
mov ecx, esi
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
mov edx, eax
xor eax, eax
test edx, edx
je loc_fffc79a9  ; je 0xfffc79a9
mov ecx, edi
mov edx, esi
mov eax, ebx
call fcn_fffc0201  ; call 0xfffc0201
test eax, eax
je loc_fffc79c2  ; je 0xfffc79c2
cmp byte [ebp - 0x78], 0
sete cl
cmp byte [ebp - 0x61], 1
sete dl
test cl, dl
je short loc_fffc78d5  ; je 0xfffc78d5
movzx edx, byte [eax]
jmp short loc_fffc78d9  ; jmp 0xfffc78d9

loc_fffc78d5:
movzx edx, byte [eax + 1]

loc_fffc78d9:
mov ecx, dword [ebp - 0x60]
mov eax, ebx
call fcn_fffc02b4  ; call 0xfffc02b4
mov word [ebp - 0x3a], ax
mov al, byte [ebp - 0x5a]
mov byte [ebp - 0x37], al
mov ecx, 0x15
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x57]
mov dword [ebp - 0x42], 0
mov byte [ebp - 0x38], 1
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov dword [ebp - 0x3e], 0
mov word [ebp - 0x30], 4
mov byte [ebp - 0x2e], 4
call fcn_fffa2408  ; call 0xfffa2408
mov ecx, 0x15
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x2d]
mov dword [ebp - 0x57], 0xc
mov word [ebp - 0x45], 4
mov byte [ebp - 0x43], 4
mov word [ebp - 0x47], 1
call fcn_fffa2408  ; call 0xfffa2408
movzx eax, byte [ebx + 0x20aa]
mov word [ebp - 0x1b], ax
mov edx, dword [ebp - 0x68]
imul eax, esi, 0x1055
mov ecx, 2
mov dword [ebp - 0x2d], 0xc
mov byte [ebp - 0x19], 4
mov word [ebp - 0x1d], 1
lea eax, [eax + edx*2]
mov dx, word [ebp - 0x3a]
mov word [ebx + eax + 0xd], dx
mov edx, esi
push eax
lea eax, [ebp - 0x57]
push 1
push eax
mov eax, ebx
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20

loc_fffc79a9:
inc byte [ebp - 0x59]

loc_fffc79ac:
test eax, eax
sete cl
cmp byte [ebp - 0x59], 1
setbe dl
test cl, dl
jne loc_fffc7890  ; jne 0xfffc7890
jmp short loc_fffc79c7  ; jmp 0xfffc79c7

loc_fffc79c2:
mov eax, 1

loc_fffc79c7:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc79cf:
push ebp
mov ebp, esp
push edi
push esi
mov esi, edx
lea edi, [ebp - 0x57]
push ebx
xor ebx, ebx
lea esp, [esp - 0x5c]
mov byte [ebp - 0x5d], al
movzx edx, byte [ebp - 0x5d]
xor eax, eax
mov dword [ebp - 0x64], edx
jmp near loc_fffc7ac0  ; jmp 0xfffc7ac0

loc_fffc79f1:
movzx edx, bl
mov eax, esi
mov dword [ebp - 0x5c], edx
mov ecx, edx
mov edx, dword [ebp - 0x64]
call fcn_fffbb638  ; call 0xfffbb638
mov edx, eax
xor eax, eax
test edx, edx
je loc_fffc7abf  ; je 0xfffc7abf
mov al, byte [ebp - 0x5d]
mov ecx, 0x15
mov byte [ebp - 0x37], al
lea edx, [ebp - 0x42]
mov eax, edi
mov dword [ebp - 0x42], 0
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 3
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov word [ebp - 0x30], 4
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
call fcn_fffa2408  ; call 0xfffa2408
lea edx, [ebp - 0x42]
mov ecx, 0x15
lea eax, [ebp - 0x2d]
mov dword [ebp - 0x57], 0xc
mov word [ebp - 0x45], 4
mov byte [ebp - 0x43], 4
mov word [ebp - 0x47], 1
call fcn_fffa2408  ; call 0xfffa2408
push edx
movzx eax, byte [esi + 0x20aa]
push 1
mov word [ebp - 0x1b], ax
mov ecx, 2
push edi
mov edx, dword [ebp - 0x5c]
mov eax, esi
push 0
mov dword [ebp - 0x2d], 0xc
mov byte [ebp - 0x19], 4
push 0
mov word [ebp - 0x1d], 1
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20

loc_fffc7abf:
inc ebx

loc_fffc7ac0:
test eax, eax
sete cl
cmp bl, 1
setbe dl
test cl, dl
jne loc_fffc79f1  ; jne 0xfffc79f1
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc7adb:
push ebp
mov ebp, esp
push ebx
mov ecx, dword [eax + 0x20b6]
mov ebx, eax
shr ecx, 1
imul edx, ecx
mov ecx, 0x3e8
lea eax, [edx + 0x1f4]
xor edx, edx
div ecx
mov cx, 1
mov edx, eax
mov eax, ebx
pop ebx
pop ebp
jmp near fcn_fffc16ce  ; jmp 0xfffc16ce

fcn_fffc7b0a:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
mov esi, edx
push ebx
movzx edx, cl
lea esp, [esp - 0x4c]
mov dword [ebp - 0x1c], edx
inc edx
mov al, byte [ebp + 8]
and edx, 1
cmp dword [ebp + 0xc], 3
mov byte [ebp - 0x1d], cl
mov byte [ebp - 0x24], al
mov dword [ebp - 0x28], edx
mov dword [ebp - 0x44], 0
ja short loc_fffc7b48  ; ja 0xfffc7b48
mov ecx, dword [ebp + 0xc]
movzx ecx, byte [ecx + ref_fffcf5d4]  ; movzx ecx, byte [ecx - 0x30a2c]
mov dword [ebp - 0x44], ecx

loc_fffc7b48:
imul eax, dword [ebp - 0x28], 0x1055
mov byte [ebp - 0x38], 0
add eax, edi
mov dword [ebp - 0x48], eax
jmp near loc_fffc7d6a  ; jmp 0xfffc7d6a

loc_fffc7b5d:
cmp dword [ebp + 0xc], 1
je short loc_fffc7bcb  ; je 0xfffc7bcb
jb short loc_fffc7bac  ; jb 0xfffc7bac
cmp dword [ebp + 0xc], 2
je short loc_fffc7bd7  ; je 0xfffc7bd7
cmp dword [ebp + 0xc], 3
jne short loc_fffc7bc4  ; jne 0xfffc7bc4
push 9
mov al, byte [ebp - 0x38]
mov edx, dword [ebp - 0x1c]
push 1
shr al, 6
push 0x13
movzx eax, al
push eax
movzx ebx, byte [ebp - 0x24]
mov eax, edi
mov ecx, ebx
call fcn_fffbfdae  ; call 0xfffbfdae
push 9
mov al, byte [ebp - 0x38]
mov ecx, ebx
push 6
and eax, 0x3f
mov edx, dword [ebp - 0x1c]
push 0
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
jmp short loc_fffc7c03  ; jmp 0xfffc7c03

loc_fffc7bac:
push 9
movzx ecx, byte [ebp - 0x24]
push 7
push 0x14

loc_fffc7bb6:
push ebx
mov edx, dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10

loc_fffc7bc4:
xor eax, eax
jmp near loc_fffc7c4c  ; jmp 0xfffc7c4c

loc_fffc7bcb:
push 9
movzx ecx, byte [ebp - 0x24]
push 7
push 8
jmp short loc_fffc7bb6  ; jmp 0xfffc7bb6

loc_fffc7bd7:
push 9
movzx ecx, byte [ebp - 0x24]
mov edx, dword [ebp - 0x1c]
push 7
mov eax, edi
mov dword [ebp - 0x3c], ecx
push 0x14
push ebx
call fcn_fffbfd3a  ; call 0xfffbfd3a
push 9
mov ecx, dword [ebp - 0x3c]
mov edx, dword [ebp - 0x1c]
push 7
mov eax, edi
push 8
push ebx
call fcn_fffbfd3a  ; call 0xfffbfd3a

loc_fffc7c03:
add esp, 0x20
jmp short loc_fffc7bc4  ; jmp 0xfffc7bc4

loc_fffc7c08:
movzx ecx, al
cmp dword [ebp + 0x10], 1
jne short loc_fffc7c2d  ; jne 0xfffc7c2d
cmp byte [ebp - 0x1d], 0
jne short loc_fffc7c20  ; jne 0xfffc7c20
lea ecx, [ecx*4 + 0x4140]
jmp short loc_fffc7c27  ; jmp 0xfffc7c27

loc_fffc7c20:
lea ecx, [ecx*4 + 0x4540]

loc_fffc7c27:
add edx, ecx
mov edx, dword [edx]
jmp short loc_fffc7c4b  ; jmp 0xfffc7c4b

loc_fffc7c2d:
cmp byte [ebp - 0x1d], 0
jne short loc_fffc7c3c  ; jne 0xfffc7c3c
lea ecx, [ecx*4 + 0x4340]
jmp short loc_fffc7c43  ; jmp 0xfffc7c43

loc_fffc7c3c:
lea ecx, [ecx*4 + 0x4740]

loc_fffc7c43:
add edx, ecx
mov dword [edx], 0

loc_fffc7c4b:
inc eax

loc_fffc7c4c:
cmp al, byte [edi + 0x20b5]
mov edx, dword [edi + 0x2223]
jb short loc_fffc7c08  ; jb 0xfffc7c08
mov ebx, dword [edx + 0x5030]
mov ecx, 3
and ebx, 0xffffffef
mov dword [edx + 0x5030], ebx
mov edx, dword [ebp - 0x1c]
push eax
mov eax, edi
push 1
push dword [ebp + 0x18]
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
jne loc_fffc7ef2  ; jne 0xfffc7ef2
cmp dword [ebp + 0x14], 0
jne short loc_fffc7cca  ; jne 0xfffc7cca

loc_fffc7c99:
mov eax, dword [edi + 0x2223]
or ebx, 0x10
xor ecx, ecx
mov edx, 0x64
mov dword [eax + 0x5030], ebx
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne loc_fffc7ec1  ; jne 0xfffc7ec1
movzx edx, byte [ebp - 0x38]
mov dword [ebp - 0x3c], edx
jmp near loc_fffc7d5b  ; jmp 0xfffc7d5b

loc_fffc7cca:
mov ecx, dword [ebp - 0x48]
cmp byte [ecx + 0x3a], 0
jne loc_fffc7ec8  ; jne 0xfffc7ec8
jmp short loc_fffc7c99  ; jmp 0xfffc7c99

loc_fffc7cd9:
cmp dword [ebp + 0x10], 1
mov edx, dword [edi + 0x2223]
movzx ecx, al
jne short loc_fffc7d11  ; jne 0xfffc7d11
cmp byte [ebp - 0x1d], 0
jne short loc_fffc7cf7  ; jne 0xfffc7cf7
lea ecx, [ecx*4 + 0x4140]
jmp short loc_fffc7cfe  ; jmp 0xfffc7cfe

loc_fffc7cf7:
lea ecx, [ecx*4 + 0x4540]

loc_fffc7cfe:
add edx, ecx
mov ecx, dword [edx]
movzx edx, al
shl edx, 7
add edx, dword [ebp - 0x3c]
or word [esi + edx*2], cx
jmp short loc_fffc7d5a  ; jmp 0xfffc7d5a

loc_fffc7d11:
cmp byte [ebp - 0x1d], 0
jne short loc_fffc7d20  ; jne 0xfffc7d20
lea ecx, [ecx*4 + 0x4340]
jmp short loc_fffc7d27  ; jmp 0xfffc7d27

loc_fffc7d20:
lea ecx, [ecx*4 + 0x4740]

loc_fffc7d27:
add edx, ecx
mov edx, dword [edx]
mov dword [ebp - 0x4c], edx
movzx edx, al
shl edx, 7
add edx, dword [ebp - 0x3c]
mov bx, word [esi + edx*2]
movzx ecx, bx
add ecx, dword [ebp - 0x4c]
cmp ecx, 0xffff
jbe short loc_fffc7d51  ; jbe 0xfffc7d51
mov word [esi + edx*2], 0xffff
jmp short loc_fffc7d5a  ; jmp 0xfffc7d5a

loc_fffc7d51:
mov ecx, dword [ebp - 0x4c]
add ecx, ebx
mov word [esi + edx*2], cx

loc_fffc7d5a:
inc eax

loc_fffc7d5b:
cmp al, byte [edi + 0x20b5]
jb loc_fffc7cd9  ; jb 0xfffc7cd9
inc byte [ebp - 0x38]

loc_fffc7d6a:
movzx ebx, byte [ebp - 0x38]
cmp ebx, dword [ebp - 0x44]
jb loc_fffc7b5d  ; jb 0xfffc7b5d
movzx eax, byte [ebp - 0x24]
mov byte [ebp - 0x1d], 0
imul edx, eax, 0x36
mov dword [ebp - 0x38], eax
mov dword [ebp - 0x24], edx
jmp near loc_fffc7eae  ; jmp 0xfffc7eae

loc_fffc7d8d:
cmp dword [ebp + 0xc], 1
je loc_fffc7e2c  ; je 0xfffc7e2c
jb short loc_fffc7e0a  ; jb 0xfffc7e0a
cmp dword [ebp + 0xc], 2
je loc_fffc7e5f  ; je 0xfffc7e5f
cmp dword [ebp + 0xc], 3
jne loc_fffc7eab  ; jne 0xfffc7eab
imul ecx, dword [ebp - 0x38], 0x24
imul esi, dword [ebp - 0x1c], 0x1055
mov eax, ecx
movzx ebx, byte [ebp - 0x1d]
add eax, esi
push ebx
add eax, edi
mov dword [ebp - 0x28], ecx
push 1
mov ecx, dword [ebp - 0x38]
mov edx, dword [ebp - 0x1c]
push 0x13
movzx eax, byte [ebx + eax + 0x2b0]
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
mov eax, dword [ebp - 0x28]
mov ecx, dword [ebp - 0x38]
push ebx
lea ebx, [ebx + ebx*2]
add eax, ebx
add esi, eax
mov edx, dword [ebp - 0x1c]
push 6
push 0
movzx eax, byte [edi + esi + 0x295]
push eax
mov eax, edi
call fcn_fffbfdae  ; call 0xfffbfdae
jmp near loc_fffc7ea8  ; jmp 0xfffc7ea8

loc_fffc7e0a:
movzx eax, byte [ebp - 0x1d]
imul edx, dword [ebp - 0x1c], 0x1055
push eax
lea eax, [eax + eax*2]
add eax, dword [ebp - 0x24]
add eax, edx
push 7
push 0x14
movzx eax, byte [edi + eax + 0x1bd]
jmp short loc_fffc7e4c  ; jmp 0xfffc7e4c

loc_fffc7e2c:
movzx eax, byte [ebp - 0x1d]
imul edx, dword [ebp - 0x1c], 0x1055
push eax
lea eax, [eax + eax*2]
add eax, dword [ebp - 0x24]
add eax, edx
push 7
push 8
movzx eax, byte [edi + eax + 0x1d8]

loc_fffc7e4c:
push eax
mov ecx, dword [ebp - 0x38]
mov edx, dword [ebp - 0x1c]
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
add esp, 0x10
jmp short loc_fffc7eab  ; jmp 0xfffc7eab

loc_fffc7e5f:
movzx ebx, byte [ebp - 0x1d]
mov ecx, dword [ebp - 0x38]
imul eax, dword [ebp - 0x1c], 0x1055
lea esi, [ebx + ebx*2]
add esi, dword [ebp - 0x24]
mov edx, dword [ebp - 0x1c]
push ebx
add esi, eax
add esi, edi
push 7
push 0x14
movzx eax, byte [esi + 0x1bd]
push eax
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a
push ebx
mov ecx, dword [ebp - 0x38]
mov edx, dword [ebp - 0x1c]
push 7
push 8
movzx eax, byte [esi + 0x1d8]
push eax
mov eax, edi
call fcn_fffbfd3a  ; call 0xfffbfd3a

loc_fffc7ea8:
add esp, 0x20

loc_fffc7eab:
inc byte [ebp - 0x1d]

loc_fffc7eae:
mov al, byte [ebp - 0x1d]
cmp al, byte [edi + 0x20b5]
jb loc_fffc7d8d  ; jb 0xfffc7d8d
xor eax, eax
jmp short loc_fffc7ef2  ; jmp 0xfffc7ef2

loc_fffc7ec1:
mov eax, 0xc
jmp short loc_fffc7ef2  ; jmp 0xfffc7ef2

loc_fffc7ec8:
push ecx
mov edx, dword [ebp - 0x28]
mov ecx, 3
push 1
push dword [ebp + 0x14]
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
je loc_fffc7c99  ; je 0xfffc7c99

loc_fffc7ef2:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffc7efa:
db 0x00
db 0x00

fcn_fffc7efc:  ; not directly referenced
push ebp
mov ebp, esp
push edi
push esi
push ebx
lea esp, [esp - 0x8c]
mov ebx, dword [ebp + 8]
mov eax, ebx
call fcn_fffbc6ee  ; call 0xfffbc6ee
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x5030], 0x112
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x4ea0], 0
mov eax, dword [ebx + 0x2223]
mov dword [eax + 0x5030], 0x112
mov eax, ebx
call fcn_fffbc708  ; call 0xfffbc708
cmp byte [ebx + 0x222f], 0xef
ja short loc_fffc7f5c  ; ja 0xfffc7f5c
xor edx, edx
mov eax, ebx
call fcn_fffc7adb  ; call 0xfffc7adb

loc_fffc7f5c:  ; not directly referenced
cmp byte [ebx + 0x20fe], 0
je short loc_fffc7f98  ; je 0xfffc7f98
cmp dword [ebx + 0x225c], 3
je short loc_fffc7f98  ; je 0xfffc7f98
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0xc00]
or eax, 0x40
mov dword [edx + 0xc00], eax
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0xd00]
or eax, 0x40
mov dword [edx + 0xd00], eax

loc_fffc7f98:  ; not directly referenced
mov edx, 0x30d40
mov eax, ebx
call fcn_fffc7adb  ; call 0xfffc7adb
mov edx, dword [ebx + 0x2223]
mov edi, ebx
mov eax, dword [edx + 0x5030]
or eax, 2
mov dword [edx + 0x5030], eax
mov edx, 0x7a120
mov eax, ebx
call fcn_fffc7adb  ; call 0xfffc7adb
mov edx, dword [ebx + 0x2223]
mov eax, dword [edx + 0x5030]
or eax, 4
mov dword [edx + 0x5030], eax
mov edx, 0x14
mov eax, ebx
call fcn_fffc7adb  ; call 0xfffc7adb
mov dword [ebp - 0x80], ebx
mov dword [ebp - 0x6c], 0

loc_fffc7ff2:  ; not directly referenced
cmp byte [edi + 0x3a], 0
jne loc_fffc8635  ; jne 0xfffc8635

loc_fffc7ffc:  ; not directly referenced
inc dword [ebp - 0x6c]
add edi, 0x1055
cmp dword [ebp - 0x6c], 2
jne short loc_fffc7ff2  ; jne 0xfffc7ff2
mov dword [ebp - 0x70], 0
mov dword [ebp - 0x6c], 0

loc_fffc8019:  ; not directly referenced
mov ecx, dword [ebp - 0x70]
mov al, byte [ebp - 0x70]
mov byte [ebp - 0x72], al
mov byte [ebp - 0x71], 0
shr al, 1
movzx edx, al
mov byte [ebp - 0x7c], al
lea ecx, [ecx + ecx + 0x390]
mov dword [ebp - 0x78], edx
xor eax, eax
mov dword [ebp - 0x88], ecx
jmp near loc_fffc8251  ; jmp 0xfffc8251

loc_fffc8045:  ; not directly referenced
movzx edi, byte [ebp - 0x71]
mov edx, dword [ebp - 0x70]
mov ecx, edi
mov eax, ebx
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffc824c  ; je 0xfffc824c
imul ecx, dword [ebp - 0x78], 0x46
imul edx, edi, 0x8c
imul eax, edi, 0x1055
add edx, ecx
movzx eax, byte [ebx + eax + 0x3c]
mov dl, byte [ebx + edx + 0x212a]
test dl, 4
lea eax, [eax*8 - 0x28]
mov esi, eax
je short loc_fffc808e  ; je 0xfffc808e
or esi, 0x40
jmp short loc_fffc809a  ; jmp 0xfffc809a

loc_fffc808e:  ; not directly referenced
or si, 0x80
and dl, 1
jne short loc_fffc809a  ; jne 0xfffc809a
mov esi, eax

loc_fffc809a:  ; not directly referenced
mov ecx, dword [ebp - 0x70]
mov edx, edi
mov eax, ebx
call fcn_fffc005b  ; call 0xfffc005b
test eax, eax
je loc_fffc8267  ; je 0xfffc8267
mov al, byte [eax]
cmp al, 0x3c
jne short loc_fffc80c0  ; jne 0xfffc80c0
and si, 0xf9ff
or si, 0x200
jmp short loc_fffc80da  ; jmp 0xfffc80da

loc_fffc80c0:  ; not directly referenced
cmp al, 0x78
jne short loc_fffc80d0  ; jne 0xfffc80d0
and si, 0xf9ff
or si, 0x400
jmp short loc_fffc80da  ; jmp 0xfffc80da

loc_fffc80d0:  ; not directly referenced
mov edx, esi
and dh, 0xf9
test al, al
cmove esi, edx

loc_fffc80da:  ; not directly referenced
mov al, byte [ebp - 0x72]
mov ecx, 0x15
mov byte [ebp - 0x37], al
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x57]
mov word [ebp - 0x3a], si
mov dword [ebp - 0x42], 0
mov byte [ebp - 0x38], 2
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov word [ebp - 0x30], 4
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
call fcn_fffa2408  ; call 0xfffa2408
mov ecx, 0x15
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x2d]
mov dword [ebp - 0x57], 0xc
mov word [ebp - 0x45], 4
mov byte [ebp - 0x43], 4
movzx esi, si
mov word [ebp - 0x47], 1
call fcn_fffa2408  ; call 0xfffa2408
movzx eax, byte [ebx + 0x20aa]
mov word [ebp - 0x1b], ax
mov dx, word [ebp - 0x3a]
imul eax, edi, 0x1055
add eax, dword [ebp - 0x88]
cmp byte [ebp - 0x71], 1
mov dword [ebp - 0x2d], 0xc
mov byte [ebp - 0x19], 4
mov word [ebp - 0x1d], 1
mov dword [ebp - 0x84], esi
mov word [ebx + eax + 0x15], dx
sbb eax, eax
and eax, 0xfffffc00
mov ecx, dword [ebx + 0x2223]
lea eax, [ecx + eax + 0x469c]
mov eax, dword [eax]
and eax, 0xc0c0
cmp dword [ebx + 0x20b6], 0x855
ja short loc_fffc81e0  ; ja 0xfffc81e0
imul esi, dword [ebp - 0x78], 0x46
imul edx, edi, 0x8c
add edx, esi
mov esi, eax
mov dl, byte [ebx + edx + 0x212a]
and edx, 5
cmp byte [ebp - 0x7c], 0
jne short loc_fffc81d5  ; jne 0xfffc81d5
or esi, 0x40
jmp short loc_fffc81db  ; jmp 0xfffc81db

loc_fffc81d5:  ; not directly referenced
or esi, 0x80

loc_fffc81db:  ; not directly referenced
dec dl
cmove eax, esi

loc_fffc81e0:  ; not directly referenced
mov esi, dword [ebp - 0x84]
and esi, 0xffffff3f
or esi, eax
imul edx, dword [ebp - 0x78], 0x1d
imul eax, edi, 0x1055
add eax, edx
cmp dword [ebx + eax + 0x15], 1
jne short loc_fffc8214  ; jne 0xfffc8214
mov eax, esi
mov edx, esi
or ah, 0x40
or dh, 0x80
mov esi, eax
cmp byte [ebp - 0x7c], 0
cmovne esi, edx

loc_fffc8214:  ; not directly referenced
cmp byte [ebp - 0x71], 1
lea edx, [ebp - 0x57]
sbb eax, eax
and eax, 0xfffffc00
lea eax, [ecx + eax + 0x469c]
mov ecx, 2
mov dword [eax], esi
mov eax, ebx
push esi
push 1
push edx
mov edx, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
jmp short loc_fffc824e  ; jmp 0xfffc824e

loc_fffc824c:  ; not directly referenced
xor eax, eax

loc_fffc824e:  ; not directly referenced
inc byte [ebp - 0x71]

loc_fffc8251:  ; not directly referenced
test eax, eax
sete cl
cmp byte [ebp - 0x71], 1
setbe dl
test cl, dl
jne loc_fffc8045  ; jne 0xfffc8045
jmp short loc_fffc826e  ; jmp 0xfffc826e

loc_fffc8267:  ; not directly referenced
mov eax, 1
jmp short loc_fffc8272  ; jmp 0xfffc8272

loc_fffc826e:  ; not directly referenced
test eax, eax
je short loc_fffc8275  ; je 0xfffc8275

loc_fffc8272:  ; not directly referenced
mov dword [ebp - 0x6c], eax

loc_fffc8275:  ; not directly referenced
mov edx, ebx
mov eax, dword [ebp - 0x70]
call fcn_fffc79cf  ; call 0xfffc79cf
test eax, eax
cmove eax, dword [ebp - 0x6c]
sub esp, 0xc
xor ecx, ecx
push 0
mov dword [ebp - 0x6c], eax
mov edx, ebx
mov eax, dword [ebp - 0x70]
lea edi, [ebp - 0x63]
call fcn_fffc723e  ; call 0xfffc723e
mov esi, ref_fffcf5d8  ; mov esi, 0xfffcf5d8
mov ecx, 3
rep movsd  ; rep movsd dword es:[edi], dword ptr [esi]
mov ecx, dword [ebp - 0x70]
add esp, 0x10
test eax, eax
cmove eax, dword [ebp - 0x6c]
mov dword [ebp - 0x6c], eax
mov byte [ebp - 0x71], 0
xor eax, eax
mov edi, 0x100
lea ecx, [ecx + ecx + 0x380]
mov dword [ebp - 0x88], ecx
jmp near loc_fffc84a8  ; jmp 0xfffc84a8

loc_fffc82d4:  ; not directly referenced
movzx edx, byte [ebp - 0x71]
mov eax, ebx
mov dword [ebp - 0x78], edx
mov ecx, edx
mov edx, dword [ebp - 0x70]
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffc84a3  ; je 0xfffc84a3
imul edx, dword [ebp - 0x78], 0x1055
add edx, ebx
movzx eax, byte [edx + 0x3b]
mov dl, byte [edx + 0x3d]
movzx ecx, dl
mov byte [ebp - 0x7c], dl
lea edx, [eax - 5]
cmp dx, 0xc
sbb esi, esi
not esi
and esi, 3
cmp cx, 4
jbe loc_fffc84be  ; jbe 0xfffc84be
cmp cx, 0xa
setne byte [ebp - 0x84]
cmp cx, 8
seta dl
test byte [ebp - 0x84], dl
je short loc_fffc834c  ; je 0xfffc834c
mov dl, byte [ebp - 0x7c]
and edx, 0xfffffffd
cmp dl, 0xc
je short loc_fffc834c  ; je 0xfffc834c
cmp cx, 0x10
jne loc_fffc84be  ; jne 0xfffc84be

loc_fffc834c:  ; not directly referenced
cmp ax, 0xb
ja short loc_fffc8358  ; ja 0xfffc8358
lea eax, [eax + eax - 8]
jmp short loc_fffc835f  ; jmp 0xfffc835f

loc_fffc8358:  ; not directly referenced
sub eax, 0xc
lea eax, [eax + eax + 1]

loc_fffc835f:  ; not directly referenced
movzx ecx, byte [ebp - 0x7c]
mov edx, edi
mov dword [ebp - 0x7c], ecx
mov ecx, eax
and ecx, 1
and dx, 0xf18b
shl ecx, 2
and eax, 0xe
shl eax, 3
or edx, ecx
mov ecx, dword [ebp - 0x7c]
or edx, eax
movzx eax, byte [ebp + ecx - 0x68]
shl eax, 9
or edx, eax
mov eax, dword [ebx + 0x2270]
cmp eax, 3
ja short loc_fffc8399  ; ja 0xfffc8399
jmp short loc_fffc83d1  ; jmp 0xfffc83d1

loc_fffc8399:  ; not directly referenced
sub eax, 6
mov edi, edx
cmp eax, 1
ja short loc_fffc83aa  ; ja 0xfffc83aa
and di, 0xefff
jmp short loc_fffc83d8  ; jmp 0xfffc83d8

loc_fffc83aa:  ; not directly referenced
or di, 0x1000
cmp dword [ebx + 0x2234], 1
jne short loc_fffc83d8  ; jne 0xfffc83d8
cmp byte [ebx + 0x20ae], 0x20
ja short loc_fffc83d1  ; ja 0xfffc83d1
mov edi, edx
and di, 0xefff
cmp byte [ebx + 0x20af], 8
jbe short loc_fffc83d8  ; jbe 0xfffc83d8

loc_fffc83d1:  ; not directly referenced
mov edi, edx
or di, 0x1000

loc_fffc83d8:  ; not directly referenced
mov al, byte [ebp - 0x72]
mov ecx, 0x15
mov byte [ebp - 0x37], al
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x57]
mov dword [ebp - 0x42], 0
mov word [ebp - 0x3a], di
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 0
mov byte [ebp - 0x35], 0
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov word [ebp - 0x30], 4
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
call fcn_fffa2408  ; call 0xfffa2408
mov ecx, 0x15
lea edx, [ebp - 0x42]
lea eax, [ebp - 0x2d]
mov dword [ebp - 0x57], 0xc
mov word [ebp - 0x45], 4
mov byte [ebp - 0x43], 4
mov word [ebp - 0x47], 1
call fcn_fffa2408  ; call 0xfffa2408
movzx eax, byte [ebx + 0x20aa]
mov word [ebp - 0x1b], ax
lea edx, [ebp - 0x57]
imul eax, dword [ebp - 0x78], 0x1055
add eax, dword [ebp - 0x88]
mov dword [ebp - 0x2d], 0xc
mov byte [ebp - 0x19], 4
mov word [ebp - 0x1d], 1
mov word [ebx + eax + 0x15], di
mov eax, ebx
push ecx
mov ecx, 2
push 1
push edx
mov edx, dword [ebp - 0x78]
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
cmove eax, esi
jmp short loc_fffc84a5  ; jmp 0xfffc84a5

loc_fffc84a3:  ; not directly referenced
xor eax, eax

loc_fffc84a5:  ; not directly referenced
inc byte [ebp - 0x71]

loc_fffc84a8:  ; not directly referenced
test eax, eax
sete cl
cmp byte [ebp - 0x71], 1
setbe dl
test cl, dl
jne loc_fffc82d4  ; jne 0xfffc82d4
jmp short loc_fffc84c8  ; jmp 0xfffc84c8

loc_fffc84be:  ; not directly referenced
mov eax, 5
jmp near loc_fffc8748  ; jmp 0xfffc8748

loc_fffc84c8:  ; not directly referenced
test eax, eax
jne loc_fffc8748  ; jne 0xfffc8748
inc dword [ebp - 0x70]
cmp dword [ebp - 0x70], 4
jne loc_fffc8019  ; jne 0xfffc8019
mov byte [ebp - 0x4c], 0
mov dword [ebp - 0x57], 7
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 0
mov byte [ebp - 0x4a], 0
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 1
mov word [ebp - 0x45], 0xf
mov byte [ebp - 0x43], 4
mov dword [ebp - 0x53], 0
mov byte [ebp - 0x37], 0
mov dword [ebp - 0x42], 1
mov word [ebp - 0x3a], 0x400
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 8
mov byte [ebp - 0x35], 0x14
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 1
mov word [ebp - 0x30], 0x190
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
mov dword [ebp - 0x2d], 2
mov word [ebp - 0x25], 0
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0x1f
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov word [ebp - 0x1b], 0x64
mov byte [ebp - 0x19], 0x64
push edx
lea eax, [ebp - 0x57]
mov ecx, 1
push 1
mov edx, 0x64
mov dword [ebp - 0x29], 0
push eax
mov eax, ebx
push 1
push 0
push 0
push 0
push 4
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
cmove eax, dword [ebp - 0x6c]
cmp byte [ebx + 0x3a], 0
mov dword [ebp - 0x6c], eax
je short loc_fffc85d7  ; je 0xfffc85d7
xor ecx, ecx
xor edx, edx
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov dword [ebp - 0x6c], eax
jne loc_fffc86d8  ; jne 0xfffc86d8

loc_fffc85d7:  ; not directly referenced
cmp byte [ebx + 0x108f], 0
jne loc_fffc86bf  ; jne 0xfffc86bf

loc_fffc85e4:  ; not directly referenced
mov edx, dword [ebx + 0x2223]
xor edi, edi
lea esi, [ebp - 0x2d]
mov eax, dword [edx + 0x5030]
or eax, 8
mov dword [edx + 0x5030], eax

loc_fffc85fe:  ; not directly referenced
mov ecx, dword [ebp - 0x80]
cmp byte [ecx + 0x3a], 0
jne loc_fffc86dd  ; jne 0xfffc86dd
jmp short loc_fffc8623  ; jmp 0xfffc8623

loc_fffc860d:  ; not directly referenced
xor ecx, ecx
mov edx, edi
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov dword [ebp - 0x6c], eax
jne loc_fffc86d8  ; jne 0xfffc86d8

loc_fffc8623:  ; not directly referenced
inc edi
add dword [ebp - 0x80], 0x1055
cmp edi, 2
jne short loc_fffc85fe  ; jne 0xfffc85fe
jmp near loc_fffc86d8  ; jmp 0xfffc86d8

loc_fffc8635:  ; not directly referenced
imul eax, dword [ebp - 0x6c], 0x1055
add eax, ebx
call fcn_fffbbf31  ; call 0xfffbbf31
movzx ecx, al
mov dl, byte [ebp - 0x6c]
cmp dl, 1
mov eax, dword [ebx + 0x2223]
mov edx, 0xa
sbb esi, esi
and esi, 0xfffffc00
add esi, 0x46a0
add eax, esi
mov dword [eax], ecx
mov eax, ebx
mov dword [ebp - 0x8c], ecx
call fcn_fffc7adb  ; call 0xfffc7adb
mov edx, dword [ebx + 0x2223]
mov ecx, dword [ebp - 0x8c]
add edx, esi
mov eax, ecx
shl eax, 4
and cl, 0xf
or eax, ecx
mov ecx, 0x3e8
mov dword [edx], eax
mov eax, dword [ebx + 0x20b6]
shr eax, 1
xor edx, edx
imul eax, eax, 0xa
movzx esi, word [edi + 0x47]
add eax, 0x1f4
div ecx
xor cx, cx
lea edx, [esi + eax]
mov eax, ebx
call fcn_fffc16ce  ; call 0xfffc16ce
jmp near loc_fffc7ffc  ; jmp 0xfffc7ffc

loc_fffc86bf:  ; not directly referenced
xor ecx, ecx
mov edx, 1
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
mov dword [ebp - 0x6c], eax
je loc_fffc85e4  ; je 0xfffc85e4

loc_fffc86d8:  ; not directly referenced
mov eax, dword [ebp - 0x6c]
jmp short loc_fffc8748  ; jmp 0xfffc8748

loc_fffc86dd:  ; not directly referenced
mov ecx, edi
cmp cl, 1
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x4420
add eax, dword [ebx + 0x2223]
mov edx, dword [eax]
and edx, 0xffdfffff
cmp cl, 1
mov dword [eax], edx
mov edx, edi
sbb eax, eax
and eax, 0xfffffc00
add eax, 0x468c
add eax, dword [ebx + 0x2223]
mov eax, dword [eax]
mov eax, dword [ebp - 0x80]
cmp dword [eax + 0xa], 1
sbb eax, eax
xor ecx, ecx
and eax, 2
mov byte [ebp - 0x22], al
push eax
mov eax, ebx
push 1
push esi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
je loc_fffc860d  ; je 0xfffc860d

loc_fffc8748:  ; not directly referenced
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc8750:
push ebp
mov ebp, esp
push edi
mov edi, eax
push esi
push ebx
lea ebx, [ebp - 0xd8]
lea esi, [edi + 0x3c31]
lea esp, [esp - 0x13c]
mov dword [ebp - 0x134], edx
mov edx, ebx
mov dword [ebp - 0x118], ecx
call fcn_fffacf73  ; call 0xfffacf73
lea edx, [ebp - 0xcc]
mov eax, edi
call fcn_fffacf73  ; call 0xfffacf73
mov dword [ebp - 0xf4], edi
mov dword [ebp - 0xf8], 0
mov byte [ebp - 0x108], 0
mov dword [ebp - 0xf0], 0
mov dword [ebp - 0x138], esi
jmp short loc_fffc87c0  ; jmp 0xfffc87c0

loc_fffc87b4:
mov ebx, dword [ebp - 0x124]
mov dword [ebp - 0xf8], ebx

loc_fffc87c0:
mov esi, dword [ebp - 0xf4]
mov dword [ebp - 0x6c], 8
movzx ebx, byte [esi + 0x3e]
mov al, byte [esi + 0x44]
mov dl, byte [esi + 0x43]
shr al, 2
mov word [ebp - 0x5a], bx
cmp dl, al
mov word [ebp - 0x64], 0
mov byte [ebp - 0x62], 0
mov byte [ebp - 0x60], 4
mov byte [ebp - 0x5f], 0x12
mov byte [ebp - 0x5e], 0
lea ecx, [eax + 1]
cmova ecx, edx
movzx eax, byte [esi + 0x3c]
movzx edx, byte [esi + 0x41]
mov byte [ebp - 0x58], cl
lea eax, [edx + eax + 8]
mov byte [ebp - 0x5d], 0
mov word [ebp - 0x45], ax
mov word [ebp - 0x5c], 4
mov dword [ebp - 0x68], 0
mov dword [ebp - 0x57], 9
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 2
mov byte [ebp - 0x4a], 0x12
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 0x1e0
mov byte [ebp - 0x43], 4
mov dword [ebp - 0x53], 0
mov dword [ebp - 0x42], 4
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 2
mov byte [ebp - 0x35], 0x12
mov byte [ebp - 0x34], 0
mov dl, byte [esi + 0x42]
mov word [ebp - 0xae], bx
mov byte [ebp - 0x128], dl
mov edx, 8
movzx esi, byte [ebp - 0x128]
cmp byte [ebp - 0x128], 9
mov byte [ebp - 0xac], cl
cmovae edx, esi
mov esi, dword [ebp - 0xf4]
mov word [ebp - 0x30], dx
mov byte [ebp - 0x33], 0
movzx edx, byte [esi + 0x3f]
mov word [ebp - 0x32], 0x1e0
mov word [ebp - 0x1b], dx
mov byte [ebp - 0x2e], 4
mov dword [ebp - 0x3e], 0
mov dword [ebp - 0x2d], 3
mov word [ebp - 0x25], 0x400
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x19], 4
mov dword [ebp - 0x29], 0
mov dword [ebp - 0xc0], 8
mov word [ebp - 0xb8], 0
mov byte [ebp - 0xb6], 0
mov byte [ebp - 0xb4], 4
mov byte [ebp - 0xb3], 0x12
mov byte [ebp - 0xb2], 0
mov byte [ebp - 0xb1], 0
mov word [ebp - 0xb0], 4
mov dword [ebp - 0xbc], 0
mov dword [ebp - 0xab], 9
mov word [ebp - 0x99], ax
mov word [ebp - 0x84], ax
mov word [ebp - 0x6f], dx
mov word [ebp - 0xa3], 0
mov byte [ebp - 0xa1], 0
mov byte [ebp - 0x9f], 2
mov byte [ebp - 0x9e], 0x12
mov byte [ebp - 0x9d], 0
mov byte [ebp - 0x9c], 0
mov word [ebp - 0x9b], 0x1e0
mov byte [ebp - 0x97], 4
mov dword [ebp - 0xa7], 0
mov dword [ebp - 0x96], 9
mov word [ebp - 0x8e], 0
mov byte [ebp - 0x8c], 0
mov byte [ebp - 0x8a], 2
mov byte [ebp - 0x89], 0x12
mov byte [ebp - 0x88], 0
mov byte [ebp - 0x87], 0
mov word [ebp - 0x86], 0x1e0
mov byte [ebp - 0x82], 4
mov dword [ebp - 0x92], 0
mov dword [ebp - 0x81], 3
mov word [ebp - 0x79], 0x400
mov byte [ebp - 0x77], 0
mov byte [ebp - 0x75], 0
mov byte [ebp - 0x74], 0
mov byte [ebp - 0x73], 0
mov byte [ebp - 0x72], 0
mov word [ebp - 0x71], 1
mov byte [ebp - 0x6d], 4
mov dword [ebp - 0x7d], 0
mov dword [ebp - 0xd8], 0
mov dword [ebp - 0xcc], 0x140
mov ebx, dword [ebp - 0xf8]
xor ecx, ecx
inc ebx
mov edx, 0x2400
mov dword [ebp - 0x124], ebx
mov eax, dword [ebp - 0x138]
and ebx, 1
mov dword [ebp - 0x11c], ebx
call fcn_fffa24c1  ; call 0xfffa24c1
imul eax, ebx, 0x1055
mov word [ebp - 0x126], 0x800
add eax, edi
mov dword [ebp - 0x12c], eax

loc_fffc8a77:
mov esi, dword [ebp - 0xf4]
cmp byte [esi + 0x3a], 0
jne loc_fffc8f7b  ; jne 0xfffc8f7b
jmp near loc_fffc8d50  ; jmp 0xfffc8d50

loc_fffc8a8c:
mov dword [ebp - 0xec], 0

loc_fffc8a96:
mov ecx, dword [ebp - 0xf8]
mov edx, dword [ebp - 0xec]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffc8d3d  ; je 0xfffc8d3d
mov al, byte [ebp - 0xec]
mov bl, byte [ebp - 0x108]
cmp dword [ebp - 0x134], 1
mov byte [ebp - 0x61], al
mov byte [ebp - 0x4c], al
mov byte [ebp - 0x37], al
mov byte [ebp - 0x22], al
mov byte [ebp - 0xb5], bl
mov byte [ebp - 0xa0], bl
mov byte [ebp - 0x8b], bl
mov byte [ebp - 0x76], bl
jne loc_fffc8d00  ; jne 0xfffc8d00
imul eax, dword [ebp - 0xec], 0x900
lea eax, [edi + eax + 0x3c31]
mov dword [ebp - 0x120], eax
mov al, byte [ebp - 0xf8]
test al, al
mov byte [ebp - 0x127], al
mov eax, dword [edi + 0x2223]
jne short loc_fffc8b1c  ; jne 0xfffc8b1c
mov edx, dword [eax]
jmp short loc_fffc8b22  ; jmp 0xfffc8b22

loc_fffc8b1c:
mov edx, dword [eax + 0x100]

loc_fffc8b22:
and edx, 0xbfffffff
mov dword [eax + 0x4eb0], 0
mov dword [ebp - 0x10c], edx
mov dword [ebp - 0x110], 0

loc_fffc8b42:
mov eax, dword [ebp - 0x10c]
mov ebx, dword [ebp - 0x110]
and eax, 0xc0ffffff
mov dl, byte [ebp - 0x110]
shl ebx, 0x18
mov byte [ebp - 0x114], dl
or ebx, eax
mov eax, dword [edi + 0x2223]
mov dword [ebp - 0x10c], ebx
mov dword [eax + 0x3400], ebx
xor eax, eax
jmp short loc_fffc8b9f  ; jmp 0xfffc8b9f

loc_fffc8b7a:
movzx ecx, al
cmp byte [ebp - 0x127], 0
jne short loc_fffc8b8f  ; jne 0xfffc8b8f
lea ecx, [ecx*4 + 0x4340]
jmp short loc_fffc8b96  ; jmp 0xfffc8b96

loc_fffc8b8f:
lea ecx, [ecx*4 + 0x4740]

loc_fffc8b96:
add edx, ecx
inc eax
mov dword [edx], 0

loc_fffc8b9f:
cmp al, byte [edi + 0x20b5]
mov edx, dword [edi + 0x2223]
jb short loc_fffc8b7a  ; jb 0xfffc8b7a
mov ebx, dword [edx + 0x5030]
lea eax, [ebp - 0x6c]
and ebx, 0xffffffef
mov ecx, 3
mov dword [edx + 0x5030], ebx
push edx
mov edx, dword [ebp - 0xf8]
push 1
push eax
mov eax, edi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
mov dword [ebp - 0xf0], eax
jne loc_fffc8d3d  ; jne 0xfffc8d3d
test esi, esi
jne short loc_fffc8c1a  ; jne 0xfffc8c1a

loc_fffc8bf4:
mov eax, dword [edi + 0x2223]
or ebx, 0x10
xor ecx, ecx
mov edx, 0x64
mov dword [eax + 0x5030], ebx
mov eax, edi
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
je short loc_fffc8c2c  ; je 0xfffc8c2c
jmp near loc_fffc8cec  ; jmp 0xfffc8cec

loc_fffc8c1a:
mov eax, dword [ebp - 0x12c]
cmp byte [eax + 0x3a], 0
jne loc_fffc8fcd  ; jne 0xfffc8fcd
jmp short loc_fffc8bf4  ; jmp 0xfffc8bf4

loc_fffc8c2c:
mov bl, byte [ebp - 0x114]
mov al, 0x1f
sub eax, dword [ebp - 0x114]
cmp byte [ebp - 0x114], 0x1f
cmova eax, ebx
movzx eax, al
mov dword [ebp - 0x114], eax
xor eax, eax
jmp short loc_fffc8cbf  ; jmp 0xfffc8cbf

loc_fffc8c51:
movzx ecx, al
cmp byte [ebp - 0x127], 0
jne short loc_fffc8c66  ; jne 0xfffc8c66
lea ecx, [ecx*4 + 0x4340]
jmp short loc_fffc8c6d  ; jmp 0xfffc8c6d

loc_fffc8c66:
lea ecx, [ecx*4 + 0x4740]

loc_fffc8c6d:
add edx, ecx
mov ecx, dword [ebp - 0x120]
mov edx, dword [edx]
mov dword [ebp - 0x13c], edx
movzx edx, al
shl edx, 7
add edx, dword [ebp - 0x114]
mov bx, word [ecx + edx*2]
movzx ecx, bx
add ecx, dword [ebp - 0x13c]
cmp ecx, 0xffff
jbe short loc_fffc8cac  ; jbe 0xfffc8cac
mov ebx, dword [ebp - 0x120]
mov word [ebx + edx*2], 0xffff
jmp short loc_fffc8cbe  ; jmp 0xfffc8cbe

loc_fffc8cac:
mov ecx, dword [ebp - 0x13c]
add ecx, ebx
mov ebx, dword [ebp - 0x120]
mov word [ebx + edx*2], cx

loc_fffc8cbe:
inc eax

loc_fffc8cbf:
cmp al, byte [edi + 0x20b5]
mov edx, dword [edi + 0x2223]
jb short loc_fffc8c51  ; jb 0xfffc8c51
inc dword [ebp - 0x110]
cmp dword [ebp - 0x110], 0x40
jne loc_fffc8b42  ; jne 0xfffc8b42
mov dword [edx + 0x3400], 0
jmp short loc_fffc8d3d  ; jmp 0xfffc8d3d

loc_fffc8cec:
mov dword [ebp - 0xf0], 0xc
jmp short loc_fffc8d3d  ; jmp 0xfffc8d3d

loc_fffc8cf8:
mov dword [ebp - 0xf0], eax
jmp short loc_fffc8d3d  ; jmp 0xfffc8d3d

loc_fffc8d00:
imul eax, dword [ebp - 0xec], 0x900
sub esp, 0xc
mov ecx, dword [ebp - 0xf8]
lea edx, [edi + eax + 0x3c31]
lea eax, [ebp - 0x6c]
push eax
mov eax, edi
push esi
push 0
push dword [ebp - 0x118]
push dword [ebp - 0xec]
call fcn_fffc7b0a  ; call 0xfffc7b0a
mov dword [ebp - 0xf0], eax
add esp, 0x20

loc_fffc8d3d:
inc dword [ebp - 0xec]
cmp dword [ebp - 0xec], 4
jne loc_fffc8a96  ; jne 0xfffc8a96

loc_fffc8d50:
dec word [ebp - 0x126]
jne loc_fffc8a77  ; jne 0xfffc8a77
cmp dword [ebp - 0x134], 1
mov dword [ebp - 0xec], 0
jne short loc_fffc8dee  ; jne 0xfffc8dee
xor ebx, ebx
lea esi, [ebp - 0xdb]

loc_fffc8d78:
mov ecx, dword [ebp - 0xf8]
mov edx, ebx
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
jne short loc_fffc8dc5  ; jne 0xfffc8dc5
jmp short loc_fffc8de3  ; jmp 0xfffc8de3

loc_fffc8d8d:
movzx eax, byte [ebp - 0xec]
add eax, dword [ebp - 0x10c]
shl eax, 8
sub esp, 0xc
push esi
mov ecx, 0x40
lea edx, [edi + eax + 0x3c31]
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
mov dword [ebp - 0xf0], eax
inc byte [ebp - 0xec]
add esp, 0x10
jmp short loc_fffc8dd5  ; jmp 0xfffc8dd5

loc_fffc8dc5:
lea eax, [ebx + ebx*8]
mov byte [ebp - 0xec], 0
mov dword [ebp - 0x10c], eax

loc_fffc8dd5:
mov dl, byte [ebp - 0xec]
cmp dl, byte [edi + 0x20b5]
jb short loc_fffc8d8d  ; jb 0xfffc8d8d

loc_fffc8de3:
inc ebx
cmp ebx, 4
jne short loc_fffc8d78  ; jne 0xfffc8d78
jmp near loc_fffc8f5f  ; jmp 0xfffc8f5f

loc_fffc8dee:
mov ecx, dword [ebp - 0xf8]
mov edx, dword [ebp - 0xec]
mov eax, edi
call fcn_fffbb638  ; call 0xfffbb638
test eax, eax
je loc_fffc8f4c  ; je 0xfffc8f4c
cmp dword [ebp - 0x118], 1
je loc_fffc8ef7  ; je 0xfffc8ef7
jb loc_fffc8eb0  ; jb 0xfffc8eb0
cmp dword [ebp - 0x118], 2
je loc_fffc8f3b  ; je 0xfffc8f3b
cmp dword [ebp - 0x118], 3
jne loc_fffc8f4c  ; jne 0xfffc8f4c
jmp short loc_fffc8e69  ; jmp 0xfffc8e69

loc_fffc8e38:
movzx eax, bl
sub esp, 0xc
add eax, esi
lea ecx, [ebp - 0xdb]
shl eax, 8
inc ebx
push ecx
mov ecx, 0x80
lea edx, [edi + eax + 0x3c31]
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
mov dword [ebp - 0xf0], eax
add esp, 0x10
jmp short loc_fffc8e72  ; jmp 0xfffc8e72

loc_fffc8e69:
imul esi, dword [ebp - 0xec], 9
xor ebx, ebx

loc_fffc8e72:
cmp bl, byte [edi + 0x20b5]
jb short loc_fffc8e38  ; jb 0xfffc8e38
jmp near loc_fffc8f4c  ; jmp 0xfffc8f4c

loc_fffc8e7f:
movzx eax, bl
sub esp, 0xc
add eax, esi
mov ecx, 0x48
shl eax, 8
inc ebx
lea edx, [edi + eax + 0x3c31]
lea eax, [ebp - 0xdb]
push eax
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
mov dword [ebp - 0xf0], eax
add esp, 0x10
jmp short loc_fffc8eb9  ; jmp 0xfffc8eb9

loc_fffc8eb0:
imul esi, dword [ebp - 0xec], 9
xor ebx, ebx

loc_fffc8eb9:
cmp bl, byte [edi + 0x20b5]
jb short loc_fffc8e7f  ; jb 0xfffc8e7f
jmp near loc_fffc8f4c  ; jmp 0xfffc8f4c

loc_fffc8ec6:
movzx eax, bl
sub esp, 0xc
add eax, esi
lea ecx, [ebp - 0xdb]
shl eax, 8
inc ebx
push ecx
mov ecx, 0x48
lea edx, [edi + eax + 0x3c31]
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
mov dword [ebp - 0xf0], eax
add esp, 0x10
jmp short loc_fffc8f00  ; jmp 0xfffc8f00

loc_fffc8ef7:
imul esi, dword [ebp - 0xec], 9
xor ebx, ebx

loc_fffc8f00:
cmp bl, byte [edi + 0x20b5]
jb short loc_fffc8ec6  ; jb 0xfffc8ec6
jmp short loc_fffc8f4c  ; jmp 0xfffc8f4c

loc_fffc8f0a:
movzx eax, bl
sub esp, 0xc
add eax, esi
mov ecx, 0x48
shl eax, 8
inc ebx
lea edx, [edi + eax + 0x3c31]
lea eax, [ebp - 0xdb]
push eax
mov eax, edi
call fcn_fffc3287  ; call 0xfffc3287
mov dword [ebp - 0xf0], eax
add esp, 0x10
jmp short loc_fffc8f44  ; jmp 0xfffc8f44

loc_fffc8f3b:
imul esi, dword [ebp - 0xec], 9
xor ebx, ebx

loc_fffc8f44:
cmp bl, byte [edi + 0x20b5]
jb short loc_fffc8f0a  ; jb 0xfffc8f0a

loc_fffc8f4c:
inc dword [ebp - 0xec]
cmp dword [ebp - 0xec], 4
jne loc_fffc8dee  ; jne 0xfffc8dee

loc_fffc8f5f:
add dword [ebp - 0xf4], 0x1055
cmp dword [ebp - 0x124], 2
jne loc_fffc87b4  ; jne 0xfffc87b4
jmp near loc_fffc8ffd  ; jmp 0xfffc8ffd

loc_fffc8f7b:
mov ecx, dword [ebp - 0xf8]
lea edx, [ebp - 0xd8]
mov eax, edi
xor esi, esi
call fcn_ffface48  ; call 0xffface48
mov ebx, dword [ebp - 0x12c]
cmp byte [ebx + 0x3a], 0
je loc_fffc8a8c  ; je 0xfffc8a8c
mov ecx, dword [ebp - 0x11c]
lea edx, [ebp - 0xcc]
mov eax, edi
lea esi, [ebp - 0xc0]
call fcn_ffface48  ; call 0xffface48
cmp dword [ebx + 0xa], 1
sbb ebx, ebx
and ebx, 2
mov byte [ebp - 0x108], bl
jmp near loc_fffc8a8c  ; jmp 0xfffc8a8c

loc_fffc8fcd:
push eax
mov ecx, 3
mov edx, dword [ebp - 0x11c]
push 1
mov eax, edi
push esi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
je loc_fffc8bf4  ; je 0xfffc8bf4
jmp near loc_fffc8cf8  ; jmp 0xfffc8cf8

loc_fffc8ffd:
mov eax, dword [ebp - 0xf0]
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

fcn_fffc900b:
push ebp
mov ebp, esp
push edi
push esi
movzx esi, dl
push ebx
mov ebx, eax
imul eax, esi, 0x1055
lea esp, [esp - 0x7c]
add eax, ebx
mov byte [ebp - 0x7a], dl
movzx edx, byte [eax + 0x3e]
mov word [ebp - 0x5a], dx
mov dl, byte [eax + 0x44]
shr dl, 2
mov dword [ebp - 0x80], esi
movzx esi, byte [eax + 0x43]
mov byte [ebp - 0x79], dl
mov dword [ebp - 0x6c], 8
mov byte [ebp - 0x61], cl
mov word [ebp - 0x64], 0
mov byte [ebp - 0x62], 0
lea edi, [edx + 1]
mov edx, esi
cmp dl, byte [ebp - 0x79]
mov byte [ebp - 0x60], 0
cmovbe esi, edi
mov byte [ebp - 0x5f], 0x12
mov edx, esi
mov byte [ebp - 0x5e], 0
mov byte [ebp - 0x58], dl
mov byte [ebp - 0x5d], 0
mov word [ebp - 0x5c], 4
mov dword [ebp - 0x68], 0
mov dword [ebp - 0x57], 9
mov byte [ebp - 0x4c], cl
mov word [ebp - 0x4f], 0
mov byte [ebp - 0x4d], 0
mov byte [ebp - 0x4b], 2
mov byte [ebp - 0x4a], 0x12
mov byte [ebp - 0x49], 0
mov byte [ebp - 0x48], 0
mov word [ebp - 0x47], 0x20
mov byte [ebp - 0x43], 0x14
movzx esi, byte [eax + 0x41]
movzx edx, byte [eax + 0x3c]
lea edx, [esi + edx + 8]
cmp byte [eax + 0x42], 9
movzx esi, byte [eax + 0x42]
movzx eax, byte [eax + 0x3f]
mov word [ebp - 0x45], dx
mov edx, 8
cmovae edx, esi
mov word [ebp - 0x1b], ax
mov dword [ebp - 0x53], 0
mov dword [ebp - 0x42], 4
mov byte [ebp - 0x37], cl
mov word [ebp - 0x3a], 0
mov byte [ebp - 0x38], 0
mov byte [ebp - 0x36], 2
mov byte [ebp - 0x35], 0x12
mov byte [ebp - 0x34], 0
mov byte [ebp - 0x33], 0
mov word [ebp - 0x32], 0x20
mov byte [ebp - 0x2e], 0x14
mov dword [ebp - 0x3e], 0
mov word [ebp - 0x30], dx
mov dword [ebp - 0x2d], 3
mov byte [ebp - 0x22], cl
mov word [ebp - 0x25], 0x400
mov byte [ebp - 0x23], 0
mov byte [ebp - 0x21], 0
mov byte [ebp - 0x20], 0
mov byte [ebp - 0x1f], 0
mov byte [ebp - 0x1e], 0
mov word [ebp - 0x1d], 1
mov byte [ebp - 0x19], 3
mov dword [ebp - 0x29], 0
xor eax, eax
xor edi, edi
jmp near loc_fffc91fb  ; jmp 0xfffc91fb

loc_fffc9152:
cmp byte [ebp - 0x7a], 0
lea ecx, [eax + 0x400]
cmove ecx, eax
add ecx, dword [ebx + 0x2223]
inc edx
add eax, 4
mov dword [ecx], 0
jmp short loc_fffc9178  ; jmp 0xfffc9178

loc_fffc9171:
mov eax, 0x4340
xor edx, edx

loc_fffc9178:
cmp dl, byte [ebx + 0x20b5]
jb short loc_fffc9152  ; jb 0xfffc9152
push ecx
lea esi, [ebp - 0x6c]
mov ecx, 3
push 1
mov edx, dword [ebp - 0x80]
mov eax, ebx
push esi
push 0
push 0
push 0
push 0
push 1
call fcn_fffbb6de  ; call 0xfffbb6de
add esp, 0x20
test eax, eax
jne short loc_fffc9222  ; jne 0xfffc9222
xor ecx, ecx
mov edx, dword [ebp - 0x80]
mov eax, ebx
call fcn_fffbb669  ; call 0xfffbb669
test eax, eax
jne short loc_fffc921d  ; jne 0xfffc921d
mov al, byte [ebx + 0x20b5]
mov edx, 0x4340
mov byte [ebp - 0x79], al
xor ecx, ecx
mov eax, 1
jmp short loc_fffc91f5  ; jmp 0xfffc91f5

loc_fffc91ce:
cmp byte [ebp - 0x7a], 0
lea esi, [edx + 0x400]
cmove esi, edx
add esi, dword [ebx + 0x2223]
mov esi, dword [esi]
cmp esi, 0x101
mov esi, 0
cmovae eax, esi
inc ecx
add edx, 4

loc_fffc91f5:
cmp cl, byte [ebp - 0x79]
jne short loc_fffc91ce  ; jne 0xfffc91ce
inc edi

loc_fffc91fb:
mov dl, al
xor edx, 1
and edx, 1
cmp edi, 9
setbe al
test dl, al
jne loc_fffc9171  ; jne 0xfffc9171
xor eax, eax
cmp edi, 9
seta al
and eax, edx
jmp short loc_fffc9222  ; jmp 0xfffc9222

loc_fffc921d:
mov eax, 0xc

loc_fffc9222:
lea esp, [ebp - 0xc]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffc922a:
db 0x00
db 0x00

fcn_fffc922c:
push ebp
mov ebp, esp
push edi
movzx edi, dl
push esi
push ebx
mov ebx, eax
lea esp, [esp - 0x2c]
mov byte [ebp - 0x2c], dl
imul edx, edi, 0x1055
lea ecx, [eax + edx]
mov al, byte [ecx + 0x2f]
add al, byte [ecx + 0x12]
test al, al
mov byte [ecx + 0x3a], al
jne short loc_fffc9260  ; jne 0xfffc9260

loc_fffc9254:
mov dword [ebp - 0x24], 7
jmp near loc_fffc98fe  ; jmp 0xfffc98fe

loc_fffc9260:
mov al, byte [ebx + 0x22d8]
test al, al
jne loc_fffc93f8  ; jne 0xfffc93f8
imul eax, edi, 0x8c
mov dword [ebp - 0x24], 0
mov dword [ebp - 0x20], 0
mov word [ebp - 0x1c], 0x7fff
mov dword [ebp - 0x28], edx
mov dword [ebp - 0x30], eax
lea esi, [ebx + eax + 0x2107]

loc_fffc9295:
imul eax, dword [ebp - 0x24], 0x1d
cmp dword [ecx + eax + 0xa], 1
jne short loc_fffc92fb  ; jne 0xfffc92fb
mov edx, dword [ebp - 0x28]
add edx, eax
mov eax, 0x7fff
cmp dword [ebx + edx + 0xa], 1
jne short loc_fffc92d0  ; jne 0xfffc92d0
imul eax, dword [ebp - 0x24], 0x46
mov edx, dword [ebp - 0x30]
lea eax, [eax + edx + 0x2100]
lea eax, [ebx + eax + 0xb]
movzx edx, byte [eax + 0xf]
movzx eax, byte [eax + 0xe]
shl edx, 8
or eax, edx

loc_fffc92d0:
movzx edx, byte [esi + 0xe]
and word [ebp - 0x1c], ax
movzx eax, byte [esi + 0x14]
imul eax, edx
imul eax, eax, 0x3e8
movzx edx, byte [esi + 0xf]
mov dword [ebp - 0x38], edx
xor edx, edx
div dword [ebp - 0x38]
cmp dword [ebp - 0x20], eax
cmovae eax, dword [ebp - 0x20]
mov dword [ebp - 0x20], eax

loc_fffc92fb:
inc dword [ebp - 0x24]
add esi, 0x46
cmp dword [ebp - 0x24], 2
jne short loc_fffc9295  ; jne 0xfffc9295
cmp word [ebp - 0x1c], 0
sete dl
cmp word [ebp - 0x1c], 0x7fff
sete al
or dl, al
jne loc_fffc9254  ; jne 0xfffc9254
mov eax, dword [ebp - 0x20]
mov dword [ebp - 0x24], 0
movzx esi, word [ebp - 0x1c]
dec eax
mov dword [ebp - 0x20], eax

loc_fffc9332:
mov eax, ebx
call fcn_fffc019c  ; call 0xfffc019c
test eax, eax
mov ecx, eax
je loc_fffc9254  ; je 0xfffc9254
mov eax, dword [ebp - 0x20]
xor edx, edx
add eax, ecx
div ecx
sub eax, 4
jmp short loc_fffc9381  ; jmp 0xfffc9381

loc_fffc9351:
bt esi, eax
jae short loc_fffc9380  ; jae 0xfffc9380
lea edx, [eax + 4]
imul edx, ecx
cmp edx, 0x5207
ja short loc_fffc9386  ; ja 0xfffc9386
imul edx, edi, 0x1055
add eax, 4
cmp dword [ebp - 0x24], 7
mov byte [ebx + edx + 0x3b], al
jne loc_fffc9404  ; jne 0xfffc9404
jmp near loc_fffc9254  ; jmp 0xfffc9254

loc_fffc9380:
inc eax

loc_fffc9381:
cmp eax, 0xe
jbe short loc_fffc9351  ; jbe 0xfffc9351

loc_fffc9386:
mov edx, dword [ebx + 0x20b6]
cmp edx, 0x855
je short loc_fffc93c8  ; je 0xfffc93c8
cmp edx, 0x74b
je short loc_fffc93cf  ; je 0xfffc93cf
cmp edx, 0x640
je short loc_fffc93d6  ; je 0xfffc93d6
cmp edx, 0x535
je short loc_fffc93c1  ; je 0xfffc93c1
cmp edx, 0x42b
mov eax, 0x320
mov edx, 0xaf1
cmovne eax, edx
jmp short loc_fffc93db  ; jmp 0xfffc93db

loc_fffc93c1:
mov eax, 0x42b
jmp short loc_fffc93db  ; jmp 0xfffc93db

loc_fffc93c8:
mov eax, 0x74b
jmp short loc_fffc93db  ; jmp 0xfffc93db

loc_fffc93cf:
mov eax, 0x640
jmp short loc_fffc93db  ; jmp 0xfffc93db

loc_fffc93d6:
mov eax, 0x535

loc_fffc93db:
cmp eax, 0xaf1
mov dword [ebx + 0x20b6], eax
mov dword [ebp - 0x24], 0xb
jne loc_fffc9332  ; jne 0xfffc9332
jmp near loc_fffc9254  ; jmp 0xfffc9254

loc_fffc93f8:
mov byte [ecx + 0x3b], al
mov dword [ebp - 0x24], 0
jmp short loc_fffc940e  ; jmp 0xfffc940e

loc_fffc9404:
cmp dword [ebp - 0x24], 0xb
je loc_fffc98fe  ; je 0xfffc98fe

loc_fffc940e:
mov al, byte [ebx + 0x22da]
test al, al
je short loc_fffc9427  ; je 0xfffc9427
imul edx, edi, 0x1055
mov byte [ebx + edx + 0x3d], al
jmp near loc_fffc9531  ; jmp 0xfffc9531

loc_fffc9427:
mov eax, ebx
call fcn_fffc019c  ; call 0xfffc019c
mov esi, eax
xor ecx, ecx
imul eax, edi, 0x1055
cmp dword [ebx + eax + 0xa], 1
jne short loc_fffc9473  ; jne 0xfffc9473
imul edx, edi, 0x8c
add edx, ebx
movzx eax, byte [edx + 0x211c]
imul eax, eax, 0x3e8
movzx ecx, byte [edx + 0x2115]
imul eax, ecx
movzx ecx, byte [edx + 0x2116]
xor edx, edx
div ecx
xor edx, edx
lea eax, [esi + eax - 1]
div esi
mov ecx, eax

loc_fffc9473:
imul eax, edi, 0x1055
cmp dword [ebx + eax + 0x27], 1
jne short loc_fffc94c8  ; jne 0xfffc94c8
imul edx, edi, 0x8c
add edx, ebx
movzx eax, byte [edx + 0x2162]
imul eax, eax, 0x3e8
mov dword [ebp - 0x20], eax
movzx eax, byte [edx + 0x215b]
movzx edx, byte [edx + 0x215c]
mov dword [ebp - 0x1c], eax
mov eax, dword [ebp - 0x20]
mov dword [ebp - 0x28], edx
imul eax, dword [ebp - 0x1c]
xor edx, edx
mov dword [ebp - 0x20], eax
div dword [ebp - 0x28]
xor edx, edx
lea eax, [esi + eax - 1]
div esi
cmp ecx, eax
cmovb ecx, eax

loc_fffc94c8:
cmp ecx, 4
jbe short loc_fffc94f6  ; jbe 0xfffc94f6
cmp ecx, 0xa
setne dl
cmp ecx, 8
seta al
test dl, al
je short loc_fffc9527  ; je 0xfffc9527
mov eax, ecx
and eax, 0xfffffffd
cmp eax, 0xc
je short loc_fffc9527  ; je 0xfffc9527
cmp ecx, 0x10
je short loc_fffc9527  ; je 0xfffc9527
cmp ecx, 9
je short loc_fffc950d  ; je 0xfffc950d
cmp ecx, 0xb
je short loc_fffc9514  ; je 0xfffc9514

loc_fffc94f6:
cmp ecx, 0xd
je short loc_fffc951b  ; je 0xfffc951b
cmp ecx, 0xf
je short loc_fffc9522  ; je 0xfffc9522
cmp ecx, 0x10
mov eax, 0x10
cmova ecx, eax
jmp short loc_fffc9527  ; jmp 0xfffc9527

loc_fffc950d:
mov ecx, 0xa
jmp short loc_fffc9527  ; jmp 0xfffc9527

loc_fffc9514:
mov ecx, 0xc
jmp short loc_fffc9527  ; jmp 0xfffc9527

loc_fffc951b:
mov ecx, 0xe
jmp short loc_fffc9527  ; jmp 0xfffc9527

loc_fffc9522:
mov ecx, 0x10

loc_fffc9527:
imul eax, edi, 0x1055
mov byte [ebx + eax + 0x3d], cl

loc_fffc9531:
mov al, byte [ebx + 0x22d9]
test al, al
je short loc_fffc954a  ; je 0xfffc954a
imul edx, edi, 0x1055
mov byte [ebx + edx + 0x3c], al
jmp near loc_fffc96be  ; jmp 0xfffc96be

loc_fffc954a:
cmp byte [ebx + edi*2 + 0x2274], 0
jne loc_fffc9604  ; jne 0xfffc9604
cmp byte [ebx + edi*2 + 0x2275], 0
jne loc_fffc9604  ; jne 0xfffc9604
mov eax, dword [ebx + 0x20b6]
cmp eax, 0x535
je short loc_fffc95c4  ; je 0xfffc95c4
ja short loc_fffc9589  ; ja 0xfffc9589
cmp eax, 0x320
je short loc_fffc95a4  ; je 0xfffc95a4
cmp eax, 0x42b
jne loc_fffc96be  ; jne 0xfffc96be
jmp short loc_fffc95b4  ; jmp 0xfffc95b4

loc_fffc9589:
cmp eax, 0x74b
je short loc_fffc95e4  ; je 0xfffc95e4
cmp eax, 0x855
je short loc_fffc95f4  ; je 0xfffc95f4
cmp eax, 0x640
jne loc_fffc96be  ; jne 0xfffc96be
jmp short loc_fffc95d4  ; jmp 0xfffc95d4

loc_fffc95a4:
imul eax, edi, 0x1055
mov byte [ebx + eax + 0x3c], 5
jmp near loc_fffc96be  ; jmp 0xfffc96be

loc_fffc95b4:
imul eax, edi, 0x1055
mov byte [ebx + eax + 0x3c], 6
jmp near loc_fffc96be  ; jmp 0xfffc96be

loc_fffc95c4:
imul eax, edi, 0x1055
mov byte [ebx + eax + 0x3c], 7
jmp near loc_fffc96be  ; jmp 0xfffc96be

loc_fffc95d4:
imul eax, edi, 0x1055
mov byte [ebx + eax + 0x3c], 8
jmp near loc_fffc96be  ; jmp 0xfffc96be

loc_fffc95e4:
imul eax, edi, 0x1055
mov byte [ebx + eax + 0x3c], 9
jmp near loc_fffc96be  ; jmp 0xfffc96be

loc_fffc95f4:
imul eax, edi, 0x1055
mov byte [ebx + eax + 0x3c], 0xa
jmp near loc_fffc96be  ; jmp 0xfffc96be

loc_fffc9604:
mov eax, ebx
call fcn_fffc019c  ; call 0xfffc019c
mov dword [ebp - 0x1c], eax
xor ecx, ecx
imul eax, edi, 0x8c
lea esi, [ebx + eax + 0x2115]
movzx eax, byte [ebp - 0x2c]
imul edx, eax, 0x1055
lea eax, [ebx + eax*2]
mov dword [ebp - 0x30], eax
add edx, ebx
imul eax, edi, 0x1055
mov dword [ebp - 0x28], edx
add eax, ebx
mov dword [ebp - 0x20], eax

loc_fffc963d:
imul eax, ecx, 0x1d
mov edx, dword [ebp - 0x28]
cmp dword [edx + eax + 0xa], 0
je short loc_fffc968a  ; je 0xfffc968a
mov edx, dword [ebp - 0x30]
movzx eax, byte [edx + ecx + 0x2274]
imul eax, eax, 0x3e8
movzx edx, byte [esi]
imul eax, edx
movzx edx, byte [esi + 1]
mov dword [ebp - 0x38], edx
xor edx, edx
div dword [ebp - 0x38]
mov edx, dword [ebp - 0x1c]
lea eax, [edx + eax - 1]
xor edx, edx
div dword [ebp - 0x1c]
mov edx, dword [ebp - 0x20]
movzx edx, byte [edx + 0x3c]
cmp edx, eax
jae short loc_fffc968a  ; jae 0xfffc968a
mov edx, dword [ebp - 0x20]
mov byte [edx + 0x3c], al

loc_fffc968a:
inc ecx
add esi, 0x46
cmp ecx, 2
jne short loc_fffc963d  ; jne 0xfffc963d
imul eax, edi, 0x1055
add eax, ebx
mov cl, byte [eax + 0x3c]
mov dl, byte [eax + 0x3b]
cmp cl, dl
ja short loc_fffc96ba  ; ja 0xfffc96ba
movzx esi, cl
movzx ecx, dl
sub ecx, 4
cmp esi, ecx
jge short loc_fffc96be  ; jge 0xfffc96be
sub edx, 4
mov byte [eax + 0x3c], dl
jmp short loc_fffc96be  ; jmp 0xfffc96be

loc_fffc96ba:
mov byte [eax + 0x3c], 8

loc_fffc96be:
mov al, byte [ebx + 0x22dc]
test al, al
je short loc_fffc96d7  ; je 0xfffc96d7
imul edx, edi, 0x1055
mov byte [ebx + edx + 0x3f], al
jmp near loc_fffc9784  ; jmp 0xfffc9784

loc_fffc96d7:
mov eax, ebx
xor esi, esi
call fcn_fffc019c  ; call 0xfffc019c
mov ecx, eax
imul eax, edi, 0x1055
cmp dword [ebx + eax + 0xa], 0
je short loc_fffc9723  ; je 0xfffc9723
imul edx, edi, 0x8c
add edx, ebx
movzx eax, byte [edx + 0x211f]
imul eax, eax, 0x3e8
movzx esi, byte [edx + 0x2115]
imul eax, esi
movzx esi, byte [edx + 0x2116]
xor edx, edx
div esi
xor edx, edx
lea eax, [ecx + eax - 1]
div ecx
mov esi, eax

loc_fffc9723:
imul eax, edi, 0x1055
cmp dword [ebx + eax + 0x27], 0
je short loc_fffc9778  ; je 0xfffc9778
imul edx, edi, 0x8c
add edx, ebx
movzx eax, byte [edx + 0x2165]
imul eax, eax, 0x3e8
mov dword [ebp - 0x20], eax
movzx eax, byte [edx + 0x215b]
movzx edx, byte [edx + 0x215c]
mov dword [ebp - 0x1c], eax
mov eax, dword [ebp - 0x20]
mov dword [ebp - 0x28], edx
imul eax, dword [ebp - 0x1c]
xor edx, edx
mov dword [ebp - 0x20], eax
div dword [ebp - 0x28]
xor edx, edx
lea eax, [ecx + eax - 1]
div ecx
cmp esi, eax
cmovb esi, eax

loc_fffc9778:
imul eax, edi, 0x1055
mov edx, esi
mov byte [ebx + eax + 0x3f], dl

loc_fffc9784:
mov al, byte [ebx + 0x22db]
test al, al
je short loc_fffc979d  ; je 0xfffc979d
imul edx, edi, 0x1055
mov byte [ebx + edx + 0x3e], al
jmp near loc_fffc984a  ; jmp 0xfffc984a

loc_fffc979d:
mov eax, ebx
xor esi, esi
call fcn_fffc019c  ; call 0xfffc019c
mov ecx, eax
imul eax, edi, 0x1055
cmp dword [ebx + eax + 0xa], 0
je short loc_fffc97e9  ; je 0xfffc97e9
imul edx, edi, 0x8c
add edx, ebx
movzx eax, byte [edx + 0x211d]
imul eax, eax, 0x3e8
movzx esi, byte [edx + 0x2115]
imul eax, esi
movzx esi, byte [edx + 0x2116]
xor edx, edx
div esi
xor edx, edx
lea eax, [ecx + eax - 1]
div ecx
mov esi, eax

loc_fffc97e9:
imul eax, edi, 0x1055
cmp dword [ebx + eax + 0x27], 0
je short loc_fffc983e  ; je 0xfffc983e
imul edx, edi, 0x8c
add edx, ebx
movzx eax, byte [edx + 0x2163]
imul eax, eax, 0x3e8
mov dword [ebp - 0x20], eax
movzx eax, byte [edx + 0x215b]
movzx edx, byte [edx + 0x215c]
mov dword [ebp - 0x1c], eax
mov eax, dword [ebp - 0x20]
mov dword [ebp - 0x28], edx
imul eax, dword [ebp - 0x1c]
xor edx, edx
mov dword [ebp - 0x20], eax
div dword [ebp - 0x28]
xor edx, edx
lea eax, [ecx + eax - 1]
div ecx
cmp esi, eax
cmovb esi, eax

loc_fffc983e:
imul eax, edi, 0x1055
mov edx, esi
mov byte [ebx + eax + 0x3e], dl

loc_fffc984a:
mov ax, word [ebx + 0x22dd]
test ax, ax
je short loc_fffc9865  ; je 0xfffc9865
imul edx, edi, 0x1055
mov byte [ebx + edx + 0x40], al
jmp near loc_fffc98fe  ; jmp 0xfffc98fe

loc_fffc9865:
mov eax, ebx
call fcn_fffc019c  ; call 0xfffc019c
mov dword [ebp - 0x28], eax
mov dword [ebp - 0x20], 0
imul eax, edi, 0x8c
mov dword [ebp - 0x1c], 0
lea ecx, [ebx + eax + 0x2120]
movzx eax, byte [ebp - 0x2c]
imul eax, eax, 0x1055
add eax, ebx
mov dword [ebp - 0x2c], eax
mov eax, dword [ebp - 0x28]
dec eax
mov dword [ebp - 0x34], eax

loc_fffc98a0:
mov eax, dword [ebp - 0x2c]
mov edx, dword [ebp - 0x20]
cmp dword [eax + edx + 0xa], 0
je short loc_fffc98e4  ; je 0xfffc98e4
movzx eax, byte [ecx - 0xb]
mov dl, byte [ecx]
imul eax, eax, 0x3e8
and edx, 0xf
mov esi, edx
shl esi, 8
movzx edx, byte [ecx + 1]
or esi, edx
xor edx, edx
imul eax, esi
movzx esi, byte [ecx - 0xa]
div esi
xor edx, edx
add eax, dword [ebp - 0x34]
div dword [ebp - 0x28]
cmp dword [ebp - 0x1c], eax
cmovae eax, dword [ebp - 0x1c]
mov dword [ebp - 0x1c], eax

loc_fffc98e4:
add dword [ebp - 0x20], 0x1d
add ecx, 0x46
cmp dword [ebp - 0x20], 0x3a
jne short loc_fffc98a0  ; jne 0xfffc98a0
imul eax, edi, 0x1055
mov dl, byte [ebp - 0x1c]
mov byte [ebx + eax + 0x40], dl

loc_fffc98fe:
mov eax, dword [ebp - 0x24]
lea esp, [esp + 0x2c]
pop ebx
pop esi
pop edi
pop ebp
ret

loc_fffc990a:
db 0x00
db 0x00

ref_fffc990c:
dd loc_fffa0c85
dd loc_fffa0cb1
dd loc_fffa0c89
dd loc_fffa0c90
dd loc_fffa0c9d
dd loc_fffa0caa

ref_fffc9924:
dd 0x8000001d
dd 0x001a0000
dd 0x00002000

ref_fffc9930:
dd 0x00000480
dd 0x00000490
dd 0x000004a0
dd 0x000004b0

ref_fffc9940:
dd 0x000004c0
dd 0x000004d0
dd 0x000004e0
dd 0x000004f0

ref_fffc9950:
dd 0x06040200
dd 0x0e0c0a08
dd 0x6e501810
dd 0xf4f2f0c2
dd 0xfcfaf8f6
dd 0x161412fe
dd 0x82805a58
dd 0x90888684
dd 0x1a969492
db 0x1c
db 0x1e

ref_fffc9976:
db 0x04
db 0x04
db 0x02

ref_fffc9979:
db 0x0f
db 0x0f
db 0x03

ref_fffc997c:
db 'GlueAllocatePool',0x00,0x00,0x00,0x00

ref_fffc9990:
db 'install_ppi',0x00

ref_fffc999c:
dd loc_fffa2820
dd loc_fffa2850
dd loc_fffa2820
dd loc_fffa2850
dd loc_fffa282c
dd loc_fffa2838
dd loc_fffa2844

ref_fffc99b8:
dd 0x0ff0ffff
dd 0x00f0000f
dd 0x0fff0fff
dd 0x00f000ff
dd 0x00ff00f0
dd 0x00000000
dd 0x00000000
dd 0xf0000000

ref_fffc99d8:
dd 0xf00fffff
dd 0x00000fff
dd 0xffffffff
dd 0x0000000f
dd 0xffffffff
dd 0x0fffff0f
dd 0x000f0000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0x0000000f
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x0000ffff
dd 0x00000000
dd 0xffffffff
dd 0x000f00f0
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x0000ffff

ref_fffc9a4c:
dd 0x0fffffff

ref_fffc9a50:
dd 0x000fffff
dd 0xf0000000

ref_fffc9a58:
dd 0x0ff000ff
dd 0xf000000f

ref_fffc9a60:
dd 0x00020201

ref_fffc9a64:
dd 0x00000601

ref_fffc9a68:
dd fcn_fffc3a0c
dd 0x0019ffff
dd 0xff120000
dd fcn_fffc292c
dd 0x0000dd20
dd 0xff310000
dd fcn_fffbe1c8
dd 0x0001dd23
dd 0xff310000
dd fcn_fffbc4fb
dd 0x0004dd26
dd 0xff310000
dd fcn_fffb9f0c
dd 0x0019dd59
dd 0xff310000
dd fcn_fffc7efc
dd 0x0002dd29
dd 0xff310000
dd fcn_fffbee7b
dd 0x0019ffff
dd 0xff310000
dd fcn_fffbbf6c
dd 0x0003dd2c
dd 0xff310000
dd fcn_fffc17d0
dd 0x0003dd36
dd 0xff310000
dd fcn_fffb79f6
dd 0x0013dd56
dd 0xff310000
dd fcn_fffbcf00
dd 0x000bdd43
dd 0xff310000
dd fcn_fffbd31a
dd 0x0019dd4c
dd 0xff310000
dd fcn_fffb8dbb
dd 0x0019dd4c
dd 0xff310000
dd fcn_fffc010e
dd 0x0019ffff
dd 0xff310000
dd fcn_fffbedc4
dd 0x0019ffff
dd 0xff310000
dd fcn_fffbedea
dd 0x0019ffff
dd 0xff310000
dd fcn_fffbee35
dd 0x0019ffff
dd 0xff310000
dd fcn_fffbee58
dd 0x0019ffff
dd 0xff310000
dd fcn_fffbfbdd
dd 0x0019ffff
dd 0xff310000
dd fcn_fffb504d
dd 0x0019dd20
dd 0xff1c0000
dd fcn_fffb0b48
dd 0x0019dd5f
dd 0xff130000
dd fcn_fffb452c
dd 0x0018dd65
dd 0xff130000
dd fcn_fffbee8e
dd 0x0019dd5c
dd 0xff130000
dd fcn_fffb4244
dd 0x0019ffff
dd 0xff110000
dd fcn_fffb48da
dd 0x0019dd50
dd 0xff1f0000
dd fcn_fffc3e53
dd 0x0019dd52
dd 0xff170000
dd fcn_fffb42af
dd 0x00190055
dd 0xff1f0000

ref_fffc9bac:
dd fcn_fffa0d2a
dd fcn_fffa029d
dd fcn_fffa0256
dd fcn_fffa01eb

ref_fffc9bbc:
dd 0x00000000
dd 0x00000001
dd 0x00000002
dd 0x00000000
dd 0x00000000
dd 0x00000001
dd 0x00000002
dd 0x00000003
dd 0x01010001
dd 0x07010201

ref_fffc9be4:
dd 0x00020600
dd 0x03020001
dd 0x00000002

ref_fffc9bf0:
dd fcn_fffa0190
dd fcn_fffa014f
dd fcn_fffa0168
dd fcn_fffa0120
dd fcn_fffa0103
dd fcn_fffa00ea

ref_fffc9c08:
dd 0x08000100
dd 0x01010000
dd 0x01000004
dd 0x00000202
dd 0x20000006

ref_fffc9c1c:
dd 0x03000600
dd 0x01000400
dd 0x10000000
dd 0x01010100
dd 0x01000800
dd 0x04000202

ref_fffc9c34:
dd loc_fffac2d0
dd loc_fffac2aa
dd loc_fffac284
dd loc_fffac25e
dd loc_fffac235
dd loc_fffac226
dd loc_fffac1fd
dd loc_fffac1ee
dd loc_fffac2d0
dd loc_fffac2d0
dd loc_fffac2d0
dd loc_fffac2d0
dd loc_fffac2d0
dd loc_fffac2d0
dd loc_fffac2f6
dd loc_fffac1df

ref_fffc9c74:
db 0x04
db 0x06

ref_fffc9c76:
db 0x00
db 0x04

ref_fffc9c78:
dd 0x40211100
dd 0x81806141
dd 0xe1c1c0a1
dd 0xe1e1e1e1
dd 0x408040e1
dd 0x00804080

ref_fffc9c90:
dd loc_fffacd1f
dd loc_fffacd26
dd loc_fffacd2d
dd loc_fffacd34
dd loc_fffacd3b
dd loc_fffacd42
dd loc_fffacd49
dd loc_fffacd50
dd loc_fffacd57

ref_fffc9cb4:
dd 0x1c181410

ref_fffc9cb8:
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xe62d6424
dd 0x9277e09e
dd 0x8f43dc3f
dd 0x76eae589
dd 0x0010fdc6
dd 0xdc55e01c
dd 0x5effb0ab
dd 0x6cba5d29
dd 0xa43d1e64
dd 0xab5c2e0f
dd 0x7796ed16
dd 0x96023bf4
dd 0xa74c831d
dd 0x90f138c0
dd 0x17830a8a
dd 0x5ac17c47
dd 0x359ebbeb
dd 0x2b9b4512
dd 0xef584d98
dd 0x106bf7cb
dd 0x363525ad
dd 0xb3a4dfdc
dd 0xa6b9fcd8
dd 0xd21689ec
dd 0x84a3695b
dd 0xbd9c2e27
dd 0xdb3d0f44
dd 0x988158f1
dd 0xcca91d3f
dd 0xb62a6d12
dd 0xe905e4cf
dd 0x7f1fa626
dd 0xe58efeae
dd 0xcd006081
dd 0xa9119403
dd 0xbcfbd35f
dd 0x213b3bf7
dd 0x7bfcb773
dd 0xc85143f9
dd 0x0bdbff50
dd 0xa3053c90
dd 0x51d66cb7
dd 0x296f4387
dd 0xb715f99e
dd 0xfaddc989
dd 0xbb1de8a7
dd 0x39206b4d
dd 0x80174a57
dd 0xa1622ac1
dd 0xb4f4a5f0
dd 0x16dc2bc3
dd 0x50fb0954
dd 0x2e261721
dd 0x52b82c3c
dd 0x821902b8
dd 0x0d4b6c38
dd 0x1f618631
dd 0x047956f3
dd 0xd4337f5a
dd 0x591f8002
dd 0x27f28db2
dd 0xfae37369
dd 0xb3f27580
dd 0x3cdb6397
dd 0x3dee23be
dd 0x19f36408
dd 0x227f4a6a
dd 0x024603c5
dd 0xd5e062db
dd 0x6d8d4c5c
dd 0x7ff693b0
dd 0x76641be9
dd 0x9e74f41c
dd 0xe7bc7f33
dd 0x2636f2e9
dd 0x70279750
dd 0xce2355aa
dd 0x32d230ef
dd 0x22f9b468
dd 0xadd4e7a2
dd 0x936c0fed
dd 0xba0612d5
dd 0xa97c1ea7
dd 0x10e29d67
dd 0x1c4c5dc8
dd 0x83645621
dd 0xcd8b521c
dd 0xb8301817
dd 0xac7d6571
dd 0xcc41d200
dd 0x4ebdefdd
dd 0xd2917bde
dd 0x60f75acc
dd 0x7791534b
dd 0x26ea2a83
dd 0x6b74513a
dd 0xd1957b85
dd 0xc6f8f9ca
dd 0xf04fb4be
dd 0xfeb786fb
dd 0xa1dea3aa
dd 0x67fe7db6
dd 0x25d49c87
dd 0xe3d54870
dd 0x93dc1f86
dd 0x7d0c1a18
dd 0x9272e128
dd 0x68e1b876
dd 0xce284c9e
dd 0x8fa18792
dd 0x5785a340
dd 0xb6fcf198
dd 0xff7d8e4a
dd 0x0c21ee43
dd 0xe820b388
dd 0xb4443c0e
dd 0xa1e6e498
dd 0x5c426110
dd 0x1b434ef3
dd 0xbef05b91
dd 0xa6907968
dd 0x53662ac3
dd 0x6defac32
dd 0x2c11c29c
dd 0x6175cced
dd 0xb17dd3ad
dd 0x6e6a1076
dd 0x1372b1fa
dd 0x4408ed06
dd 0x49460ffd
dd 0xb49d26cb
dd 0x6a3662a5
dd 0x5e857047
dd 0xa387cd4a
dd 0x04edc81e
dd 0xfd94d8d4
dd 0x2fe48d91
dd 0x9d2356bc
dd 0x96131878
dd 0xaca3fce4
dd 0xbb312c6c
dd 0x5023b090
dd 0x3614be70
dd 0xa14dfabb
dd 0xd4cc1e83
dd 0x757a1930
dd 0xc3d16a61
dd 0x9e0d6681
dd 0x8a081fa9
dd 0xbd11c888
dd 0x1672f010
dd 0xa083f71c
dd 0x1ec02eef
dd 0xc4586ca8
dd 0x6d322b35
dd 0x56054679
dd 0x1552a0ff
dd 0x5cb7707e
dd 0xdfb55d4a
dd 0xcc76cc07
dd 0x507cf71f
dd 0x2166421a
dd 0x54be4af0
dd 0xfd42158c
dd 0x417b1f7f
dd 0x9466860b
dd 0x3a0075bf
dd 0x2055575c
dd 0xcedfe7ab
dd 0xbe85aa5f
dd 0x39d0c2e3
dd 0x851c19df
dd 0x39a35a3f
dd 0x3fb10d7d
dd 0x20b14899
dd 0x703b7f08
dd 0x8a7d9dd1
dd 0x33235565
dd 0xbd3d2e57
dd 0xa48c2726
dd 0x0d5e2e13
dd 0xae421ff9
dd 0x8784a224
dd 0xf66c1510
dd 0x057627aa
dd 0x8fb0cb41
dd 0x4289975a
dd 0xb181adfa
dd 0x59f2059a
dd 0xe86feb05
dd 0x84222fc1
dd 0x319b3ce9
dd 0xe1e243b8
dd 0x3b0bcc1a
dd 0x70396f00
dd 0x5caff44d
dd 0xe96961b3
dd 0xad73f692
dd 0x8b841a2d
dd 0xf5838839
dd 0xec9c9d04
dd 0xcc2b5562
dd 0xf8ca2549
dd 0xa9c52ff8
dd 0x3b2fde68
dd 0x3d4dc7f0
dd 0xa57387d0
dd 0x051199ad
dd 0x5f0ce4fc
dd 0xd830fbb7
dd 0x90abeb8f
dd 0x96d9cdbb
dd 0x58f80a80
dd 0x0baaca36
dd 0x81a23623
dd 0x77127614
dd 0xaa8382cd
dd 0x0922fbca
dd 0xd84d37e1
dd 0x721297df
dd 0x160f3b3a
dd 0x10a1ecdc
dd 0x151c92f4
dd 0xc1fdcdab
dd 0x261c45cc
dd 0xfeddd2da
dd 0xfc3cb1c1
dd 0x6639641f
dd 0x2c011892
dd 0x7108bee2
dd 0x8545e0b9
dd 0x7dd36dab
dd 0x07d91950
dd 0x1520adcb
dd 0xf84aa939
dd 0x07d9bb2d
dd 0xdf1ed826
dd 0xaee3c814
dd 0x1dca1e81
dd 0xc8e9f486
dd 0x933d306a
dd 0xaab7103d
dd 0xa8be37be
dd 0x49612f3a
dd 0xb0cf28e5
dd 0xf9648902
dd 0x106d7c11
dd 0xf32e1813
dd 0x21af36ef
dd 0xe695e4c4
dd 0x7ee1831d
dd 0x2aeda467
dd 0x99d0c655
dd 0x3f0691ab
dd 0xcd68f7c1
dd 0xb469a20e
dd 0x8557aef0
dd 0x3eb0e373
dd 0x0853ac31
dd 0xe5bded62
dd 0x3eddb0dd
dd 0x6bbf1caf
dd 0x2119c3d9
dd 0xe1732350
dd 0x55456c75
dd 0xf6119375
dd 0x498dd1ad
dd 0x13f80916
dd 0xb97f9f5e
dd 0x921d9f4c
dd 0xabdee367
dd 0x1d6bb8bf
dd 0xd165a3be
dd 0xd8b41598
dd 0xa20e1809
dd 0xefd5c8ce
dd 0x18935c80
dd 0xdf1911f9
dd 0xc9e449eb
dd 0xb887a4d7
dd 0x4a324f6f
dd 0x533e8031
dd 0x1c21c074
dd 0xa95f1ea5
dd 0x765b320a
dd 0x839d7dfb
dd 0xc7d3aa93
dd 0xe534ae3d
dd 0xbe8592c8
dd 0x068457e6
dd 0x89b94fa3
dd 0xd522ad02
dd 0x7e7db0b7
dd 0x2c5b896f
dd 0x9f8ecb37
dd 0x05b983ff
dd 0x3fe9b25f
dd 0x34a6215b
dd 0x0592ba34
dd 0xd564f85a
dd 0x156c426d
dd 0x25ad5460
dd 0xe7b5e8b7
dd 0xa73285c6
dd 0x5ad8d838
dd 0x27b42d36
dd 0xcc806ad1
dd 0x157a058a
dd 0x7297735a
dd 0xffd6df8d
dd 0xff96f7a2
dd 0x155b27ea
dd 0x84708101
dd 0x979fd78b
dd 0x49797d0c
dd 0x0dc93e3c
dd 0x20287332
dd 0xed759f88
dd 0xe5068529
dd 0xb83aa781
dd 0xc38b302c
dd 0x57b54075
dd 0xac810692
dd 0xb0d493e7
dd 0x4adda486
dd 0x0665ce2e
dd 0xb2a9c003
dd 0xafacc4ce
dd 0x4d5e906d
dd 0xb3d52fab
dd 0xe6962c6b
dd 0x850f4dd1
dd 0x5021656c
dd 0x5df6c06b
dd 0x9255125b
dd 0x2363c478
dd 0x188b715c
dd 0xe8b884b0
dd 0x5e6d0b9a
dd 0x1f0051e1
dd 0xd2d35d4c
dd 0xbfeaecbe
dd 0xc84bb0ad
dd 0x67a232d6
dd 0x99001587
dd 0xbf4313e1
dd 0x74f64061
dd 0x2c1fc562
dd 0xb6fe8ca6
dd 0x5226a239
dd 0xf5198574
dd 0x61b51dca
dd 0x51dcecd3
dd 0xbadbe596
dd 0xebe3e84a
dd 0x772bfdfc
dd 0x03656ac5
dd 0xa7c36e91
dd 0x6cd32cf0
dd 0xc3f699dd
dd 0x7d5aba01
dd 0x51e38e82
dd 0x23103a98
dd 0x20298b9d
dd 0x19436510
dd 0x63ad7e6c
dd 0x8bc2b33f
dd 0x27079917
dd 0x8bd5be78
dd 0xf2403bfa
dd 0x780ebdb6
dd 0x94c53b64
dd 0x6241c2e2
dd 0x5bfb081e
dd 0x6799e88f
dd 0xc997b7d1
dd 0x466ac8b1
dd 0xbf5909da
dd 0x497ea39f
dd 0x402ffb48
dd 0xd7470c2d
dd 0x8510aba9
dd 0x6c52a1c9
dd 0x812ca967
dd 0x031f7ab4
dd 0xd32fe890
dd 0x36ae6de5
dd 0x083dcde4
dd 0x99a7f12f
dd 0xe44864a7
dd 0x02b75fff
dd 0xf25dda35
dd 0x7679ff4f
dd 0xed421e01
dd 0xd9c2cfa1
dd 0xd36b4e82
dd 0x5315d908
dd 0xc7ebcb2a
dd 0xb6f3e4c1
dd 0xf5bfbae9
dd 0x3f4a2a96
dd 0x64d8bd5a
dd 0x19acd70d
dd 0xf62fcdd9
dd 0x5de99cdf
dd 0x32f3b7cb
dd 0x2c020578
dd 0x4e9bafb8
dd 0x74919a08
dd 0xaba33e91
dd 0xa6bd2254
dd 0x2435a9b9
dd 0x47e2a1b4
dd 0xe837a28e
dd 0xe113f1b0
dd 0x7654bd79
dd 0x05537a6c
dd 0x77be1a5c
dd 0x4c7492c9
dd 0x9086bfb0
dd 0x257adc18
dd 0xf4787fc1
dd 0xe3fb6d53
dd 0x9525e589
dd 0x445a65bc
dd 0x833f7d08
dd 0x69cf1f7e
dd 0x9a6372e1
dd 0xceedb52e
dd 0x31032997
dd 0xd1c36828
dd 0x132772d6
dd 0x0a166972
dd 0x89beaf3b
dd 0x8d780fbc
dd 0x8aea5392
dd 0x58347a41
dd 0x1e381ec2
dd 0xcc6280c8
dd 0xee0863e1
dd 0x976e2dd2
dd 0x8c6ee6e2
dd 0xa0ca57cd
dd 0x95114a7d
dd 0x3c096704
dd 0xa941769d
dd 0x2de20c05
dd 0x0bf8f812
dd 0x22779d6c
dd 0x94e12e8f
dd 0x5ce40299
dd 0xea1b55b0
dd 0x9ebec05d
dd 0xe076cd2b
dd 0x8fef5648
dd 0x6a284c65
dd 0xa790b705
dd 0xf0b19997
dd 0x0d8ca8af
dd 0x17440419
dd 0xef4f702f
dd 0x33cbcbb1
dd 0x83d60f26
dd 0x48988397
dd 0x0fed7f53
dd 0xb5acbb67
dd 0xc031c73f
dd 0x5364d9ef
dd 0xa6dbd12d
dd 0x82174a6c
dd 0xccf8e7ab
dd 0xc473c036
dd 0xcff493d8
dd 0xad9afc3b
dd 0x316a24e8
dd 0x1842bea4
dd 0x4cc0c82e
dd 0x28ccd91e
dd 0xd7311b5d
dd 0x50a89860
dd 0x5f489dde
dd 0xcd948204
dd 0xa7d1bd08
dd 0xd65a48cb
dd 0x496580cf
dd 0xb073cf3d
dd 0x074a746c
dd 0x82f2180a
dd 0xf1fddb82
dd 0x165b5973
dd 0x423880b0
dd 0xc24f881e
dd 0x67ff97cd
dd 0xb213cbca
dd 0xdc0b5541
dd 0x3bd80f51
dd 0xa23702f0
dd 0xef4e1455
dd 0x2bddd445
dd 0xd5b07d23
dd 0xfc278d4c
dd 0xc1531ba4
dd 0x7057aad9
dd 0xe355bfa2
dd 0x96b626f3
dd 0x66bf640d
dd 0x5007c7d2
dd 0x5f0fe9db
dd 0xc9dbd711
dd 0xb1834828
dd 0xf68834a3
dd 0x14b3daf7
dd 0xec32f003
dd 0xbc312489
dd 0xb0d51652
dd 0x7f010672
dd 0xfeb34a92
dd 0xff691803
dd 0x771d876a
dd 0x07e8ae83
dd 0xb5fd783d
dd 0xdb9d5bf3
dd 0x7425fcca
dd 0x99272cce
dd 0x6b9eb71b
dd 0xabe68dd5
dd 0x0fe07b74
dd 0x42af28a1
dd 0xc9f833d2
dd 0x6da99271
dd 0x1f925f68
dd 0xd4639d4b
dd 0x014ddf1b
dd 0x400d17ac
dd 0x14cdded6
dd 0x41f8a60e
dd 0x6f49f862
dd 0x3263d563
dd 0x8a47c2ca
dd 0x06b0a8e5
dd 0xcd39fb50
dd 0x059a1486
dd 0x90117d7f
dd 0x36105028
dd 0x89aeca81
dd 0xb7e18982
dd 0x6e72f3fe
dd 0x4cc9f7fe
dd 0xa0f7dca8
dd 0xac5b81ee
dd 0x4159e1a1
dd 0x3ba369b4
dd 0xc3aa7c08
dd 0xfe184a44
dd 0xef141f59
dd 0x75a31996
dd 0xb1cc5a82
dd 0x15319a36
dd 0x3021d345
dd 0x90309c3b
dd 0x63e338e8
dd 0x53b487d8
dd 0x187ce31e
dd 0xccaa2303
dd 0xa54880c6
dd 0xccd6d974
dd 0x20acf545
dd 0x14eac595
dd 0x20ffee87
dd 0xb927846f
dd 0x3ef88318
dd 0x216fbf48
dd 0x9ea56594
dd 0x082711bd
dd 0x5e8c91b9
dd 0x106c1ad8
dd 0x8ffa7362
dd 0x8509b7fe
dd 0xfb71234b
dd 0x34ed7f97
dd 0x634cf567
dd 0x1dc47701
dd 0xf330466a
dd 0x7c859571
dd 0xf6d5621a
dd 0x66835711
dd 0xf06d91e5
dd 0xc268dc9d
dd 0xffb3ac26
dd 0xd9fd7d75
dd 0xe3fe7b15
dd 0x297ca89c
dd 0x1618af7f
dd 0xe86ecc2a
dd 0xf747ee04
dd 0x05a4b49d
dd 0xcd2f17bc
dd 0x2f3e5f99
dd 0xe29eb314
dd 0xc0f199cd
dd 0x2eb72e9a
dd 0x679e17a7
dd 0xb9fbf1a3
dd 0xf71fe032
dd 0x30c45f26
dd 0x4003a340
dd 0xe7c1f65c
dd 0x9667a299
dd 0xcbf036af
dd 0x06ae5f59
dd 0x2ecf8b4b
dd 0xb39372af
dd 0x1bff906c
dd 0xab6b7881
dd 0xce028da8
dd 0xe58fdecd
dd 0xa89ef0ef
dd 0x65176b82
dd 0xa2bf7a33
dd 0x859f747b
dd 0x3e35a09e
dd 0xcb740fba
dd 0x0da22460
dd 0x84aab6b8
dd 0x52edd201
dd 0x4e7d70a6
dd 0x8849b37f
dd 0xb205469f
dd 0xc85de7c4
dd 0x57c838bb
dd 0xe8c5c39c
dd 0xa5b49228
dd 0x113b5fdf
dd 0x4df6a80d
dd 0x85a0213b
dd 0x5eed2888
dd 0xe155ee02
dd 0xb1a06c66
dd 0x96710c3b
dd 0x035f6787
dd 0xc817c40b
dd 0x87af9931
dd 0x357f1904
dd 0xdc3994e1
dd 0xd7941f52
dd 0xe095ce8c
dd 0x484da8ec
dd 0x9ca38027
dd 0x655f400f
dd 0x40699428
dd 0xb41b59d7
dd 0x60289f97
dd 0x50c177f3
dd 0xef491a3d
dd 0x4e58b2a5
dd 0x4233594f
dd 0xfb440526
dd 0xaffeb4c7
dd 0x9c266dab
dd 0x669df73b
dd 0xce94a948
dd 0xe8a8e88c
dd 0xbc20b42b
dd 0x89b4ab29
dd 0xa7c47b8d
dd 0xbb66b553
dd 0x2cc60384
dd 0x518068ca
dd 0xfd112e13
dd 0x32e0f52c
dd 0x0cf2ec8c
dd 0xcf106f9f
dd 0x2be33a9f
dd 0x5c65e297
dd 0xaba2caa5
dd 0xc50e8fed
dd 0x27988382
dd 0xa58645bd
dd 0x88ca2941
dd 0x540395dd
dd 0xc7d8f2f2
dd 0x0daf4d98
dd 0x51694ac9
dd 0x6349ed7b
dd 0x3e942ddb
dd 0x57825c49
dd 0x5c068dd7
dd 0x82f0caef
dd 0x1aaacf21
dd 0x7cecb458
dd 0xaba4a63b
dd 0x6c741df7
dd 0x62c8a001
dd 0x62a75291
dd 0x21de7fe9
dd 0x8889ae85
dd 0xc261e2e6
dd 0x2d04adee
dd 0x3bb453a3
dd 0xf74b73eb
dd 0x534491ab
dd 0x53c00167
dd 0x1a7cac17
dd 0xf510aaf0
dd 0x22fc7de7
dd 0x86ff6032
dd 0x980cbcdd
dd 0x13d6b8f5
dd 0x65cfaf77
dd 0x031789ef
dd 0xb23ed6ec
dd 0xc5aabe1b
dd 0xd6248a35
dd 0xdba4184a
dd 0xbd015ce6
dd 0x33872693
dd 0x0e77cb9b
dd 0x76b113e6
dd 0x41d133df
dd 0xea3792c1
dd 0x1bd628a4
dd 0x98d5fb31
dd 0xff8db40f
dd 0xcf3e8afd
dd 0xb1eb528b
dd 0xf3b0e323
dd 0xf4545e5e
dd 0x565d9f66
dd 0xb9e9f5ce
dd 0xe5a11763
dd 0xef1c86c2
dd 0x646aebc3
dd 0x7cad4896
dd 0x41412038
dd 0x7c7c25bf
dd 0x94262a35
dd 0x1501ba50
dd 0x39404229
dd 0x1967d74d
dd 0xeac949b4
dd 0x871c7294
dd 0x173b2a6d
dd 0x4454f5bc
dd 0x870ae8a4
dd 0x7d28d0a8
dd 0xbed2dce0
dd 0x51ae36a0
dd 0xeb88bf31
dd 0xcf888a43
dd 0x5f1457f0
dd 0xe6d9fb0d
dd 0xb9326a3b
dd 0x34e5790f
dd 0xd14ccedd
dd 0xfd04f607
dd 0x623759a9
dd 0x48e17204
dd 0xb0505740
dd 0xbb539cc7
dd 0xddd4f1e7
dd 0x5a8d3b94
dd 0x3c8197c0
dd 0xee1bc36c
dd 0x611654ab
dd 0x440bafbb
dd 0x946a05ac
dd 0x86438def
dd 0x0c669189
dd 0xebc1d1e1
dd 0x9d718190
dd 0xe06ac220
dd 0xc377b1ed
dd 0x65b0cc7e
dd 0xa1ede64f
dd 0x8d462218
dd 0x6ae10101
dd 0x51fc9e75
dd 0xc51a66b5
dd 0x1529bdc0
dd 0xf74725c0
dd 0xe73b39b2
dd 0xee50ed6b
dd 0x92753b59
dd 0x1cda2c46
dd 0xe3ac16ec
dd 0xfd3543ce
dd 0x2cdbe4b1
dd 0x93b40fa2
dd 0xe07b2526
dd 0xee43dbbb
dd 0xf80b30bf
dd 0x5c52bb3a
dd 0xd988f934
dd 0x77d7d757
dd 0x08f86b8d
dd 0xd95bc944
dd 0xbbed3bf0
dd 0xf6c452ab
dd 0x39ebfbab
dd 0x0694c977
dd 0x96893760
dd 0xdbc37caa
dd 0xe2861bef
dd 0x583981f7
dd 0xf22dc69d
dd 0x66a0bd43
dd 0x286d6cc8
dd 0x430c282f
dd 0x1ed1f8f6
dd 0xebd4e1fe
dd 0xdd3c4f2e
dd 0x75add30b
dd 0x1ff1fc98
dd 0x43f11a51
dd 0xc9e44a99
dd 0x9c17b379
dd 0x59a245f0
dd 0x4ee4dedb
dd 0xdd714c46
dd 0x5f98b48a
dd 0x0e0f1930
dd 0xfff5a3a5
dd 0x4a6d1274
dd 0xcc864241
dd 0xe52262cd
dd 0xbf7e01eb
dd 0x41f12c2e
dd 0x19421fc5
dd 0xe5a82041
dd 0x9a6e3772
dd 0x5ce8d1c9
dd 0x3a1a4910
dd 0x47ce44b8
dd 0x92df3ce9
dd 0x98cdb455
dd 0x60d6839c
dd 0xef5c70b4
dd 0xfc69a290
dd 0xea0488b0
dd 0x22090032
dd 0x6318fbc0
dd 0x8a6f0c3d
dd 0x68b57f99
dd 0xf0cdc0b9
dd 0xa83fc65d
dd 0x7685e1a0
dd 0x66b54974
dd 0xd1109ca4
dd 0x85bbfb09
dd 0x2abadc30
dd 0x83d1581e
dd 0xe16db81a
dd 0x6f32f57a
dd 0xc29cc238
dd 0xe5e0fc62
dd 0xca8fdba5
dd 0xce277e4f
dd 0x949afc6c
dd 0x173efbfa
dd 0x9aca997d
dd 0xfbfec359
dd 0xc2a09a4f
dd 0x94a3bb50
dd 0xc402b90a
dd 0x9edf0e68
dd 0xc8aca622
dd 0x1710d1af
dd 0xa1b506ea
dd 0xf9da4264
dd 0x616ab628
dd 0x81b82b53
dd 0xfb9173fb
dd 0x93c26836
dd 0x0245e826
dd 0x35aaa5b4
dd 0xdc829370
dd 0x096589b5
dd 0x1b74ea79
dd 0xa7033e17
dd 0x4a42d312
dd 0xb5376de8
dd 0xa03be0ef
dd 0x0a0aeb75
dd 0x40a61b3b
dd 0xcd8c79e7
dd 0xafc92cee
dd 0xf62d4d38
dd 0xd7b15bc3
dd 0x2a71fb86
dd 0xa29b105c
dd 0xc7e07d79
dd 0x590d61b5
dd 0xb1f772d3
dd 0xc9460b99
dd 0x97f0e256
dd 0xe92e26c8
dd 0xe25b37a4
dd 0x6c3e03d5
dd 0x8a7e0276
dd 0x6e099752
dd 0x96caeea3
dd 0x153f339c
dd 0x720ddc4e
dd 0xf6fecebc
dd 0xeda7c68b
dd 0xffbbcd5b
dd 0xdc4f11ef
dd 0x1111f5a3
dd 0xb6d10a9c
dd 0xe32b0c09
dd 0xb2529b70
dd 0xf1bdcf0c
dd 0xbe1627fd
dd 0x8ccecbb1
dd 0x700358fa
dd 0xb3d0715c
dd 0x554f6cfa
dd 0x4c76eca0
dd 0x5fe9a0d2
dd 0x16edc003
dd 0x7c50c6d4
dd 0x256f0fb4
dd 0x401937c2
dd 0x9005221d
dd 0xa480800f
dd 0xc90ac255
dd 0x551175f9
dd 0x708dd87f
dd 0xff973486
dd 0x55bb859e
dd 0x7cc2260d
dd 0x0e429ad5
dd 0x2ca2bdb8
dd 0x4b3a0180
dd 0xfface687
dd 0x16d9917d
dd 0xe3af1eda
dd 0x8bbfd80f
dd 0xa3b5e6a6
dd 0x413bc876
dd 0xfe4d6ddb
dd 0xfe44d8b3
dd 0xeaf36f0a
dd 0xa5286374
dd 0x964dd2c8
dd 0xd0e2ecea
dd 0xe09c9036
dd 0x3a51560d
dd 0x92c49eea
dd 0xd6ccb310
dd 0x7a2fd9ce
dd 0x7e7a3ce3
dd 0x80958fc0
dd 0x61657b1b
dd 0xe56442d1
dd 0xf0a4ec30
dd 0x24b38ef6
dd 0x37b3e7cd
dd 0x4c2734fa
dd 0xc9c4447f
dd 0xf4b88d96
dd 0x61171fc2
dd 0x7430b646
dd 0x569e7230
dd 0x7ff44e14
dd 0x21b84b87
dd 0x13f3b925
dd 0x2c60f538
dd 0xed4cd179
dd 0xf61f2750
dd 0xbe082d26
dd 0x429c922e
dd 0x646abc2f
dd 0x9a81e6cc
dd 0x1620fe65
dd 0x63574cbd
dd 0x55678f18
dd 0xe93dfc33
dd 0xe177814b
dd 0xe0967c2f
dd 0xd8c4b4c3
dd 0xa4fd6f89
dd 0xf8b04b14
dd 0xadcf592b
dd 0xeff9fc17
dd 0xa1fbe529
dd 0x241b57a6
dd 0x29bc387e
dd 0xd31abdca
dd 0x8d15129e
dd 0x4cfe025f
dd 0x91654efd
dd 0xf873cb55
dd 0x0bc6135b
dd 0x0d239410
dd 0xc4f746e5
dd 0xf4654869
dd 0x3a8e380a
dd 0x28b67bea
dd 0x8660ef76
dd 0x981ee385
dd 0x7ca0168f
dd 0xc0a98e40
dd 0x08a9bff6
dd 0x665203c8
dd 0x716d41fe
dd 0x6bc960eb
dd 0x7d932285
dd 0x8413d342
dd 0xe09dfff6
dd 0x22964855
dd 0x70fb590b
dd 0xac783b8b
dd 0x7ae9a124
dd 0xac9814e5
dd 0x138e2084
dd 0x9fae626d
dd 0x79c54fa7
dd 0x1259bac0
dd 0x18b94dbe
dd 0x6674172a
dd 0xb40a02fe
dd 0x5bf7c34b
dd 0x82f5aa56
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0x20202020
dd 0x20202020
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x20202020
dd 0x20202020
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0xffffffff
dd 0xffffffff
dd 0x20202020
dd 0x20202020
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xdfdfdfdf
dd 0xdfdfdfdf
dd 0x00000000
dd 0x00000000
dd 0x20202020
dd 0x20202020
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0xbfbfbfbf
dd 0xbfbfbfbf
dd 0x40404040
dd 0x40404040
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x40404040
dd 0x40404040
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0x80808080
dd 0x80808080
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x00000000
dd 0x00000000
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x80808080
dd 0x80808080
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x7f7f7f7f
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0xffffffff
dd 0xffffffff
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0xfefefefe
dd 0xfefefefe
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfefefefe
dd 0xfefefefe
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x01010101
dd 0x01010101
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfdfdfdfd
dd 0xfdfdfdfd
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x02020202
dd 0x02020202
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xffffffff
dd 0xffffffff
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0x04040404
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0xfbfbfbfb
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x08080808
dd 0x08080808
dd 0x00000000
dd 0x00000000
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x08080808
dd 0x08080808
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0xf7f7f7f7
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x10101010
dd 0x10101010
dd 0xefefefef
dd 0xefefefef
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x10101010
dd 0x10101010
dd 0x00000000
dd 0x00000000
dd 0xefefefef
dd 0xefefefef
dd 0xffffffff
dd 0xffffffff
dd 0x10101010
dd 0x10101010
dd 0xefefefef
dd 0xefefefef
dd 0xffffffff
dd 0xffffffff
dd 0xefefefef
dd 0xefefefef
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x10101010
dd 0x10101010
dd 0xffffffff
dd 0xffffffff
dd 0x00000000
dd 0x00000000
dd 0xefefefef
dd 0xefefefef
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0xffffffff
dd 0x10101010
dd 0x10101010
dd 0xffffffff
dd 0xffffffff
dd 0x10101010
dd 0x10101010
dd 0xefefefef
dd 0xefefefef
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xefefefef
dd 0xefefefef
dd 0xefefefef
dd 0xefefefef
dd 0xffffffff
dd 0xffffffff

ref_fffcecb8:
dd 0x01000000
dd 0x02020101
dd 0x03030302
dd 0x05040404
dd 0xb9060505
dd 0x070707dc
dd 0x09080808
dd 0xb40ab8b8
dd 0xb7b50bb6
dd 0x0dddba0c
dd 0xbc0edbb8
dd 0xe0bd0fdf
dd 0x11debb10
dd 0xc012e4c1
dd 0xedca13e3
dd 0x15e2bf14
dd 0xc316e5c2
dd 0xe7c417e6
dd 0x19eac718
dd 0xcd1aebc8
dd 0xecc91bf0
dd 0x1deecb1c
dd 0x1e1eefcc
dd 0x1f1f1f1e
dd 0x21202020
dd 0xd3222121
dd 0xf7d423f6
dd 0x25f9d624
dd 0xd726f8d5
dd 0x3e3e3efa
dd 0x403f3f3f
dd 0x75754040
dd 0x76767675
dd 0x78777777
dd 0x79797878
dd 0x7a7a7a79
dd 0x7c7b7b7b
dd 0x7d7d7c7c
dd 0x7e7e7e7d
dd 0x007f7f7f

ref_fffced58:
dd 0x0064000a
dd 0x271003e8

ref_fffced60:
dd 0x00000102

ref_fffced64:
dd 0x1c181410

ref_fffced68:
dd loc_fffb1a9f
dd loc_fffb1a9a
dd loc_fffb1aa6
dd loc_fffb1abe
dd loc_fffb1aab
dd loc_fffb1ab0
dd loc_fffb1ab5

ref_fffced84:
dd loc_fffb1e18
dd loc_fffb1e1d
dd loc_fffb1e24
dd loc_fffb1e33
dd loc_fffb1e14
dd loc_fffb1e29
dd loc_fffb1e2e
dd loc_fffb1e3d
dd loc_fffb1e38
dd loc_fffb1e46

ref_fffcedac:
db 0x01
db 0x00
db 0x01

ref_fffcedaf:
db 0x00
dd 0x00000100

ref_fffcedb4:
dd 0xffff0fff
dd 0x0000ffff

ref_fffcedbc:
dd 0xffff0fff
dd 0x0000ffff

ref_fffcedc4:
dd loc_fffb70d5
dd loc_fffb70cf
dd loc_fffb70f4
dd loc_fffb70e6
dd loc_fffb712b
dd loc_fffb710f
dd loc_fffb7184
dd loc_fffb715d
dd loc_fffb71b4
dd loc_fffb719c
dd loc_fffb71be
dd loc_fffb7218

ref_fffcedf4:
dd loc_fffb7426
dd loc_fffb7485
dd loc_fffb7384
dd loc_fffb7485
dd loc_fffb736f
dd loc_fffb7485
dd loc_fffb7445
dd loc_fffb7437
dd loc_fffb736f

ref_fffcee18:
dd 0x00002c01

ref_fffcee1c:
dd loc_fffb8a18
dd loc_fffb89e5
dd loc_fffb89f1
dd loc_fffb89fd
dd loc_fffb8a09

ref_fffcee30:
dd loc_fffb8a46
dd loc_fffb8a4a
dd loc_fffb8a4f
dd loc_fffb8a54
dd loc_fffb8a59

ref_fffcee44:
dd 0x08080808
dd 0x0a0a0808
dd 0x0a0a0a0a
dd 0x0c0c0c0c
dd 0x0e0e0c0c
dd 0x0e0e0e0e
dd 0x10101010
dd 0x08081010
dd 0x08080808
dd 0x0a0a0a0a
dd 0x0c0c0a0a
dd 0x0c0c0c0c
dd 0x0e0e0e0e
dd 0x10100e0e
dd 0x10101010

ref_fffcee80:
dd 0x08080808
dd 0x0a0a0808
dd 0x0a0a0a0a
dd 0x0c0c0c0c
dd 0x0e0e0c0c
dd 0x0e0e0e0e
dd 0x10101010
dd 0x08081010
dd 0x08080808
dd 0x0a0a0a0a
dd 0x0c0c0a0a
dd 0x0c0c0c0c
dd 0x0e0e0e0e
dd 0x10100e0e
dd 0x10101010

ref_fffceebc:
db 'ovoooofskkkkaqffff\nbbbbWl^^^^ovoooofskkkkaqffff\nbbbbWl^^^^'

ref_fffceef8:
dd 0x08080808
dd 0x0a0a0808
dd 0x0a0a0a0a
dd 0x0c0c0c0c
dd 0x0e0e0c0c
dd 0x0e0e0e0e
dd 0x10101010
dd 0x08081010
dd 0x08080808
dd 0x0a0a0a0a
dd 0x0c0c0a0a
dd 0x0c0c0c0c
dd 0x0e0e0e0e
dd 0x10100e0e
dd 0x10101010

ref_fffcef34:
dd 0x6f6f726f
dd 0x6f6b6f6f
dd 0x6b6b6b6b
dd 0x6c666c66
dd 0x68626c6c
dd 0x68686862
dd 0x655e655e
dd 0x130e6565
dd 0x0c0c0c0c
dd 0x0f0b130f
dd 0x17120f0f
dd 0x1212120d
dd 0x150f1b15
dd 0x1f181515
dd 0x18181811

ref_fffcef70:
dd loc_fffba1ba
dd loc_fffba1be
dd loc_fffba1c3
dd loc_fffba1c8
dd loc_fffba1cd

ref_fffcef84:
dd 0x08080808
dd 0x0a0a0808
dd 0x0a0a0a0a
dd 0x0a0a0a0a
dd 0x0c0c0a0a
dd 0x0c0c0c0c
dd 0x0d0d0d0d
dd 0x0e0e0d0d
dd 0x0e0e0e0e
dd 0x0f0f0f0f
dd 0x10100f0f
dd 0x10101010
dd 0x10101010
dd 0x12121010
dd 0x12121212
dd 0x13131313
dd 0x14141313
dd 0x14141414
dd 0x15151515
dd 0x08081515
dd 0x08080808
dd 0x0a0a0a0a
dd 0x0a0a0a0a
dd 0x0a0a0a0a
dd 0x0c0c0c0c
dd 0x0d0d0c0c
dd 0x0d0d0d0d
dd 0x0e0e0e0e
dd 0x0f0f0e0e
dd 0x0f0f0f0f
dd 0x10101010
dd 0x10101010
dd 0x10101010
dd 0x12121212
dd 0x13131212
dd 0x13131313
dd 0x14141414
dd 0x15151414
dd 0x15151515

ref_fffcf020:
dd 0x08080808
dd 0x0a0a0808
dd 0x0a0a0a0a
dd 0x0a0a0a0a
dd 0x0c0c0a0a
dd 0x0c0c0c0c
dd 0x0d0d0d0d
dd 0x0e0e0d0d
dd 0x0e0e0e0e
dd 0x0f0f0f0f
dd 0x10100f0f
dd 0x10101010
dd 0x10101010
dd 0x12121010
dd 0x12121212
dd 0x13131313
dd 0x14141313
dd 0x14141414
dd 0x15151515
dd 0x08081515
dd 0x08080808
dd 0x0a0a0a0a
dd 0x0a0a0a0a
dd 0x0a0a0a0a
dd 0x0c0c0c0c
dd 0x0d0d0c0c
dd 0x0d0d0d0d
dd 0x0e0e0e0e
dd 0x0f0f0e0e
dd 0x0f0f0f0f
dd 0x10101010
dd 0x10101010
dd 0x10101010
dd 0x12121212
dd 0x13131212
dd 0x13131313
dd 0x14141414
dd 0x15151414
dd 0x15151515

ref_fffcf0bc:
db 'ivooooctkkkkasjjjj]qggggXoccccWobbbbTm````Ql^^^^Pk]]]]KjZZZZGhWWWWEgVVVVBfSSSSivooooctkkkkasjjjj]qggggXoccccWobbbbTm````Ql^^^^Pk]]]]KjZZZZGhWWWWEgVVVVBfSSSS'

ref_fffcf158:
db 'llplllhhlhhhffkfffcchccc__e___^^d^^^[[b[[[YY`YYYXX_XXXTT\TTTPPYPPPOOXOOOMMVMMMuuxuuurrvrrrqqvqqqootooommsmmmllrllljjqjjjiipiiihhphhhffnfffddmdddcclcccbbkbbb'

ref_fffcf1f4:
dd loc_fffbb758
dd loc_fffbb8bc
dd loc_fffbb945
dd loc_fffbb9ce
dd loc_fffbba5e
dd loc_fffbba9a
dd loc_fffbbacf
dd loc_fffbbb37
dd loc_fffbbbc0
dd loc_fffbbc60
dd loc_fffbbd00
dd loc_fffbbd2f
dd loc_fffbb749

ref_fffcf228:
dd 0x06040200

ref_fffcf22c:
dd 0x18100800

ref_fffcf230:
dd 0x18100800

ref_fffcf234:
dd 0x0c080400

ref_fffcf238:
dd 0x0c080400

ref_fffcf23c:
dd 0x04030201
dd 0x06000500
dd 0x00000700

ref_fffcf248:
dd 0x00400020
dd 0x00800060
dd 0x00c000a0
dd 0x010000e0
dd 0x01400120
dd 0x01800160
dd 0x01c001a0
dd 0x020001e0
db 0x00

ref_fffcf269:
db 0x04
db 0x01
db 0x02

ref_fffcf26c:
dd 0x00000100

ref_fffcf270:
dd loc_fffbfa88
dd loc_fffbfaca
dd loc_fffbfb16
dd loc_fffbfb05
dd loc_fffbfb16

ref_fffcf284:
dd loc_fffbfb4f
dd loc_fffbfb7a
dd loc_fffbfbc6
dd loc_fffbfbb5
dd loc_fffbfbc6

ref_fffcf298:
db ' $(,'

ref_fffcf29c:
dd 0x1c181410

ref_fffcf2a0:
db ' $(,'

ref_fffcf2a4:
db ' $(,'

ref_fffcf2a8:
dd 0x1c181410

ref_fffcf2ac:
dd 0x3c3c3c3c
dd 0x1e781e78
dd 0x1e781e78
dd 0x3c3c0000
dd 0x00000000
dd 0x1e781e78
dd 0x3c3c3c3c
dd 0x1e781e78
dd 0x1e781e78
dd 0x3c3c0000
dd 0x1e780000
dd 0x1e780000

ref_fffcf2dc:
dd 0x3c3c3c3c
dd 0x1e781e78
dd 0x1e781e78
dd 0x3c3c0000
dd 0x00000000
dd 0x1e781e78
dd 0x3c3c3c3c
dd 0x1e781e78
dd 0x1e781e78
dd 0x3c3c0000
dd 0x1e780000
dd 0x1e780000

ref_fffcf30c:
dd 0x3c3c3c3c
dd 0x1e3c1e3c
dd 0x1e3c1e3c
dd 0x3c3c0000
dd 0x00000000
dd 0x1e3c1e3c
dd 0x3c3c3c3c
dd 0x1e3c1e3c
dd 0x1e3c1e3c
dd 0x3c3c0000
dd 0x1e3c0000
dd 0x1e3c0000

ref_fffcf33c:
dd 0x3c3c3c3c
dd 0x1e3c1e3c
dd 0x1e3c1e3c
dd 0x3c3c0000
dd 0x00000000
dd 0x1e3c1e3c
dd 0x3c3c3c3c
dd 0x1e3c1e3c
dd 0x1e3c1e3c
dd 0x3c3c0000
dd 0x1e3c0000
dd 0x1e3c0000

ref_fffcf36c:
dd 0x3c783c78
dd 0x28782878
dd 0x28782878
dd 0x3c780000
dd 0x00000000
dd 0x28782878
dd 0x3c783c78
dd 0x28782878
dd 0x28782878
dd 0x3c780000
dd 0x28780000
dd 0x28780000

ref_fffcf39c:
dd 0x3c3c3c3c
dd 0x1e781e78
dd 0x1e781e78
dd 0x3c3c0000
dd 0x00000000
dd 0x1e781e78
dd 0x3c3c3c3c
dd 0x1e781e78
dd 0x1e781e78
dd 0x3c3c0000
dd 0x1e780000
dd 0x1e780000

ref_fffcf3cc:
dd 0x3c3c3c3c
dd 0x1e781e78
dd 0x1e781e78
dd 0x3c3c0000
dd 0x00000000
dd 0x1e781e78
dd 0x3c3c3c3c
dd 0x1e781e78
dd 0x1e781e78
dd 0x3c3c0000
dd 0x1e780000
dd 0x1e780000

ref_fffcf3fc:
dd 0x3c3c3c3c
dd 0x1e3c1e3c
dd 0x1e3c1e3c
dd 0x3c3c0000
dd 0x00000000
dd 0x1e3c1e3c
dd 0x3c3c3c3c
dd 0x1e3c1e3c
dd 0x1e3c1e3c
dd 0x3c3c0000
dd 0x1e3c0000
dd 0x1e3c0000

ref_fffcf42c:
dd 0x3c3c3c3c
dd 0x1e3c1e3c
dd 0x1e3c1e3c
dd 0x3c3c0000
dd 0x00000000
dd 0x1e3c1e3c
dd 0x3c3c3c3c
dd 0x1e3c1e3c
dd 0x1e3c1e3c
dd 0x3c3c0000
dd 0x1e3c0000
dd 0x1e3c0000

ref_fffcf45c:
dd 0x06400578
dd 0x07d00708
dd 0x09600898
dd 0x0af00a28

ref_fffcf46c:
dd 0x042b0320
dd 0x06400535
dd 0x0855074b
dd 0x0a6b0960

ref_fffcf47c:
dd 0x00000100
dd 0x00000200
dd 0x00000400
dd 0x00000800
dd 0x00001000
dd 0x00002000
dd 0x00004000

ref_fffcf498:
dd loc_fffc2f10
dd loc_fffc2f1c
dd loc_fffc2f28
dd loc_fffc2f34
dd loc_fffc2f40

ref_fffcf4ac:
dd 0x0a6b0a6b
dd 0x08550960
dd 0x0640074b
db 0x35
db 0x05

ref_fffcf4ba:
db 0x00
db 0x00
dd 0x06400578
dd 0x07d00708
dd 0x09600898
dd 0x00000af0

ref_fffcf4cc:
dd 0x0ff0ffff
dd 0x00f000ff
dd 0x0fff0fff
dd 0x00f000ff
dd 0x00ff00f0
dd 0x00000000
dd 0x00000000
dd 0xf0000000

ref_fffcf4ec:
dd 0xf0ffffff
dd 0x00000fff
dd 0xffffffff
dd 0x0000000f
dd 0xffffffff
dd 0x0fffff0f
dd 0x00ff0000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0x0000000f
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0xffffffff
dd 0xffffffff
dd 0x0000ffff
dd 0x00000000
dd 0xffffffff
dd 0x000f00f0
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x0000ffff

ref_fffcf560:
dd 0x0fffffff

ref_fffcf564:
dd 0x000fffff
dd 0xf0000000

ref_fffcf56c:
dd 0x0ff000ff
dd 0xf000000f

ref_fffcf574:
dd 0x00000100
dd 0x00000200
dd 0x00000400
dd 0x00000800
dd 0x00001000
dd 0x00002000
dd 0x00004000

ref_fffcf590:
dd loc_fffc579b
dd loc_fffc57a7
dd loc_fffc57b3
dd loc_fffc57bf
dd loc_fffc57cb

ref_fffcf5a4:
dd 0x042b0320
dd 0x06400535
dd 0x0855074b

ref_fffcf5b0:
dd 0x00000000
dd 0x00000200
dd 0x00000400
dd 0x00000600
dd 0x00001000
dd 0x00001200
dd 0x00001400
dd 0x00001600
dd 0x00000800

ref_fffcf5d4:
dd 0x80484848

ref_fffcf5d8:
dd 0x04030201
dd 0x06000500
dd 0x00000700

ref_fffcf5e4:
db '<NULL>',0x00

ref_fffcf5eb:
db '{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}',0x0a,0x00

ref_fffcf61f:
db '%s: overwrite GUID ',0x00

ref_fffcf633:
db '%s: no room for a new PPI',0x0a,0x00

ref_fffcf64e:
db 0x25
db 0x73
dd 0x2064253a
dd 0x6c6f6f70
dd 0x6f6f6320
dd 0x2065696b
dd 0x72726f63
dd 0x65747075
dd 0x2e2e2e64
dd 0x7325000a
dd 0x2064253a
dd 0x746c6564
dd 0x73692061
dd 0x2c642520
dd 0x69796420
dd 0x6820676e
dd 0x2e657265
dd 0x000a2e2e

ref_fffcf690:
db '%s:%d failed to allocate %d bytes...',0x0a,0x00

ref_fffcf6b6:
db 'System Agent: Starting up...',0x0a,0x00

ref_fffcf6d4:
db 'System Agent: S3 resume detected',0x0a,0x00

ref_fffcf6f6:
db 'System Agent: Unsupported DDR3 frequence %d (Supported are 800, 1067, 1333, 1600)',0x0a,0x00

ref_fffcf749:
db 'System Agent: Unsupported NMode value %d (Supported are 0 = Auto, 1, 2)',0x0a,0x00

ref_fffcf792:
db 'System Agent: Initializing PCH',0x0a,0x00

ref_fffcf7b2:
db 'System Agent: Initializing PCH (SMBUS)',0x0a,0x00

ref_fffcf7da:
db 'System Agent: Initializing PCH (USB)',0x0a,0x00

ref_fffcf800:
db 'System Agent: Initializing PCH (SA Init)',0x0a,0x00

ref_fffcf82a:
db 'SA PciExpress skipped (pcie_init is 0)',0x0a,0x00

ref_fffcf852:
db 'System Agent: Initializing PCH (Me UMA)',0x0a,0x00

ref_fffcf87b:
db 'System Agent: Initializing Memory',0x0a,0x00

ref_fffcf89e:
db 'System Agent: failed to locate restore data hob!',0x0a,0x00

ref_fffcf8d0:
db 'System Agent: Done.',0x0a,0x00

ref_fffcf8e5:
db '0123456789abcdefghijklmnopqrstuvwxyz',0x00

ref_fffcf90a:
db 0x30
db 0x31
dd 0x35343332
dd 0x39383736
dd 0x44434241
dd 0x48474645
dd 0x4c4b4a49
dd 0x504f4e4d
dd 0x54535251
dd 0x58575655
db 0x59
db 0x5a
db 0x00

fcn_fffcf92f:
push ebp
mov ebp, esp
push esi
push ebx
mov ecx, dword [edx]
mov ebx, dword [ecx + 0xa0]
shr ebx, 0x14
mov dword [eax + 0x28], ebx
mov ecx, dword [edx]
mov ecx, dword [ecx + 0xa4]
shl ecx, 0xc
or ecx, ebx
mov dword [eax + 0x28], ecx
mov ecx, dword [edx]
mov ecx, dword [ecx + 0xbc]
shr ecx, 0x14
mov dword [eax + 4], ecx
mov ecx, dword [edx]
mov ebx, dword [ecx + 0xa8]
shr ebx, 0x14
mov dword [eax + 0x24], ebx
mov ecx, dword [edx]
mov ecx, dword [ecx + 0xac]
shl ecx, 0xc
or ecx, ebx
mov dword [eax + 0x24], ecx
mov ecx, dword [edx]
mov ebx, dword [ecx + 0x90]
shr ebx, 0x14
mov dword [eax + 0x1c], ebx
mov ecx, dword [edx]
mov ecx, dword [ecx + 0x94]
shl ecx, 0xc
or ecx, ebx
mov dword [eax + 0x1c], ecx
mov ebx, dword [edx]
mov esi, dword [ebx + 0x98]
shr esi, 0x14
mov dword [eax + 0x20], esi
mov ebx, dword [edx]
mov ebx, dword [ebx + 0x9c]
shl ebx, 0xc
or ebx, esi
cmp ebx, ecx
mov dword [eax + 0x20], ebx
setae cl
movzx ecx, cl
mov dword [eax + 0x18], ecx
mov ecx, dword [edx]
mov ecx, dword [ecx + 0xb8]
shr ecx, 0x14
mov dword [eax + 0x14], ecx
mov ecx, dword [edx]
mov ecx, dword [ecx + 0xb0]
shr ecx, 0x14
mov dword [eax + 8], ecx
mov ecx, dword [edx]
mov ecx, dword [ecx + 0xb4]
shr ecx, 0x14
mov dword [eax + 0xc], ecx
mov ecx, dword [edx]
mov ebx, dword [ecx + 0x70]
shr ebx, 0x14
mov dword [eax + 0x2c], ebx
mov ecx, dword [edx]
mov ecx, dword [ecx + 0x74]
shl ecx, 0xc
or ecx, ebx
mov dword [eax + 0x2c], ecx
mov ecx, dword [edx]
mov ecx, dword [ecx + 0x78]
shr ecx, 0x14
mov dword [eax + 0x30], ecx
mov ebx, dword [edx]
mov ebx, dword [ebx + 0x7c]
shl ebx, 0xc
or ecx, ebx
jne short loc_fffcfa27  ; jne 0xfffcfa27
mov dword [eax + 0x30], 0
jmp short loc_fffcfa31  ; jmp 0xfffcfa31

loc_fffcfa27:
mov esi, 0x80000
sub esi, ecx
mov dword [eax + 0x30], esi

loc_fffcfa31:
mov edx, dword [edx]
pop ebx
pop esi
pop ebp
mov edx, dword [edx + 0x50]
mov dword [eax + 0x10], edx
ret

loc_fffcfa3d:
db 0x00
db 0x00
db 0x00

ref_fffcfa40:
dd 0xf894643d
dd 0x42d1c449
dd 0xbd85a88e
dd 0xde5bc6d8

ref_fffcfa50:
dd 0x80000020
dd ref_fffcfa6c
dd fcn_fffa2462

ref_fffcfa5c:
dd 0x707be83e
dd 0x40a50bf6
dd 0xc03464be
dd 0xe2b8a03a

ref_fffcfa6c:
dd 0x605ea650
dd 0x42e1c65c
dd 0xa59180ba
dd 0xc618b62a

ref_fffcfa7c:
dd 0x6dadf1d1
dd 0x4910d4cc
dd 0xb1826ebb
dd 0x3dff80fd

ref_fffcfa8c:
dd 0x8c376010
dd 0x4d7d2400
dd 0x859d7bb4
dd 0xd1c9f31d

ref_fffcfa9c:
dd 0x433e0f9f
dd 0x410a05ae
dd 0x29bfc3a0
dd 0xac25cb8e

ref_fffcfaac:
dd 0x87f22dcb
dd 0x41057304
dd 0x71317cbb
dd 0x3bc2cc43

ref_fffcfabc:
dd 0x30eb2979
dd 0x4d60b0f7
dd 0x2c1adcb2
dd 0xf4b1ce96

ref_fffcfacc:
dd 0x63b6e435
dd 0x49c632bc
dd 0xa1b7bd81
dd 0x6c1afea0

ref_fffcfadc:
dd 0xed097352
dd 0x445a9041
dd 0x9db2b680
dd 0x45889e50

ref_fffcfaec:
dd 0xf38d1338
dd 0x4fb6af7a
dd 0x9c1adb91
dd 0x0d578321

ref_fffcfafc:
dd 0xc02b0573
dd 0x4a312b4e
dd 0x56941aa3
dd 0x2c44507b

ref_fffcfb0c:
dd 0x3cdc90c6
dd 0x4a7513fb
dd 0xe959799e
dd 0xfab978dd

ref_fffcfb1c:
dd 0x150ce416
dd 0x46b6ee63
dd 0x2273a38b
dd 0x3746e0bb

ref_fffcfb2c:
dd 0x1f4c6f90
dd 0x48d8b06b
dd 0xe5ba01a2
dd 0x567dcdf1

ref_fffcfb3c:
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd fcn_fffa04bf
dd 0x00000000
dd 0x00000000
dd fcn_fffa04d6
dd 0x00000000
dd fcn_fffa04cc
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000
dd 0x00000000

ref_fffcfb8c:
dd 0x22074e71
dd 0x4517bccc
dd 0x95795787
dd 0x3280fded

ref_fffcfb9c:
dd 0xe8c7ce14
dd 0x48fd1eed
dd 0x558e4783
dd 0xd9c01041

ref_fffcfbac:
dd 0x9a7ef41e
dd 0x4bd1c140
dd 0x111e84b8
dd 0xe64c0b24

ref_fffcfbbc:
dd 0xb6ec423c
dd 0x490d21d2
dd 0x58ddc685
dd 0x74a6ea64

ref_fffcfbcc:
dd 0x80000020
dd ref_fffcfbf0
dd fcn_fffa9b18

ref_fffcfbd8:
dd 0x80000010
dd ref_fffcfc00
dd 0x00000000

ref_fffcfbe4:
dd 0x80000010
dd ref_fffcfa8c
dd ref_fffcfc10

ref_fffcfbf0:
dd 0xf894643d
dd 0x42d1c449
dd 0xbd85a88e
dd 0xde5bc6d8

ref_fffcfc00:
dd 0x09ea8911
dd 0x4230be0d
dd 0xc6ed03a0
dd 0x118eb493

ref_fffcfc10:
dd fcn_fffc48a5
dd fcn_fffc46d9
dd fcn_fffc47ba
dd fcn_fffc477d

ref_fffcfc20:
dd 0x5f5d3502
dd 0x40ca8a4b
dd 0x0523a288
dd 0x1a137a42

ref_fffcfc30:
dd 0x00000053
dd 0x00000061
dd 0x00000050
dd 0x00000065
dd 0x00000067
dd 0x00000044
dd 0x00000061
dd 0x00000074
dd 0x00000061
dd 0x00000000

ref_fffcfc58:
dd 0xc4975200
dd 0x4fb664f1
dd 0xa9f67397
dd 0x5e989df8

ref_fffcfc68:
dd 0x80000020
dd ref_fffcfc74
dd fcn_fffb5eac

ref_fffcfc74:
dd 0x605ea650
dd 0x42e1c65c
dd 0xa59180ba
dd 0xc618b62a

ref_fffcfc84:
dd 0xabd42895
dd 0x487278cf
dd 0x5c1b4484
dd 0xdafb0b18
